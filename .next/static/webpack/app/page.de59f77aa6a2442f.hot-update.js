"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/timeline/items/video.ts":
/*!*************************************************!*\
  !*** ./features/editor/timeline/items/video.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/timeline */ \"(app-pages-browser)/./node_modules/@designcombo/timeline/dist/index.es.js\");\n/* harmony import */ var _utils_thumbnail_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/thumbnail-cache */ \"(app-pages-browser)/./features/editor/utils/thumbnail-cache.ts\");\n/* harmony import */ var _utils_filmstrip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/filmstrip */ \"(app-pages-browser)/./features/editor/utils/filmstrip.ts\");\n/* harmony import */ var _utils_file__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/file */ \"(app-pages-browser)/./features/editor/utils/file.ts\");\n/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../controls */ \"(app-pages-browser)/./features/editor/timeline/controls/index.ts\");\n\n\n\n\n\nconst EMPTY_FILMSTRIP = {\n    offset: 0,\n    startTime: 0,\n    thumbnailsCount: 0,\n    widthOnScreen: 0\n};\nclass Video extends _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Video {\n    static createControls() {\n        return {\n            controls: (0,_controls__WEBPACK_IMPORTED_MODULE_4__.createMediaControls)()\n        };\n    }\n    initOffscreenCanvas() {\n        if (!this.offscreenCanvas) {\n            this.offscreenCanvas = new OffscreenCanvas(this.width, this.height);\n            this.offscreenCtx = this.offscreenCanvas.getContext(\"2d\");\n        }\n        // Resize if dimensions changed\n        if (this.offscreenCanvas.width !== this.width || this.offscreenCanvas.height !== this.height) {\n            this.offscreenCanvas.width = this.width;\n            this.offscreenCanvas.height = this.height;\n            this.isDirty = true;\n        }\n    }\n    initDimensions() {\n        this.thumbnailWidth = this.thumbnailHeight * this.aspectRatio;\n        const segmentOptions = (0,_utils_filmstrip__WEBPACK_IMPORTED_MODULE_2__.calculateThumbnailSegmentLayout)(this.thumbnailWidth);\n        this.thumbnailsPerSegment = segmentOptions.thumbnailsPerSegment;\n        this.segmentSize = segmentOptions.segmentSize;\n    }\n    async initialize() {\n        var _this_canvas;\n        await this.loadFallbackThumbnail();\n        this.initDimensions();\n        this.onScrollChange({\n            scrollLeft: 0\n        });\n        (_this_canvas = this.canvas) === null || _this_canvas === void 0 ? void 0 : _this_canvas.requestRenderAll();\n        this.createFallbackPattern();\n        await this.prepareAssets();\n        this.onScrollChange({\n            scrollLeft: 0\n        });\n    }\n    async prepareAssets() {\n        if (false) {}\n        try {\n            const { MP4Clip } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_designcombo_frames_dist_frames_js\").then(__webpack_require__.bind(__webpack_require__, /*! @designcombo/frames */ \"(app-pages-browser)/./node_modules/@designcombo/frames/dist/frames.js\"));\n            const file = await (0,_utils_file__WEBPACK_IMPORTED_MODULE_3__.getFileFromUrl)(this.src);\n            const stream = file.stream();\n            this.clip = new MP4Clip(stream);\n        } catch (error) {\n            console.error(\"Error loading MP4Clip:\", error);\n        }\n    }\n    calculateFilmstripDimensions(param) {\n        let { segmentIndex, widthOnScreen } = param;\n        const filmstripOffset = segmentIndex * this.segmentSize;\n        const shouldUseLeftBacklog = segmentIndex > 0;\n        const leftBacklogSize = shouldUseLeftBacklog ? this.segmentSize : 0;\n        const totalWidth = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.timeMsToUnits)(this.duration, this.tScale, this.playbackRate);\n        const rightRemainingSize = totalWidth - widthOnScreen - leftBacklogSize - filmstripOffset;\n        const rightBacklogSize = Math.min(this.segmentSize, rightRemainingSize);\n        const filmstripStartTime = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.unitsToTimeMs)(filmstripOffset, this.tScale);\n        const filmstrimpThumbnailsCount = 1 + Math.round((widthOnScreen + leftBacklogSize + rightBacklogSize) / this.thumbnailWidth);\n        return {\n            filmstripOffset,\n            leftBacklogSize,\n            rightBacklogSize,\n            filmstripStartTime,\n            filmstrimpThumbnailsCount\n        };\n    }\n    // load fallback thumbnail, resize it and cache it\n    async loadFallbackThumbnail() {\n        const fallbackThumbnail = this.previewUrl;\n        if (!fallbackThumbnail) return;\n        console.log(\"[DEBUG] Cargando thumbnail para video:\", this.id, \"URL tipo:\", fallbackThumbnail.substring(0, 30) + \"...\");\n        return new Promise((resolve)=>{\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            // Para URLs de datos y URLs de objeto, no necesitamos añadir parámetros extra\n            if (fallbackThumbnail.startsWith(\"data:\") || fallbackThumbnail.startsWith(\"blob:\")) {\n                img.src = fallbackThumbnail;\n            } else {\n                // Para URLs remotas, añadimos un timestamp para evitar caché\n                img.src = fallbackThumbnail + \"?t=\" + Date.now();\n            }\n            img.onload = ()=>{\n                // Create a temporary canvas to resize the image\n                const canvas = document.createElement(\"canvas\");\n                const ctx = canvas.getContext(\"2d\");\n                // Calculate new width maintaining aspect ratio\n                const aspectRatio = img.width / img.height;\n                const targetHeight = 40;\n                const targetWidth = Math.round(targetHeight * aspectRatio);\n                // Set canvas size and draw resized image\n                canvas.height = targetHeight;\n                canvas.width = targetWidth;\n                ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n                // Create new image from resized canvas\n                const resizedImg = new Image();\n                resizedImg.src = canvas.toDataURL();\n                // Update aspect ratio and cache the resized image\n                this.aspectRatio = aspectRatio;\n                this.thumbnailWidth = targetWidth;\n                this.thumbnailCache.setThumbnail(\"fallback\", resizedImg);\n                console.log(\"[DEBUG] Thumbnail cargado correctamente para video:\", this.id);\n                resolve();\n            };\n            img.onerror = (err)=>{\n                console.error(\"[ERROR] No se pudo cargar la miniatura:\", err);\n                resolve(); // Resolver de todos modos para no bloquear la carga\n            };\n        });\n    }\n    generateTimestamps(startTime, count) {\n        const timePerThumbnail = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.unitsToTimeMs)(this.thumbnailWidth, this.tScale, this.playbackRate);\n        return Array.from({\n            length: count\n        }, (_, i)=>{\n            const timeInFilmstripe = startTime + i * timePerThumbnail;\n            return Math.ceil(timeInFilmstripe / 1000);\n        });\n    }\n    createFallbackPattern() {\n        var _this_canvas;\n        const canvas = this.canvas;\n        if (!canvas) return;\n        const canvasWidth = this.canvas.width;\n        const maxPatternSize = 12000;\n        const fallbackSource = this.thumbnailCache.getThumbnail(\"fallback\");\n        if (!fallbackSource) return;\n        // Compute the total width and number of segments needed\n        const totalWidthNeeded = Math.min(canvasWidth * 20, maxPatternSize);\n        const segmentsRequired = Math.ceil(totalWidthNeeded / this.segmentSize);\n        this.fallbackSegmentsCount = segmentsRequired;\n        const patternWidth = segmentsRequired * this.segmentSize;\n        // Setup canvas dimensions\n        const offCanvas = document.createElement(\"canvas\");\n        offCanvas.height = this.thumbnailHeight;\n        offCanvas.width = patternWidth;\n        const context = offCanvas.getContext(\"2d\");\n        const thumbnailsTotal = segmentsRequired * this.thumbnailsPerSegment;\n        // Draw the fallback image across the entirety of the canvas horizontally\n        for(let i = 0; i < thumbnailsTotal; i++){\n            const x = i * this.thumbnailWidth;\n            context.drawImage(fallbackSource, x, 0, this.thumbnailWidth, this.thumbnailHeight);\n        }\n        // Create the pattern and apply it\n        const fillPattern = new _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Pattern({\n            source: offCanvas,\n            repeat: \"no-repeat\",\n            offsetX: 0\n        });\n        this.set(\"fill\", fillPattern);\n        (_this_canvas = this.canvas) === null || _this_canvas === void 0 ? void 0 : _this_canvas.requestRenderAll();\n    }\n    async loadAndRenderThumbnails() {\n        if (this.isFetchingThumbnails || !this.clip) return;\n        // set segmentDrawn to segmentToDraw\n        this.loadingFilmstrip = {\n            ...this.nextFilmstrip\n        };\n        this.isFetchingThumbnails = true;\n        // Calculate dimensions and offsets\n        const { startTime, thumbnailsCount } = this.loadingFilmstrip;\n        // Generate required timestamps\n        const timestamps = this.generateTimestamps(startTime, thumbnailsCount);\n        // Match and prepare thumbnails\n        let thumbnailsArr = await this.clip.thumbnailsList(this.thumbnailWidth, {\n            timestamps: timestamps.map((timestamp)=>timestamp * 1e6)\n        });\n        const updatedThumbnails = thumbnailsArr.map((thumbnail)=>{\n            return {\n                ts: Math.round(thumbnail.ts / 1e6),\n                img: thumbnail.img\n            };\n        });\n        // Load all thumbnails in parallel\n        await this.loadThumbnailBatch(updatedThumbnails);\n        this.isDirty = true; // Mark as dirty after preparing new thumbnails\n        // this.isFallbackDirty = true;\n        this.isFetchingThumbnails = false;\n        this.currentFilmstrip = {\n            ...this.loadingFilmstrip\n        };\n        requestAnimationFrame(()=>{\n            var _this_canvas;\n            (_this_canvas = this.canvas) === null || _this_canvas === void 0 ? void 0 : _this_canvas.requestRenderAll();\n        });\n    }\n    async loadThumbnailBatch(thumbnails) {\n        const loadPromises = thumbnails.map(async (thumbnail)=>{\n            if (this.thumbnailCache.getThumbnail(thumbnail.ts)) return;\n            return new Promise((resolve)=>{\n                const img = new Image();\n                img.src = URL.createObjectURL(thumbnail.img);\n                img.onload = ()=>{\n                    URL.revokeObjectURL(img.src); // Clean up the blob URL after image loads\n                    this.thumbnailCache.setThumbnail(thumbnail.ts, img);\n                    resolve();\n                };\n            });\n        });\n        await Promise.all(loadPromises);\n    }\n    _render(ctx) {\n        super._render(ctx);\n        ctx.save();\n        ctx.translate(-this.width / 2, -this.height / 2);\n        // Clip the area to prevent drawing outside\n        ctx.beginPath();\n        ctx.rect(0, 0, this.width, this.height);\n        ctx.clip();\n        this.renderToOffscreen();\n        ctx.drawImage(this.offscreenCanvas, 0, 0);\n        ctx.restore();\n        // this.drawTextIdentity(ctx);\n        this.updateSelected(ctx);\n    }\n    setDuration(duration) {\n        this.duration = duration;\n        this.prevDuration = duration;\n    }\n    async setSrc(src) {\n        super.setSrc(src);\n        this.clip = null;\n        await this.initialize();\n        await this.prepareAssets();\n        this.thumbnailCache.clearCacheButFallback();\n        this.onScale();\n    }\n    onResizeSnap() {\n        this.renderToOffscreen(true);\n    }\n    onResize() {\n        this.renderToOffscreen(true);\n    }\n    renderToOffscreen(force) {\n        if (!this.offscreenCtx) return;\n        if (!this.isDirty && !force) return;\n        this.offscreenCanvas.width = this.width;\n        const ctx = this.offscreenCtx;\n        const { startTime, offset, thumbnailsCount } = this.currentFilmstrip;\n        const thumbnailWidth = this.thumbnailWidth;\n        const thumbnailHeight = this.thumbnailHeight;\n        // Calculate the offset caused by the trimming\n        const trimFromSize = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.timeMsToUnits)(this.trim.from, this.tScale, this.playbackRate);\n        let timeInFilmstripe = startTime;\n        const timePerThumbnail = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.unitsToTimeMs)(thumbnailWidth, this.tScale, this.playbackRate);\n        // Clear the offscreen canvas\n        ctx.clearRect(0, 0, this.width, this.height);\n        // Clip with rounded corners\n        ctx.beginPath();\n        ctx.roundRect(0, 0, this.width, this.height, this.rx);\n        ctx.clip();\n        // Draw thumbnails\n        for(let i = 0; i < thumbnailsCount; i++){\n            let img = this.thumbnailCache.getThumbnail(Math.ceil(timeInFilmstripe / 1000));\n            if (!img) {\n                img = this.thumbnailCache.getThumbnail(\"fallback\");\n            }\n            if (img && img.complete) {\n                const xPosition = i * thumbnailWidth + offset - trimFromSize;\n                ctx.drawImage(img, xPosition, 0, thumbnailWidth, thumbnailHeight);\n                timeInFilmstripe += timePerThumbnail;\n            }\n        }\n        this.isDirty = false;\n    }\n    drawTextIdentity(ctx) {\n        const iconPath = new Path2D(\"M16.5625 0.925L12.5 3.275V0.625L11.875 0H0.625L0 0.625V9.375L0.625 10H11.875L12.5 9.375V6.875L16.5625 9.2125L17.5 8.625V1.475L16.5625 0.925ZM11.25 8.75H1.25V1.25H11.25V8.75ZM16.25 7.5L12.5 5.375V4.725L16.25 2.5V7.5Z\");\n        ctx.save();\n        ctx.translate(-this.width / 2, -this.height / 2);\n        ctx.translate(0, 14);\n        ctx.font = \"600 12px 'Geist variable'\";\n        ctx.fillStyle = \"#f4f4f5\";\n        ctx.textAlign = \"left\";\n        ctx.clip();\n        ctx.fillText(\"Video\", 36, 10);\n        ctx.translate(8, 1);\n        ctx.fillStyle = \"#f4f4f5\";\n        ctx.fill(iconPath);\n        ctx.restore();\n    }\n    setSelected(selected) {\n        this.isSelected = selected;\n        this.set({\n            dirty: true\n        });\n    }\n    updateSelected(ctx) {\n        const borderColor = this.isSelected ? \"rgba(255, 255, 255,1.0)\" : \"rgba(255, 255, 255,0.1)\";\n        ctx.save();\n        ctx.beginPath();\n        ctx.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = borderColor;\n        ctx.stroke();\n        ctx.restore();\n    }\n    calulateWidthOnScreen() {\n        const canvasEl = document.getElementById(\"designcombo-timeline-canvas\");\n        const canvasWidth = canvasEl === null || canvasEl === void 0 ? void 0 : canvasEl.clientWidth;\n        const scrollLeft = this.scrollLeft;\n        const timelineWidth = canvasWidth;\n        const cutFromBottomEdge = Math.max(timelineWidth - (this.width + this.left + scrollLeft), 0);\n        const visibleHeight = Math.min(timelineWidth - this.left - scrollLeft, timelineWidth);\n        return Math.max(visibleHeight - cutFromBottomEdge, 0);\n    }\n    // Calculate the width that is not visible on the screen measured from the left\n    calculateOffscreenWidth(param) {\n        let { scrollLeft } = param;\n        const offscreenWidth = Math.min(this.left + scrollLeft, 0);\n        return Math.abs(offscreenWidth);\n    }\n    onScrollChange(param) {\n        let { scrollLeft, force } = param;\n        const offscreenWidth = this.calculateOffscreenWidth({\n            scrollLeft\n        });\n        const trimFromSize = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.timeMsToUnits)(this.trim.from, this.tScale, this.playbackRate);\n        const offscreenSegments = (0,_utils_filmstrip__WEBPACK_IMPORTED_MODULE_2__.calculateOffscreenSegments)(offscreenWidth, trimFromSize, this.segmentSize);\n        this.offscreenSegments = offscreenSegments;\n        // calculate start segment to draw\n        const segmentToDraw = offscreenSegments;\n        if (this.currentFilmstrip.segmentIndex === segmentToDraw) {\n            return false;\n        }\n        if (segmentToDraw !== this.fallbackSegmentIndex) {\n            const fillPattern = this.fill;\n            if (fillPattern instanceof _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Pattern) {\n                fillPattern.offsetX = this.segmentSize * (segmentToDraw - Math.floor(this.fallbackSegmentsCount / 2));\n            }\n            this.fallbackSegmentIndex = segmentToDraw;\n        }\n        if (!this.isFetchingThumbnails || force) {\n            this.scrollLeft = scrollLeft;\n            const widthOnScreen = this.calulateWidthOnScreen();\n            // With these lines:\n            const { filmstripOffset, filmstripStartTime, filmstrimpThumbnailsCount } = this.calculateFilmstripDimensions({\n                widthOnScreen: this.calulateWidthOnScreen(),\n                segmentIndex: segmentToDraw\n            });\n            this.nextFilmstrip = {\n                segmentIndex: segmentToDraw,\n                offset: filmstripOffset,\n                startTime: filmstripStartTime,\n                thumbnailsCount: filmstrimpThumbnailsCount,\n                widthOnScreen\n            };\n            this.loadAndRenderThumbnails();\n        }\n    }\n    onScale() {\n        this.currentFilmstrip = {\n            ...EMPTY_FILMSTRIP\n        };\n        this.nextFilmstrip = {\n            ...EMPTY_FILMSTRIP,\n            segmentIndex: 0\n        };\n        this.loadingFilmstrip = {\n            ...EMPTY_FILMSTRIP\n        };\n        this.onScrollChange({\n            scrollLeft: this.scrollLeft,\n            force: true\n        });\n    }\n    constructor(props){\n        var _props_metadata;\n        super(props);\n        this.resourceId = \"\";\n        this.isSelected = false;\n        this.itemType = \"video\";\n        this.aspectRatio = 1;\n        this.scrollLeft = 0;\n        this.thumbnailsPerSegment = 0;\n        this.segmentSize = 0;\n        this.offscreenSegments = 0;\n        this.thumbnailWidth = 0;\n        this.thumbnailHeight = 40;\n        this.thumbnailsList = [];\n        this.isFetchingThumbnails = false;\n        this.thumbnailCache = new _utils_thumbnail_cache__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.currentFilmstrip = EMPTY_FILMSTRIP;\n        this.nextFilmstrip = {\n            ...EMPTY_FILMSTRIP,\n            segmentIndex: 0\n        };\n        this.loadingFilmstrip = EMPTY_FILMSTRIP;\n        this.offscreenCanvas = null;\n        this.offscreenCtx = null;\n        this.isDirty = true;\n        this.fallbackSegmentIndex = 0;\n        this.fallbackSegmentsCount = 0;\n        this.previewUrl = \"\";\n        this.id = props.id;\n        this.tScale = props.tScale;\n        this.objectCaching = false;\n        this.rx = 4;\n        this.ry = 4;\n        this.display = props.display;\n        this.trim = props.trim;\n        this.duration = props.duration;\n        this.prevDuration = props.duration;\n        this.fill = \"#27272a\";\n        this.borderOpacityWhenMoving = 1;\n        this.metadata = props.metadata;\n        this.aspectRatio = props.aspectRatio;\n        this.src = props.src;\n        this.strokeWidth = 0;\n        this.transparentCorners = false;\n        this.hasBorders = false;\n        this.previewUrl = (_props_metadata = props.metadata) === null || _props_metadata === void 0 ? void 0 : _props_metadata.previewUrl;\n        this.initOffscreenCanvas();\n        this.initialize();\n    }\n}\nVideo.type = \"Video\";\n/* harmony default export */ __webpack_exports__[\"default\"] = (Video);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/timeline/items/video.ts\n"));

/***/ })

});