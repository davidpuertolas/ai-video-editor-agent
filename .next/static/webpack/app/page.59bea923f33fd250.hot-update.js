"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/timeline/items/image.ts":
/*!*************************************************!*\
  !*** ./features/editor/timeline/items/image.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/timeline */ \"(app-pages-browser)/./node_modules/@designcombo/timeline/dist/index.es.js\");\n/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controls */ \"(app-pages-browser)/./features/editor/timeline/controls/index.ts\");\n\n\n// Inyectar código para forzar el ocultamiento de transiciones a nivel global\n// Esto se ejecutará una sola vez cuando se cargue el módulo\n(()=>{\n    console.log(\"[TRANSITION-KILLER] Inicializando bloqueador global de transiciones\");\n    // Modificar prototype de fabric.Image para bloquear renderizado de transiciones\n    try {\n        const originalRender = _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Image.prototype._render;\n        _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Image.prototype._render = function(ctx) {\n            var _this_details;\n            // Si es una transición, nunca renderizar\n            if (this.id && typeof this.id === \"string\" && (this.id.includes(\"_fade_\") || this.id.includes(\"transition\"))) {\n                return; // Bloquear renderizado\n            }\n            // Si tiene hideInTimeline, tampoco renderizar\n            if ((_this_details = this.details) === null || _this_details === void 0 ? void 0 : _this_details.hideInTimeline) {\n                return;\n            }\n            // Renderizado normal para otros elementos\n            return originalRender.call(this, ctx);\n        };\n        console.log(\"[TRANSITION-KILLER] Renderizado de transiciones bloqueado a nivel de prototype\");\n    } catch (err) {\n        console.error(\"[TRANSITION-KILLER] Error al modificar prototype:\", err);\n    }\n})();\nclass Image extends _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Image {\n    // Modificar estático para que las transiciones no tengan controles\n    static createControls(props) {\n        // Verificar si es un elemento de transición a través de props\n        if (props && props.id && typeof props.id === \"string\") {\n            if (props.id.includes(\"_fade_\") || props.id.includes(\"transition\")) {\n                console.log(\"[TRANSITION-KILLER] Elemento de transici\\xf3n detectado: \".concat(props.id, \". No se crear\\xe1n controles.\"));\n                // No crear controles para transiciones\n                return {\n                    controls: {}\n                };\n            }\n        }\n        // Si es un elemento normal, crear controles normales\n        return {\n            controls: (0,_controls__WEBPACK_IMPORTED_MODULE_1__.createResizeControls)()\n        };\n    }\n    // Método para determinar si es un elemento de transición\n    isTransitionElement() {\n        // Método 1: Por ID (más confiable)\n        if (this.id && typeof this.id === \"string\" && (this.id.includes(\"_fade_\") || this.id.includes(\"transition\"))) {\n            return true;\n        }\n        // Método 2: Por propiedades\n        if (this.details) {\n            // Transiciones suelen tener opacidad entre 5-100 y venir de '/transitions/'\n            if (this.details.opacity && this.details.opacity >= 5 && this.details.opacity <= 100 && this.src && this.src.includes(\"/transitions/\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Sobrescribir completo el método _render para control total\n    _render(ctx) {\n        var _this_details;\n        // BLOQUEO COMPLETO: Si es una transición, no renderizar NUNCA\n        if (this.isTransitionElement() && Image.FORCE_HIDE_TRANSITIONS) {\n            // Log detallado de depuración\n            if (this.id && typeof this.id === \"string\" && this.id.includes(\"_fade_\")) {\n                console.log(\"[TRANSITION-DEBUG] Bloqueando renderizado de transici\\xf3n: \".concat(this.id));\n            }\n            return; // No renderizar nada\n        }\n        // Si tiene hideInTimeline explícito, tampoco renderizar\n        if ((_this_details = this.details) === null || _this_details === void 0 ? void 0 : _this_details.hideInTimeline) {\n            return;\n        }\n        // Si pasa todas las verificaciones, renderizar normalmente\n        try {\n            // Usar el renderizado original del elemento\n            super._render(ctx);\n            this.updateSelected(ctx);\n        } catch (error) {\n            console.error(\"[ERROR] Error al renderizar imagen:\", error);\n        }\n    }\n    // Sobrescribir el método isOnScreen para invisibilidad completa\n    isOnScreen() {\n        var _this_details;\n        // Si es una transición, nunca está en pantalla\n        if (this.isTransitionElement() && Image.FORCE_HIDE_TRANSITIONS) {\n            return false;\n        }\n        // Si tiene hideInTimeline, tampoco está en pantalla\n        if ((_this_details = this.details) === null || _this_details === void 0 ? void 0 : _this_details.hideInTimeline) {\n            return false;\n        }\n        // Usar la implementación original para los elementos visibles\n        return super.isOnScreen();\n    }\n    async loadImage() {\n        try {\n            console.log(\"[DEBUG Image] Cargando imagen:\", this.src.substring(0, 30) + \"...\");\n            const img = await _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.util.loadImage(this.src).catch((error)=>{\n                var _this_metadata;\n                console.error(\"[ERROR Image] Error cargando imagen principal:\", error);\n                // Si hay metadata con previewUrl, intentar usar esa como fallback\n                if ((_this_metadata = this.metadata) === null || _this_metadata === void 0 ? void 0 : _this_metadata.previewUrl) {\n                    console.log(\"[DEBUG Image] Intentando cargar desde previewUrl\");\n                    return _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.util.loadImage(this.metadata.previewUrl);\n                }\n                throw error;\n            });\n            const imgHeight = img.height;\n            const rectHeight = this.height;\n            const scaleY = rectHeight / imgHeight;\n            const pattern = new _designcombo_timeline__WEBPACK_IMPORTED_MODULE_0__.Pattern({\n                source: img,\n                repeat: \"repeat-x\",\n                patternTransform: [\n                    scaleY,\n                    0,\n                    0,\n                    scaleY,\n                    0,\n                    0\n                ]\n            });\n            this.set(\"fill\", pattern);\n            // NO RENDERIZAR si es una transición\n            if (this.isTransitionElement() && Image.FORCE_HIDE_TRANSITIONS) {\n                console.log(\"[TRANSITION-DEBUG] Imagen de transici\\xf3n cargada pero se mantendr\\xe1 invisible\");\n            } else {\n                var _this_canvas;\n                (_this_canvas = this.canvas) === null || _this_canvas === void 0 ? void 0 : _this_canvas.requestRenderAll();\n            }\n        } catch (error) {\n            console.error(\"[ERROR Image] No se pudo cargar la imagen:\", error);\n            // Si falla todo, establecer un patrón de color gris como fallback\n            const fillColor = \"#666666\";\n            this.set(\"fill\", fillColor);\n            // NO RENDERIZAR si es una transición\n            if (!this.isTransitionElement() || !Image.FORCE_HIDE_TRANSITIONS) {\n                var _this_canvas1;\n                (_this_canvas1 = this.canvas) === null || _this_canvas1 === void 0 ? void 0 : _this_canvas1.requestRenderAll();\n            }\n        }\n    }\n    setSrc(src) {\n        this.src = src;\n        this.loadImage();\n        // NO RENDERIZAR si es una transición\n        if (!this.isTransitionElement() || !Image.FORCE_HIDE_TRANSITIONS) {\n            var _this_canvas;\n            (_this_canvas = this.canvas) === null || _this_canvas === void 0 ? void 0 : _this_canvas.requestRenderAll();\n        }\n    }\n    constructor(props){\n        // Forzar hideInTimeline para transiciones antes de construir\n        if (props.id && typeof props.id === \"string\" && (props.id.includes(\"_fade_\") || props.id.includes(\"transition\"))) {\n            if (!props.details) props.details = {};\n            props.details.hideInTimeline = true;\n            props.details.forceHide = true;\n        }\n        super(props);\n        this.metadata = props.metadata;\n        // Verificar si este elemento es una transición por múltiples métodos\n        const isTransition = this.isTransitionElement();\n        if (isTransition) {\n            console.log(\"[TRANSITION-KILLER] Elemento de transici\\xf3n detectado: \".concat(this.id));\n            // Modificar el objeto directamente para que sea invisible\n            if (this.details) {\n                this.details.hideInTimeline = true;\n                this.details.forceHide = true;\n            }\n            // Hacer el objeto completamente transparente\n            this.set(\"opacity\", 0);\n            this.set(\"visible\", false);\n            this.set(\"selectable\", false);\n            this.set(\"evented\", false);\n        }\n        this.loadImage();\n    }\n}\nImage.type = \"Image\";\n// Añadir una variable estática para forzar invisibilidad de transiciones\nImage.FORCE_HIDE_TRANSITIONS = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Image);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/timeline/items/image.ts\n"));

/***/ })

});