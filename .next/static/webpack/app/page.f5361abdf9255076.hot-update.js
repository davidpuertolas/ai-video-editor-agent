"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/hooks/use-selection-modal.ts":
/*!******************************************************!*\
  !*** ./features/editor/hooks/use-selection-modal.ts ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSelectionModal: function() { return /* binding */ useSelectionModal; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @designcombo/events */ \"(app-pages-browser)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* harmony import */ var _designcombo_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @designcombo/state */ \"(app-pages-browser)/./node_modules/@designcombo/state/dist/index.es.js\");\n/* harmony import */ var _store_use_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/use-store */ \"(app-pages-browser)/./features/editor/store/use-store.ts\");\n\n\n\n\nconst useSelectionModal = ()=>{\n    const [isModalOpen, setIsModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedItems, setSelectedItems] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const { trackItemsMap, setState, activeIds } = (0,_store_use_store__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    // Variable para almacenar el último tiempo de selección\n    const [lastSelectionTime, setLastSelectionTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Variable para almacenar los últimos IDs seleccionados\n    const [prevActiveIds, setPrevActiveIds] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    // Variable para almacenar la cantidad de selecciones recientes (para detectar actividad de selección)\n    const [selectionCount, setSelectionCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    // Flag para forzar mostrar el modal\n    const [forceShowModal, setForceShowModal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Función para detectar si una selección es por arrastre\n    const detectDragSelection = (currentIds, previousIds, currentTime, lastTime)=>{\n        // Detectar arrastre basado en varios criterios\n        const isMultipleSelection = currentIds.length > 1;\n        const isQuickSelection = currentTime - lastTime < 500; // Aumentado a 500ms para mayor sensibilidad\n        const hasSelectionActivity = selectionCount > 2; // Reducido a 2 para mayor sensibilidad\n        // Calculamos si hay cambios significativos en los IDs seleccionados\n        const hasNewIds = currentIds.some((id)=>!previousIds.includes(id));\n        const hasRemovedIds = previousIds.some((id)=>!currentIds.includes(id));\n        const idsChanged = hasNewIds || hasRemovedIds;\n        // Consideramos como arrastre si hay múltiples elementos, selecciones rápidas,\n        // actividad de selección o cambios en los IDs\n        const isDrag = isMultipleSelection || isQuickSelection && hasSelectionActivity || isQuickSelection && idsChanged;\n        console.log(\"[DEBUG Modal] Evaluando selecci\\xf3n como arrastre:\", {\n            isMultipleSelection,\n            isQuickSelection,\n            hasSelectionActivity,\n            idsChanged,\n            selectionCount,\n            timeDiff: currentTime - lastTime,\n            currentIds,\n            previousIds,\n            isDrag\n        });\n        return isDrag;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Suscribirse a eventos de selección\n        const selectionEvents = _designcombo_events__WEBPACK_IMPORTED_MODULE_1__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_1__.filter)((param)=>{\n            let { key } = param;\n            return key.startsWith(_designcombo_state__WEBPACK_IMPORTED_MODULE_2__.LAYER_PREFIX);\n        }));\n        const selectionSubscription = selectionEvents.subscribe((obj)=>{\n            if (obj.key === _designcombo_state__WEBPACK_IMPORTED_MODULE_2__.LAYER_SELECTION) {\n                var _obj_value, _obj_value1;\n                const newActiveIds = ((_obj_value = obj.value) === null || _obj_value === void 0 ? void 0 : _obj_value.payload.activeIds) || [];\n                const now = Date.now();\n                console.log(\"[DEBUG Modal] Evento de selecci\\xf3n recibido:\", {\n                    activeIds: newActiveIds,\n                    time: now,\n                    timeDiff: now - lastSelectionTime,\n                    payloadInfo: (_obj_value1 = obj.value) === null || _obj_value1 === void 0 ? void 0 : _obj_value1.payload,\n                    forceShow: forceShowModal\n                });\n                // Actualizar estado global\n                setState({\n                    activeIds: newActiveIds\n                });\n                // Incrementar contador de selecciones (para detectar actividad)\n                setSelectionCount((prev)=>prev + 1);\n                // Reducir el contador de selecciones después de un tiempo\n                setTimeout(()=>{\n                    setSelectionCount((prev)=>Math.max(0, prev - 1));\n                }, 1000);\n                // Si hay elementos seleccionados\n                if (newActiveIds && newActiveIds.length > 0) {\n                    // Obtenemos los elementos seleccionados\n                    const items = newActiveIds.map((id)=>trackItemsMap[id]).filter(Boolean);\n                    // Actualizamos los elementos seleccionados\n                    setSelectedItems(items);\n                    // Detectar si es una selección por arrastre\n                    const isDragSelection = detectDragSelection(newActiveIds, prevActiveIds, now, lastSelectionTime);\n                    // Si parece ser una selección por arrastre o se ha forzado mostrar el modal\n                    if (isDragSelection || forceShowModal) {\n                        console.log(\"[DEBUG Modal] Mostrando modal por selecci\\xf3n por arrastre o forzado\");\n                        setIsModalOpen(true);\n                        // Resetear el flag de forzar mostrar\n                        setForceShowModal(false);\n                    }\n                    // Actualizamos el tiempo de la última selección\n                    setLastSelectionTime(now);\n                    // Actualizamos los IDs previamente seleccionados\n                    setPrevActiveIds(newActiveIds);\n                } else {\n                    // Si no hay elementos seleccionados, cerramos el modal\n                    console.log(\"[DEBUG Modal] No hay elementos seleccionados, cerrando modal\");\n                    setIsModalOpen(false);\n                    setSelectedItems([]);\n                }\n            }\n        });\n        return ()=>{\n            selectionSubscription.unsubscribe();\n        };\n    }, [\n        trackItemsMap,\n        setState,\n        lastSelectionTime,\n        prevActiveIds,\n        selectionCount,\n        forceShowModal\n    ]);\n    // Si los activeIds cambian fuera de este hook, actualizamos los elementos seleccionados\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (activeIds && activeIds.length > 0) {\n            const items = activeIds.map((id)=>trackItemsMap[id]).filter(Boolean);\n            setSelectedItems(items);\n        }\n    }, [\n        activeIds,\n        trackItemsMap\n    ]);\n    // Escuchar el evento personalizado de arrastre completado\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const handleDragComplete = (e)=>{\n            console.log(\"[DEBUG Modal] Evento de arrastre completado recibido\", e.detail);\n            // Si hay elementos seleccionados actualmente, mostrar el modal\n            if (activeIds && activeIds.length > 0) {\n                console.log(\"[DEBUG Modal] Hay elementos seleccionados despu\\xe9s del arrastre, mostrando modal\");\n                // Forzar mostrar el modal en el próximo ciclo\n                setForceShowModal(true);\n                // También intentar abrir inmediatamente\n                setIsModalOpen(true);\n                // Forzar un retraso mínimo para asegurar que se muestre después de cualquier otro evento\n                setTimeout(()=>{\n                    if (activeIds && activeIds.length > 0) {\n                        setIsModalOpen(true);\n                        console.log(\"[DEBUG Modal] Forzando apertura del modal despu\\xe9s de retraso\");\n                    }\n                }, 150);\n            }\n        };\n        // Añadir listener para el evento personalizado\n        window.addEventListener(\"timeline-drag-complete\", handleDragComplete);\n        return ()=>{\n            window.removeEventListener(\"timeline-drag-complete\", handleDragComplete);\n        };\n    }, [\n        activeIds\n    ]);\n    const handleClose = ()=>{\n        console.log(\"[DEBUG Modal] Cerrando modal manualmente\");\n        setIsModalOpen(false);\n    };\n    const handleDelete = ()=>{\n        if (selectedItems.length > 0) {\n            const ids = selectedItems.map((item)=>item.id);\n            console.log(\"[DEBUG Modal] Eliminando elementos:\", ids);\n            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_1__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_2__.LAYER_DELETE, {\n                payload: {\n                    ids\n                }\n            });\n            setIsModalOpen(false);\n        }\n    };\n    const handleCopy = ()=>{\n        // Aquí iría la lógica para duplicar los elementos seleccionados\n        console.log(\"[DEBUG Modal] Duplicar elementos\", selectedItems);\n        setIsModalOpen(false);\n    };\n    const handleSplit = ()=>{\n        if (selectedItems.length === 1) {\n            console.log(\"[DEBUG Modal] Dividiendo elemento:\", selectedItems[0].id);\n            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_1__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_2__.ACTIVE_SPLIT, {\n                payload: {\n                    id: selectedItems[0].id\n                }\n            });\n            setIsModalOpen(false);\n        }\n    };\n    const handleTrim = ()=>{\n        if (selectedItems.length === 1) {\n            // Lógica para recortar el elemento seleccionado\n            console.log(\"[DEBUG Modal] Recortar elemento\", selectedItems[0]);\n            setIsModalOpen(false);\n        }\n    };\n    // Método para abrir el modal manualmente (útil para pruebas)\n    const openModal = ()=>{\n        console.log(\"[DEBUG Modal] Abriendo modal manualmente\");\n        setIsModalOpen(true);\n    };\n    return {\n        isModalOpen,\n        selectedItems,\n        handleClose,\n        handleDelete,\n        handleCopy,\n        handleSplit,\n        handleTrim,\n        openModal\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/hooks/use-selection-modal.ts\n"));

/***/ })

});