"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/services/ai-service.ts":
/*!************************************************!*\
  !*** ./features/editor/services/ai-service.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIService: function() { return /* binding */ AIService; }\n/* harmony export */ });\n/**\n * Servicio para manejar la comunicación con la IA.\n * Esta es una implementación base que simula respuestas.\n * En el futuro, se conectará con una API real.\n */ class AIService {\n    /**\n   * Analiza los elementos seleccionados para buscar URLs\n   */ static async analyzeItems(request) {\n        try {\n            // Simulamos un tiempo de respuesta de la API\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n            console.log(\"AI Service - Request:\", request);\n            // Extraer el texto relevante de los elementos seleccionados\n            const elementsText = this.extractTextFromElements(request.items);\n            // Mensaje explícito o texto extraído de los elementos\n            const textToAnalyze = request.message || elementsText;\n            // Analizar si el texto contiene URLs\n            const urlAnalysis = this.detectURLs(textToAnalyze);\n            // Análisis de intención (solo si hay un mensaje explícito)\n            let intentAnalysis = null;\n            let screenshotInfo = null;\n            if (request.message && urlAnalysis.containsURLs) {\n                // Realizar la petición a la API para analizar la intención\n                try {\n                    const intentResponse = await this.callScreenshotIntentAPI(request.message, urlAnalysis.urls);\n                    // Guardar el análisis de intención\n                    intentAnalysis = intentResponse.intentAnalysis;\n                    // Si se detectó la intención y hay screenshot disponible, guardar la info\n                    if (intentResponse.screenshot) {\n                        screenshotInfo = intentResponse.screenshot;\n                        // Guardar la información de screenshot en el análisis de URL\n                        // pero SOLO si realmente se detectó la intención de ver un screenshot\n                        if (!urlAnalysis.screenshots) {\n                            urlAnalysis.screenshots = [];\n                        }\n                        // Añadir solo el screenshot específico que se solicitó\n                        if (!urlAnalysis.screenshots.some((s)=>s.url === screenshotInfo.url)) {\n                            urlAnalysis.screenshots.push(screenshotInfo);\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error al llamar a la API de intenci\\xf3n:\", error);\n                // Si falla, continuar sin análisis de intención\n                }\n            }\n            // Simulación de respuesta de la IA\n            // En un entorno real, esto enviaría la solicitud a un endpoint de API\n            return {\n                success: true,\n                message: \"An\\xe1lisis completado con \\xe9xito\",\n                analysis: {\n                    summary: this.generateURLAnalysisSummary(urlAnalysis, request.items.length),\n                    urlAnalysis: urlAnalysis,\n                    itemsAnalyzed: request.items.length,\n                    analyzedText: textToAnalyze,\n                    recommendations: this.generateRecommendations(urlAnalysis),\n                    intentAnalysis: intentAnalysis,\n                    confidence: 0.95\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in AI service:\", error);\n            return {\n                success: false,\n                message: \"Error al procesar la solicitud\",\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n    /**\n   * Llama a la API para analizar la intención de ver screenshots\n   */ static async callScreenshotIntentAPI(message, urls) {\n        const response = await fetch(\"/api/screenshot\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                message,\n                urls\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Error en la API: \".concat(response.status));\n        }\n        return await response.json();\n    }\n    /**\n   * Detecta URLs en un texto\n   */ static detectURLs(text) {\n        // Expresión regular mejorada para capturar una variedad más amplia de URLs\n        // Esta regex busca URLs con diversos dominios de nivel superior (.com, .org, .ai, etc.)\n        const urlRegex = /(?:https?:\\/\\/)?(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi;\n        const matches = text.match(urlRegex) || [];\n        // Filtrar posibles falsos positivos (como números de versión: 1.0, etc.)\n        const validUrls = matches.filter((url)=>{\n            // Verificar que el dominio tenga al menos un punto y caracteres alfanuméricos\n            const domainParts = url.split(\".\");\n            // Debe tener al menos un punto y el TLD debe tener al menos 2 caracteres\n            return domainParts.length >= 2 && domainParts[domainParts.length - 1].length >= 2;\n        });\n        return {\n            containsURLs: validUrls.length > 0,\n            urls: validUrls\n        };\n    }\n    /**\n   * Extrae texto de los elementos seleccionados\n   */ static extractTextFromElements(items) {\n        // Aquí extraemos el texto de los elementos seleccionados\n        // En un caso real, esto dependería de la estructura de tus elementos\n        let extractedText = \"\";\n        for (const item of items){\n            var _item_details, _item_details1, _item_details2;\n            // Intentar extraer texto de diferentes propiedades comunes\n            // Esto es un ejemplo y debería adaptarse a tu estructura de datos real\n            if (item.text) {\n                extractedText += \" \" + item.text;\n            } else if ((_item_details = item.details) === null || _item_details === void 0 ? void 0 : _item_details.text) {\n                extractedText += \" \" + item.details.text;\n            } else if (item.name) {\n                extractedText += \" \" + item.name;\n            } else if (item.title) {\n                extractedText += \" \" + item.title;\n            } else if (item.description) {\n                extractedText += \" \" + item.description;\n            } else if ((_item_details1 = item.details) === null || _item_details1 === void 0 ? void 0 : _item_details1.description) {\n                extractedText += \" \" + item.details.description;\n            } else if ((_item_details2 = item.details) === null || _item_details2 === void 0 ? void 0 : _item_details2.src) {\n                extractedText += \" \" + item.details.src;\n            } else if (item.src) {\n                extractedText += \" \" + item.src;\n            } else if (item.content) {\n                extractedText += \" \" + item.content;\n            } else if (item.label) {\n                extractedText += \" \" + item.label;\n            } else if (item.value) {\n                extractedText += \" \" + item.value;\n            } else if (typeof item === \"string\") {\n                extractedText += \" \" + item;\n            }\n            // También podemos buscar en atributos anidados\n            if (item.props && typeof item.props === \"object\") {\n                for(const key in item.props){\n                    if (typeof item.props[key] === \"string\") {\n                        extractedText += \" \" + item.props[key];\n                    }\n                }\n            }\n            // Si todavía no hemos encontrado texto, intentamos convertir el objeto a string\n            if (extractedText.trim() === \"\" && item.toString) {\n                const str = item.toString();\n                if (str !== \"[object Object]\") {\n                    extractedText += \" \" + str;\n                }\n            }\n        }\n        return extractedText.trim();\n    }\n    /**\n   * Genera un resumen basado en el análisis de URLs\n   */ static generateURLAnalysisSummary(analysis, itemCount) {\n        if (analysis.containsURLs) {\n            const urlCount = analysis.urls.length;\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y encontrado \").concat(urlCount, \" URL\").concat(urlCount !== 1 ? \"s\" : \"\", \".\");\n        } else {\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y no he encontrado ninguna URL.\");\n        }\n    }\n    /**\n   * Genera recomendaciones basadas en el análisis de URLs\n   */ static generateRecommendations(analysis) {\n        if (analysis.containsURLs) {\n            return [\n                \"Considere verificar si las URLs son seguras antes de utilizarlas.\",\n                \"Aseg\\xfarese de que las URLs est\\xe9n activas y funcionen correctamente.\",\n                \"Considere revisar si los enlaces apuntan a los recursos deseados.\",\n                \"Para ver capturas de pantalla de las URLs, preg\\xfantame 'muestra el screenshot de <url>'\"\n            ];\n        } else {\n            return [\n                \"El contenido no contiene URLs. Si necesita incluir referencias web, considere a\\xf1adirlas.\",\n                \"Puede a\\xf1adir enlaces a recursos adicionales para enriquecer el contenido.\"\n            ];\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AIService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/services/ai-service.ts\n"));

/***/ })

});