/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxHQUFHO0FBQ2QsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcz84NGI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_apply.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"(app-pages-browser)/./node_modules/lodash/_baseAssignValue.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"(app-pages-browser)/./node_modules/lodash/eq.js\");\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnbk1lcmdlVmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLG1CQUFPLENBQUMseUZBQW9CO0FBQ2xELFNBQVMsbUJBQU8sQ0FBQyw2REFBTTs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduTWVyZ2VWYWx1ZS5qcz8zMWI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25NZXJnZVZhbHVlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_assignMergeValue.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"(app-pages-browser)/./node_modules/lodash/_baseAssignValue.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"(app-pages-browser)/./node_modules/lodash/eq.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFvQjtBQUNsRCxTQUFTLG1CQUFPLENBQUMsNkRBQU07O0FBRXZCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanM/Mjk0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduVmFsdWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_assignValue.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\");\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHlFQUFZOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcz81NzY1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseCreate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"(app-pages-browser)/./node_modules/lodash/_isPrototype.js\"),\n    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ \"(app-pages-browser)/./node_modules/lodash/_nativeKeysIn.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLGlGQUFnQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBaUI7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcz80N2JjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseKeysIn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Stack = __webpack_require__(/*! ./_Stack */ \"(app-pages-browser)/./node_modules/lodash/_Stack.js\"),\n    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ \"(app-pages-browser)/./node_modules/lodash/_assignMergeValue.js\"),\n    baseFor = __webpack_require__(/*! ./_baseFor */ \"(app-pages-browser)/./node_modules/lodash/_baseFor.js\"),\n    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ \"(app-pages-browser)/./node_modules/lodash/_baseMergeDeep.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\"),\n    keysIn = __webpack_require__(/*! ./keysIn */ \"(app-pages-browser)/./node_modules/lodash/keysIn.js\"),\n    safeGet = __webpack_require__(/*! ./_safeGet */ \"(app-pages-browser)/./node_modules/lodash/_safeGet.js\");\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMscUVBQVU7QUFDOUIsdUJBQXVCLG1CQUFPLENBQUMsMkZBQXFCO0FBQ3BELGNBQWMsbUJBQU8sQ0FBQyx5RUFBWTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxxRkFBa0I7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxxRUFBVTtBQUMvQixjQUFjLG1CQUFPLENBQUMseUVBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2UuanM/ODVmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseMerge.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ \"(app-pages-browser)/./node_modules/lodash/_assignMergeValue.js\"),\n    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ \"(app-pages-browser)/./node_modules/lodash/_cloneBuffer.js\"),\n    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ \"(app-pages-browser)/./node_modules/lodash/_cloneTypedArray.js\"),\n    copyArray = __webpack_require__(/*! ./_copyArray */ \"(app-pages-browser)/./node_modules/lodash/_copyArray.js\"),\n    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ \"(app-pages-browser)/./node_modules/lodash/_initCloneObject.js\"),\n    isArguments = __webpack_require__(/*! ./isArguments */ \"(app-pages-browser)/./node_modules/lodash/isArguments.js\"),\n    isArray = __webpack_require__(/*! ./isArray */ \"(app-pages-browser)/./node_modules/lodash/isArray.js\"),\n    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ \"(app-pages-browser)/./node_modules/lodash/isArrayLikeObject.js\"),\n    isBuffer = __webpack_require__(/*! ./isBuffer */ \"(app-pages-browser)/./node_modules/lodash/isBuffer.js\"),\n    isFunction = __webpack_require__(/*! ./isFunction */ \"(app-pages-browser)/./node_modules/lodash/isFunction.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\"),\n    isPlainObject = __webpack_require__(/*! ./isPlainObject */ \"(app-pages-browser)/./node_modules/lodash/isPlainObject.js\"),\n    isTypedArray = __webpack_require__(/*! ./isTypedArray */ \"(app-pages-browser)/./node_modules/lodash/isTypedArray.js\"),\n    safeGet = __webpack_require__(/*! ./_safeGet */ \"(app-pages-browser)/./node_modules/lodash/_safeGet.js\"),\n    toPlainObject = __webpack_require__(/*! ./toPlainObject */ \"(app-pages-browser)/./node_modules/lodash/toPlainObject.js\");\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZURlZXAuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCLG1CQUFPLENBQUMsMkZBQXFCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLGlGQUFnQjtBQUMxQyxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBb0I7QUFDbEQsZ0JBQWdCLG1CQUFPLENBQUMsNkVBQWM7QUFDdEMsc0JBQXNCLG1CQUFPLENBQUMseUZBQW9CO0FBQ2xELGtCQUFrQixtQkFBTyxDQUFDLCtFQUFlO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyx1RUFBVztBQUNqQyx3QkFBd0IsbUJBQU8sQ0FBQywyRkFBcUI7QUFDckQsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDZFQUFjO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyx5RUFBWTtBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBaUI7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsaUZBQWdCO0FBQzNDLGNBQWMsbUJBQU8sQ0FBQyx5RUFBWTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBaUI7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzP2ViMDIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNQbGFpbk9iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5JyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKSxcbiAgICB0b1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi90b1BsYWluT2JqZWN0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlRGVlcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseMergeDeep.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var identity = __webpack_require__(/*! ./identity */ \"(app-pages-browser)/./node_modules/lodash/identity.js\"),\n    overRest = __webpack_require__(/*! ./_overRest */ \"(app-pages-browser)/./node_modules/lodash/_overRest.js\"),\n    setToString = __webpack_require__(/*! ./_setToString */ \"(app-pages-browser)/./node_modules/lodash/_setToString.js\");\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyx5RUFBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsMkVBQWE7QUFDcEMsa0JBQWtCLG1CQUFPLENBQUMsaUZBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzP2RkYWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseRest.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var constant = __webpack_require__(/*! ./constant */ \"(app-pages-browser)/./node_modules/lodash/constant.js\"),\n    defineProperty = __webpack_require__(/*! ./_defineProperty */ \"(app-pages-browser)/./node_modules/lodash/_defineProperty.js\"),\n    identity = __webpack_require__(/*! ./identity */ \"(app-pages-browser)/./node_modules/lodash/identity.js\");\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMseUVBQVk7QUFDbkMscUJBQXFCLG1CQUFPLENBQUMsdUZBQW1CO0FBQ2hELGVBQWUsbUJBQU8sQ0FBQyx5RUFBWTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanM/ZmU5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_baseSetToString.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ \"(app-pages-browser)/./node_modules/lodash/_Uint8Array.js\");\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsK0VBQWU7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcz9jNWMzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_cloneArrayBuffer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar root = __webpack_require__(/*! ./_root */ \"(app-pages-browser)/./node_modules/lodash/_root.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxXQUFXLG1CQUFPLENBQUMsbUVBQVM7O0FBRTVCO0FBQ0Esa0JBQWtCLEtBQTBCOztBQUU1QztBQUNBLGdDQUFnQyxRQUFhOztBQUU3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcz9iMTg1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQnVmZmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_cloneBuffer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ \"(app-pages-browser)/./node_modules/lodash/_cloneArrayBuffer.js\");\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUIsbUJBQU8sQ0FBQywyRkFBcUI7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanM/MDI5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_cloneTypedArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlBcnJheS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanM/MDVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_copyArray.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var assignValue = __webpack_require__(/*! ./_assignValue */ \"(app-pages-browser)/./node_modules/lodash/_assignValue.js\"),\n    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"(app-pages-browser)/./node_modules/lodash/_baseAssignValue.js\");\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsaUZBQWdCO0FBQzFDLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFvQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUSxVQUFVO0FBQzdCLFdBQVcsVUFBVTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzP2UzNjciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_copyObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseRest = __webpack_require__(/*! ./_baseRest */ \"(app-pages-browser)/./node_modules/lodash/_baseRest.js\"),\n    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ \"(app-pages-browser)/./node_modules/lodash/_isIterateeCall.js\");\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQywyRUFBYTtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBbUI7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzPzViNjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_createAssigner.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var overArg = __webpack_require__(/*! ./_overArg */ \"(app-pages-browser)/./node_modules/lodash/_overArg.js\");\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMseUVBQVk7O0FBRWxDO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzP2UzNTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_getPrototype.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseCreate = __webpack_require__(/*! ./_baseCreate */ \"(app-pages-browser)/./node_modules/lodash/_baseCreate.js\"),\n    getPrototype = __webpack_require__(/*! ./_getPrototype */ \"(app-pages-browser)/./node_modules/lodash/_getPrototype.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"(app-pages-browser)/./node_modules/lodash/_isPrototype.js\");\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBZTtBQUN4QyxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBaUI7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsaUZBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcz82ZGU0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_initCloneObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var eq = __webpack_require__(/*! ./eq */ \"(app-pages-browser)/./node_modules/lodash/eq.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"(app-pages-browser)/./node_modules/lodash/isArrayLike.js\"),\n    isIndex = __webpack_require__(/*! ./_isIndex */ \"(app-pages-browser)/./node_modules/lodash/_isIndex.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"(app-pages-browser)/./node_modules/lodash/isObject.js\");\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSXRlcmF0ZWVDYWxsLmpzIiwibWFwcGluZ3MiOiJBQUFBLFNBQVMsbUJBQU8sQ0FBQyw2REFBTTtBQUN2QixrQkFBa0IsbUJBQU8sQ0FBQywrRUFBZTtBQUN6QyxjQUFjLG1CQUFPLENBQUMseUVBQVk7QUFDbEMsZUFBZSxtQkFBTyxDQUFDLHlFQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanM/N2RlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_isIterateeCall.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcz82ZDg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_nativeKeysIn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var apply = __webpack_require__(/*! ./_apply */ \"(app-pages-browser)/./node_modules/lodash/_apply.js\");\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyxxRUFBVTs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcz8yODg4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_overRest.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanM/NDUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWZlR2V0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_safeGet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ \"(app-pages-browser)/./node_modules/lodash/_baseSetToString.js\"),\n    shortOut = __webpack_require__(/*! ./_shortOut */ \"(app-pages-browser)/./node_modules/lodash/_shortOut.js\");\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFvQjtBQUNsRCxlQUFlLG1CQUFPLENBQUMsMkVBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcz9iZTcxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_setToString.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcz9mMGI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG9ydE91dDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/_shortOut.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQSxZQUFZLFFBQVEsSUFBSSxRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzP2U4ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/constant.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"(app-pages-browser)/./node_modules/lodash/isArrayLike.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsK0VBQWU7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsaUZBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzPzE0NjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isArrayLikeObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"(app-pages-browser)/./node_modules/lodash/_baseGetTag.js\"),\n    getPrototype = __webpack_require__(/*! ./_getPrototype */ \"(app-pages-browser)/./node_modules/lodash/_getPrototype.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"(app-pages-browser)/./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNQbGFpbk9iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBZTtBQUN4QyxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBaUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsaUZBQWdCOztBQUUzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanM/NDI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/isPlainObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ \"(app-pages-browser)/./node_modules/lodash/_arrayLikeKeys.js\"),\n    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ \"(app-pages-browser)/./node_modules/lodash/_baseKeysIn.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"(app-pages-browser)/./node_modules/lodash/isArrayLike.js\");\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLHFGQUFrQjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBZTtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanM/ZDcxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/keysIn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var baseMerge = __webpack_require__(/*! ./_baseMerge */ \"(app-pages-browser)/./node_modules/lodash/_baseMerge.js\"),\n    createAssigner = __webpack_require__(/*! ./_createAssigner */ \"(app-pages-browser)/./node_modules/lodash/_createAssigner.js\");\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsNkVBQWM7QUFDdEMscUJBQXFCLG1CQUFPLENBQUMsdUZBQW1COztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxXQUFXO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVEsSUFBSSxRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUSxJQUFJLFFBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRLGdCQUFnQixJQUFJLGdCQUFnQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanM/M2E3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/merge.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var copyObject = __webpack_require__(/*! ./_copyObject */ \"(app-pages-browser)/./node_modules/lodash/_copyObject.js\"),\n    keysIn = __webpack_require__(/*! ./keysIn */ \"(app-pages-browser)/./node_modules/lodash/keysIn.js\");\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QbGFpbk9iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBZTtBQUN4QyxhQUFhLG1CQUFPLENBQUMscUVBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixXQUFXO0FBQ1g7QUFDQSxjQUFjLFFBQVE7QUFDdEIsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9QbGFpbk9iamVjdC5qcz9mM2U0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/toPlainObject.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/composition.tsx":
/*!************************************************!*\
  !*** ./features/editor/player/composition.tsx ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _store_use_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store/use-store */ \"(app-pages-browser)/./features/editor/store/use-store.ts\");\n/* harmony import */ var _sequence_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sequence-item */ \"(app-pages-browser)/./features/editor/player/sequence-item.tsx\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @designcombo/events */ \"(app-pages-browser)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* harmony import */ var _designcombo_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @designcombo/state */ \"(app-pages-browser)/./node_modules/@designcombo/state/dist/index.es.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/merge */ \"(app-pages-browser)/./node_modules/lodash/merge.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _utils_track_items__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/track-items */ \"(app-pages-browser)/./features/editor/utils/track-items.ts\");\n/* harmony import */ var _utils_text__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/text */ \"(app-pages-browser)/./features/editor/utils/text.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst Composition = ()=>{\n    _s();\n    const [editableTextId, setEditableTextId] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { trackItemIds, trackItemsMap, fps, trackItemDetailsMap, sceneMoveableRef, size, transitionsMap } = (0,_store_use_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    const mergedTrackItemsDeatilsMap = lodash_merge__WEBPACK_IMPORTED_MODULE_6___default()(trackItemsMap, trackItemDetailsMap);\n    const groupedItems = (0,_utils_track_items__WEBPACK_IMPORTED_MODULE_7__.groupTrackItems)({\n        trackItemIds,\n        transitionsMap,\n        trackItemsMap: mergedTrackItemsDeatilsMap\n    });\n    const handleTextChange = (id, _)=>{\n        var _elRef_firstElementChild_firstElementChild, _elRef_firstElementChild, _sceneMoveableRef_current, _sceneMoveableRef_current1;\n        const elRef = document.querySelector(\".id-\".concat(id));\n        const textDiv = (_elRef_firstElementChild = elRef.firstElementChild) === null || _elRef_firstElementChild === void 0 ? void 0 : (_elRef_firstElementChild_firstElementChild = _elRef_firstElementChild.firstElementChild) === null || _elRef_firstElementChild_firstElementChild === void 0 ? void 0 : _elRef_firstElementChild_firstElementChild.firstElementChild;\n        const { fontFamily, fontSize, fontWeight, letterSpacing, lineHeight, textShadow, webkitTextStroke } = textDiv.style;\n        const { width } = elRef.style;\n        if (!elRef.innerText) return;\n        const newHeight = (0,_utils_text__WEBPACK_IMPORTED_MODULE_8__.calculateTextHeight)({\n            family: fontFamily,\n            fontSize,\n            fontWeight,\n            letterSpacing,\n            lineHeight,\n            text: elRef.innerText,\n            textShadow: textShadow,\n            webkitTextStroke,\n            width,\n            id: id\n        });\n        elRef.style.height = \"\".concat(newHeight, \"px\");\n        sceneMoveableRef === null || sceneMoveableRef === void 0 ? void 0 : (_sceneMoveableRef_current = sceneMoveableRef.current) === null || _sceneMoveableRef_current === void 0 ? void 0 : _sceneMoveableRef_current.moveable.updateRect();\n        sceneMoveableRef === null || sceneMoveableRef === void 0 ? void 0 : (_sceneMoveableRef_current1 = sceneMoveableRef.current) === null || _sceneMoveableRef_current1 === void 0 ? void 0 : _sceneMoveableRef_current1.moveable.forceUpdate();\n    };\n    const onTextBlur = (id, _)=>{\n        var _elRef_firstElementChild_firstElementChild, _elRef_firstElementChild;\n        const elRef = document.querySelector(\".id-\".concat(id));\n        const textDiv = (_elRef_firstElementChild = elRef.firstElementChild) === null || _elRef_firstElementChild === void 0 ? void 0 : (_elRef_firstElementChild_firstElementChild = _elRef_firstElementChild.firstElementChild) === null || _elRef_firstElementChild_firstElementChild === void 0 ? void 0 : _elRef_firstElementChild_firstElementChild.firstElementChild;\n        const { fontFamily, fontSize, fontWeight, letterSpacing, lineHeight, textShadow, webkitTextStroke } = textDiv.style;\n        const { width } = elRef.style;\n        if (!elRef.innerText) return;\n        const newHeight = (0,_utils_text__WEBPACK_IMPORTED_MODULE_8__.calculateTextHeight)({\n            family: fontFamily,\n            fontSize,\n            fontWeight,\n            letterSpacing,\n            lineHeight,\n            text: elRef.innerText,\n            textShadow: textShadow,\n            webkitTextStroke,\n            width,\n            id: id\n        });\n        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_4__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_5__.EDIT_OBJECT, {\n            payload: {\n                [id]: {\n                    details: {\n                        height: newHeight\n                    }\n                }\n            }\n        });\n    };\n    //   handle track and track item events - updates\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        const stateEvents = _designcombo_events__WEBPACK_IMPORTED_MODULE_4__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_4__.filter)((param)=>{\n            let { key } = param;\n            return key.startsWith(_designcombo_state__WEBPACK_IMPORTED_MODULE_5__.ENTER_EDIT_MODE);\n        }));\n        const subscription = stateEvents.subscribe((obj)=>{\n            if (obj.key === _designcombo_state__WEBPACK_IMPORTED_MODULE_5__.ENTER_EDIT_MODE) {\n                var _obj_value;\n                if (editableTextId) {\n                    // get element by  data-text-id={id}\n                    const element = document.querySelector('[data-text-id=\"'.concat(editableTextId, '\"]'));\n                    if (trackItemIds.includes(editableTextId)) {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_4__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_5__.EDIT_OBJECT, {\n                            payload: {\n                                [editableTextId]: {\n                                    details: {\n                                        text: (element === null || element === void 0 ? void 0 : element.innerHTML) || \"\"\n                                    }\n                                }\n                            }\n                        });\n                    } else {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_4__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_5__.EDIT_TEMPLATE_ITEM, {\n                            payload: {\n                                [editableTextId]: {\n                                    details: {\n                                        text: (element === null || element === void 0 ? void 0 : element.textContent) || \"\"\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n                setEditableTextId((_obj_value = obj.value) === null || _obj_value === void 0 ? void 0 : _obj_value.payload.id);\n            }\n        });\n        return ()=>subscription.unsubscribe();\n    }, [\n        editableTextId\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: groupedItems.map((group, index)=>{\n            if (group.length === 1) {\n                const item = mergedTrackItemsDeatilsMap[group[0].id];\n                console.log(\"Rendering item:\", item);\n                return _sequence_item__WEBPACK_IMPORTED_MODULE_2__.SequenceItem[item.type](item, {\n                    fps,\n                    handleTextChange,\n                    onTextBlur,\n                    editableTextId\n                });\n            }\n            return null;\n        })\n    }, void 0, false);\n};\n_s(Composition, \"fZK4RLfRaeArTAF4nFTRHdmAzKE=\", false, function() {\n    return [\n        _store_use_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n    ];\n});\n_c = Composition;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Composition);\nvar _c;\n$RefreshReg$(_c, \"Composition\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/composition.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/editable-text.tsx":
/*!**************************************************!*\
  !*** ./features/editor/player/editable-text.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$();\n\nconst TextLayer = (param)=>{\n    let { id, content, editable, style = {}, onChange, onBlur } = param;\n    _s();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(content);\n    const divRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (editable && divRef.current) {\n            const element = divRef.current;\n            element.focus();\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.selectNodeContents(element);\n            selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n            selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n        } else {\n            const selection = window.getSelection();\n            selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n        }\n    }, [\n        editable\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (data !== content) {\n            setData(content);\n        }\n    }, [\n        content\n    ]);\n    // Function to move caret to the end\n    const moveCaretToEnd = ()=>{\n        if (divRef.current) {\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.selectNodeContents(divRef.current);\n            range.collapse(false); // Collapse the range to the end of the content\n            selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();\n            selection === null || selection === void 0 ? void 0 : selection.addRange(range);\n        }\n    };\n    // OnClick handler to move caret if all text is selected\n    const handleClick = (e)=>{\n        e.stopPropagation();\n        const selection = window.getSelection();\n        const element = divRef.current;\n        if ((selection === null || selection === void 0 ? void 0 : selection.rangeCount) && element) {\n            var _element_textContent;\n            const range = selection.getRangeAt(0);\n            if (range.endOffset - range.startOffset === ((_element_textContent = element.textContent) === null || _element_textContent === void 0 ? void 0 : _element_textContent.length)) {\n                // All text is selected, move caret to the end\n                moveCaretToEnd();\n            }\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        \"data-text-id\": id,\n        ref: divRef,\n        contentEditable: editable,\n        onClick: handleClick,\n        onInput: (ev)=>onChange(id, ev.target.innerText),\n        onBlur: (ev)=>onBlur(id, ev.target.innerText),\n        style: {\n            height: \"100%\",\n            boxShadow: \"none\",\n            outline: \"none\",\n            ...style,\n            pointerEvents: editable ? \"auto\" : \"none\",\n            whiteSpace: \"normal\",\n            width: \"100%\"\n        },\n        dangerouslySetInnerHTML: {\n            __html: content\n        },\n        className: \"designcombo_textLayer\"\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\editable-text.tsx\",\n        lineNumber: 61,\n        columnNumber: 5\n    }, undefined);\n};\n_s(TextLayer, \"kzLdAA6a4RhYoM+DUAGaV0UcAK8=\");\n_c = TextLayer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (TextLayer);\nvar _c;\n$RefreshReg$(_c, \"TextLayer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvZWRpdGFibGUtdGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRXBELE1BQU1HLFlBT0Q7UUFBQyxFQUFFQyxFQUFFLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLENBQUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTs7SUFDM0QsTUFBTSxDQUFDQyxNQUFNQyxRQUFRLEdBQUdULCtDQUFRQSxDQUFDRztJQUNqQyxNQUFNTyxTQUFTWCw2Q0FBTUEsQ0FBaUI7SUFFdENELGdEQUFTQSxDQUFDO1FBQ1IsSUFBSU0sWUFBWU0sT0FBT0MsT0FBTyxFQUFFO1lBQzlCLE1BQU1DLFVBQVVGLE9BQU9DLE9BQU87WUFDOUJDLFFBQVFDLEtBQUs7WUFDYixNQUFNQyxZQUFZQyxPQUFPQyxZQUFZO1lBQ3JDLE1BQU1DLFFBQVFDLFNBQVNDLFdBQVc7WUFDbENGLE1BQU1HLGtCQUFrQixDQUFDUjtZQUN6QkUsc0JBQUFBLGdDQUFBQSxVQUFXTyxlQUFlO1lBQzFCUCxzQkFBQUEsZ0NBQUFBLFVBQVdRLFFBQVEsQ0FBQ0w7UUFDdEIsT0FBTztZQUNMLE1BQU1ILFlBQVlDLE9BQU9DLFlBQVk7WUFDckNGLHNCQUFBQSxnQ0FBQUEsVUFBV08sZUFBZTtRQUM1QjtJQUNGLEdBQUc7UUFBQ2pCO0tBQVM7SUFFYk4sZ0RBQVNBLENBQUM7UUFDUixJQUFJVSxTQUFTTCxTQUFTO1lBQ3BCTSxRQUFRTjtRQUNWO0lBQ0YsR0FBRztRQUFDQTtLQUFRO0lBQ1osb0NBQW9DO0lBQ3BDLE1BQU1vQixpQkFBaUI7UUFDckIsSUFBSWIsT0FBT0MsT0FBTyxFQUFFO1lBQ2xCLE1BQU1HLFlBQVlDLE9BQU9DLFlBQVk7WUFDckMsTUFBTUMsUUFBUUMsU0FBU0MsV0FBVztZQUNsQ0YsTUFBTUcsa0JBQWtCLENBQUNWLE9BQU9DLE9BQU87WUFDdkNNLE1BQU1PLFFBQVEsQ0FBQyxRQUFRLCtDQUErQztZQUN0RVYsc0JBQUFBLGdDQUFBQSxVQUFXTyxlQUFlO1lBQzFCUCxzQkFBQUEsZ0NBQUFBLFVBQVdRLFFBQVEsQ0FBQ0w7UUFDdEI7SUFDRjtJQUVBLHdEQUF3RDtJQUN4RCxNQUFNUSxjQUFjLENBQUNDO1FBQ25CQSxFQUFFQyxlQUFlO1FBQ2pCLE1BQU1iLFlBQVlDLE9BQU9DLFlBQVk7UUFDckMsTUFBTUosVUFBVUYsT0FBT0MsT0FBTztRQUU5QixJQUFJRyxDQUFBQSxzQkFBQUEsZ0NBQUFBLFVBQVdjLFVBQVUsS0FBSWhCLFNBQVM7Z0JBRVFBO1lBRDVDLE1BQU1LLFFBQVFILFVBQVVlLFVBQVUsQ0FBQztZQUNuQyxJQUFJWixNQUFNYSxTQUFTLEdBQUdiLE1BQU1jLFdBQVcsT0FBS25CLHVCQUFBQSxRQUFRb0IsV0FBVyxjQUFuQnBCLDJDQUFBQSxxQkFBcUJxQixNQUFNLEdBQUU7Z0JBQ3ZFLDhDQUE4QztnQkFDOUNWO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EscUJBQ0UsOERBQUNXO1FBQ0NDLGdCQUFjakM7UUFDZGtDLEtBQUsxQjtRQUNMMkIsaUJBQWlCakM7UUFDakJrQyxTQUFTYjtRQUNUYyxTQUFTLENBQUNDLEtBQU9sQyxTQUFVSixJQUFJLEdBQUl1QyxNQUFNLENBQVNDLFNBQVM7UUFDM0RuQyxRQUFRLENBQUNpQyxLQUFPakMsT0FBUUwsSUFBSSxHQUFJdUMsTUFBTSxDQUFTQyxTQUFTO1FBQ3hEckMsT0FBTztZQUNMc0MsUUFBUTtZQUNSQyxXQUFXO1lBQ1hDLFNBQVM7WUFDVCxHQUFHeEMsS0FBSztZQUNSeUMsZUFBZTFDLFdBQVcsU0FBUztZQUNuQzJDLFlBQVk7WUFDWkMsT0FBTztRQUNUO1FBQ0FDLHlCQUF5QjtZQUFFQyxRQUFRL0M7UUFBUTtRQUMzQ2dELFdBQVU7Ozs7OztBQUdoQjtHQTlFTWxEO0tBQUFBO0FBZ0ZOLCtEQUFlQSxTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvZWRpdGFibGUtdGV4dC50c3g/MWQzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmNvbnN0IFRleHRMYXllcjogUmVhY3QuRkM8e1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIG9uQ2hhbmdlPzogKGlkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBvbkJsdXI/OiAoaWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuICBlZGl0YWJsZT86IGJvb2xlYW47XHJcbn0+ID0gKHsgaWQsIGNvbnRlbnQsIGVkaXRhYmxlLCBzdHlsZSA9IHt9LCBvbkNoYW5nZSwgb25CbHVyIH0pID0+IHtcclxuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShjb250ZW50KTtcclxuICBjb25zdCBkaXZSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGVkaXRhYmxlICYmIGRpdlJlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkaXZSZWYuY3VycmVudDtcclxuICAgICAgZWxlbWVudC5mb2N1cygpO1xyXG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xyXG4gICAgICBzZWxlY3Rpb24/LnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgc2VsZWN0aW9uPy5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgIH1cclxuICB9LCBbZWRpdGFibGVdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChkYXRhICE9PSBjb250ZW50KSB7XHJcbiAgICAgIHNldERhdGEoY29udGVudCk7XHJcbiAgICB9XHJcbiAgfSwgW2NvbnRlbnRdKTtcclxuICAvLyBGdW5jdGlvbiB0byBtb3ZlIGNhcmV0IHRvIHRoZSBlbmRcclxuICBjb25zdCBtb3ZlQ2FyZXRUb0VuZCA9ICgpID0+IHtcclxuICAgIGlmIChkaXZSZWYuY3VycmVudCkge1xyXG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGRpdlJlZi5jdXJyZW50KTtcclxuICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpOyAvLyBDb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIGVuZCBvZiB0aGUgY29udGVudFxyXG4gICAgICBzZWxlY3Rpb24/LnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICBzZWxlY3Rpb24/LmFkZFJhbmdlKHJhbmdlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBPbkNsaWNrIGhhbmRsZXIgdG8gbW92ZSBjYXJldCBpZiBhbGwgdGV4dCBpcyBzZWxlY3RlZFxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGRpdlJlZi5jdXJyZW50O1xyXG5cclxuICAgIGlmIChzZWxlY3Rpb24/LnJhbmdlQ291bnQgJiYgZWxlbWVudCkge1xyXG4gICAgICBjb25zdCByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xyXG4gICAgICBpZiAocmFuZ2UuZW5kT2Zmc2V0IC0gcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IGVsZW1lbnQudGV4dENvbnRlbnQ/Lmxlbmd0aCkge1xyXG4gICAgICAgIC8vIEFsbCB0ZXh0IGlzIHNlbGVjdGVkLCBtb3ZlIGNhcmV0IHRvIHRoZSBlbmRcclxuICAgICAgICBtb3ZlQ2FyZXRUb0VuZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBkYXRhLXRleHQtaWQ9e2lkfVxyXG4gICAgICByZWY9e2RpdlJlZn1cclxuICAgICAgY29udGVudEVkaXRhYmxlPXtlZGl0YWJsZX1cclxuICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XHJcbiAgICAgIG9uSW5wdXQ9eyhldikgPT4gb25DaGFuZ2UhKGlkLCAoZXYudGFyZ2V0IGFzIGFueSkuaW5uZXJUZXh0KX1cclxuICAgICAgb25CbHVyPXsoZXYpID0+IG9uQmx1ciEoaWQsIChldi50YXJnZXQgYXMgYW55KS5pbm5lclRleHQpfVxyXG4gICAgICBzdHlsZT17e1xyXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXHJcbiAgICAgICAgYm94U2hhZG93OiBcIm5vbmVcIixcclxuICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIixcclxuICAgICAgICAuLi5zdHlsZSxcclxuICAgICAgICBwb2ludGVyRXZlbnRzOiBlZGl0YWJsZSA/IFwiYXV0b1wiIDogXCJub25lXCIsXHJcbiAgICAgICAgd2hpdGVTcGFjZTogXCJub3JtYWxcIixcclxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgIH19XHJcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY29udGVudCB9fVxyXG4gICAgICBjbGFzc05hbWU9XCJkZXNpZ25jb21ib190ZXh0TGF5ZXJcIlxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGV4dExheWVyO1xyXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJUZXh0TGF5ZXIiLCJpZCIsImNvbnRlbnQiLCJlZGl0YWJsZSIsInN0eWxlIiwib25DaGFuZ2UiLCJvbkJsdXIiLCJkYXRhIiwic2V0RGF0YSIsImRpdlJlZiIsImN1cnJlbnQiLCJlbGVtZW50IiwiZm9jdXMiLCJzZWxlY3Rpb24iLCJ3aW5kb3ciLCJnZXRTZWxlY3Rpb24iLCJyYW5nZSIsImRvY3VtZW50IiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm1vdmVDYXJldFRvRW5kIiwiY29sbGFwc2UiLCJoYW5kbGVDbGljayIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImVuZE9mZnNldCIsInN0YXJ0T2Zmc2V0IiwidGV4dENvbnRlbnQiLCJsZW5ndGgiLCJkaXYiLCJkYXRhLXRleHQtaWQiLCJyZWYiLCJjb250ZW50RWRpdGFibGUiLCJvbkNsaWNrIiwib25JbnB1dCIsImV2IiwidGFyZ2V0IiwiaW5uZXJUZXh0IiwiaGVpZ2h0IiwiYm94U2hhZG93Iiwib3V0bGluZSIsInBvaW50ZXJFdmVudHMiLCJ3aGl0ZVNwYWNlIiwid2lkdGgiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/editable-text.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/index.ts":
/*!*****************************************!*\
  !*** ./features/editor/player/index.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: function() { return /* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"(app-pages-browser)/./features/editor/player/player.tsx\");\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmVhdHVyZXMvZWRpdG9yL3BsYXllci9pbmRleC50cz8xNDFhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XHJcbiJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiUGxheWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/player.tsx":
/*!*******************************************!*\
  !*** ./features/editor/player/player.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _composition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./composition */ \"(app-pages-browser)/./features/editor/player/composition.tsx\");\n/* harmony import */ var _remotion_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @remotion/player */ \"(app-pages-browser)/./node_modules/@remotion/player/dist/esm/index.mjs\");\n/* harmony import */ var _store_use_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../store/use-store */ \"(app-pages-browser)/./features/editor/store/use-store.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst Player = ()=>{\n    _s();\n    const playerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const { setPlayerRef, duration, fps, size } = (0,_store_use_store__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setPlayerRef(playerRef);\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_remotion_player__WEBPACK_IMPORTED_MODULE_4__.Player, {\n        ref: playerRef,\n        component: _composition__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        durationInFrames: Math.round(duration / 1000 * fps) || 1,\n        compositionWidth: size.width,\n        compositionHeight: size.height,\n        className: \"h-full w-full\",\n        fps: 30,\n        overflowVisible: true\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\player.tsx\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Player, \"+K2gIbGIK+nK8ccyk8Q9zoU1tj0=\", false, function() {\n    return [\n        _store_use_store__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    ];\n});\n_c = Player;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);\nvar _c;\n$RefreshReg$(_c, \"Player\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvcGxheWVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMEM7QUFDRjtBQUMrQjtBQUM3QjtBQUUxQyxNQUFNRyxTQUFTOztJQUNiLE1BQU1HLFlBQVlMLDZDQUFNQSxDQUFZO0lBQ3BDLE1BQU0sRUFBRU0sWUFBWSxFQUFFQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFLEdBQUdMLDREQUFRQTtJQUV0REwsZ0RBQVNBLENBQUM7UUFDUk8sYUFBYUQ7SUFDZixHQUFHLEVBQUU7SUFFTCxxQkFDRSw4REFBQ0Ysb0RBQWNBO1FBQ2JPLEtBQUtMO1FBQ0xNLFdBQVdWLG9EQUFXQTtRQUN0Qlcsa0JBQWtCQyxLQUFLQyxLQUFLLENBQUMsV0FBWSxPQUFRTixRQUFRO1FBQ3pETyxrQkFBa0JOLEtBQUtPLEtBQUs7UUFDNUJDLG1CQUFtQlIsS0FBS1MsTUFBTTtRQUM5QkMsV0FBVTtRQUNWWCxLQUFLO1FBQ0xZLGVBQWU7Ozs7OztBQUdyQjtHQXBCTWxCOztRQUUwQ0Usd0RBQVFBOzs7S0FGbERGO0FBcUJOLCtEQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvcGxheWVyLnRzeD9lNTQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBDb21wb3NpdGlvbiBmcm9tIFwiLi9jb21wb3NpdGlvblwiO1xyXG5pbXBvcnQgeyBQbGF5ZXIgYXMgUmVtb3Rpb25QbGF5ZXIsIFBsYXllclJlZiB9IGZyb20gXCJAcmVtb3Rpb24vcGxheWVyXCI7XHJcbmltcG9ydCB1c2VTdG9yZSBmcm9tIFwiLi4vc3RvcmUvdXNlLXN0b3JlXCI7XHJcblxyXG5jb25zdCBQbGF5ZXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgcGxheWVyUmVmID0gdXNlUmVmPFBsYXllclJlZj4obnVsbCk7XHJcbiAgY29uc3QgeyBzZXRQbGF5ZXJSZWYsIGR1cmF0aW9uLCBmcHMsIHNpemUgfSA9IHVzZVN0b3JlKCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRQbGF5ZXJSZWYocGxheWVyUmVmKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8UmVtb3Rpb25QbGF5ZXJcclxuICAgICAgcmVmPXtwbGF5ZXJSZWZ9XHJcbiAgICAgIGNvbXBvbmVudD17Q29tcG9zaXRpb259XHJcbiAgICAgIGR1cmF0aW9uSW5GcmFtZXM9e01hdGgucm91bmQoKGR1cmF0aW9uIC8gMTAwMCkgKiBmcHMpIHx8IDF9XHJcbiAgICAgIGNvbXBvc2l0aW9uV2lkdGg9e3NpemUud2lkdGh9XHJcbiAgICAgIGNvbXBvc2l0aW9uSGVpZ2h0PXtzaXplLmhlaWdodH1cclxuICAgICAgY2xhc3NOYW1lPVwiaC1mdWxsIHctZnVsbFwiXHJcbiAgICAgIGZwcz17MzB9XHJcbiAgICAgIG92ZXJmbG93VmlzaWJsZVxyXG4gICAgLz5cclxuICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XHJcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJDb21wb3NpdGlvbiIsIlBsYXllciIsIlJlbW90aW9uUGxheWVyIiwidXNlU3RvcmUiLCJwbGF5ZXJSZWYiLCJzZXRQbGF5ZXJSZWYiLCJkdXJhdGlvbiIsImZwcyIsInNpemUiLCJyZWYiLCJjb21wb25lbnQiLCJkdXJhdGlvbkluRnJhbWVzIiwiTWF0aCIsInJvdW5kIiwiY29tcG9zaXRpb25XaWR0aCIsIndpZHRoIiwiY29tcG9zaXRpb25IZWlnaHQiLCJoZWlnaHQiLCJjbGFzc05hbWUiLCJvdmVyZmxvd1Zpc2libGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/player.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/sequence-item.tsx":
/*!**************************************************!*\
  !*** ./features/editor/player/sequence-item.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequenceItem: function() { return /* binding */ SequenceItem; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/index.mjs\");\n/* harmony import */ var _editable_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editable-text */ \"(app-pages-browser)/./features/editor/player/editable-text.tsx\");\n/* harmony import */ var _utils_frames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/frames */ \"(app-pages-browser)/./features/editor/utils/frames.ts\");\n/* harmony import */ var _animated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./animated */ \"(app-pages-browser)/./features/editor/player/animated/index.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles */ \"(app-pages-browser)/./features/editor/player/styles.ts\");\n/* harmony import */ var _utils_get_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/get-animations */ \"(app-pages-browser)/./features/editor/utils/get-animations.tsx\");\n\n\n\n\n\n\n\nconst SequenceItem = {\n    text: (item, options)=>{\n        const { handleTextChange, onTextBlur, fps, editableTextId, zIndex } = options;\n        const { id, details, animations } = item;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)(item.display, fps);\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details),\n                    animationIn: editableTextId === id ? null : animationIn,\n                    animationOut: editableTextId === id ? null : animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_editable_text__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        id: id,\n                        content: details.text,\n                        editable: editableTextId === id,\n                        onChange: handleTextChange,\n                        onBlur: onTextBlur,\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateTextStyles)(details)\n                    }, id, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 54,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 47,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 41,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 34,\n            columnNumber: 7\n        }, undefined);\n    },\n    image: (item, options)=>{\n        const { fps, zIndex } = options;\n        const { details, animations } = item;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)(item.display, fps);\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        const crop = details.crop || {\n            x: 0,\n            y: 0,\n            width: item.details.width,\n            height: item.details.height\n        };\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop, {\n                        overflow: \"hidden\"\n                    }),\n                    animationIn: animationIn,\n                    animationOut: animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateMediaStyles)(details, crop),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Img, {\n                            \"data-id\": item.id,\n                            src: details.src\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                            lineNumber: 103,\n                            columnNumber: 15\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 102,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 94,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 88,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 81,\n            columnNumber: 7\n        }, undefined);\n    },\n    video: (item, options)=>{\n        var _item_trim, _item_trim1;\n        const { fps, zIndex } = options;\n        const { details, animations } = item;\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        const playbackRate = item.playbackRate || 1;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)({\n            from: item.display.from / playbackRate,\n            to: item.display.to / playbackRate\n        }, fps);\n        const crop = details.crop || {\n            x: 0,\n            y: 0,\n            width: item.details.width,\n            height: item.details.height\n        };\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop, {\n                        overflow: \"hidden\"\n                    }),\n                    animationIn: animationIn,\n                    animationOut: animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateMediaStyles)(details, crop),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.OffthreadVideo, {\n                            startFrom: ((_item_trim = item.trim) === null || _item_trim === void 0 ? void 0 : _item_trim.from) / 1000 * fps,\n                            endAt: ((_item_trim1 = item.trim) === null || _item_trim1 === void 0 ? void 0 : _item_trim1.to) / 1000 * fps,\n                            playbackRate: playbackRate,\n                            src: details.src,\n                            volume: details.volume || 0 / 100\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                            lineNumber: 151,\n                            columnNumber: 15\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 150,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 142,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 136,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 130,\n            columnNumber: 7\n        }, undefined);\n    },\n    audio: (item, options)=>{\n        var _item_trim, _item_trim1;\n        const { fps, zIndex } = options;\n        const { details } = item;\n        const playbackRate = item.playbackRate || 1;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)({\n            from: item.display.from / playbackRate,\n            to: item.display.to / playbackRate\n        }, fps);\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                userSelect: \"none\",\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Audio, {\n                    startFrom: ((_item_trim = item.trim) === null || _item_trim === void 0 ? void 0 : _item_trim.from) / 1000 * fps,\n                    endAt: ((_item_trim1 = item.trim) === null || _item_trim1 === void 0 ? void 0 : _item_trim1.to) / 1000 * fps,\n                    playbackRate: playbackRate,\n                    src: details.src,\n                    volume: details.volume / 100\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 187,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 186,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 176,\n            columnNumber: 7\n        }, undefined);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/sequence-item.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/styles.ts":
/*!******************************************!*\
  !*** ./features/editor/player/styles.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateContainerStyles: function() { return /* binding */ calculateContainerStyles; },\n/* harmony export */   calculateCropStyles: function() { return /* binding */ calculateCropStyles; },\n/* harmony export */   calculateMediaStyles: function() { return /* binding */ calculateMediaStyles; },\n/* harmony export */   calculateTextStyles: function() { return /* binding */ calculateTextStyles; }\n/* harmony export */ });\nconst calculateCropStyles = (details, crop)=>({\n        width: details.width || \"100%\",\n        height: details.height || \"auto\",\n        top: -crop.y || 0,\n        left: -crop.x || 0,\n        position: \"absolute\",\n        borderRadius: \"\".concat(Math.min(crop.width, crop.height) * ((details.borderRadius || 0) / 100), \"px\")\n    });\nconst calculateMediaStyles = (details, crop)=>{\n    return {\n        pointerEvents: \"none\",\n        boxShadow: [\n            \"0 0 0 \".concat(details.borderWidth, \"px \").concat(details.borderColor),\n            details.boxShadow ? \"\".concat(details.boxShadow.x, \"px \").concat(details.boxShadow.y, \"px \").concat(details.boxShadow.blur, \"px \").concat(details.boxShadow.color) : \"\"\n        ].filter(Boolean).join(\", \"),\n        ...calculateCropStyles(details, crop)\n    };\n};\nconst calculateTextStyles = (details)=>({\n        position: \"relative\",\n        textDecoration: details.textDecoration || \"none\",\n        WebkitTextStroke: \"\".concat(details.borderWidth, \"px \").concat(details.borderColor),\n        paintOrder: \"stroke fill\",\n        textShadow: details.boxShadow ? \"\".concat(details.boxShadow.x, \"px \").concat(details.boxShadow.y, \"px \").concat(details.boxShadow.blur, \"px \").concat(details.boxShadow.color) : \"\",\n        fontFamily: details.fontFamily || \"Arial\",\n        fontWeight: details.fontWeight || \"normal\",\n        lineHeight: details.lineHeight || \"normal\",\n        letterSpacing: details.letterSpacing || \"normal\",\n        wordSpacing: details.wordSpacing || \"normal\",\n        wordWrap: details.wordWrap || \"normal\",\n        wordBreak: details.wordBreak || \"normal\",\n        textTransform: details.textTransform || \"none\",\n        fontSize: details.fontSize || \"16px\",\n        textAlign: details.textAlign || \"left\",\n        color: details.color || \"#000000\"\n    });\nconst calculateContainerStyles = function(details) {\n    let crop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, overrides = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return {\n        pointerEvents: \"auto\",\n        top: details.top || 0,\n        left: details.left || 0,\n        width: crop.width || details.width || \"100%\",\n        height: crop.height || details.height || \"auto\",\n        transform: details.transform || \"none\",\n        opacity: details.opacity !== undefined ? details.opacity / 100 : 1,\n        transformOrigin: details.transformOrigin || \"center center\",\n        filter: \"brightness(\".concat(details.brightness, \"%) blur(\").concat(details.blur, \"px)\"),\n        rotate: details.rotate || \"0deg\",\n        ...overrides\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvc3R5bGVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFTyxNQUFNQSxzQkFBc0IsQ0FDakNDLFNBQ0FDLE9BQ0k7UUFDSkMsT0FBT0YsUUFBUUUsS0FBSyxJQUFJO1FBQ3hCQyxRQUFRSCxRQUFRRyxNQUFNLElBQUk7UUFDMUJDLEtBQUssQ0FBQ0gsS0FBS0ksQ0FBQyxJQUFJO1FBQ2hCQyxNQUFNLENBQUNMLEtBQUtNLENBQUMsSUFBSTtRQUNqQkMsVUFBVTtRQUNWQyxjQUFjLEdBQTJFLE9BQXhFQyxLQUFLQyxHQUFHLENBQUNWLEtBQUtDLEtBQUssRUFBRUQsS0FBS0UsTUFBTSxJQUFLLEVBQUNILFFBQVFTLFlBQVksSUFBSSxLQUFLLEdBQUUsR0FBRztJQUMzRixHQUFHO0FBRUksTUFBTUcsdUJBQXVCLENBQ2xDWixTQUNBQztJQUVBLE9BQU87UUFDTFksZUFBZTtRQUNmQyxXQUFXO1lBQ1IsU0FBaUNkLE9BQXpCQSxRQUFRZSxXQUFXLEVBQUMsT0FBeUIsT0FBcEJmLFFBQVFnQixXQUFXO1lBQ3JEaEIsUUFBUWMsU0FBUyxHQUNiLEdBQTRCZCxPQUF6QkEsUUFBUWMsU0FBUyxDQUFDUCxDQUFDLEVBQUMsT0FBOEJQLE9BQXpCQSxRQUFRYyxTQUFTLENBQUNULENBQUMsRUFBQyxPQUFpQ0wsT0FBNUJBLFFBQVFjLFNBQVMsQ0FBQ0csSUFBSSxFQUFDLE9BQTZCLE9BQXhCakIsUUFBUWMsU0FBUyxDQUFDSSxLQUFLLElBQ3hHO1NBQ0wsQ0FDRUMsTUFBTSxDQUFDQyxTQUNQQyxJQUFJLENBQUM7UUFDUixHQUFHdEIsb0JBQW9CQyxTQUFTQyxLQUFLO0lBQ3ZDO0FBQ0YsRUFBRTtBQUVLLE1BQU1xQixzQkFBc0IsQ0FDakN0QixVQUN5QjtRQUN6QlEsVUFBVTtRQUNWZSxnQkFBZ0J2QixRQUFRdUIsY0FBYyxJQUFJO1FBQzFDQyxrQkFBa0IsR0FBNEJ4QixPQUF6QkEsUUFBUWUsV0FBVyxFQUFDLE9BQXlCLE9BQXBCZixRQUFRZ0IsV0FBVztRQUNqRVMsWUFBWTtRQUNaQyxZQUFZMUIsUUFBUWMsU0FBUyxHQUN6QixHQUE0QmQsT0FBekJBLFFBQVFjLFNBQVMsQ0FBQ1AsQ0FBQyxFQUFDLE9BQThCUCxPQUF6QkEsUUFBUWMsU0FBUyxDQUFDVCxDQUFDLEVBQUMsT0FBaUNMLE9BQTVCQSxRQUFRYyxTQUFTLENBQUNHLElBQUksRUFBQyxPQUE2QixPQUF4QmpCLFFBQVFjLFNBQVMsQ0FBQ0ksS0FBSyxJQUN4RztRQUNKUyxZQUFZM0IsUUFBUTJCLFVBQVUsSUFBSTtRQUNsQ0MsWUFBWTVCLFFBQVE0QixVQUFVLElBQUk7UUFDbENDLFlBQVk3QixRQUFRNkIsVUFBVSxJQUFJO1FBQ2xDQyxlQUFlOUIsUUFBUThCLGFBQWEsSUFBSTtRQUN4Q0MsYUFBYS9CLFFBQVErQixXQUFXLElBQUk7UUFDcENDLFVBQVVoQyxRQUFRZ0MsUUFBUSxJQUFJO1FBQzlCQyxXQUFXakMsUUFBUWlDLFNBQVMsSUFBSTtRQUNoQ0MsZUFBZWxDLFFBQVFrQyxhQUFhLElBQUk7UUFDeENDLFVBQVVuQyxRQUFRbUMsUUFBUSxJQUFJO1FBQzlCQyxXQUFXcEMsUUFBUW9DLFNBQVMsSUFBSTtRQUNoQ2xCLE9BQU9sQixRQUFRa0IsS0FBSyxJQUFJO0lBQzFCLEdBQUc7QUFFSSxNQUFNbUIsMkJBQTJCLFNBQ3RDckM7UUFDQUMsd0VBQXNDLENBQUMsR0FDdkNxQyw2RUFBaUMsQ0FBQztJQUVsQyxPQUFPO1FBQ0x6QixlQUFlO1FBQ2ZULEtBQUtKLFFBQVFJLEdBQUcsSUFBSTtRQUNwQkUsTUFBTU4sUUFBUU0sSUFBSSxJQUFJO1FBQ3RCSixPQUFPRCxLQUFLQyxLQUFLLElBQUlGLFFBQVFFLEtBQUssSUFBSTtRQUN0Q0MsUUFBUUYsS0FBS0UsTUFBTSxJQUFJSCxRQUFRRyxNQUFNLElBQUk7UUFDekNvQyxXQUFXdkMsUUFBUXVDLFNBQVMsSUFBSTtRQUNoQ0MsU0FBU3hDLFFBQVF3QyxPQUFPLEtBQUtDLFlBQVl6QyxRQUFRd0MsT0FBTyxHQUFHLE1BQU07UUFDakVFLGlCQUFpQjFDLFFBQVEwQyxlQUFlLElBQUk7UUFDNUN2QixRQUFRLGNBQTJDbkIsT0FBN0JBLFFBQVEyQyxVQUFVLEVBQUMsWUFBdUIsT0FBYjNDLFFBQVFpQixJQUFJLEVBQUM7UUFDaEUyQixRQUFRNUMsUUFBUTRDLE1BQU0sSUFBSTtRQUMxQixHQUFHTixTQUFTO0lBQ2Q7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvc3R5bGVzLnRzP2UyYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUltYWdlLCBJVGV4dCwgSVRyYWNrSXRlbSB9IGZyb20gXCJAZGVzaWduY29tYm8vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDcm9wU3R5bGVzID0gKFxyXG4gIGRldGFpbHM6IElJbWFnZVtcImRldGFpbHNcIl0sXHJcbiAgY3JvcDogSUltYWdlW1wiZGV0YWlsc1wiXVtcImNyb3BcIl0sXHJcbikgPT4gKHtcclxuICB3aWR0aDogZGV0YWlscy53aWR0aCB8fCBcIjEwMCVcIixcclxuICBoZWlnaHQ6IGRldGFpbHMuaGVpZ2h0IHx8IFwiYXV0b1wiLFxyXG4gIHRvcDogLWNyb3AueSB8fCAwLFxyXG4gIGxlZnQ6IC1jcm9wLnggfHwgMCxcclxuICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxyXG4gIGJvcmRlclJhZGl1czogYCR7TWF0aC5taW4oY3JvcC53aWR0aCwgY3JvcC5oZWlnaHQpICogKChkZXRhaWxzLmJvcmRlclJhZGl1cyB8fCAwKSAvIDEwMCl9cHhgLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVNZWRpYVN0eWxlcyA9IChcclxuICBkZXRhaWxzOiBJVHJhY2tJdGVtW1wiZGV0YWlsc1wiXSxcclxuICBjcm9wOiBJVHJhY2tJdGVtW1wiZGV0YWlsc1wiXVtcImNyb3BcIl0sXHJcbikgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcclxuICAgIGJveFNoYWRvdzogW1xyXG4gICAgICBgMCAwIDAgJHtkZXRhaWxzLmJvcmRlcldpZHRofXB4ICR7ZGV0YWlscy5ib3JkZXJDb2xvcn1gLFxyXG4gICAgICBkZXRhaWxzLmJveFNoYWRvd1xyXG4gICAgICAgID8gYCR7ZGV0YWlscy5ib3hTaGFkb3cueH1weCAke2RldGFpbHMuYm94U2hhZG93Lnl9cHggJHtkZXRhaWxzLmJveFNoYWRvdy5ibHVyfXB4ICR7ZGV0YWlscy5ib3hTaGFkb3cuY29sb3J9YFxyXG4gICAgICAgIDogXCJcIixcclxuICAgIF1cclxuICAgICAgLmZpbHRlcihCb29sZWFuKVxyXG4gICAgICAuam9pbihcIiwgXCIpLFxyXG4gICAgLi4uY2FsY3VsYXRlQ3JvcFN0eWxlcyhkZXRhaWxzLCBjcm9wKSxcclxuICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXM7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVGV4dFN0eWxlcyA9IChcclxuICBkZXRhaWxzOiBJVGV4dFtcImRldGFpbHNcIl0sXHJcbik6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPT4gKHtcclxuICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxyXG4gIHRleHREZWNvcmF0aW9uOiBkZXRhaWxzLnRleHREZWNvcmF0aW9uIHx8IFwibm9uZVwiLFxyXG4gIFdlYmtpdFRleHRTdHJva2U6IGAke2RldGFpbHMuYm9yZGVyV2lkdGh9cHggJHtkZXRhaWxzLmJvcmRlckNvbG9yfWAsIC8vIE91dGxpbmUvc3Ryb2tlIGNvbG9yIGFuZCB0aGlja25lc3NcclxuICBwYWludE9yZGVyOiBcInN0cm9rZSBmaWxsXCIsIC8vIE9yZGVyIG9mIHBhaW50aW5nXHJcbiAgdGV4dFNoYWRvdzogZGV0YWlscy5ib3hTaGFkb3dcclxuICAgID8gYCR7ZGV0YWlscy5ib3hTaGFkb3cueH1weCAke2RldGFpbHMuYm94U2hhZG93Lnl9cHggJHtkZXRhaWxzLmJveFNoYWRvdy5ibHVyfXB4ICR7ZGV0YWlscy5ib3hTaGFkb3cuY29sb3J9YFxyXG4gICAgOiBcIlwiLFxyXG4gIGZvbnRGYW1pbHk6IGRldGFpbHMuZm9udEZhbWlseSB8fCBcIkFyaWFsXCIsXHJcbiAgZm9udFdlaWdodDogZGV0YWlscy5mb250V2VpZ2h0IHx8IFwibm9ybWFsXCIsXHJcbiAgbGluZUhlaWdodDogZGV0YWlscy5saW5lSGVpZ2h0IHx8IFwibm9ybWFsXCIsXHJcbiAgbGV0dGVyU3BhY2luZzogZGV0YWlscy5sZXR0ZXJTcGFjaW5nIHx8IFwibm9ybWFsXCIsXHJcbiAgd29yZFNwYWNpbmc6IGRldGFpbHMud29yZFNwYWNpbmcgfHwgXCJub3JtYWxcIixcclxuICB3b3JkV3JhcDogZGV0YWlscy53b3JkV3JhcCB8fCBcIm5vcm1hbFwiLFxyXG4gIHdvcmRCcmVhazogZGV0YWlscy53b3JkQnJlYWsgfHwgXCJub3JtYWxcIixcclxuICB0ZXh0VHJhbnNmb3JtOiBkZXRhaWxzLnRleHRUcmFuc2Zvcm0gfHwgXCJub25lXCIsXHJcbiAgZm9udFNpemU6IGRldGFpbHMuZm9udFNpemUgfHwgXCIxNnB4XCIsXHJcbiAgdGV4dEFsaWduOiBkZXRhaWxzLnRleHRBbGlnbiB8fCBcImxlZnRcIixcclxuICBjb2xvcjogZGV0YWlscy5jb2xvciB8fCBcIiMwMDAwMDBcIixcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlQ29udGFpbmVyU3R5bGVzID0gKFxyXG4gIGRldGFpbHM6IElUcmFja0l0ZW1bXCJkZXRhaWxzXCJdLFxyXG4gIGNyb3A6IElUcmFja0l0ZW1bXCJkZXRhaWxzXCJdW1wiY3JvcFwiXSA9IHt9LFxyXG4gIG92ZXJyaWRlczogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHt9LFxyXG4pOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgcG9pbnRlckV2ZW50czogXCJhdXRvXCIsXHJcbiAgICB0b3A6IGRldGFpbHMudG9wIHx8IDAsXHJcbiAgICBsZWZ0OiBkZXRhaWxzLmxlZnQgfHwgMCxcclxuICAgIHdpZHRoOiBjcm9wLndpZHRoIHx8IGRldGFpbHMud2lkdGggfHwgXCIxMDAlXCIsXHJcbiAgICBoZWlnaHQ6IGNyb3AuaGVpZ2h0IHx8IGRldGFpbHMuaGVpZ2h0IHx8IFwiYXV0b1wiLFxyXG4gICAgdHJhbnNmb3JtOiBkZXRhaWxzLnRyYW5zZm9ybSB8fCBcIm5vbmVcIixcclxuICAgIG9wYWNpdHk6IGRldGFpbHMub3BhY2l0eSAhPT0gdW5kZWZpbmVkID8gZGV0YWlscy5vcGFjaXR5IC8gMTAwIDogMSxcclxuICAgIHRyYW5zZm9ybU9yaWdpbjogZGV0YWlscy50cmFuc2Zvcm1PcmlnaW4gfHwgXCJjZW50ZXIgY2VudGVyXCIsXHJcbiAgICBmaWx0ZXI6IGBicmlnaHRuZXNzKCR7ZGV0YWlscy5icmlnaHRuZXNzfSUpIGJsdXIoJHtkZXRhaWxzLmJsdXJ9cHgpYCxcclxuICAgIHJvdGF0ZTogZGV0YWlscy5yb3RhdGUgfHwgXCIwZGVnXCIsXHJcbiAgICAuLi5vdmVycmlkZXMsIC8vIE1lcmdlIG92ZXJyaWRlcyBpbnRvIHRoZSBjYWxjdWxhdGVkIHN0eWxlc1xyXG4gIH07XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJjYWxjdWxhdGVDcm9wU3R5bGVzIiwiZGV0YWlscyIsImNyb3AiLCJ3aWR0aCIsImhlaWdodCIsInRvcCIsInkiLCJsZWZ0IiwieCIsInBvc2l0aW9uIiwiYm9yZGVyUmFkaXVzIiwiTWF0aCIsIm1pbiIsImNhbGN1bGF0ZU1lZGlhU3R5bGVzIiwicG9pbnRlckV2ZW50cyIsImJveFNoYWRvdyIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJibHVyIiwiY29sb3IiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImNhbGN1bGF0ZVRleHRTdHlsZXMiLCJ0ZXh0RGVjb3JhdGlvbiIsIldlYmtpdFRleHRTdHJva2UiLCJwYWludE9yZGVyIiwidGV4dFNoYWRvdyIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJ3b3JkU3BhY2luZyIsIndvcmRXcmFwIiwid29yZEJyZWFrIiwidGV4dFRyYW5zZm9ybSIsImZvbnRTaXplIiwidGV4dEFsaWduIiwiY2FsY3VsYXRlQ29udGFpbmVyU3R5bGVzIiwib3ZlcnJpZGVzIiwidHJhbnNmb3JtIiwib3BhY2l0eSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybU9yaWdpbiIsImJyaWdodG5lc3MiLCJyb3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/styles.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/scene/scene.tsx":
/*!*****************************************!*\
  !*** ./features/editor/scene/scene.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Scene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../player */ \"(app-pages-browser)/./features/editor/player/index.ts\");\n/* harmony import */ var _interactify_infinite_viewer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @interactify/infinite-viewer */ \"(app-pages-browser)/./node_modules/@interactify/infinite-viewer/dist/index.es.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _store_use_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store/use-store */ \"(app-pages-browser)/./features/editor/store/use-store.ts\");\n/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./empty */ \"(app-pages-browser)/./features/editor/scene/empty.tsx\");\n/* harmony import */ var _board__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./board */ \"(app-pages-browser)/./features/editor/scene/board.tsx\");\n/* harmony import */ var _hooks_use_zoom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hooks/use-zoom */ \"(app-pages-browser)/./features/editor/hooks/use-zoom.tsx\");\n/* harmony import */ var _interactions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./interactions */ \"(app-pages-browser)/./features/editor/scene/interactions.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n// Estilos CSS para el fondo con patrón de gradiente\nconst wandsBackgroundStyle = {\n    background: \"linear-gradient(135deg, #18141f 22px, #211a2c 22px, #211a2c 24px, transparent 24px, transparent 67px, #211a2c 67px, #211a2c 69px, transparent 69px),\\n               linear-gradient(225deg, #18141f 22px, #211a2c 22px, #211a2c 24px, transparent 24px, transparent 67px, #211a2c 67px, #211a2c 69px, transparent 69px)\",\n    backgroundColor: \"#18141f\",\n    backgroundSize: \"64px 64px\"\n};\nfunction Scene(param) {\n    let { stateManager } = param;\n    _s();\n    const viewerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { size, trackItemIds } = (0,_store_use_store__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n    const { zoom, handlePinch } = (0,_hooks_use_zoom__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(containerRef, viewerRef, size);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            position: \"relative\",\n            flex: 1\n        },\n        ref: containerRef,\n        children: [\n            trackItemIds.length === 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_empty__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n                lineNumber: 41,\n                columnNumber: 37\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_interactify_infinite_viewer__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                ref: viewerRef,\n                className: \"player-container\",\n                style: wandsBackgroundStyle,\n                displayHorizontalScroll: false,\n                displayVerticalScroll: false,\n                zoom: zoom,\n                usePinch: true,\n                pinchThreshold: 50,\n                onPinch: handlePinch,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_board__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                    size: size,\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_player__WEBPACK_IMPORTED_MODULE_1__.Player, {}, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n                            lineNumber: 54,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_interactions__WEBPACK_IMPORTED_MODULE_8__.SceneInteractions, {\n                            stateManager: stateManager,\n                            viewerRef: viewerRef,\n                            containerRef: containerRef,\n                            zoom: zoom,\n                            size: size\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n                            lineNumber: 55,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n                    lineNumber: 53,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n                lineNumber: 42,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\scene\\\\scene.tsx\",\n        lineNumber: 32,\n        columnNumber: 5\n    }, this);\n}\n_s(Scene, \"eh5RSy8kOk6T2lbHp47aJ5J94Vs=\", false, function() {\n    return [\n        _store_use_store__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        _hooks_use_zoom__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n    ];\n});\n_c = Scene;\nvar _c;\n$RefreshReg$(_c, \"Scene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9zY2VuZS9zY2VuZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUVtQztBQUNlO0FBQ1I7QUFDQTtBQUVUO0FBQ0E7QUFDTztBQUNXO0FBRW5ELG9EQUFvRDtBQUNwRCxNQUFNUSx1QkFBdUI7SUFDM0JDLFlBQWE7SUFFYkMsaUJBQWlCO0lBQ2pCQyxnQkFBZ0I7QUFDbEI7QUFFZSxTQUFTQyxNQUFNLEtBSTdCO1FBSjZCLEVBQzVCQyxZQUFZLEVBR2IsR0FKNkI7O0lBSzVCLE1BQU1DLFlBQVlaLDZDQUFNQSxDQUFTO0lBQ2pDLE1BQU1hLGVBQWViLDZDQUFNQSxDQUFpQjtJQUM1QyxNQUFNLEVBQUVjLElBQUksRUFBRUMsWUFBWSxFQUFFLEdBQUdkLDREQUFRQTtJQUN2QyxNQUFNLEVBQUVlLElBQUksRUFBRUMsV0FBVyxFQUFFLEdBQUdiLDJEQUFPQSxDQUFDUyxjQUFjRCxXQUFXRTtJQUUvRCxxQkFDRSw4REFBQ0k7UUFDQ0MsT0FBTztZQUNMQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsVUFBVTtZQUNWQyxNQUFNO1FBQ1I7UUFDQUMsS0FBS1g7O1lBRUpFLGFBQWFVLE1BQU0sS0FBSyxtQkFBSyw4REFBQ3ZCLDhDQUFVQTs7Ozs7MEJBQ3pDLDhEQUFDSCxvRUFBTUE7Z0JBQ0x5QixLQUFLWjtnQkFDTGMsV0FBVTtnQkFDVlAsT0FBT2I7Z0JBQ1BxQix5QkFBeUI7Z0JBQ3pCQyx1QkFBdUI7Z0JBQ3ZCWixNQUFNQTtnQkFDTmEsVUFBVTtnQkFDVkMsZ0JBQWdCO2dCQUNoQkMsU0FBU2Q7MEJBRVQsNEVBQUNkLDhDQUFVQTtvQkFBQ1csTUFBTUE7O3NDQUNoQiw4REFBQ2hCLDJDQUFNQTs7Ozs7c0NBQ1AsOERBQUNPLDREQUFpQkE7NEJBQ2hCTSxjQUFjQTs0QkFDZEMsV0FBV0E7NEJBQ1hDLGNBQWNBOzRCQUNkRyxNQUFNQTs0QkFDTkYsTUFBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTWxCO0dBN0N3Qko7O1FBT1NULHdEQUFRQTtRQUNURyx1REFBT0E7OztLQVJmTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9mZWF0dXJlcy9lZGl0b3Ivc2NlbmUvc2NlbmUudHN4Pzk5OTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuLi9wbGF5ZXJcIjtcbmltcG9ydCBWaWV3ZXIgZnJvbSBcIkBpbnRlcmFjdGlmeS9pbmZpbml0ZS12aWV3ZXJcIjtcbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdXNlU3RvcmUgZnJvbSBcIi4uL3N0b3JlL3VzZS1zdG9yZVwiO1xuaW1wb3J0IFN0YXRlTWFuYWdlciBmcm9tIFwiQGRlc2lnbmNvbWJvL3N0YXRlXCI7XG5pbXBvcnQgU2NlbmVFbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IFNjZW5lQm9hcmQgZnJvbSBcIi4vYm9hcmRcIjtcbmltcG9ydCB1c2Vab29tIGZyb20gXCIuLi9ob29rcy91c2Utem9vbVwiO1xuaW1wb3J0IHsgU2NlbmVJbnRlcmFjdGlvbnMgfSBmcm9tIFwiLi9pbnRlcmFjdGlvbnNcIjtcblxuLy8gRXN0aWxvcyBDU1MgcGFyYSBlbCBmb25kbyBjb24gcGF0csOzbiBkZSBncmFkaWVudGVcbmNvbnN0IHdhbmRzQmFja2dyb3VuZFN0eWxlID0ge1xuICBiYWNrZ3JvdW5kOiBgbGluZWFyLWdyYWRpZW50KDEzNWRlZywgIzE4MTQxZiAyMnB4LCAjMjExYTJjIDIycHgsICMyMTFhMmMgMjRweCwgdHJhbnNwYXJlbnQgMjRweCwgdHJhbnNwYXJlbnQgNjdweCwgIzIxMWEyYyA2N3B4LCAjMjExYTJjIDY5cHgsIHRyYW5zcGFyZW50IDY5cHgpLFxuICAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KDIyNWRlZywgIzE4MTQxZiAyMnB4LCAjMjExYTJjIDIycHgsICMyMTFhMmMgMjRweCwgdHJhbnNwYXJlbnQgMjRweCwgdHJhbnNwYXJlbnQgNjdweCwgIzIxMWEyYyA2N3B4LCAjMjExYTJjIDY5cHgsIHRyYW5zcGFyZW50IDY5cHgpYCxcbiAgYmFja2dyb3VuZENvbG9yOiAnIzE4MTQxZicsXG4gIGJhY2tncm91bmRTaXplOiAnNjRweCA2NHB4Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNjZW5lKHtcbiAgc3RhdGVNYW5hZ2VyLFxufToge1xuICBzdGF0ZU1hbmFnZXI6IFN0YXRlTWFuYWdlcjtcbn0pIHtcbiAgY29uc3Qgdmlld2VyUmVmID0gdXNlUmVmPFZpZXdlcj4obnVsbCk7XG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHsgc2l6ZSwgdHJhY2tJdGVtSWRzIH0gPSB1c2VTdG9yZSgpO1xuICBjb25zdCB7IHpvb20sIGhhbmRsZVBpbmNoIH0gPSB1c2Vab29tKGNvbnRhaW5lclJlZiwgdmlld2VyUmVmLCBzaXplKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgZmxleDogMSxcbiAgICAgIH19XG4gICAgICByZWY9e2NvbnRhaW5lclJlZn1cbiAgICA+XG4gICAgICB7dHJhY2tJdGVtSWRzLmxlbmd0aCA9PT0gMCAmJiA8U2NlbmVFbXB0eSAvPn1cbiAgICAgIDxWaWV3ZXJcbiAgICAgICAgcmVmPXt2aWV3ZXJSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT1cInBsYXllci1jb250YWluZXJcIlxuICAgICAgICBzdHlsZT17d2FuZHNCYWNrZ3JvdW5kU3R5bGV9XG4gICAgICAgIGRpc3BsYXlIb3Jpem9udGFsU2Nyb2xsPXtmYWxzZX1cbiAgICAgICAgZGlzcGxheVZlcnRpY2FsU2Nyb2xsPXtmYWxzZX1cbiAgICAgICAgem9vbT17em9vbX1cbiAgICAgICAgdXNlUGluY2g9e3RydWV9XG4gICAgICAgIHBpbmNoVGhyZXNob2xkPXs1MH1cbiAgICAgICAgb25QaW5jaD17aGFuZGxlUGluY2h9XG4gICAgICA+XG4gICAgICAgIDxTY2VuZUJvYXJkIHNpemU9e3NpemV9PlxuICAgICAgICAgIDxQbGF5ZXIgLz5cbiAgICAgICAgICA8U2NlbmVJbnRlcmFjdGlvbnNcbiAgICAgICAgICAgIHN0YXRlTWFuYWdlcj17c3RhdGVNYW5hZ2VyfVxuICAgICAgICAgICAgdmlld2VyUmVmPXt2aWV3ZXJSZWZ9XG4gICAgICAgICAgICBjb250YWluZXJSZWY9e2NvbnRhaW5lclJlZn1cbiAgICAgICAgICAgIHpvb209e3pvb219XG4gICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU2NlbmVCb2FyZD5cbiAgICAgIDwvVmlld2VyPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlBsYXllciIsIlZpZXdlciIsInVzZVJlZiIsInVzZVN0b3JlIiwiU2NlbmVFbXB0eSIsIlNjZW5lQm9hcmQiLCJ1c2Vab29tIiwiU2NlbmVJbnRlcmFjdGlvbnMiLCJ3YW5kc0JhY2tncm91bmRTdHlsZSIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kU2l6ZSIsIlNjZW5lIiwic3RhdGVNYW5hZ2VyIiwidmlld2VyUmVmIiwiY29udGFpbmVyUmVmIiwic2l6ZSIsInRyYWNrSXRlbUlkcyIsInpvb20iLCJoYW5kbGVQaW5jaCIsImRpdiIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJwb3NpdGlvbiIsImZsZXgiLCJyZWYiLCJsZW5ndGgiLCJjbGFzc05hbWUiLCJkaXNwbGF5SG9yaXpvbnRhbFNjcm9sbCIsImRpc3BsYXlWZXJ0aWNhbFNjcm9sbCIsInVzZVBpbmNoIiwicGluY2hUaHJlc2hvbGQiLCJvblBpbmNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/scene/scene.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/utils/frames.ts":
/*!*****************************************!*\
  !*** ./features/editor/utils/frames.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateFrames: function() { return /* binding */ calculateFrames; }\n/* harmony export */ });\nconst calculateFrames = (display, fps)=>{\n    const from = display.from / 1000 * fps;\n    const durationInFrames = display.to / 1000 * fps - from;\n    return {\n        from,\n        durationInFrames\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci91dGlscy9mcmFtZXMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGtCQUFrQixDQUM3QkMsU0FDQUM7SUFFQSxNQUFNQyxPQUFPLFFBQVNBLElBQUksR0FBRyxPQUFRRDtJQUNyQyxNQUFNRSxtQkFBbUIsUUFBU0MsRUFBRSxHQUFHLE9BQVFILE1BQU1DO0lBQ3JELE9BQU87UUFBRUE7UUFBTUM7SUFBaUI7QUFDbEMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9mZWF0dXJlcy9lZGl0b3IvdXRpbHMvZnJhbWVzLnRzPzJiYTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUZyYW1lcyA9IChcclxuICBkaXNwbGF5OiB7IGZyb206IG51bWJlcjsgdG86IG51bWJlciB9LFxyXG4gIGZwczogbnVtYmVyLFxyXG4pID0+IHtcclxuICBjb25zdCBmcm9tID0gKGRpc3BsYXkuZnJvbSAvIDEwMDApICogZnBzO1xyXG4gIGNvbnN0IGR1cmF0aW9uSW5GcmFtZXMgPSAoZGlzcGxheS50byAvIDEwMDApICogZnBzIC0gZnJvbTtcclxuICByZXR1cm4geyBmcm9tLCBkdXJhdGlvbkluRnJhbWVzIH07XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJjYWxjdWxhdGVGcmFtZXMiLCJkaXNwbGF5IiwiZnBzIiwiZnJvbSIsImR1cmF0aW9uSW5GcmFtZXMiLCJ0byJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/utils/frames.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/utils/get-animations.tsx":
/*!**************************************************!*\
  !*** ./features/editor/utils/get-animations.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnimations: function() { return /* binding */ getAnimations; }\n/* harmony export */ });\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/index.mjs\");\n\nconst getAnimations = (animation, item)=>{\n    let animationIn = null;\n    let animationOut = null;\n    if (animation === null || animation === void 0 ? void 0 : animation.in) {\n        animationIn = [];\n        animation.in.composition.forEach((comp)=>{\n            if (animation.in.name.includes(\"slide\")) {\n                animationIn.push(getSlideAnimation(animation.in.name, comp, item));\n            } else {\n                animationIn.push({\n                    property: comp.property,\n                    from: comp.from,\n                    to: comp.to,\n                    durationInFrames: comp.durationInFrames,\n                    ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[comp.easing]\n                });\n            }\n        });\n    }\n    if (animation === null || animation === void 0 ? void 0 : animation.out) {\n        animationOut = [];\n        animation.out.composition.forEach((comp)=>{\n            if (animation.out.name.includes(\"slide\")) {\n                animationOut.push(getSlideAnimation(animation.out.name, comp, item));\n            } else {\n                animationOut.push({\n                    property: comp.property,\n                    from: comp.from,\n                    to: comp.to,\n                    durationInFrames: comp.durationInFrames,\n                    ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[comp.easing]\n                });\n            }\n        });\n    }\n    return {\n        animationIn,\n        animationOut\n    };\n};\nconst getSlideAnimation = (type, anim, item)=>{\n    const transformString = item.details.transform;\n    const scaleMatch = /scale\\(([^,]+), ([^)]+)\\)/.exec(transformString);\n    const scale = scaleMatch ? parseFloat(scaleMatch[1]) : 1;\n    if (type === \"slideInRight\" || type === \"slideOutLeft\") {\n        const commonValue = -parseFloat(item.details.left) - item.details.width / scale;\n        const from = type.includes(\"In\") ? commonValue : anim.from;\n        const to = type.includes(\"In\") ? anim.to : commonValue;\n        return {\n            property: anim.property,\n            from,\n            to,\n            durationInFrames: anim.durationInFrames,\n            ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[anim.easing]\n        };\n    } else if (type === \"slideInLeft\" || type === \"slideOutRight\") {\n        const commonValue = parseFloat(item.details.left) + item.details.width / scale;\n        const from = type.includes(\"In\") ? commonValue : anim.from;\n        const to = type.includes(\"In\") ? anim.to : commonValue;\n        return {\n            property: anim.property,\n            from,\n            to,\n            durationInFrames: anim.durationInFrames,\n            ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[anim.easing]\n        };\n    } else if (type === \"slideInBottom\" || type === \"slideOutTop\") {\n        const commonValue = -parseFloat(item.details.top) - item.details.height / scale;\n        const from = type.includes(\"In\") ? commonValue : anim.from;\n        const to = type.includes(\"In\") ? anim.to : commonValue;\n        return {\n            property: anim.property,\n            from,\n            to,\n            durationInFrames: anim.durationInFrames,\n            ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[anim.easing]\n        };\n    } else if (type === \"slideInTop\" || type === \"slideOutBottom\") {\n        const commonValue = parseFloat(item.details.top) + item.details.height / scale;\n        const from = type.includes(\"In\") ? commonValue : anim.from;\n        const to = type.includes(\"In\") ? anim.to : commonValue;\n        return {\n            property: anim.property,\n            from,\n            to,\n            durationInFrames: anim.durationInFrames,\n            ease: remotion__WEBPACK_IMPORTED_MODULE_0__.Easing[anim.easing]\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/utils/get-animations.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/utils/text.ts":
/*!***************************************!*\
  !*** ./features/editor/utils/text.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateTextHeight: function() { return /* binding */ calculateTextHeight; }\n/* harmony export */ });\nconst calculateTextHeight = (props)=>{\n    const { family, fontSize, width, lineHeight, letterSpacing, textShadow, webkitTextStroke, fontWeight, id } = props;\n    const div = document.createElement(\"div\");\n    div.style.visibility = \"hidden\";\n    div.style.whiteSpace = \"pre-wrap\";\n    div.style.overflowWrap = \"break-word\";\n    div.style.width = width;\n    div.style.fontSize = fontSize;\n    div.style.fontFamily = family;\n    div.style.lineHeight = lineHeight;\n    div.style.height = \"fit-content\";\n    div.style.fontWeight = fontWeight;\n    div.style.letterSpacing = letterSpacing;\n    div.style.position = \"absolute\";\n    div.style.top = \"100\";\n    div.style.left = \"100\";\n    div.style.webkitTextStroke = webkitTextStroke;\n    div.style.textShadow = textShadow;\n    // const minChars = text.split(' ').reduce((acc, cur) => cur.length > acc.length ? cur : acc).length\n    div.style.minWidth = \"\".concat(1, \"ch\");\n    const compositionLayer = document.querySelector('[data-text-id=\"'.concat(id, '\"]'));\n    div.innerHTML = compositionLayer.innerHTML;\n    document.body.appendChild(div);\n    const newHeight = div.clientHeight;\n    document.body.removeChild(div);\n    return newHeight;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci91dGlscy90ZXh0LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFlTyxNQUFNQSxzQkFBc0IsQ0FBQ0M7SUFDbEMsTUFBTSxFQUNKQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsS0FBSyxFQUNMQyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsVUFBVSxFQUNWQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDVkMsRUFBRSxFQUNILEdBQUdUO0lBRUosTUFBTVUsTUFBTUMsU0FBU0MsYUFBYSxDQUFDO0lBQ25DRixJQUFJRyxLQUFLLENBQUNDLFVBQVUsR0FBRztJQUN2QkosSUFBSUcsS0FBSyxDQUFDRSxVQUFVLEdBQUc7SUFDdkJMLElBQUlHLEtBQUssQ0FBQ0csWUFBWSxHQUFHO0lBRXpCTixJQUFJRyxLQUFLLENBQUNWLEtBQUssR0FBR0E7SUFDbEJPLElBQUlHLEtBQUssQ0FBQ1gsUUFBUSxHQUFHQTtJQUNyQlEsSUFBSUcsS0FBSyxDQUFDSSxVQUFVLEdBQUdoQjtJQUN2QlMsSUFBSUcsS0FBSyxDQUFDVCxVQUFVLEdBQUdBO0lBQ3ZCTSxJQUFJRyxLQUFLLENBQUNLLE1BQU0sR0FBRztJQUNuQlIsSUFBSUcsS0FBSyxDQUFDTCxVQUFVLEdBQUdBO0lBQ3ZCRSxJQUFJRyxLQUFLLENBQUNSLGFBQWEsR0FBR0E7SUFFMUJLLElBQUlHLEtBQUssQ0FBQ00sUUFBUSxHQUFHO0lBQ3JCVCxJQUFJRyxLQUFLLENBQUNPLEdBQUcsR0FBRztJQUNoQlYsSUFBSUcsS0FBSyxDQUFDUSxJQUFJLEdBQUc7SUFFakJYLElBQUlHLEtBQUssQ0FBQ04sZ0JBQWdCLEdBQUdBO0lBQzdCRyxJQUFJRyxLQUFLLENBQUNQLFVBQVUsR0FBR0E7SUFFdkIsb0dBQW9HO0lBRXBHSSxJQUFJRyxLQUFLLENBQUNTLFFBQVEsR0FBRyxHQUFLLE9BQUYsR0FBRTtJQUUxQixNQUFNQyxtQkFBbUJaLFNBQVNhLGFBQWEsQ0FBQyxrQkFBcUIsT0FBSGYsSUFBRztJQUVyRUMsSUFBSWUsU0FBUyxHQUFHRixpQkFBa0JFLFNBQVM7SUFFM0NkLFNBQVNlLElBQUksQ0FBQ0MsV0FBVyxDQUFDakI7SUFFMUIsTUFBTWtCLFlBQVlsQixJQUFJbUIsWUFBWTtJQUVsQ2xCLFNBQVNlLElBQUksQ0FBQ0ksV0FBVyxDQUFDcEI7SUFFMUIsT0FBT2tCO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9mZWF0dXJlcy9lZGl0b3IvdXRpbHMvdGV4dC50cz84ODU2Il0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgQmFzZVByb3BzID0ge1xyXG4gIGZhbWlseTogc3RyaW5nO1xyXG4gIGZvbnRTaXplOiBzdHJpbmc7XHJcbiAgbGluZUhlaWdodDogc3RyaW5nO1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBmb250V2VpZ2h0OiBzdHJpbmc7XHJcbiAgbGV0dGVyU3BhY2luZzogc3RyaW5nO1xyXG4gIHRleHRTaGFkb3c6IHN0cmluZztcclxuICB3ZWJraXRUZXh0U3Ryb2tlOiBzdHJpbmc7XHJcbiAgaWQ6IHN0cmluZztcclxufTtcclxuXHJcbnR5cGUgVGV4dEhlaWdodFByb3BzID0gQmFzZVByb3BzICYge1xyXG4gIHdpZHRoOiBzdHJpbmc7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUZXh0SGVpZ2h0ID0gKHByb3BzOiBUZXh0SGVpZ2h0UHJvcHMpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBmYW1pbHksXHJcbiAgICBmb250U2l6ZSxcclxuICAgIHdpZHRoLFxyXG4gICAgbGluZUhlaWdodCxcclxuICAgIGxldHRlclNwYWNpbmcsXHJcbiAgICB0ZXh0U2hhZG93LFxyXG4gICAgd2Via2l0VGV4dFN0cm9rZSxcclxuICAgIGZvbnRXZWlnaHQsXHJcbiAgICBpZCxcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZGl2LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gIGRpdi5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xyXG4gIGRpdi5zdHlsZS5vdmVyZmxvd1dyYXAgPSBcImJyZWFrLXdvcmRcIjtcclxuXHJcbiAgZGl2LnN0eWxlLndpZHRoID0gd2lkdGg7XHJcbiAgZGl2LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemU7XHJcbiAgZGl2LnN0eWxlLmZvbnRGYW1pbHkgPSBmYW1pbHk7XHJcbiAgZGl2LnN0eWxlLmxpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0O1xyXG4gIGRpdi5zdHlsZS5oZWlnaHQgPSBcImZpdC1jb250ZW50XCI7XHJcbiAgZGl2LnN0eWxlLmZvbnRXZWlnaHQgPSBmb250V2VpZ2h0O1xyXG4gIGRpdi5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gbGV0dGVyU3BhY2luZztcclxuXHJcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gIGRpdi5zdHlsZS50b3AgPSBcIjEwMFwiO1xyXG4gIGRpdi5zdHlsZS5sZWZ0ID0gXCIxMDBcIjtcclxuXHJcbiAgZGl2LnN0eWxlLndlYmtpdFRleHRTdHJva2UgPSB3ZWJraXRUZXh0U3Ryb2tlO1xyXG4gIGRpdi5zdHlsZS50ZXh0U2hhZG93ID0gdGV4dFNoYWRvdztcclxuXHJcbiAgLy8gY29uc3QgbWluQ2hhcnMgPSB0ZXh0LnNwbGl0KCcgJykucmVkdWNlKChhY2MsIGN1cikgPT4gY3VyLmxlbmd0aCA+IGFjYy5sZW5ndGggPyBjdXIgOiBhY2MpLmxlbmd0aFxyXG5cclxuICBkaXYuc3R5bGUubWluV2lkdGggPSBgJHsxfWNoYDtcclxuXHJcbiAgY29uc3QgY29tcG9zaXRpb25MYXllciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRleHQtaWQ9XCIke2lkfVwiXWApO1xyXG5cclxuICBkaXYuaW5uZXJIVE1MID0gY29tcG9zaXRpb25MYXllciEuaW5uZXJIVE1MO1xyXG5cclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gIGNvbnN0IG5ld0hlaWdodCA9IGRpdi5jbGllbnRIZWlnaHQ7XHJcblxyXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcclxuXHJcbiAgcmV0dXJuIG5ld0hlaWdodDtcclxufTtcclxuIl0sIm5hbWVzIjpbImNhbGN1bGF0ZVRleHRIZWlnaHQiLCJwcm9wcyIsImZhbWlseSIsImZvbnRTaXplIiwid2lkdGgiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsInRleHRTaGFkb3ciLCJ3ZWJraXRUZXh0U3Ryb2tlIiwiZm9udFdlaWdodCIsImlkIiwiZGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsIm92ZXJmbG93V3JhcCIsImZvbnRGYW1pbHkiLCJoZWlnaHQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJtaW5XaWR0aCIsImNvbXBvc2l0aW9uTGF5ZXIiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiYm9keSIsImFwcGVuZENoaWxkIiwibmV3SGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicmVtb3ZlQ2hpbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/utils/text.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/utils/track-items.ts":
/*!**********************************************!*\
  !*** ./features/editor/utils/track-items.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   groupTrackItems: function() { return /* binding */ groupTrackItems; }\n/* harmony export */ });\nconst groupTrackItems = (data)=>{\n    const { trackItemIds, transitionsMap, trackItemsMap } = data;\n    // Create a map to track which items are part of transitions\n    const itemTransitionMap = new Map();\n    // Initialize transition maps\n    Object.values(transitionsMap).forEach((transition)=>{\n        var _itemTransitionMap_get, _itemTransitionMap_get1;\n        const { fromId, toId, kind } = transition;\n        if (kind === \"none\") return; // Skip transitions of kind 'none'\n        if (!itemTransitionMap.has(fromId)) itemTransitionMap.set(fromId, []);\n        if (!itemTransitionMap.has(toId)) itemTransitionMap.set(toId, []);\n        (_itemTransitionMap_get = itemTransitionMap.get(fromId)) === null || _itemTransitionMap_get === void 0 ? void 0 : _itemTransitionMap_get.push(transition);\n        (_itemTransitionMap_get1 = itemTransitionMap.get(toId)) === null || _itemTransitionMap_get1 === void 0 ? void 0 : _itemTransitionMap_get1.push(transition);\n    });\n    const groups = [];\n    const processed = new Set();\n    // Helper function to build a connected group starting from an item\n    const buildGroup = (startItemId)=>{\n        const group = [];\n        let currentId = startItemId;\n        while(currentId){\n            if (processed.has(currentId)) break;\n            processed.add(currentId);\n            const currentItem = trackItemsMap[currentId];\n            group.push(currentItem);\n            // Find transition from this item\n            const transition = Object.values(transitionsMap).find((t)=>t.fromId === currentId && t.kind !== \"none\");\n            if (!transition) break;\n            group.push(transition);\n            currentId = transition.toId;\n        }\n        return group;\n    };\n    // Process all items\n    for (const itemId of trackItemIds){\n        if (processed.has(itemId)) continue;\n        // If item is not part of any transition or is the start of a sequence\n        if (!itemTransitionMap.has(itemId) || !Object.values(transitionsMap).some((t)=>t.toId === itemId)) {\n            const group = buildGroup(itemId);\n            if (group.length > 0) {\n                groups.push(group);\n            }\n        }\n    }\n    // Sort items within each group by display.from\n    groups.forEach((group)=>{\n        group.sort((a, b)=>{\n            if (\"display\" in a && \"display\" in b) {\n                return a.display.from - b.display.from;\n            }\n            return 0;\n        });\n    });\n    return groups;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci91dGlscy90cmFjay1pdGVtcy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBSU8sTUFBTUEsa0JBQWtCLENBQUNDO0lBSzlCLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEVBQUVDLGFBQWEsRUFBRSxHQUFHSDtJQUV4RCw0REFBNEQ7SUFDNUQsTUFBTUksb0JBQW9CLElBQUlDO0lBRTlCLDZCQUE2QjtJQUM3QkMsT0FBT0MsTUFBTSxDQUFDTCxnQkFBZ0JNLE9BQU8sQ0FBQyxDQUFDQztZQUtyQ0wsd0JBQ0FBO1FBTEEsTUFBTSxFQUFFTSxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdIO1FBQy9CLElBQUlHLFNBQVMsUUFBUSxRQUFRLGtDQUFrQztRQUMvRCxJQUFJLENBQUNSLGtCQUFrQlMsR0FBRyxDQUFDSCxTQUFTTixrQkFBa0JVLEdBQUcsQ0FBQ0osUUFBUSxFQUFFO1FBQ3BFLElBQUksQ0FBQ04sa0JBQWtCUyxHQUFHLENBQUNGLE9BQU9QLGtCQUFrQlUsR0FBRyxDQUFDSCxNQUFNLEVBQUU7U0FDaEVQLHlCQUFBQSxrQkFBa0JXLEdBQUcsQ0FBQ0wscUJBQXRCTiw2Q0FBQUEsdUJBQStCWSxJQUFJLENBQUNQO1NBQ3BDTCwwQkFBQUEsa0JBQWtCVyxHQUFHLENBQUNKLG1CQUF0QlAsOENBQUFBLHdCQUE2QlksSUFBSSxDQUFDUDtJQUNwQztJQUVBLE1BQU1RLFNBQTJCLEVBQUU7SUFDbkMsTUFBTUMsWUFBWSxJQUFJQztJQUV0QixtRUFBbUU7SUFDbkUsTUFBTUMsYUFBYSxDQUFDQztRQUNsQixNQUFNQyxRQUF3QixFQUFFO1FBQ2hDLElBQUlDLFlBQVlGO1FBRWhCLE1BQU9FLFVBQVc7WUFDaEIsSUFBSUwsVUFBVUwsR0FBRyxDQUFDVSxZQUFZO1lBRTlCTCxVQUFVTSxHQUFHLENBQUNEO1lBQ2QsTUFBTUUsY0FBY3RCLGFBQWEsQ0FBQ29CLFVBQVU7WUFDNUNELE1BQU1OLElBQUksQ0FBQ1M7WUFFWCxpQ0FBaUM7WUFDakMsTUFBTWhCLGFBQWFILE9BQU9DLE1BQU0sQ0FBQ0wsZ0JBQWdCd0IsSUFBSSxDQUNuRCxDQUFDQyxJQUFNQSxFQUFFakIsTUFBTSxLQUFLYSxhQUFhSSxFQUFFZixJQUFJLEtBQUs7WUFFOUMsSUFBSSxDQUFDSCxZQUFZO1lBRWpCYSxNQUFNTixJQUFJLENBQUNQO1lBQ1hjLFlBQVlkLFdBQVdFLElBQUk7UUFDN0I7UUFFQSxPQUFPVztJQUNUO0lBRUEsb0JBQW9CO0lBQ3BCLEtBQUssTUFBTU0sVUFBVTNCLGFBQWM7UUFDakMsSUFBSWlCLFVBQVVMLEdBQUcsQ0FBQ2UsU0FBUztRQUUzQixzRUFBc0U7UUFDdEUsSUFDRSxDQUFDeEIsa0JBQWtCUyxHQUFHLENBQUNlLFdBQ3ZCLENBQUN0QixPQUFPQyxNQUFNLENBQUNMLGdCQUFnQjJCLElBQUksQ0FBQyxDQUFDRixJQUFNQSxFQUFFaEIsSUFBSSxLQUFLaUIsU0FDdEQ7WUFDQSxNQUFNTixRQUFRRixXQUFXUTtZQUN6QixJQUFJTixNQUFNUSxNQUFNLEdBQUcsR0FBRztnQkFDcEJiLE9BQU9ELElBQUksQ0FBQ007WUFDZDtRQUNGO0lBQ0Y7SUFFQSwrQ0FBK0M7SUFDL0NMLE9BQU9ULE9BQU8sQ0FBQyxDQUFDYztRQUNkQSxNQUFNUyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7WUFDYixJQUFJLGFBQWFELEtBQUssYUFBYUMsR0FBRztnQkFDcEMsT0FBT0QsRUFBRUUsT0FBTyxDQUFDQyxJQUFJLEdBQUdGLEVBQUVDLE9BQU8sQ0FBQ0MsSUFBSTtZQUN4QztZQUNBLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT2xCO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9mZWF0dXJlcy9lZGl0b3IvdXRpbHMvdHJhY2staXRlbXMudHM/NGIyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVHJhY2tJdGVtc01hcCwgSVRyYW5zaXRpb24sIElUcmFja0l0ZW0gfSBmcm9tIFwiQGRlc2lnbmNvbWJvL3R5cGVzXCI7XHJcblxyXG50eXBlIEdyb3VwRWxlbWVudCA9IElUcmFja0l0ZW0gfCBJVHJhbnNpdGlvbjtcclxuXHJcbmV4cG9ydCBjb25zdCBncm91cFRyYWNrSXRlbXMgPSAoZGF0YToge1xyXG4gIHRyYWNrSXRlbUlkczogc3RyaW5nW107XHJcbiAgdHJhbnNpdGlvbnNNYXA6IFJlY29yZDxzdHJpbmcsIElUcmFuc2l0aW9uPjtcclxuICB0cmFja0l0ZW1zTWFwOiBJVHJhY2tJdGVtc01hcDtcclxufSk6IEdyb3VwRWxlbWVudFtdW10gPT4ge1xyXG4gIGNvbnN0IHsgdHJhY2tJdGVtSWRzLCB0cmFuc2l0aW9uc01hcCwgdHJhY2tJdGVtc01hcCB9ID0gZGF0YTtcclxuXHJcbiAgLy8gQ3JlYXRlIGEgbWFwIHRvIHRyYWNrIHdoaWNoIGl0ZW1zIGFyZSBwYXJ0IG9mIHRyYW5zaXRpb25zXHJcbiAgY29uc3QgaXRlbVRyYW5zaXRpb25NYXAgPSBuZXcgTWFwPHN0cmluZywgSVRyYW5zaXRpb25bXT4oKTtcclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSB0cmFuc2l0aW9uIG1hcHNcclxuICBPYmplY3QudmFsdWVzKHRyYW5zaXRpb25zTWFwKS5mb3JFYWNoKCh0cmFuc2l0aW9uKSA9PiB7XHJcbiAgICBjb25zdCB7IGZyb21JZCwgdG9JZCwga2luZCB9ID0gdHJhbnNpdGlvbjtcclxuICAgIGlmIChraW5kID09PSBcIm5vbmVcIikgcmV0dXJuOyAvLyBTa2lwIHRyYW5zaXRpb25zIG9mIGtpbmQgJ25vbmUnXHJcbiAgICBpZiAoIWl0ZW1UcmFuc2l0aW9uTWFwLmhhcyhmcm9tSWQpKSBpdGVtVHJhbnNpdGlvbk1hcC5zZXQoZnJvbUlkLCBbXSk7XHJcbiAgICBpZiAoIWl0ZW1UcmFuc2l0aW9uTWFwLmhhcyh0b0lkKSkgaXRlbVRyYW5zaXRpb25NYXAuc2V0KHRvSWQsIFtdKTtcclxuICAgIGl0ZW1UcmFuc2l0aW9uTWFwLmdldChmcm9tSWQpPy5wdXNoKHRyYW5zaXRpb24pO1xyXG4gICAgaXRlbVRyYW5zaXRpb25NYXAuZ2V0KHRvSWQpPy5wdXNoKHRyYW5zaXRpb24pO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBncm91cHM6IEdyb3VwRWxlbWVudFtdW10gPSBbXTtcclxuICBjb25zdCBwcm9jZXNzZWQgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGJ1aWxkIGEgY29ubmVjdGVkIGdyb3VwIHN0YXJ0aW5nIGZyb20gYW4gaXRlbVxyXG4gIGNvbnN0IGJ1aWxkR3JvdXAgPSAoc3RhcnRJdGVtSWQ6IHN0cmluZyk6IEdyb3VwRWxlbWVudFtdID0+IHtcclxuICAgIGNvbnN0IGdyb3VwOiBHcm91cEVsZW1lbnRbXSA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnRJZCA9IHN0YXJ0SXRlbUlkO1xyXG5cclxuICAgIHdoaWxlIChjdXJyZW50SWQpIHtcclxuICAgICAgaWYgKHByb2Nlc3NlZC5oYXMoY3VycmVudElkKSkgYnJlYWs7XHJcblxyXG4gICAgICBwcm9jZXNzZWQuYWRkKGN1cnJlbnRJZCk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gdHJhY2tJdGVtc01hcFtjdXJyZW50SWRdO1xyXG4gICAgICBncm91cC5wdXNoKGN1cnJlbnRJdGVtKTtcclxuXHJcbiAgICAgIC8vIEZpbmQgdHJhbnNpdGlvbiBmcm9tIHRoaXMgaXRlbVxyXG4gICAgICBjb25zdCB0cmFuc2l0aW9uID0gT2JqZWN0LnZhbHVlcyh0cmFuc2l0aW9uc01hcCkuZmluZChcclxuICAgICAgICAodCkgPT4gdC5mcm9tSWQgPT09IGN1cnJlbnRJZCAmJiB0LmtpbmQgIT09IFwibm9uZVwiLCAvLyBGaWx0ZXIgaGVyZVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoIXRyYW5zaXRpb24pIGJyZWFrO1xyXG5cclxuICAgICAgZ3JvdXAucHVzaCh0cmFuc2l0aW9uKTtcclxuICAgICAgY3VycmVudElkID0gdHJhbnNpdGlvbi50b0lkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBncm91cDtcclxuICB9O1xyXG5cclxuICAvLyBQcm9jZXNzIGFsbCBpdGVtc1xyXG4gIGZvciAoY29uc3QgaXRlbUlkIG9mIHRyYWNrSXRlbUlkcykge1xyXG4gICAgaWYgKHByb2Nlc3NlZC5oYXMoaXRlbUlkKSkgY29udGludWU7XHJcblxyXG4gICAgLy8gSWYgaXRlbSBpcyBub3QgcGFydCBvZiBhbnkgdHJhbnNpdGlvbiBvciBpcyB0aGUgc3RhcnQgb2YgYSBzZXF1ZW5jZVxyXG4gICAgaWYgKFxyXG4gICAgICAhaXRlbVRyYW5zaXRpb25NYXAuaGFzKGl0ZW1JZCkgfHxcclxuICAgICAgIU9iamVjdC52YWx1ZXModHJhbnNpdGlvbnNNYXApLnNvbWUoKHQpID0+IHQudG9JZCA9PT0gaXRlbUlkKVxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnN0IGdyb3VwID0gYnVpbGRHcm91cChpdGVtSWQpO1xyXG4gICAgICBpZiAoZ3JvdXAubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGdyb3Vwcy5wdXNoKGdyb3VwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU29ydCBpdGVtcyB3aXRoaW4gZWFjaCBncm91cCBieSBkaXNwbGF5LmZyb21cclxuICBncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcclxuICAgIGdyb3VwLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgaWYgKFwiZGlzcGxheVwiIGluIGEgJiYgXCJkaXNwbGF5XCIgaW4gYikge1xyXG4gICAgICAgIHJldHVybiBhLmRpc3BsYXkuZnJvbSAtIGIuZGlzcGxheS5mcm9tO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBncm91cHM7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJncm91cFRyYWNrSXRlbXMiLCJkYXRhIiwidHJhY2tJdGVtSWRzIiwidHJhbnNpdGlvbnNNYXAiLCJ0cmFja0l0ZW1zTWFwIiwiaXRlbVRyYW5zaXRpb25NYXAiLCJNYXAiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwidHJhbnNpdGlvbiIsImZyb21JZCIsInRvSWQiLCJraW5kIiwiaGFzIiwic2V0IiwiZ2V0IiwicHVzaCIsImdyb3VwcyIsInByb2Nlc3NlZCIsIlNldCIsImJ1aWxkR3JvdXAiLCJzdGFydEl0ZW1JZCIsImdyb3VwIiwiY3VycmVudElkIiwiYWRkIiwiY3VycmVudEl0ZW0iLCJmaW5kIiwidCIsIml0ZW1JZCIsInNvbWUiLCJsZW5ndGgiLCJzb3J0IiwiYSIsImIiLCJkaXNwbGF5IiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/utils/track-items.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@interactify/infinite-viewer/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@interactify/infinite-viewer/dist/index.es.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLASS_NAME: function() { return /* binding */ qe; },\n/* harmony export */   EVENTS: function() { return /* binding */ Ge; },\n/* harmony export */   METHODS: function() { return /* binding */ wn; },\n/* harmony export */   OPTIONS: function() { return /* binding */ vn; },\n/* harmony export */   PROPERTIES: function() { return /* binding */ Gt; },\n/* harmony export */   \"default\": function() { return /* binding */ Cn; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar Tr = Object.defineProperty;\nvar zr = (i, n, t)=>n in i ? Tr(i, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : i[n] = t;\nvar _ = (i, n, t)=>zr(i, typeof n != \"symbol\" ? n + \"\" : n, t);\n\n\nvar Lt = {\n    exports: {}\n}, ht = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var pe;\nfunction Dr() {\n    if (pe) return ht;\n    pe = 1;\n    var i = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, e = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, o = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function a(l, h, u) {\n        var d, v = {}, c = null, m = null;\n        u !== void 0 && (c = \"\" + u), h.key !== void 0 && (c = \"\" + h.key), h.ref !== void 0 && (m = h.ref);\n        for(d in h)r.call(h, d) && !o.hasOwnProperty(d) && (v[d] = h[d]);\n        if (l && l.defaultProps) for(d in h = l.defaultProps, h)v[d] === void 0 && (v[d] = h[d]);\n        return {\n            $$typeof: n,\n            type: l,\n            key: c,\n            ref: m,\n            props: v,\n            _owner: e.current\n        };\n    }\n    return ht.Fragment = t, ht.jsx = a, ht.jsxs = a, ht;\n}\n_c = Dr;\nvar ft = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var ge;\nfunction Yr() {\n    return ge || (ge = 1,  true && function() {\n        var i = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), e = Symbol.for(\"react.strict_mode\"), o = Symbol.for(\"react.profiler\"), a = Symbol.for(\"react.provider\"), l = Symbol.for(\"react.context\"), h = Symbol.for(\"react.forward_ref\"), u = Symbol.for(\"react.suspense\"), d = Symbol.for(\"react.suspense_list\"), v = Symbol.for(\"react.memo\"), c = Symbol.for(\"react.lazy\"), m = Symbol.for(\"react.offscreen\"), p = Symbol.iterator, S = \"@@iterator\";\n        function T(s) {\n            if (s === null || typeof s != \"object\") return null;\n            var f = p && s[p] || s[S];\n            return typeof f == \"function\" ? f : null;\n        }\n        var z = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function b(s) {\n            {\n                for(var f = arguments.length, g = new Array(f > 1 ? f - 1 : 0), E = 1; E < f; E++)g[E - 1] = arguments[E];\n                W(\"error\", s, g);\n            }\n        }\n        function W(s, f, g) {\n            {\n                var E = z.ReactDebugCurrentFrame, R = E.getStackAddendum();\n                R !== \"\" && (f += \"%s\", g = g.concat([\n                    R\n                ]));\n                var D = g.map(function(y) {\n                    return String(y);\n                });\n                D.unshift(\"Warning: \" + f), Function.prototype.apply.call(console[s], console, D);\n            }\n        }\n        var k = !1, H = !1, V = !1, C = !1, P = !1, L;\n        L = Symbol.for(\"react.module.reference\");\n        function q(s) {\n            return !!(typeof s == \"string\" || typeof s == \"function\" || s === r || s === o || P || s === e || s === u || s === d || C || s === m || k || H || V || typeof s == \"object\" && s !== null && (s.$$typeof === c || s.$$typeof === v || s.$$typeof === a || s.$$typeof === l || s.$$typeof === h || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            s.$$typeof === L || s.getModuleId !== void 0));\n        }\n        function Z(s, f, g) {\n            var E = s.displayName;\n            if (E) return E;\n            var R = f.displayName || f.name || \"\";\n            return R !== \"\" ? g + \"(\" + R + \")\" : g;\n        }\n        function F(s) {\n            return s.displayName || \"Context\";\n        }\n        function x(s) {\n            if (s == null) return null;\n            if (typeof s.tag == \"number\" && b(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof s == \"function\") return s.displayName || s.name || null;\n            if (typeof s == \"string\") return s;\n            switch(s){\n                case r:\n                    return \"Fragment\";\n                case t:\n                    return \"Portal\";\n                case o:\n                    return \"Profiler\";\n                case e:\n                    return \"StrictMode\";\n                case u:\n                    return \"Suspense\";\n                case d:\n                    return \"SuspenseList\";\n            }\n            if (typeof s == \"object\") switch(s.$$typeof){\n                case l:\n                    var f = s;\n                    return F(f) + \".Consumer\";\n                case a:\n                    var g = s;\n                    return F(g._context) + \".Provider\";\n                case h:\n                    return Z(s, s.render, \"ForwardRef\");\n                case v:\n                    var E = s.displayName || null;\n                    return E !== null ? E : x(s.type) || \"Memo\";\n                case c:\n                    {\n                        var R = s, D = R._payload, y = R._init;\n                        try {\n                            return x(y(D));\n                        } catch (e) {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var B = Object.assign, K = 0, at, mt, _t, lt, Kt, Jt, Qt;\n        function te() {}\n        te.__reactDisabledLog = !0;\n        function Je() {\n            {\n                if (K === 0) {\n                    at = console.log, mt = console.info, _t = console.warn, lt = console.error, Kt = console.group, Jt = console.groupCollapsed, Qt = console.groupEnd;\n                    var s = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: te,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: s,\n                        log: s,\n                        warn: s,\n                        error: s,\n                        group: s,\n                        groupCollapsed: s,\n                        groupEnd: s\n                    });\n                }\n                K++;\n            }\n        }\n        function Qe() {\n            {\n                if (K--, K === 0) {\n                    var s = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: B({}, s, {\n                            value: at\n                        }),\n                        info: B({}, s, {\n                            value: mt\n                        }),\n                        warn: B({}, s, {\n                            value: _t\n                        }),\n                        error: B({}, s, {\n                            value: lt\n                        }),\n                        group: B({}, s, {\n                            value: Kt\n                        }),\n                        groupCollapsed: B({}, s, {\n                            value: Jt\n                        }),\n                        groupEnd: B({}, s, {\n                            value: Qt\n                        })\n                    });\n                }\n                K < 0 && b(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var zt = z.ReactCurrentDispatcher, Rt;\n        function St(s, f, g) {\n            {\n                if (Rt === void 0) try {\n                    throw Error();\n                } catch (R) {\n                    var E = R.stack.trim().match(/\\n( *(at )?)/);\n                    Rt = E && E[1] || \"\";\n                }\n                return \"\\n\" + Rt + s;\n            }\n        }\n        var Dt = !1, Et;\n        {\n            var tr = typeof WeakMap == \"function\" ? WeakMap : Map;\n            Et = new tr();\n        }\n        function ee(s, f) {\n            if (!s || Dt) return \"\";\n            {\n                var g = Et.get(s);\n                if (g !== void 0) return g;\n            }\n            var E;\n            Dt = !0;\n            var R = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var D;\n            D = zt.current, zt.current = null, Je();\n            try {\n                if (f) {\n                    var y = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(y.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(y, []);\n                        } catch ($) {\n                            E = $;\n                        }\n                        Reflect.construct(s, [], y);\n                    } else {\n                        try {\n                            y.call();\n                        } catch ($) {\n                            E = $;\n                        }\n                        s.call(y.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch ($) {\n                        E = $;\n                    }\n                    s();\n                }\n            } catch ($) {\n                if ($ && E && typeof $.stack == \"string\") {\n                    for(var w = $.stack.split(\"\\n\"), j = E.stack.split(\"\\n\"), X = w.length - 1, A = j.length - 1; X >= 1 && A >= 0 && w[X] !== j[A];)A--;\n                    for(; X >= 1 && A >= 0; X--, A--)if (w[X] !== j[A]) {\n                        if (X !== 1 || A !== 1) do if (X--, A--, A < 0 || w[X] !== j[A]) {\n                            var N = \"\\n\" + w[X].replace(\" at new \", \" at \");\n                            return s.displayName && N.includes(\"<anonymous>\") && (N = N.replace(\"<anonymous>\", s.displayName)), typeof s == \"function\" && Et.set(s, N), N;\n                        }\n                        while (X >= 1 && A >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                Dt = !1, zt.current = D, Qe(), Error.prepareStackTrace = R;\n            }\n            var nt = s ? s.displayName || s.name : \"\", J = nt ? St(nt) : \"\";\n            return typeof s == \"function\" && Et.set(s, J), J;\n        }\n        function er(s, f, g) {\n            return ee(s, !1);\n        }\n        function rr(s) {\n            var f = s.prototype;\n            return !!(f && f.isReactComponent);\n        }\n        function wt(s, f, g) {\n            if (s == null) return \"\";\n            if (typeof s == \"function\") return ee(s, rr(s));\n            if (typeof s == \"string\") return St(s);\n            switch(s){\n                case u:\n                    return St(\"Suspense\");\n                case d:\n                    return St(\"SuspenseList\");\n            }\n            if (typeof s == \"object\") switch(s.$$typeof){\n                case h:\n                    return er(s.render);\n                case v:\n                    return wt(s.type, f, g);\n                case c:\n                    {\n                        var E = s, R = E._payload, D = E._init;\n                        try {\n                            return wt(D(R), f, g);\n                        } catch (e) {}\n                    }\n            }\n            return \"\";\n        }\n        var ct = Object.prototype.hasOwnProperty, re = {}, ne = z.ReactDebugCurrentFrame;\n        function bt(s) {\n            if (s) {\n                var f = s._owner, g = wt(s.type, s._source, f ? f.type : null);\n                ne.setExtraStackFrame(g);\n            } else ne.setExtraStackFrame(null);\n        }\n        function nr(s, f, g, E, R) {\n            {\n                var D = Function.call.bind(ct);\n                for(var y in s)if (D(s, y)) {\n                    var w = void 0;\n                    try {\n                        if (typeof s[y] != \"function\") {\n                            var j = Error((E || \"React class\") + \": \" + g + \" type `\" + y + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof s[y] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw j.name = \"Invariant Violation\", j;\n                        }\n                        w = s[y](f, y, E, g, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (X) {\n                        w = X;\n                    }\n                    w && !(w instanceof Error) && (bt(R), b(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", E || \"React class\", g, y, typeof w), bt(null)), w instanceof Error && !(w.message in re) && (re[w.message] = !0, bt(R), b(\"Failed %s type: %s\", g, w.message), bt(null));\n                }\n            }\n        }\n        var ir = Array.isArray;\n        function Yt(s) {\n            return ir(s);\n        }\n        function or(s) {\n            {\n                var f = typeof Symbol == \"function\" && Symbol.toStringTag, g = f && s[Symbol.toStringTag] || s.constructor.name || \"Object\";\n                return g;\n            }\n        }\n        function sr(s) {\n            try {\n                return ie(s), !1;\n            } catch (e) {\n                return !0;\n            }\n        }\n        function ie(s) {\n            return \"\" + s;\n        }\n        function oe(s) {\n            if (sr(s)) return b(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", or(s)), ie(s);\n        }\n        var ut = z.ReactCurrentOwner, ar = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, se, ae, xt;\n        xt = {};\n        function lr(s) {\n            if (ct.call(s, \"ref\")) {\n                var f = Object.getOwnPropertyDescriptor(s, \"ref\").get;\n                if (f && f.isReactWarning) return !1;\n            }\n            return s.ref !== void 0;\n        }\n        function cr(s) {\n            if (ct.call(s, \"key\")) {\n                var f = Object.getOwnPropertyDescriptor(s, \"key\").get;\n                if (f && f.isReactWarning) return !1;\n            }\n            return s.key !== void 0;\n        }\n        function ur(s, f) {\n            if (typeof s.ref == \"string\" && ut.current && f && ut.current.stateNode !== f) {\n                var g = x(ut.current.type);\n                xt[g] || (b('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', x(ut.current.type), s.ref), xt[g] = !0);\n            }\n        }\n        function hr(s, f) {\n            {\n                var g = function() {\n                    se || (se = !0, b(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", f));\n                };\n                g.isReactWarning = !0, Object.defineProperty(s, \"key\", {\n                    get: g,\n                    configurable: !0\n                });\n            }\n        }\n        function fr(s, f) {\n            {\n                var g = function() {\n                    ae || (ae = !0, b(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", f));\n                };\n                g.isReactWarning = !0, Object.defineProperty(s, \"ref\", {\n                    get: g,\n                    configurable: !0\n                });\n            }\n        }\n        var vr = function(s, f, g, E, R, D, y) {\n            var w = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: n,\n                // Built-in properties that belong on the element\n                type: s,\n                key: f,\n                ref: g,\n                props: y,\n                // Record the component responsible for creating this element.\n                _owner: D\n            };\n            return w._store = {}, Object.defineProperty(w._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(w, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: E\n            }), Object.defineProperty(w, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: R\n            }), Object.freeze && (Object.freeze(w.props), Object.freeze(w)), w;\n        };\n        function dr(s, f, g, E, R) {\n            {\n                var D, y = {}, w = null, j = null;\n                g !== void 0 && (oe(g), w = \"\" + g), cr(f) && (oe(f.key), w = \"\" + f.key), lr(f) && (j = f.ref, ur(f, R));\n                for(D in f)ct.call(f, D) && !ar.hasOwnProperty(D) && (y[D] = f[D]);\n                if (s && s.defaultProps) {\n                    var X = s.defaultProps;\n                    for(D in X)y[D] === void 0 && (y[D] = X[D]);\n                }\n                if (w || j) {\n                    var A = typeof s == \"function\" ? s.displayName || s.name || \"Unknown\" : s;\n                    w && hr(y, A), j && fr(y, A);\n                }\n                return vr(s, w, j, R, E, ut.current, y);\n            }\n        }\n        var Ot = z.ReactCurrentOwner, le = z.ReactDebugCurrentFrame;\n        function rt(s) {\n            if (s) {\n                var f = s._owner, g = wt(s.type, s._source, f ? f.type : null);\n                le.setExtraStackFrame(g);\n            } else le.setExtraStackFrame(null);\n        }\n        var Xt;\n        Xt = !1;\n        function Pt(s) {\n            return typeof s == \"object\" && s !== null && s.$$typeof === n;\n        }\n        function ce() {\n            {\n                if (Ot.current) {\n                    var s = x(Ot.current.type);\n                    if (s) return \"\\n\\nCheck the render method of `\" + s + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function pr(s) {\n            return \"\";\n        }\n        var ue = {};\n        function gr(s) {\n            {\n                var f = ce();\n                if (!f) {\n                    var g = typeof s == \"string\" ? s : s.displayName || s.name;\n                    g && (f = \"\\n\\nCheck the top-level render call using <\" + g + \">.\");\n                }\n                return f;\n            }\n        }\n        function he(s, f) {\n            {\n                if (!s._store || s._store.validated || s.key != null) return;\n                s._store.validated = !0;\n                var g = gr(f);\n                if (ue[g]) return;\n                ue[g] = !0;\n                var E = \"\";\n                s && s._owner && s._owner !== Ot.current && (E = \" It was passed a child from \" + x(s._owner.type) + \".\"), rt(s), b('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', g, E), rt(null);\n            }\n        }\n        function fe(s, f) {\n            {\n                if (typeof s != \"object\") return;\n                if (Yt(s)) for(var g = 0; g < s.length; g++){\n                    var E = s[g];\n                    Pt(E) && he(E, f);\n                }\n                else if (Pt(s)) s._store && (s._store.validated = !0);\n                else if (s) {\n                    var R = T(s);\n                    if (typeof R == \"function\" && R !== s.entries) for(var D = R.call(s), y; !(y = D.next()).done;)Pt(y.value) && he(y.value, f);\n                }\n            }\n        }\n        function mr(s) {\n            {\n                var f = s.type;\n                if (f == null || typeof f == \"string\") return;\n                var g;\n                if (typeof f == \"function\") g = f.propTypes;\n                else if (typeof f == \"object\" && (f.$$typeof === h || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                f.$$typeof === v)) g = f.propTypes;\n                else return;\n                if (g) {\n                    var E = x(f);\n                    nr(g, s.props, \"prop\", E, s);\n                } else if (f.PropTypes !== void 0 && !Xt) {\n                    Xt = !0;\n                    var R = x(f);\n                    b(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", R || \"Unknown\");\n                }\n                typeof f.getDefaultProps == \"function\" && !f.getDefaultProps.isReactClassApproved && b(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function _r(s) {\n            {\n                for(var f = Object.keys(s.props), g = 0; g < f.length; g++){\n                    var E = f[g];\n                    if (E !== \"children\" && E !== \"key\") {\n                        rt(s), b(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", E), rt(null);\n                        break;\n                    }\n                }\n                s.ref !== null && (rt(s), b(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), rt(null));\n            }\n        }\n        var ve = {};\n        function de(s, f, g, E, R, D) {\n            {\n                var y = q(s);\n                if (!y) {\n                    var w = \"\";\n                    (s === void 0 || typeof s == \"object\" && s !== null && Object.keys(s).length === 0) && (w += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var j = pr();\n                    j ? w += j : w += ce();\n                    var X;\n                    s === null ? X = \"null\" : Yt(s) ? X = \"array\" : s !== void 0 && s.$$typeof === n ? (X = \"<\" + (x(s.type) || \"Unknown\") + \" />\", w = \" Did you accidentally export a JSX literal instead of a component?\") : X = typeof s, b(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", X, w);\n                }\n                var A = dr(s, f, g, R, D);\n                if (A == null) return A;\n                if (y) {\n                    var N = f.children;\n                    if (N !== void 0) if (E) if (Yt(N)) {\n                        for(var nt = 0; nt < N.length; nt++)fe(N[nt], s);\n                        Object.freeze && Object.freeze(N);\n                    } else b(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else fe(N, s);\n                }\n                if (ct.call(f, \"key\")) {\n                    var J = x(s), $ = Object.keys(f).filter(function(Cr) {\n                        return Cr !== \"key\";\n                    }), At = $.length > 0 ? \"{key: someKey, \" + $.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!ve[J + At]) {\n                        var yr = $.length > 0 ? \"{\" + $.join(\": ..., \") + \": ...}\" : \"{}\";\n                        b('A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />', At, J, yr, J), ve[J + At] = !0;\n                    }\n                }\n                return s === r ? _r(A) : mr(A), A;\n            }\n        }\n        function Sr(s, f, g) {\n            return de(s, f, g, !0);\n        }\n        function Er(s, f, g) {\n            return de(s, f, g, !1);\n        }\n        var wr = Er, br = Sr;\n        ft.Fragment = r, ft.jsx = wr, ft.jsxs = br;\n    }()), ft;\n}\n_c1 = Yr;\n false ? 0 : Lt.exports = Yr();\nvar Q = Lt.exports, xr = \"function\", Or = \"object\", Xr = \"string\", Pr = \"undefined\", Ar = typeof document !== Pr && document, Mr = [\n    {\n        open: \"(\",\n        close: \")\"\n    },\n    {\n        open: '\"',\n        close: '\"'\n    },\n    {\n        open: \"'\",\n        close: \"'\"\n    },\n    {\n        open: '\\\\\"',\n        close: '\\\\\"'\n    },\n    {\n        open: \"\\\\'\",\n        close: \"\\\\'\"\n    }\n], yt = {\n    cm: function(i) {\n        return i * 96 / 2.54;\n    },\n    mm: function(i) {\n        return i * 96 / 254;\n    },\n    in: function(i) {\n        return i * 96;\n    },\n    pt: function(i) {\n        return i * 96 / 72;\n    },\n    pc: function(i) {\n        return i * 96 / 6;\n    },\n    \"%\": function(i, n) {\n        return i * n / 100;\n    },\n    vw: function(i, n) {\n        return n === void 0 && (n = window.innerWidth), i / 100 * n;\n    },\n    vh: function(i, n) {\n        return n === void 0 && (n = window.innerHeight), i / 100 * n;\n    },\n    vmax: function(i, n) {\n        return n === void 0 && (n = Math.max(window.innerWidth, window.innerHeight)), i / 100 * n;\n    },\n    vmin: function(i, n) {\n        return n === void 0 && (n = Math.min(window.innerWidth, window.innerHeight)), i / 100 * n;\n    }\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ function kr() {\n    for(var i = 0, n = 0, t = arguments.length; n < t; n++)i += arguments[n].length;\n    for(var r = Array(i), e = 0, n = 0; n < t; n++)for(var o = arguments[n], a = 0, l = o.length; a < l; a++, e++)r[e] = o[a];\n    return r;\n}\nfunction st(i) {\n    return i && typeof i === Or;\n}\nfunction vt(i) {\n    return Array.isArray(i);\n}\nfunction Oe(i) {\n    return typeof i === Xr;\n}\n_c2 = Oe;\nfunction Wr(i) {\n    return typeof i === xr;\n}\n_c3 = Wr;\nfunction Lr(i, n) {\n    var t = i === \"\" || i == \" \", r = n === \"\" || n == \" \";\n    return r && t || i === n;\n}\n_c4 = Lr;\nfunction Xe(i, n, t, r, e) {\n    var o = Vt(i, n, t);\n    return o ? t : Fr(i, n, t + 1, r, e);\n}\n_c5 = Xe;\nfunction Vt(i, n, t) {\n    if (!i.ignore) return null;\n    var r = n.slice(Math.max(t - 3, 0), t + 3).join(\"\");\n    return new RegExp(i.ignore).exec(r);\n}\n_c6 = Vt;\nfunction Fr(i, n, t, r, e) {\n    for(var o = function(u) {\n        var d = n[u].trim();\n        if (d === i.close && !Vt(i, n, u)) return {\n            value: u\n        };\n        var v = u, c = Ft(e, function(m) {\n            var p = m.open;\n            return p === d;\n        });\n        if (c && (v = Xe(c, n, u, r, e)), v === -1) return a = u, \"break\";\n        u = v, a = u;\n    }, a, l = t; l < r; ++l){\n        var h = o(l);\n        if (l = a, typeof h == \"object\") return h.value;\n        if (h === \"break\") break;\n    }\n    return -1;\n}\n_c7 = Fr;\nfunction Pe(i, n) {\n    var t = Oe(n) ? {\n        separator: n\n    } : n, r = t.separator, e = r === void 0 ? \",\" : r, o = t.isSeparateFirst, a = t.isSeparateOnlyOpenClose, l = t.isSeparateOpenClose, h = l === void 0 ? a : l, u = t.openCloseCharacters, d = u === void 0 ? Mr : u, v = d.map(function(C) {\n        var P = C.open, L = C.close;\n        return P === L ? P : P + \"|\" + L;\n    }).join(\"|\"), c = \"(\\\\s*\" + e + \"\\\\s*|\" + v + \"|\\\\s+)\", m = new RegExp(c, \"g\"), p = i.split(m).filter(function(C) {\n        return C && C !== \"undefined\";\n    }), S = p.length, T = [], z = [];\n    function b() {\n        return z.length ? (T.push(z.join(\"\")), z = [], !0) : !1;\n    }\n    for(var W = function(C) {\n        var P = p[C].trim(), L = C, q = Ft(d, function(x) {\n            var B = x.open;\n            return B === P;\n        }), Z = Ft(d, function(x) {\n            var B = x.close;\n            return B === P;\n        });\n        if (q) {\n            if (L = Xe(q, p, C, S, d), L !== -1 && h) return b() && o || (T.push(p.slice(C, L + 1).join(\"\")), C = L, o) ? (k = C, \"break\") : (k = C, \"continue\");\n        } else if (Z && !Vt(Z, p, C)) {\n            var F = kr(d);\n            return F.splice(d.indexOf(Z), 1), {\n                value: Pe(i, {\n                    separator: e,\n                    isSeparateFirst: o,\n                    isSeparateOnlyOpenClose: a,\n                    isSeparateOpenClose: h,\n                    openCloseCharacters: F\n                })\n            };\n        } else if (Lr(P, e) && !a) return b(), o ? (k = C, \"break\") : (k = C, \"continue\");\n        L === -1 && (L = S - 1), z.push(p.slice(C, L + 1).join(\"\")), C = L, k = C;\n    }, k, H = 0; H < S; ++H){\n        var V = W(H);\n        if (H = k, typeof V == \"object\") return V.value;\n        if (V === \"break\") break;\n    }\n    return z.length && T.push(z.join(\"\")), T;\n}\n_c8 = Pe;\nfunction jr(i) {\n    return Pe(i, \",\");\n}\nfunction Ir(i) {\n    var n = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(i);\n    if (!n) return {\n        prefix: \"\",\n        unit: \"\",\n        value: NaN\n    };\n    var t = n[1], r = n[2], e = n[3];\n    return {\n        prefix: t,\n        unit: e,\n        value: parseFloat(r)\n    };\n}\n_c9 = Ir;\nfunction Ae(i) {\n    return i.replace(/[\\s-_]+([^\\s-_])/g, function(n, t) {\n        return t.toUpperCase();\n    });\n}\n_c10 = Ae;\nfunction me() {\n    return Date.now ? Date.now() : /* @__PURE__ */ new Date().getTime();\n}\nfunction Me(i, n, t) {\n    t === void 0 && (t = -1);\n    for(var r = i.length, e = 0; e < r; ++e)if (n(i[e], e, i)) return e;\n    return t;\n}\n_c11 = Me;\nfunction Ft(i, n, t) {\n    var r = Me(i, n);\n    return r > -1 ? i[r] : t;\n}\n_c12 = Ft;\nfunction G(i, n) {\n    var t = Ir(i), r = t.value, e = t.unit;\n    if (st(n)) {\n        var o = n[e];\n        if (o) {\n            if (Wr(o)) return o(r);\n            if (yt[e]) return yt[e](r, o);\n        }\n    } else if (e === \"%\") return r * n / 100;\n    return yt[e] ? yt[e](r) : r;\n}\n_c13 = G;\nfunction tt(i, n, t) {\n    return Math.max(n, Math.min(i, t));\n}\nfunction $r(i, n) {\n    var t = 1 / n;\n    return Math.round(i / n) / t;\n}\nfunction it(i, n) {\n    i.classList ? i.classList.add(n) : i.className += \" \" + n;\n}\nfunction O(i, n, t, r) {\n    i.addEventListener(n, t, r);\n}\n_c14 = O;\nfunction Y(i, n, t, r) {\n    i.removeEventListener(n, t, r);\n}\n_c15 = Y;\nfunction Nt(i) {\n    return (i == null ? void 0 : i.ownerDocument) || Ar;\n}\n_c16 = Nt;\nfunction ot(i) {\n    var n;\n    return ((n = i == null ? void 0 : i.ownerDocument) === null || n === void 0 ? void 0 : n.defaultView) || window;\n}\nfunction Br(i) {\n    return i && \"postMessage\" in i && \"blur\" in i && \"self\" in i;\n}\n_c17 = Br;\nfunction _e(i) {\n    return st(i) && i.nodeName && i.nodeType && \"ownerDocument\" in i;\n}\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ var jt = function() {\n    return jt = Object.assign || function(n) {\n        for(var t, r = 1, e = arguments.length; r < e; r++){\n            t = arguments[r];\n            for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && (n[o] = t[o]);\n        }\n        return n;\n    }, jt.apply(this, arguments);\n};\nfunction Hr() {\n    for(var i = 0, n = 0, t = arguments.length; n < t; n++)i += arguments[n].length;\n    for(var r = Array(i), e = 0, n = 0; n < t; n++)for(var o = arguments[n], a = 0, l = o.length; a < l; a++, e++)r[e] = o[a];\n    return r;\n}\n_c18 = Hr;\nvar Zt = /* @__PURE__ */ function() {\n    function i() {\n        this._events = {};\n    }\n    var n = i.prototype;\n    return n.on = function(t, r) {\n        if (st(t)) for(var e in t)this.on(e, t[e]);\n        else this._addEvent(t, r, {});\n        return this;\n    }, n.off = function(t, r) {\n        if (!t) this._events = {};\n        else if (st(t)) for(var e in t)this.off(e);\n        else if (!r) this._events[t] = [];\n        else {\n            var o = this._events[t];\n            if (o) {\n                var a = Me(o, function(l) {\n                    return l.listener === r;\n                });\n                a > -1 && o.splice(a, 1);\n            }\n        }\n        return this;\n    }, n.once = function(t, r) {\n        var e = this;\n        return r && this._addEvent(t, r, {\n            once: !0\n        }), new Promise(function(o) {\n            e._addEvent(t, o, {\n                once: !0\n            });\n        });\n    }, n.emit = function(t, r) {\n        var e = this;\n        r === void 0 && (r = {});\n        var o = this._events[t];\n        if (!t || !o) return !0;\n        var a = !1;\n        return r.eventType = t, r.stop = function() {\n            a = !0;\n        }, r.currentTarget = this, Hr(o).forEach(function(l) {\n            l.listener(r), l.once && e.off(t, l.listener);\n        }), !a;\n    }, n.trigger = function(t, r) {\n        return r === void 0 && (r = {}), this.emit(t, r);\n    }, n._addEvent = function(t, r, e) {\n        var o = this._events;\n        o[t] = o[t] || [];\n        var a = o[t];\n        a.push(jt({\n            listener: r\n        }, e));\n    }, i;\n}();\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ var It = function(i, n) {\n    return It = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t, r) {\n        t.__proto__ = r;\n    } || function(t, r) {\n        for(var e in r)r.hasOwnProperty(e) && (t[e] = r[e]);\n    }, It(i, n);\n};\n_c19 = It;\nfunction Vr(i, n) {\n    It(i, n);\n    function t() {\n        this.constructor = i;\n    }\n    i.prototype = n === null ? Object.create(n) : (t.prototype = n.prototype, new t());\n}\n_c20 = Vr;\nvar M = function() {\n    return M = Object.assign || function(n) {\n        for(var t, r = 1, e = arguments.length; r < e; r++){\n            t = arguments[r];\n            for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && (n[o] = t[o]);\n        }\n        return n;\n    }, M.apply(this, arguments);\n};\n_c21 = M;\nfunction Nr(i, n) {\n    var t = n[0] - i[0], r = n[1] - i[1], e = Math.atan2(r, t);\n    return e >= 0 ? e : e + Math.PI * 2;\n}\n_c22 = Nr;\nfunction Mt(i) {\n    return Nr([\n        i[0].clientX,\n        i[0].clientY\n    ], [\n        i[1].clientX,\n        i[1].clientY\n    ]) / Math.PI * 180;\n}\n_c23 = Mt;\nfunction Zr(i) {\n    return i.touches && i.touches.length >= 2;\n}\n_c24 = Zr;\nfunction Ct(i) {\n    return i ? i.touches ? qr(i.touches) : [\n        ke(i)\n    ] : [];\n}\n_c25 = Ct;\nfunction Ur(i) {\n    return i && (i.type.indexOf(\"mouse\") > -1 || \"button\" in i);\n}\n_c26 = Ur;\nfunction Se(i, n, t) {\n    var r = t.length, e = gt(i, r), o = e.clientX, a = e.clientY, l = e.originalClientX, h = e.originalClientY, u = gt(n, r), d = u.clientX, v = u.clientY, c = gt(t, r), m = c.clientX, p = c.clientY, S = o - d, T = a - v, z = o - m, b = a - p;\n    return {\n        clientX: l,\n        clientY: h,\n        deltaX: S,\n        deltaY: T,\n        distX: z,\n        distY: b\n    };\n}\n_c27 = Se;\nfunction kt(i) {\n    return Math.sqrt(Math.pow(i[0].clientX - i[1].clientX, 2) + Math.pow(i[0].clientY - i[1].clientY, 2));\n}\nfunction qr(i) {\n    for(var n = Math.min(i.length, 2), t = [], r = 0; r < n; ++r)t.push(ke(i[r]));\n    return t;\n}\nfunction ke(i) {\n    return {\n        clientX: i.clientX,\n        clientY: i.clientY\n    };\n}\nfunction gt(i, n) {\n    n === void 0 && (n = i.length);\n    for(var t = {\n        clientX: 0,\n        clientY: 0,\n        originalClientX: 0,\n        originalClientY: 0\n    }, r = Math.min(i.length, n), e = 0; e < r; ++e){\n        var o = i[e];\n        t.originalClientX += \"originalClientX\" in o ? o.originalClientX : o.clientX, t.originalClientY += \"originalClientY\" in o ? o.originalClientY : o.clientY, t.clientX += o.clientX, t.clientY += o.clientY;\n    }\n    return n ? {\n        clientX: t.clientX / n,\n        clientY: t.clientY / n,\n        originalClientX: t.originalClientX / n,\n        originalClientY: t.originalClientY / n\n    } : t;\n}\nvar Wt = /* @__PURE__ */ function() {\n    function i(n) {\n        this.prevClients = [], this.startClients = [], this.movement = 0, this.length = 0, this.startClients = n, this.prevClients = n, this.length = n.length;\n    }\n    return i.prototype.getAngle = function(n) {\n        return n === void 0 && (n = this.prevClients), Mt(n);\n    }, i.prototype.getRotation = function(n) {\n        return n === void 0 && (n = this.prevClients), Mt(n) - Mt(this.startClients);\n    }, i.prototype.getPosition = function(n, t) {\n        n === void 0 && (n = this.prevClients);\n        var r = Se(n || this.prevClients, this.prevClients, this.startClients), e = r.deltaX, o = r.deltaY;\n        return this.movement += Math.sqrt(e * e + o * o), this.prevClients = n, r;\n    }, i.prototype.getPositions = function(n) {\n        n === void 0 && (n = this.prevClients);\n        for(var t = this.prevClients, r = this.startClients, e = Math.min(this.length, t.length), o = [], a = 0; a < e; ++a)o[a] = Se([\n            n[a]\n        ], [\n            t[a]\n        ], [\n            r[a]\n        ]);\n        return o;\n    }, i.prototype.getMovement = function(n) {\n        var t = this.movement;\n        if (!n) return t;\n        var r = gt(n, this.length), e = gt(this.prevClients, this.length), o = r.clientX - e.clientX, a = r.clientY - e.clientY;\n        return Math.sqrt(o * o + a * a) + t;\n    }, i.prototype.getDistance = function(n) {\n        return n === void 0 && (n = this.prevClients), kt(n);\n    }, i.prototype.getScale = function(n) {\n        return n === void 0 && (n = this.prevClients), kt(n) / kt(this.startClients);\n    }, i.prototype.move = function(n, t) {\n        this.startClients.forEach(function(r) {\n            r.clientX -= n, r.clientY -= t;\n        }), this.prevClients.forEach(function(r) {\n            r.clientX -= n, r.clientY -= t;\n        });\n    }, i;\n}(), Ee = [\n    \"textarea\",\n    \"input\"\n], We = /* @__PURE__ */ function(i) {\n    Vr(n, i);\n    function n(t, r) {\n        r === void 0 && (r = {});\n        var e = i.call(this) || this;\n        e.options = {}, e.flag = !1, e.pinchFlag = !1, e.data = {}, e.isDrag = !1, e.isPinch = !1, e.clientStores = [], e.targets = [], e.prevTime = 0, e.doubleFlag = !1, e._useMouse = !1, e._useTouch = !1, e._useDrag = !1, e._dragFlag = !1, e._isTrusted = !1, e._isMouseEvent = !1, e._isSecondaryButton = !1, e._preventMouseEvent = !1, e._prevInputEvent = null, e._isDragAPI = !1, e._isIdle = !0, e._preventMouseEventId = 0, e._window = window, e.onDragStart = function(c, m) {\n            if (m === void 0 && (m = !0), !(!e.flag && c.cancelable === !1)) {\n                var p = c.type.indexOf(\"drag\") >= -1;\n                if (!(e.flag && p)) {\n                    e._isDragAPI = !0;\n                    var S = e.options, T = S.container, z = S.pinchOutside, b = S.preventWheelClick, W = S.preventRightClick, k = S.preventDefault, H = S.checkInput, V = S.dragFocusedInput, C = S.preventClickEventOnDragStart, P = S.preventClickEventOnDrag, L = S.preventClickEventByCondition, q = e._useTouch, Z = !e.flag;\n                    if (e._isSecondaryButton = c.which === 3 || c.button === 2, b && (c.which === 2 || c.button === 1) || W && (c.which === 3 || c.button === 2)) return e.stop(), !1;\n                    if (Z) {\n                        var F = e._window.document.activeElement, x = c.target;\n                        if (x) {\n                            var B = x.tagName.toLowerCase(), K = Ee.indexOf(B) > -1, at = x.isContentEditable;\n                            if (K || at) {\n                                if (H || !V && F === x) return !1;\n                                if (F && (F === x || at && F.isContentEditable && F.contains(x))) if (V) x.blur();\n                                else return !1;\n                            } else if ((k || c.type === \"touchstart\") && F) {\n                                var mt = F.tagName.toLowerCase();\n                                (F.isContentEditable || Ee.indexOf(mt) > -1) && F.blur();\n                            }\n                            (C || P || L) && O(e._window, \"click\", e._onClick, !0);\n                        }\n                        e.clientStores = [\n                            new Wt(Ct(c))\n                        ], e._isIdle = !1, e.flag = !0, e.isDrag = !1, e._isTrusted = m, e._dragFlag = !0, e._prevInputEvent = c, e.data = {}, e.doubleFlag = me() - e.prevTime < 200, e._isMouseEvent = Ur(c), !e._isMouseEvent && e._preventMouseEvent && e._allowMouseEvent();\n                        var _t = e._preventMouseEvent || e.emit(\"dragStart\", M(M({\n                            data: e.data,\n                            datas: e.data,\n                            inputEvent: c,\n                            isMouseEvent: e._isMouseEvent,\n                            isSecondaryButton: e._isSecondaryButton,\n                            isTrusted: m,\n                            isDouble: e.doubleFlag\n                        }, e.getCurrentStore().getPosition()), {\n                            preventDefault: function() {\n                                c.preventDefault();\n                            },\n                            preventDrag: function() {\n                                e._dragFlag = !1;\n                            }\n                        }));\n                        _t === !1 && e.stop(), e._isMouseEvent && e.flag && k && c.preventDefault();\n                    }\n                    if (!e.flag) return !1;\n                    var lt = 0;\n                    if (Z ? (e._attchDragEvent(), q && z && (lt = setTimeout(function() {\n                        O(T, \"touchstart\", e.onDragStart, {\n                            passive: !1\n                        });\n                    }))) : q && z && Y(T, \"touchstart\", e.onDragStart), e.flag && Zr(c)) {\n                        if (clearTimeout(lt), Z && c.touches.length !== c.changedTouches.length) return;\n                        e.pinchFlag || e.onPinchStart(c);\n                    }\n                }\n            }\n        }, e.onDrag = function(c, m) {\n            if (e.flag) {\n                var p = e.options.preventDefault;\n                !e._isMouseEvent && p && c.preventDefault(), e._prevInputEvent = c;\n                var S = Ct(c), T = e.moveClients(S, c, !1);\n                if (e._dragFlag) {\n                    if (e.pinchFlag || T.deltaX || T.deltaY) {\n                        var z = e._preventMouseEvent || e.emit(\"drag\", M(M({}, T), {\n                            isScroll: !!m,\n                            inputEvent: c\n                        }));\n                        if (z === !1) {\n                            e.stop();\n                            return;\n                        }\n                    }\n                    e.pinchFlag && e.onPinch(c, S);\n                }\n                e.getCurrentStore().getPosition(S, !0);\n            }\n        }, e.onDragEnd = function(c) {\n            if (e.flag) {\n                var m = e.options, p = m.pinchOutside, S = m.container, T = m.preventClickEventOnDrag, z = m.preventClickEventOnDragStart, b = m.preventClickEventByCondition, W = e.isDrag;\n                (T || z || b) && requestAnimationFrame(function() {\n                    e._allowClickEvent();\n                }), !b && !z && T && !W && e._allowClickEvent(), e._useTouch && p && Y(S, \"touchstart\", e.onDragStart), e.pinchFlag && e.onPinchEnd(c);\n                var k = c != null && c.touches ? Ct(c) : [], H = k.length;\n                H === 0 || !e.options.keepDragging ? e.flag = !1 : e._addStore(new Wt(k));\n                var V = e._getPosition(), C = me(), P = !W && e.doubleFlag;\n                e._prevInputEvent = null, e.prevTime = W || P ? 0 : C, e.flag || (e._dettachDragEvent(), e._preventMouseEvent || e.emit(\"dragEnd\", M({\n                    data: e.data,\n                    datas: e.data,\n                    isDouble: P,\n                    isDrag: W,\n                    isClick: !W,\n                    isMouseEvent: e._isMouseEvent,\n                    isSecondaryButton: e._isSecondaryButton,\n                    inputEvent: c,\n                    isTrusted: e._isTrusted\n                }, V)), e.clientStores = [], e._isMouseEvent || (e._preventMouseEvent = !0, clearTimeout(e._preventMouseEventId), e._preventMouseEventId = setTimeout(function() {\n                    e._preventMouseEvent = !1;\n                }, 200)), e._isIdle = !0);\n            }\n        }, e.onBlur = function() {\n            e.onDragEnd();\n        }, e._allowClickEvent = function() {\n            Y(e._window, \"click\", e._onClick, !0);\n        }, e._onClick = function(c) {\n            e._allowClickEvent(), e._allowMouseEvent();\n            var m = e.options.preventClickEventByCondition;\n            m != null && m(c) || (c.stopPropagation(), c.preventDefault());\n        }, e._onContextMenu = function(c) {\n            var m = e.options;\n            m.preventRightClick ? e.onDragEnd(c) : c.preventDefault();\n        }, e._passCallback = function() {};\n        var o = [].concat(t), a = o[0];\n        e._window = Br(a) ? a : ot(a), e.options = M({\n            checkInput: !1,\n            container: a && !(\"document\" in a) ? ot(a) : a,\n            preventRightClick: !0,\n            preventWheelClick: !0,\n            preventClickEventOnDragStart: !1,\n            preventClickEventOnDrag: !1,\n            preventClickEventByCondition: null,\n            preventDefault: !0,\n            checkWindowBlur: !1,\n            keepDragging: !1,\n            pinchThreshold: 0,\n            events: [\n                \"touch\",\n                \"mouse\"\n            ]\n        }, r);\n        var l = e.options, h = l.container, u = l.events, d = l.checkWindowBlur;\n        if (e._useDrag = u.indexOf(\"drag\") > -1, e._useTouch = u.indexOf(\"touch\") > -1, e._useMouse = u.indexOf(\"mouse\") > -1, e.targets = o, e._useDrag && o.forEach(function(c) {\n            O(c, \"dragstart\", e.onDragStart);\n        }), e._useMouse && (o.forEach(function(c) {\n            O(c, \"mousedown\", e.onDragStart), O(c, \"mousemove\", e._passCallback);\n        }), O(h, \"contextmenu\", e._onContextMenu)), d && O(ot(), \"blur\", e.onBlur), e._useTouch) {\n            var v = {\n                passive: !1\n            };\n            o.forEach(function(c) {\n                O(c, \"touchstart\", e.onDragStart, v), O(c, \"touchmove\", e._passCallback, v);\n            });\n        }\n        return e;\n    }\n    return n.prototype.stop = function() {\n        this.isDrag = !1, this.data = {}, this.clientStores = [], this.pinchFlag = !1, this.doubleFlag = !1, this.prevTime = 0, this.flag = !1, this._isIdle = !0, this._allowClickEvent(), this._dettachDragEvent(), this._isDragAPI = !1;\n    }, n.prototype.getMovement = function(t) {\n        return this.getCurrentStore().getMovement(t) + this.clientStores.slice(1).reduce(function(r, e) {\n            return r + e.movement;\n        }, 0);\n    }, n.prototype.isDragging = function() {\n        return this.isDrag;\n    }, n.prototype.isIdle = function() {\n        return this._isIdle;\n    }, n.prototype.isFlag = function() {\n        return this.flag;\n    }, n.prototype.isPinchFlag = function() {\n        return this.pinchFlag;\n    }, n.prototype.isDoubleFlag = function() {\n        return this.doubleFlag;\n    }, n.prototype.isPinching = function() {\n        return this.isPinch;\n    }, n.prototype.scrollBy = function(t, r, e, o) {\n        o === void 0 && (o = !0), this.flag && (this.clientStores[0].move(t, r), o && this.onDrag(e, !0));\n    }, n.prototype.move = function(t, r) {\n        var e = t[0], o = t[1], a = this.getCurrentStore(), l = a.prevClients;\n        return this.moveClients(l.map(function(h) {\n            var u = h.clientX, d = h.clientY;\n            return {\n                clientX: u + e,\n                clientY: d + o,\n                originalClientX: u,\n                originalClientY: d\n            };\n        }), r, !0);\n    }, n.prototype.triggerDragStart = function(t) {\n        this.onDragStart(t, !1);\n    }, n.prototype.setEventData = function(t) {\n        var r = this.data;\n        for(var e in t)r[e] = t[e];\n        return this;\n    }, n.prototype.setEventDatas = function(t) {\n        return this.setEventData(t);\n    }, n.prototype.getCurrentEvent = function(t) {\n        return t === void 0 && (t = this._prevInputEvent), M(M({\n            data: this.data,\n            datas: this.data\n        }, this._getPosition()), {\n            movement: this.getMovement(),\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: !1,\n            inputEvent: t\n        });\n    }, n.prototype.getEventData = function() {\n        return this.data;\n    }, n.prototype.getEventDatas = function() {\n        return this.data;\n    }, n.prototype.unset = function() {\n        var t = this, r = this.targets, e = this.options.container;\n        this.off(), Y(this._window, \"blur\", this.onBlur), this._useDrag && r.forEach(function(o) {\n            Y(o, \"dragstart\", t.onDragStart);\n        }), this._useMouse && (r.forEach(function(o) {\n            Y(o, \"mousedown\", t.onDragStart);\n        }), Y(e, \"contextmenu\", this._onContextMenu)), this._useTouch && (r.forEach(function(o) {\n            Y(o, \"touchstart\", t.onDragStart);\n        }), Y(e, \"touchstart\", this.onDragStart)), this._prevInputEvent = null, this._allowClickEvent(), this._dettachDragEvent();\n    }, n.prototype.onPinchStart = function(t) {\n        var r = this, e = this.options.pinchThreshold;\n        if (!(this.isDrag && this.getMovement() > e)) {\n            var o = new Wt(Ct(t));\n            this.pinchFlag = !0, this._addStore(o);\n            var a = this.emit(\"pinchStart\", M(M({\n                data: this.data,\n                datas: this.data,\n                angle: o.getAngle(),\n                touches: this.getCurrentStore().getPositions()\n            }, o.getPosition()), {\n                inputEvent: t,\n                isTrusted: this._isTrusted,\n                preventDefault: function() {\n                    t.preventDefault();\n                },\n                preventDrag: function() {\n                    r._dragFlag = !1;\n                }\n            }));\n            a === !1 && (this.pinchFlag = !1);\n        }\n    }, n.prototype.onPinch = function(t, r) {\n        if (!(!this.flag || !this.pinchFlag || r.length < 2)) {\n            var e = this.getCurrentStore();\n            this.isPinch = !0, this.emit(\"pinch\", M(M({\n                data: this.data,\n                datas: this.data,\n                movement: this.getMovement(r),\n                angle: e.getAngle(r),\n                rotation: e.getRotation(r),\n                touches: e.getPositions(r),\n                scale: e.getScale(r),\n                distance: e.getDistance(r)\n            }, e.getPosition(r)), {\n                inputEvent: t,\n                isTrusted: this._isTrusted\n            }));\n        }\n    }, n.prototype.onPinchEnd = function(t) {\n        if (this.pinchFlag) {\n            var r = this.isPinch;\n            this.isPinch = !1, this.pinchFlag = !1;\n            var e = this.getCurrentStore();\n            this.emit(\"pinchEnd\", M(M({\n                data: this.data,\n                datas: this.data,\n                isPinch: r,\n                touches: e.getPositions()\n            }, e.getPosition()), {\n                inputEvent: t\n            }));\n        }\n    }, n.prototype.getCurrentStore = function() {\n        return this.clientStores[0];\n    }, n.prototype.moveClients = function(t, r, e) {\n        var o = this._getPosition(t, e), a = this.isDrag;\n        (o.deltaX || o.deltaY) && (this.isDrag = !0);\n        var l = !1;\n        return !a && this.isDrag && (l = !0), M(M({\n            data: this.data,\n            datas: this.data\n        }, o), {\n            movement: this.getMovement(t),\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: !1,\n            isMouseEvent: this._isMouseEvent,\n            isSecondaryButton: this._isSecondaryButton,\n            inputEvent: r,\n            isTrusted: this._isTrusted,\n            isFirstDrag: l\n        });\n    }, n.prototype._addStore = function(t) {\n        this.clientStores.splice(0, 0, t);\n    }, n.prototype._getPosition = function(t, r) {\n        var e = this.getCurrentStore(), o = e.getPosition(t, r), a = this.clientStores.slice(1).reduce(function(u, d) {\n            var v = d.getPosition();\n            return u.distX += v.distX, u.distY += v.distY, u;\n        }, o), l = a.distX, h = a.distY;\n        return M(M({}, o), {\n            distX: l,\n            distY: h\n        });\n    }, n.prototype._attchDragEvent = function() {\n        var t = this._window, r = this.options.container, e = {\n            passive: !1\n        };\n        this._isDragAPI && (O(r, \"dragover\", this.onDrag, e), O(t, \"dragend\", this.onDragEnd)), this._useMouse && (O(r, \"mousemove\", this.onDrag), O(t, \"mouseup\", this.onDragEnd)), this._useTouch && (O(r, \"touchmove\", this.onDrag, e), O(t, \"touchend\", this.onDragEnd, e), O(t, \"touchcancel\", this.onDragEnd, e));\n    }, n.prototype._dettachDragEvent = function() {\n        var t = this._window, r = this.options.container;\n        this._isDragAPI && (Y(r, \"dragover\", this.onDrag), Y(t, \"dragend\", this.onDragEnd)), this._useMouse && (Y(r, \"mousemove\", this.onDrag), Y(t, \"mouseup\", this.onDragEnd)), this._useTouch && (Y(r, \"touchstart\", this.onDragStart), Y(r, \"touchmove\", this.onDrag), Y(t, \"touchend\", this.onDragEnd), Y(t, \"touchcancel\", this.onDragEnd));\n    }, n.prototype._allowMouseEvent = function() {\n        this._preventMouseEvent = !1, clearTimeout(this._preventMouseEventId);\n    }, n;\n}(Zt);\nfunction Gr(i) {\n    for(var n = 5381, t = i.length; t;)n = n * 33 ^ i.charCodeAt(--t);\n    return n >>> 0;\n}\n_c28 = Gr;\nvar Kr = Gr;\nfunction Jr(i) {\n    return Kr(i).toString(36);\n}\n_c29 = Jr;\nfunction Qr(i) {\n    if (i && i.getRootNode) {\n        var n = i.getRootNode();\n        if (n.nodeType === 11) return n;\n    }\n}\n_c30 = Qr;\nfunction tn(i, n, t) {\n    return t.original ? n : n.replace(/([^};{\\s}][^};{]*|^\\s*){/mg, function(r, e) {\n        var o = e.trim();\n        return (o ? jr(o) : [\n            \"\"\n        ]).map(function(a) {\n            var l = a.trim();\n            return l.indexOf(\"@\") === 0 ? l : l.indexOf(\":global\") > -1 ? l.replace(/\\:global/g, \"\") : l.indexOf(\":host\") > -1 ? \"\".concat(l.replace(/\\:host/g, \".\".concat(i))) : l ? \".\".concat(i, \" \").concat(l) : \".\".concat(i);\n        }).join(\", \") + \" {\";\n    });\n}\nfunction en(i, n, t, r, e) {\n    var o = Nt(r), a = o.createElement(\"style\");\n    return a.setAttribute(\"type\", \"text/css\"), a.setAttribute(\"data-styled-id\", i), a.setAttribute(\"data-styled-count\", \"1\"), t.nonce && a.setAttribute(\"nonce\", t.nonce), a.innerHTML = tn(i, n, t), (e || o.head || o.body).appendChild(a), a;\n}\nfunction rn(i) {\n    var n = \"rCS\" + Jr(i);\n    return {\n        className: n,\n        inject: function(t, r) {\n            r === void 0 && (r = {});\n            var e = Qr(t), o = (e || t.ownerDocument || document).querySelector('style[data-styled-id=\"'.concat(n, '\"]'));\n            if (!o) o = en(n, i, r, t, e);\n            else {\n                var a = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n                o.setAttribute(\"data-styled-count\", \"\".concat(a + 1));\n            }\n            return {\n                destroy: function() {\n                    var l, h = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n                    h <= 1 ? (o.remove ? o.remove() : (l = o.parentNode) === null || l === void 0 || l.removeChild(o), o = null) : o.setAttribute(\"data-styled-count\", \"\".concat(h - 1));\n                }\n            };\n        }\n    };\n}\nfunction Ut(i, n) {\n    for(var t = i.length, r = 0; r < t; ++r)if (n(i[r], r)) return !0;\n    return !1;\n}\n_c31 = Ut;\nfunction Le(i, n) {\n    for(var t = i.length, r = 0; r < t; ++r)if (n(i[r], r)) return i[r];\n    return null;\n}\n_c32 = Le;\nfunction Fe(i) {\n    var n = i;\n    if (typeof n > \"u\") {\n        if (typeof navigator > \"u\" || !navigator) return \"\";\n        n = navigator.userAgent || \"\";\n    }\n    return n.toLowerCase();\n}\n_c33 = Fe;\nfunction qt(i, n) {\n    try {\n        return new RegExp(i, \"g\").exec(n);\n    } catch (e) {\n        return null;\n    }\n}\nfunction nn() {\n    if (typeof navigator > \"u\" || !navigator || !navigator.userAgentData) return !1;\n    var i = navigator.userAgentData, n = i.brands || i.uaList;\n    return !!(n && n.length);\n}\nfunction on(i, n) {\n    var t = qt(\"(\" + i + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))\", n);\n    return t ? t[3] : \"\";\n}\nfunction $t(i) {\n    return i.replace(/_/g, \".\");\n}\nfunction pt(i, n) {\n    var t = null, r = \"-1\";\n    return Ut(i, function(e) {\n        var o = qt(\"(\" + e.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", n);\n        return !o || e.brand ? !1 : (t = e, r = o[3] || \"-1\", e.versionAlias ? r = e.versionAlias : e.versionTest && (r = on(e.versionTest.toLowerCase(), n) || r), r = $t(r), !0);\n    }), {\n        preset: t,\n        version: r\n    };\n}\nfunction Tt(i, n) {\n    var t = {\n        brand: \"\",\n        version: \"-1\"\n    };\n    return Ut(i, function(r) {\n        var e = je(n, r);\n        return e ? (t.brand = r.id, t.version = r.versionAlias || e.version, t.version !== \"-1\") : !1;\n    }), t;\n}\n_c34 = Tt;\nfunction je(i, n) {\n    return Le(i, function(t) {\n        var r = t.brand;\n        return qt(\"\" + n.test, r.toLowerCase());\n    });\n}\nvar Ie = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\"\n    },\n    {\n        test: \"whale\",\n        id: \"whale\"\n    },\n    {\n        test: \"edgios|edge|edg\",\n        id: \"edge\"\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\"\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\"\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\"\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\"\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\"\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\"\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\"\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\"\n    }\n], $e = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\"\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\"\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: !0\n    }\n], Bt = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\"\n    }\n], Be = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\"\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\"\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\"\n    }\n], He = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\"\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\"\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\"\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\"\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\"\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\"\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\"\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\"\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\"\n    }\n];\nfunction Ve(i) {\n    return !!pt(Be, i).preset;\n}\n_c35 = Ve;\nfunction sn(i) {\n    var n = Fe(i), t = !!/mobi/g.exec(n), r = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: Ve(n),\n        chromium: !1,\n        chromiumVersion: \"-1\",\n        webkit: !1,\n        webkitVersion: \"-1\"\n    }, e = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1\n    }, o = pt(Ie, n), a = o.preset, l = o.version, h = pt(He, n), u = h.preset, d = h.version, v = pt($e, n);\n    if (r.chromium = !!v.preset, r.chromiumVersion = v.version, !r.chromium) {\n        var c = pt(Bt, n);\n        r.webkit = !!c.preset, r.webkitVersion = c.version;\n    }\n    return u && (e.name = u.id, e.version = d, e.majorVersion = parseInt(d, 10)), a && (r.name = a.id, r.version = l, r.webview && e.name === \"ios\" && r.name !== \"safari\" && (r.webview = !1)), r.majorVersion = parseInt(r.version, 10), {\n        browser: r,\n        os: e,\n        isMobile: t,\n        isHints: !1\n    };\n}\nfunction an(i) {\n    var n = navigator.userAgentData, t = (n.uaList || n.brands).slice(), r = n.mobile || !1, e = t[0], o = (n.platform || navigator.platform).toLowerCase(), a = {\n        name: e.brand,\n        version: e.version,\n        majorVersion: -1,\n        webkit: !1,\n        webkitVersion: \"-1\",\n        chromium: !1,\n        chromiumVersion: \"-1\",\n        webview: !!Tt(Be, t).brand || Ve(Fe())\n    }, l = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1\n    };\n    a.webkit = !a.chromium && Ut(Bt, function(c) {\n        return je(t, c);\n    });\n    var h = Tt($e, t);\n    if (a.chromium = !!h.brand, a.chromiumVersion = h.version || \"-1\", !a.chromium) {\n        var u = Tt(Bt, t);\n        a.webkit = !!u.brand, a.webkitVersion = u.version || \"-1\";\n    }\n    var d = Le(He, function(c) {\n        return new RegExp(\"\" + c.test, \"g\").exec(o);\n    });\n    l.name = d ? d.id : \"\";\n    {\n        var v = Tt(Ie, t);\n        a.name = v.brand || a.name, a.version = v.brand && i ? i.uaFullVersion : v.version;\n    }\n    return a.webkit && (l.name = r ? \"ios\" : \"mac\"), l.name === \"ios\" && a.webview && (a.version = \"-1\"), l.version = $t(l.version), a.version = $t(a.version), l.majorVersion = parseInt(l.version, 10), a.majorVersion = parseInt(a.version, 10), {\n        browser: a,\n        os: l,\n        isMobile: r,\n        isHints: !0\n    };\n}\nfunction ln(i) {\n    return nn() ? an() : sn(i);\n}\nfunction cn(i, n) {\n    return n.replace(/([^}{]*){/gm, (t, r)=>\"\".concat(r.replace(/\\.([^{,\\s\\d.]+)/g, \".\".concat(i, \"$1\")), \"{\"));\n}\nfunction dt(i, n) {\n    return (t)=>{\n        t && (i[n] = t);\n    };\n}\nconst un = ln(), hn = un.browser.name === \"safari\", et = \"infinite-viewer-\", we = \"\".concat(et, \"wrapper\"), be = \"\".concat(et, \"scroll-area\"), fn = \"\".concat(et, \"scroll-bar\"), Ne = \"\".concat(et, \"horizontal-scroll-bar\"), Ze = \"\".concat(et, \"vertical-scroll-bar\"), ye = \"\".concat(et, \"scroll-thumb\"), Ue = rn(cn(et, \"\\n{\\n    position: relative;\\n    overscroll-behavior: none;\\n}\\n.wrapper {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    overflow: auto;\\n    scrollbar-width: none;\\n    top: 0;\\n    left: 0;\\n    will-change: scroll-position;\\n}\\n.restrict-wrapper {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    top: 0;\\n    left: 0;\\n}\\n.wrapper::-webkit-scrollbar {\\n    display: none;\\n}\\n.scroll-area {\\n    position:absolute;\\n    top:0;\\n    left:0;\\n    transform-origin: 0 0;\\n}\\n.scroll-bar {\\n    position:absolute;\\n    width: 10px;\\n    height: 10px;\\n    box-sizing: border-box;\\n    right: 0;\\n    bottom: 0;\\n    overflow: hidden;\\n}\\n.horizontal-scroll-bar {\\n    width: calc(100% - 20px);\\n    right: 10px;\\n    height: 14px;\\n}\\n.vertical-scroll-bar {\\n    height: calc(100% - 20px);\\n    bottom: 10px;\\n    width: 14px;\\n}\\n.scroll-thumb {\\n    position:relative;\\n    opacity: 0.7;\\n    background: #333;\\n    border-radius: 3px;\\n    left: 0px;\\n    top: 0px;\\n    z-index: 10;\\n    width: 6px;\\n    height: 6px;\\n    transition: all ease 0.2s;\\n    opacity: 0;\\n}\\n.scroll-bar:hover .scroll-thumb {\\n    border-radius: 5px;\\n    opacity: 1;\\n}\\n.horizontal-scroll-bar .scroll-thumb {\\n    margin: 4px 0px;\\n    transition-property: opacity, margin, height, border-radius;\\n}\\n.vertical-scroll-bar .scroll-thumb {\\n    margin: 0px 4px;\\n    transition-property: opacity, margin, width, border-radius;\\n}\\n.horizontal-scroll-bar:hover .scroll-thumb {\\n    height: 10px;\\n    margin: 2px 0px;\\n}\\n.vertical-scroll-bar:hover .scroll-thumb {\\n    width: 10px;\\n    margin: 0px 2px;\\n}\\n\")), I = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    zoomX: 1,\n    zoomY: 1,\n    rangeX: [\n        -1 / 0,\n        1 / 0\n    ],\n    rangeY: [\n        -1 / 0,\n        1 / 0\n    ],\n    rangeOffsetX: [\n        0,\n        0\n    ],\n    rangeOffsetY: [\n        0,\n        0\n    ],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: !1,\n    useAutoZoom: !1,\n    useMouseDrag: !1,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    maxPinchWheel: 1 / 0,\n    wheelScale: 0.01,\n    displayHorizontalScroll: !0,\n    displayVerticalScroll: !0,\n    useTransform: !0,\n    useWheelPinch: !0,\n    zoomRange: [\n        1e-3,\n        1 / 0\n    ],\n    wheelPinchKey: \"ctrl\",\n    useWheelScroll: hn,\n    zoomOffsetX: \"50%\",\n    zoomOffsetY: \"50%\",\n    translateZ: 0,\n    useGesture: !0,\n    useResizeObserver: !1,\n    pinchDirection: \"all\",\n    preventWheelClick: !0,\n    useBounceScrollBar: !1,\n    useOverflowScroll: !1\n}, Ce = (i)=>1 - Math.pow(1 - i, 3), Te = {\n    horizontal: {\n        pos: \"Left\",\n        coord: \"X\",\n        size: \"Width\"\n    },\n    vertical: {\n        pos: \"Top\",\n        coord: \"Y\",\n        size: \"Height\"\n    }\n}, qe = Ue.className, Gt = [\n    \"margin\",\n    \"threshold\",\n    \"zoomOffsetX\",\n    \"zoomOffsetY\",\n    \"zoom\",\n    \"zoomX\",\n    \"zoomY\",\n    \"rangeX\",\n    \"rangeY\",\n    \"rangeOffsetX\",\n    \"rangeOffsetY\",\n    \"usePinch\",\n    \"useMouseDrag\",\n    \"pinchThreshold\",\n    \"maxPinchWheel\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"translateZ\",\n    \"useAutoZoom\",\n    \"wheelPinchKey\",\n    \"zoomRange\",\n    \"zoomRangeX\",\n    \"zoomRangeY\",\n    \"pinchDirection\",\n    \"useOverflowScroll\"\n], vn = [\n    // ignore target, container,\n    ...Gt,\n    \"preventWheelClick\",\n    \"useWheelPinch\",\n    \"useWheelScroll\",\n    \"useGesture\",\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n    \"useResizeObserver\",\n    \"wheelContainer\",\n    \"useBounceScrollBar\"\n], Ge = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\"\n], wn = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"getContainerWidth\",\n    \"getContainerHeight\",\n    \"getViewportWidth\",\n    \"getViewportHeight\",\n    \"getViewportScrollWidth\",\n    \"getViewportScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"zoomBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n    \"resize\",\n    \"getZoom\",\n    \"getZoomX\",\n    \"getZoomY\",\n    \"getWheelContainer\",\n    \"setTo\",\n    \"setBy\"\n], dn = 1e-6;\nfunction pn(i) {\n    const { deltaX: n, deltaY: t, datas: r } = i, e = Date.now(), o = r.speed;\n    if (!o) {\n        r.speed = [\n            0,\n            0\n        ], r.time = e;\n        return;\n    }\n    const a = e - r.time;\n    r.speed = [\n        o[0] / 2 + n / a,\n        o[1] / 2 + t / a\n    ];\n}\nfunction Ke(i, n) {\n    const t = Math.sqrt(i[0] * i[0] + i[1] * i[1]);\n    return Math.abs(t / n);\n}\n_c36 = Ke;\nfunction gn(i, n) {\n    const t = Ke(i, n);\n    return [\n        -i[0] / 2 * t,\n        -i[1] / 2 * t\n    ];\n}\nfunction U(i) {\n    return Math.abs(i);\n}\n_c37 = U;\nfunction mn(i, n, t, r, e) {\n    const o = e || isFinite(t[0]) ? t[0] : Math.min(-1, Math.floor(i / n)) * n - r, a = e || isFinite(t[1]) ? t[1] : Math.max(1, Math.ceil(i / n)) * n + r;\n    return [\n        o,\n        a\n    ];\n}\nfunction ze(i, n) {\n    return i !== null && i !== void 0 ? i : n;\n}\nfunction Re(i, n, t) {\n    const r = t.duration, e = t.easing || ((h)=>1 - Math.pow(1 - h, 3)), o = Date.now();\n    let a = o;\n    const l = ()=>{\n        const h = Date.now();\n        let u = h - o;\n        r < u && (u = r);\n        const d = e(u / r), v = e((a - o) / r);\n        a = h, i(d - v), !(u >= r) && n(l);\n    };\n    n(l);\n}\n_c38 = Re;\nclass De extends Zt {\n    scrollBy(t, r) {\n        const e = t / this.size;\n        this.trigger(\"scroll\", {\n            delta: r ? t : this.scrollSize * e\n        });\n    }\n    render(t, r, e, o) {\n        this.size = e, this.scrollSize = o;\n        const a = t && $r(o - e, 1e-3) > 0 ? 1 : 0, [l, h] = this.isHorizontal ? [\n            \"X\",\n            \"width\"\n        ] : [\n            \"Y\",\n            \"height\"\n        ], u = e / o * 100, d = Math.max(0, r) / o * 100;\n        this.thumbElement.style.cssText += \"\".concat(h, \": \").concat(u, \"%;opacity: \").concat(a, \";transform: translate\").concat(l, \"(\").concat(100 / u * d, \"%)\");\n    }\n    destroy() {\n        Y(this.barElement, \"wheel\", this._onWheel), this.gesto.off(), this.off();\n    }\n    constructor(t, r, e){\n        super();\n        _(this, \"isAppend\", !1);\n        _(this, \"thumbElement\");\n        _(this, \"barElement\");\n        _(this, \"gesto\");\n        _(this, \"size\", 0);\n        _(this, \"scrollSize\", 0);\n        _(this, \"isHorizontal\", !1);\n        _(this, \"_onDragStart\", (t)=>{\n            const r = this.isHorizontal, e = t.inputEvent.target, o = t.datas, a = this.thumbElement === e;\n            a || setTimeout(()=>{\n                requestAnimationFrame(()=>{\n                    const l = this.thumbElement.getBoundingClientRect(), h = l[r ? \"left\" : \"top\"], u = l[r ? \"width\" : \"height\"], d = h + u, v = t[r ? \"clientX\" : \"clientY\"];\n                    if (h <= v && v <= d) return;\n                    const c = this.size, m = c * c / this.scrollSize;\n                    this.scrollBy(h < v ? m : -m);\n                });\n            }, 100), o.isThumb = a, t.inputEvent.stopPropagation(), t.inputEvent.preventDefault();\n        });\n        _(this, \"_onDrag\", (t)=>{\n            t.datas.isThumb && this.scrollBy(this.isHorizontal ? t.deltaX : t.deltaY);\n        });\n        _(this, \"_onWheel\", (t)=>{\n            const r = this.isHorizontal ? t.deltaX : t.deltaY;\n            r && t.preventDefault(), this.trigger(\"scroll\", {\n                delta: r\n            });\n        });\n        this.type = r;\n        const o = r === \"horizontal\", a = Nt(t);\n        let l, h = e;\n        e ? l = e.querySelector(\".\".concat(ye)) : (h = a.createElement(\"div\"), l = a.createElement(\"div\"), h.insertBefore(l, null), this.isAppend = !0), it(h, o ? Ne : Ze), it(h, fn), it(l, ye), this.thumbElement = l, this.barElement = h, this.isHorizontal = o, this.gesto = new We(h, {\n            container: ot(a)\n        }).on(\"dragStart\", (u)=>this._onDragStart(u)).on(\"drag\", (u)=>this._onDrag(u)), O(this.barElement, \"wheel\", this._onWheel, {\n            passive: !1\n        });\n    }\n}\nlet Ht = class extends Zt {\n    static addProperties(t, r) {\n        t.forEach((e)=>{\n            const o = {\n                enumerable: !0,\n                configurable: !0,\n                get () {\n                    return this.options[e];\n                }\n            }, a = Ae(\"set \".concat(e));\n            r[a] ? o.set = function(l) {\n                this[a](l);\n            } : o.set = function(l) {\n                this.options[e] = l;\n            }, Object.defineProperty(r, e, o);\n        });\n    }\n    /**\n   * Get Container Element\n   */ getContainer() {\n        return this._containerElement;\n    }\n    /**\n   * Get Wheel Container Element\n   */ getWheelContainer() {\n        return this._wheelContainerElement;\n    }\n    /**\n   * Get Viewport Element\n   */ getViewport() {\n        return this._viewportElement;\n    }\n    /**\n   * Get Wrapper Element\n   */ getWrapper() {\n        return this.wrapperElement;\n    }\n    /**\n   * Get Scroll Area Element\n   */ geScrollArea() {\n        return this.scrollAreaElement;\n    }\n    /**\n   * Destroy elements, properties, and events.\n   */ destroy() {\n        this.off(), this.gesto.unset(), this.verticalScrollbar.destroy(), this.horizontalScrollbar.destroy(), this.injectResult.destroy();\n        const t = this._containerElement;\n        this._onDestroys.forEach((r)=>{\n            r();\n        }), Y(this.wrapperElement, \"scroll\", this._onScroll), Y(this._wheelContainerElement, \"wheel\", this.onWheel), Y(t, \"gesturestart\", this.onGestureStart), Y(t, \"gesturechange\", this.onGestureChange), Y(t, \"gesturesend\", this.onGestureEnd), this.gesto = null, this.injectResult = null, this._containerElement = null, this._viewportElement = null, this.options = null;\n    }\n    /**\n   * Gets the number of pixels that an element's content is scrolled vertically.\n   */ getScrollTop() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        let r = !1, e = !1;\n        st(t) ? (r = t.range, e = t.absolute) : r = t;\n        const o = this.zoomY, a = this.scrollTop / o + this.offsetY + (r ? U(this.getRangeY()[0]) : 0);\n        return e ? a * o : a;\n    }\n    /**\n   * Gets the number of pixels that an element's content is scrolled vertically.\n   */ getScrollLeft() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        let r = !1, e = !1;\n        st(t) ? (r = t.range, e = t.absolute) : r = t;\n        const o = this.zoomX, a = this.scrollLeft / o + this.offsetX + (r ? U(this.getRangeX()[0]) : 0);\n        return e ? a * o : a;\n    }\n    /**\n   * Gets measurement of the width of an element's content with overflow\n   */ getScrollWidth(t) {\n        const r = this._getScrollRangeX(), e = this.zoomX, o = this.containerWidth / e + U(r[0]) + r[1];\n        return t ? o : o * e;\n    }\n    /**\n   * Gets measurement of the height of an element's content with overflow\n   */ getScrollHeight(t) {\n        const r = this._getScrollRangeY(), e = this.zoomY, o = this.containerHeight / e + U(r[0]) + r[1];\n        return t ? o : o * e;\n    }\n    /**\n   * Scroll the element to the center\n   */ scrollCenter() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.resize();\n        const r = this.zoomX, e = this.zoomY;\n        let o = -(this.containerWidth / r - this.viewportWidth) / 2, a = -(this.containerHeight / e - this.viewportHeight) / 2;\n        return t.absolute && (o *= r, a *= e), t.horizontal === !1 && (o = this.getScrollLeft()), t.vertical === !1 && (a = this.getScrollTop()), this.scrollTo(o, a, t);\n    }\n    /**\n   * Move to that position or zoom.\n   * @since 0.25.0\n   */ setTo(t) {\n        const { x: r = this.getScrollLeft(), y: e = this.getScrollTop(), zoom: o = [\n            this.getZoomX(),\n            this.getZoomY()\n        ], duration: a } = t, { zoomX: l, zoomY: h, zoomRange: u } = this;\n        let { zoomOffsetX: d = I.zoomOffsetX, zoomOffsetY: v = I.zoomOffsetY } = this;\n        \"zoomOffsetX\" in t && (d = t.zoomOffsetX), \"zoomOffsetY\" in t && (v = t.zoomOffsetY);\n        const [c, m] = vt(o) ? o : [\n            o,\n            o\n        ], p = this.zoomRangeX || u, S = this.zoomRangeY || u, T = tt(c, p[0], p[1]), z = tt(m, S[0], S[1]), b = G(\"\".concat(d), this.viewportWidth) * (1 / l - 1 / T), W = G(\"\".concat(v), this.viewportHeight) * (1 / h - 1 / z);\n        this.scrollTo(r - b, e - W, {\n            duration: a\n        }), this.setZoom(o, {\n            zoomOffsetX: d,\n            zoomOffsetY: v,\n            duration: a,\n            zoomBase: \"fixed\"\n        });\n    }\n    /**\n   * Move by the position or zoom delta value.\n   * @since 0.25.0\n   */ setBy(t) {\n        const { x: r = 0, y: e = 0, zoom: o = [\n            0,\n            0\n        ] } = t, [a, l] = vt(o) ? o : [\n            o,\n            o\n        ];\n        this.setTo({\n            ...t,\n            x: this.getScrollLeft() + r,\n            y: this.getScrollTop() + e,\n            zoom: [\n                this.zoomX + a,\n                this.zoomY + l\n            ]\n        });\n    }\n    /**\n   * Scrolls the container by the given amount.\n   */ scrollBy(t, r, e) {\n        if (this._pauseScrollAnimation(), !e || !e.duration) {\n            let o = this.getScrollLeft(), a = this.getScrollTop();\n            return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this._scrollTo(o + t, a + r, e);\n        } else return this._startScrollAnimation([\n            t,\n            r\n        ], e), !0;\n    }\n    /**\n   * Scrolls the container to set of coordinates.\n   * @param scrollLeft\n   * @param scrollTop\n   */ scrollTo(t, r, e) {\n        if (this._pauseScrollAnimation(), !e || !e.duration) return this._scrollTo(t, r, e);\n        {\n            let o = this.getScrollLeft(), a = this.getScrollTop();\n            return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this.scrollBy(t - o, r - a, e);\n        }\n    }\n    /**\n   * Set viewer zoom by the given amount\n   */ zoomBy(t, r) {\n        this._pauseZoomAnimation();\n        const [e, o] = vt(t) ? t : [\n            t,\n            t\n        ];\n        !r || !r.duration ? this._setZoom([\n            this.zoomX + e,\n            this.zoomY + o\n        ], r) : this._startZoomAnimation([\n            e,\n            o\n        ], r);\n    }\n    /**\n   * Set viewer zoom\n   */ setZoom(t, r) {\n        if (this._pauseZoomAnimation(), !r || !r.duration) this._setZoom(t, r);\n        else {\n            const [e, o] = vt(t) ? t : [\n                t,\n                t\n            ];\n            this._startZoomAnimation([\n                e - this.zoomX,\n                o - this.zoomY\n            ], r);\n        }\n    }\n    getViewportWidth() {\n        return this.viewportWidth;\n    }\n    getViewportHeight() {\n        return this.viewportWidth;\n    }\n    getViewportScrollWidth() {\n        return this.viewportScrollWidth;\n    }\n    getViewportScrollHeight() {\n        return this.viewportScrollHeight;\n    }\n    getContainerWidth() {\n        return this.containerWidth;\n    }\n    getContainerHeight() {\n        return this.containerHeight;\n    }\n    /**\n   * Get viewer zoom\n   */ getZoom() {\n        return (this.zoomX + this.zoomY) / 2;\n    }\n    /**\n   * Get viewer zoomX\n   * @since 0.20.0\n   */ getZoomX() {\n        return this.zoomX;\n    }\n    /**\n   * Get viewer zoom\n   * @since 0.20.0\n   */ getZoomY() {\n        return this.zoomY;\n    }\n    /**\n   * get x ranges\n   */ getRangeX(t, r) {\n        return this._getRangeCoord(\"horizontal\", t, r);\n    }\n    /**\n   * get y ranges\n   */ getRangeY(t, r) {\n        return this._getRangeCoord(\"vertical\", t, r);\n    }\n    init() {\n        const t = this._containerElement, r = this.options, e = Nt(t), o = ot(t);\n        let a = r.wrapperElement || t.querySelector(\".\".concat(we)), l = r.scrollAreaElement || t.querySelector(\".\".concat(be));\n        const h = r.horizontalScrollElement || t.querySelector(\".\".concat(Ne)), u = r.verticalScrollElement || t.querySelector(\".\".concat(Ze));\n        a || (a = e.createElement(\"div\"), a.insertBefore(this._viewportElement, null), t.insertBefore(a, null)), this.wrapperElement = a, l || (l = e.createElement(\"div\"), a.insertBefore(l, a.firstChild)), this.scrollAreaElement = l, it(t, qe), it(a, we), it(l, be);\n        const d = new De(t, \"horizontal\", h), v = new De(t, \"vertical\", u);\n        this.horizontalScrollbar = d, this.verticalScrollbar = v, d.on(\"scroll\", (p)=>{\n            this.scrollBy(p.delta / this.zoomX, 0);\n        }), v.on(\"scroll\", (p)=>{\n            this.scrollBy(0, p.delta / this.zoomY);\n        }), d.isAppend && t.insertBefore(d.barElement, null), v.isAppend && t.insertBefore(v.barElement, null), this.injectResult = Ue.inject(t, {\n            nonce: this.options.cspNonce\n        });\n        const c = r.wheelContainer;\n        let m = null;\n        var _this_options_preventWheelClick;\n        if (c && (Oe(c) ? m = e.querySelector(c) : _e(c) ? m = c : (\"value\" in c || \"current\" in c) && (m = c.current || c.value)), m || (m = t), this._wheelContainerElement = m, this.gesto = new We(t, {\n            container: ot(t),\n            events: [\n                \"touch\",\n                \"mouse\"\n            ],\n            preventWheelClick: (_this_options_preventWheelClick = this.options.preventWheelClick) !== null && _this_options_preventWheelClick !== void 0 ? _this_options_preventWheelClick : !0\n        }).on(\"dragStart\", (p)=>{\n            const { inputEvent: S, stop: T, datas: z } = p;\n            if (!this.useMouseDrag && p.isMouseEvent) {\n                T();\n                return;\n            }\n            if (this._pauseScrollAnimation(), this.dragFlag = !1, this.trigger(\"dragStart\", p) === !1) {\n                T();\n                return;\n            }\n            S.preventDefault(), z.startEvent = S;\n        }).on(\"drag\", (p)=>{\n            !this.options.usePinch || p.isPinch || this.useMouseDrag && p.isMouseEvent ? (this.trigger(\"drag\", {\n                ...p,\n                inputEvent: p.inputEvent\n            }), pn(p), this.scrollBy(-p.deltaX / this.zoomX, -p.deltaY / this.zoomY)) : !this.dragFlag && p.movement > r.pinchThreshold && (this.dragFlag = !0, this.trigger(\"abortPinch\", {\n                inputEvent: p.datas.startEvent || p.inputEvent\n            }));\n        }).on(\"dragEnd\", (p)=>{\n            this.trigger(\"dragEnd\", {\n                isDrag: p.isDrag,\n                isDouble: p.isDouble,\n                inputEvent: p.inputEvent\n            }), this._startScrollAnimationBySpeed(p.datas.speed);\n        }).on(\"pinchStart\", (param)=>{\n            let { inputEvent: p, datas: S, stop: T } = param;\n            p.preventDefault(), this._pauseScrollAnimation(), S.startZoom = [\n                this.zoomX,\n                this.zoomY\n            ], this.trigger(\"pinchStart\", {\n                inputEvent: p\n            }) === !1 && T(), this._setClientRect();\n        }).on(\"pinch\", (p)=>{\n            const S = p.scale, T = this.options.pinchDirection;\n            this._triggerPinch({\n                rotation: p.rotation,\n                distance: p.distance,\n                scale: p.scale,\n                inputEvent: p.inputEvent,\n                isWheel: !1,\n                zoom: p.datas.startZoom * S,\n                zoomX: this.zoomX * (T === \"vertical\" ? 1 : S),\n                zoomY: this.zoomY * (T === \"horizontal\" ? 1 : S),\n                clientX: p.clientX,\n                clientY: p.clientY,\n                ratioX: 0,\n                ratioY: 0\n            });\n        }).on(\"pinchEnd\", ()=>{\n            this._tempRect = null;\n        }), O(a, \"scroll\", this._onScroll), r.useResizeObserver) {\n            const p = new o.ResizeObserver(()=>{\n                this.resize();\n            });\n            p.observe(this._viewportElement), p.observe(this._containerElement), this._onDestroys.push(()=>{\n                p.disconnect();\n            });\n        } else O(o, \"resize\", this.resize), this._onDestroys.push(()=>{\n            Y(o, \"resize\", this.resize);\n        });\n        (r.useWheelPinch || r.useWheelScroll) && O(m, \"wheel\", this.onWheel, {\n            passive: !1\n        }), r.useGesture && (O(t, \"gesturestart\", this.onGestureStart, {\n            passive: !1\n        }), O(t, \"gesturechange\", this.onGestureChange, {\n            passive: !1\n        })), this.resize();\n    }\n    render() {\n        const { offsetX: t, offsetY: r, zoomX: e = I.zoomX, zoomY: o = I.zoomY, translateZ: a = 0, rangeX: l, rangeY: h, containerWidth: u, containerHeight: d } = this, { useTransform: v = I.useTransform } = this.options;\n        let c = -t * e, m = -r * o;\n        this.scrollAreaElement.style.cssText = \"width:calc(100% + \".concat(this.getScrollAreaWidth(), \"px);height:calc(100% + \").concat(this.getScrollAreaHeight(), \"px);\");\n        const p = this._viewportElement.style;\n        v === !1 ? p.cssText += \"position: relative; left: \".concat(c, \"px; top: \").concat(m, \"px; \") : p.cssText += \"transform-origin: 0 0;transform:translate3d(\".concat(c, \"px, \").concat(m, \"px, \").concat(a, \"px) scale(\").concat(e, \", \").concat(o, \");\"), this.renderScroll();\n    }\n    renderScroll() {\n        const { zoomX: t, zoomY: r, containerWidth: e, containerHeight: o } = this, a = this.horizontalScrollbar, l = this.verticalScrollbar;\n        if (this.options.useBounceScrollBar) {\n            const h = this.getScrollLeft(!0) * t, u = this.getRangeX(!0), d = e + U(u[0]) + U(u[1]), v = this.getScrollTop(!0) * r, c = this.getRangeY(!0), m = o + U(c[0]) + U(c[1]);\n            a.render(this.displayHorizontalScroll, h, e, d), l.render(this.displayVerticalScroll, v, o, m);\n        } else {\n            const h = this._getScrollRangeX(), u = this._getScrollRangeY(), d = this.getScrollLeft(), v = this.getScrollTop(), c = this.containerWidth + U(h[0]) + h[1], m = this.containerHeight + U(u[0]) + u[1];\n            a.render(this.displayHorizontalScroll, d - h[0], e, c), l.render(this.displayVerticalScroll, v - u[0], o, m);\n        }\n    }\n    move(t, r) {\n        const e = this.wrapperElement;\n        e.scrollLeft = t, e.scrollTop = r;\n    }\n    setDisplayVerticalScroll(t) {\n        this.options.displayVerticalScroll = t, this.renderScroll();\n    }\n    setDisplayHorizontalScroll(t) {\n        this.options.displayHorizontalScroll = t, this.renderScroll();\n    }\n    _startZoomAnimation(t, r) {\n        if (!t) return;\n        const e = r.duration, o = r.easing || Ce;\n        Re((a)=>this._setZoom([\n                this.zoomX + t[0] * a,\n                this.zoomY + t[1] * a\n            ], r), (a)=>{\n            this._zoomTimer = requestAnimationFrame(a);\n        }, {\n            easing: o,\n            duration: e\n        });\n    }\n    _startScrollAnimation(t, r) {\n        if (!t[0] && !t[1]) return;\n        const e = r.duration, o = r.easing || Ce;\n        Re((a)=>this._scrollBy(t[0] * a, t[1] * a, r), (a)=>{\n            this._scrollTimer = requestAnimationFrame(a);\n        }, {\n            easing: o,\n            duration: e\n        });\n    }\n    _startScrollAnimationBySpeed(t) {\n        if (!t || !t[0] && !t[1]) return;\n        const r = -6e-4, e = Ke(t, r), o = gn(t, r);\n        return this._startScrollAnimation(o, {\n            duration: e\n        });\n    }\n    _pauseScrollAnimation() {\n        cancelAnimationFrame(this._scrollTimer), this._scrollTimer = 0;\n    }\n    _pauseZoomAnimation() {\n        cancelAnimationFrame(this._zoomTimer), this._zoomTimer = 0;\n    }\n    getScrollAreaWidth() {\n        const [t, r] = this.getRangeX(!0);\n        return t || r ? this.margin * 2 : 0;\n    }\n    getScrollAreaHeight() {\n        const [t, r] = this.getRangeY(!0);\n        return t || r ? this.margin * 2 : 0;\n    }\n    _triggerPinch(t) {\n        const { clientX: r, clientY: e, zoomX: o, zoomY: a } = t;\n        this.useAutoZoom && this._zoomByClient([\n            o,\n            a\n        ], r, e), this._tempRect || this._setClientRect();\n        const l = this.zoomRange, h = this.zoomRangeX || l, u = this.zoomRangeY || l, { left: d, top: v, width: c, height: m } = this._tempRect, p = (r - d) / c * 100, S = (e - v) / m * 100;\n        this.trigger(\"pinch\", {\n            ...t,\n            zoom: tt((o + a) / 2, l[0], l[1]),\n            zoomX: tt(o, h[0], h[1]),\n            zoomY: tt(a, u[0], u[1]),\n            ratioX: p,\n            ratioY: S\n        });\n    }\n    _setClientRect() {\n        const t = this.getContainer().getBoundingClientRect();\n        this._tempRect = {\n            left: t.left,\n            top: t.top,\n            width: t.width,\n            height: t.height\n        };\n    }\n    _zoomByClient(t, r, e) {\n        this._tempRect || this._setClientRect();\n        const { left: o, top: a, width: l, height: h } = this._tempRect, u = this.options, d = u.zoomOffsetX, v = u.zoomOffsetY;\n        u.zoomOffsetX = \"\".concat((r - o) / l * 100, \"%\"), u.zoomOffsetY = \"\".concat((e - a) / h * 100, \"%\"), this._setZoom(t, {\n            zoomBase: \"screen\"\n        }), u.zoomOffsetX = d, u.zoomOffsetY = v;\n    }\n    _setZoom(t) {\n        let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const e = r.zoomBase, { containerWidth: o, containerHeight: a, zoomX: l, zoomY: h, zoomRange: u } = this;\n        let { zoomOffsetX: d = I.zoomOffsetX, zoomOffsetY: v = I.zoomOffsetY } = this;\n        \"zoomOffsetX\" in r && (d = r.zoomOffsetX), \"zoomOffsetY\" in r && (v = r.zoomOffsetY);\n        const c = this.getScrollLeft(), m = this.getScrollTop(), [p, S] = vt(t) ? t : [\n            t,\n            t\n        ], T = this.zoomRangeX || u, z = this.zoomRangeY || u, b = tt(p, T[0], T[1]), W = tt(S, z[0], z[1]), k = this.options;\n        k.zoomX = b, k.zoomY = W, k.zoom = (b + W) / 2;\n        const H = this.getScrollLeft(), V = this.getScrollTop();\n        let C = 0, P = 0;\n        e === \"fixed\" ? (C = G(\"\".concat(d), this.viewportWidth), P = G(\"\".concat(v), this.viewportHeight)) : e === \"viewport\" ? (C = (-c + G(\"\".concat(d), this.viewportWidth)) * l, P = (-m + G(\"\".concat(v), this.viewportHeight)) * h) : (C = G(\"\".concat(d), o), P = G(\"\".concat(v), a));\n        const L = c + C / l, q = m + P / h, Z = H + C / b, F = V + P / W;\n        this._scrollBy(L - Z, q - F, {\n            zoom: !!(b - l || W - h)\n        }), this.render();\n    }\n    _scrollBy(t, r, e) {\n        let o = this.getScrollLeft(), a = this.getScrollTop();\n        return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this._scrollTo(o + t, a + r, e);\n    }\n    _scrollTo(t, r, e) {\n        const { scrollLeft: o, scrollTop: a } = this, l = e == null ? void 0 : e.absolute;\n        this._scrollToType(\"horizontal\", t, l), this._scrollToType(\"vertical\", r, l);\n        const h = this.scrollLeft, u = this.scrollTop;\n        this.render();\n        const d = this.getScrollLeft(), v = this.getScrollTop();\n        return this._emitScrollEvent(d, v, e == null ? void 0 : e.zoom), Math.round(o) !== h || Math.round(a) !== u ? (this.isLoop = !0, this.move(h, u), requestAnimationFrame(()=>{\n            if (!this.isLoop) return;\n            this.isLoop = !1;\n            const { scrollLeft: c, scrollTop: m } = this.wrapperElement;\n            this.scrollLeft = c, this.scrollTop = m, (h !== Math.round(c) || u !== Math.round(m)) && this._scrollTo(d, v);\n        }), !1) : !0;\n    }\n    _scrollToType(t, r, e) {\n        const o = Te[t], { margin: a = I.margin, threshold: l = I.threshold } = this, h = this[\"scroll\".concat(o.pos)], [u, d] = this[\"getRange\".concat(o.coord)](!0, !0);\n        let v = Math.round(h);\n        const c = this[\"getScrollArea\".concat(o.size)](), m = this[\"zoom\".concat(o.coord)];\n        e && (r = r / m);\n        const p = r * m;\n        if (u === d) v = u, r = u / m;\n        else if (p - l <= u) {\n            const S = Math.max(0, p - u);\n            v = S, r = (u + S) / m;\n        } else if (p + l >= d) {\n            const S = Math.max(0, d - p);\n            v = c - S, r = (d - S) / m;\n        } else v < l ? v += a : v > c - l && (v -= a);\n        v = Math.round(v), this[\"scroll\".concat(o.pos)] = v, this[\"offset\".concat(o.coord)] = r - v / m;\n    }\n    _getRangeCoord(t, r, e) {\n        const { margin: o = I.margin, threshold: a } = this, l = Te[t], h = ze(this[\"range\".concat(l.coord)], I[\"range\".concat(l.coord)]), u = ze(this[\"rangeOffset\".concat(l.coord)], I[\"rangeOffset\".concat(l.coord)]), d = this[\"zoom\".concat(l.coord)], v = mn(this[\"getScroll\".concat(l.pos)](), o, h, a, e);\n        return r ? [\n            v[0] * d + u[0],\n            this.options.useOverflowScroll ? Math.max(this[\"viewport\".concat(l.size)] * d - this[\"container\".concat(l.size)], v[1] * d + u[1]) : v[1] * d + u[1]\n        ] : [\n            v[0] + u[0],\n            v[1] + u[1]\n        ];\n    }\n    _emitScrollEvent(t, r, e) {\n        const o = this._asLeft, a = this._asTop;\n        !e && o === t && a === r || (this._asLeft = t, this._asTop = r, this.trigger(\"scroll\", {\n            scrollLeft: t,\n            scrollTop: r,\n            zoomX: this.zoomX,\n            zoomY: this.zoomY\n        }));\n    }\n    _getScrollRangeX() {\n        const t = this.getScrollLeft(), r = this.rangeX, e = r[0];\n        let o = r[1];\n        this.useOverflowScroll && isFinite(o) && (o = Math.max(o, this.viewportWidth - this.containerWidth / this.zoomX));\n        const a = Math.min(0, isFinite(e) ? Math.min(e, t) : t), l = Math.max(0, isFinite(o) ? Math.max(o, t) : t), h = this.viewportScrollWidth, u = Math.max(this.containerWidth / this.zoomX, h) - h;\n        return [\n            Math.min(0, u + a),\n            l\n        ];\n    }\n    _getScrollRangeY() {\n        const t = this.getScrollTop(), r = this.rangeY, e = r[0];\n        let o = r[1];\n        this.useOverflowScroll && isFinite(o) && (o = Math.max(o, this.viewportHeight - this.containerHeight / this.zoomY));\n        const a = Math.min(0, isFinite(e) ? Math.min(e, t) : t), l = Math.max(0, isFinite(o) ? Math.max(o, t) : t), h = this.viewportScrollHeight, u = Math.max(this.containerHeight / this.zoomY, h) - h;\n        return [\n            Math.min(0, u + a),\n            l\n        ];\n    }\n    /**\n   * @sort 1\n   */ constructor(t, r = {}, e = {}){\n        super();\n        _(this, \"options\");\n        _(this, \"injectResult\");\n        _(this, \"wrapperElement\");\n        _(this, \"scrollAreaElement\");\n        _(this, \"horizontalScrollbar\");\n        _(this, \"verticalScrollbar\");\n        _(this, \"gesto\");\n        _(this, \"offsetX\", 0);\n        _(this, \"offsetY\", 0);\n        _(this, \"containerWidth\", 0);\n        _(this, \"containerHeight\", 0);\n        _(this, \"viewportWidth\", 0);\n        _(this, \"viewportHeight\", 0);\n        _(this, \"viewportScrollWidth\", 0);\n        _(this, \"viewportScrollHeight\", 0);\n        _(this, \"scrollLeft\", 0);\n        _(this, \"scrollTop\", 0);\n        _(this, \"_scrollTimer\", 0);\n        _(this, \"_zoomTimer\", 0);\n        _(this, \"_viewportElement\", null);\n        _(this, \"_wheelContainerElement\", null);\n        _(this, \"dragFlag\", !1);\n        _(this, \"isLoop\", !1);\n        _(this, \"_tempScale\", [\n            1,\n            1\n        ]);\n        _(this, \"_tempRect\", null);\n        _(this, \"_tempRectTimer\", null);\n        _(this, \"_onDestroys\", []);\n        _(this, \"_asLeft\", 0);\n        _(this, \"_asTop\", 0);\n        /**\n     * Update Viewer Sizes\n     * @method\n     */ _(this, \"resize\", ()=>{\n            const { offsetWidth: t, offsetHeight: r } = this._containerElement, { offsetWidth: e, offsetHeight: o, scrollWidth: a, scrollHeight: l } = this._viewportElement;\n            this.containerWidth = t, this.containerHeight = r, this.viewportWidth = e, this.viewportHeight = o, this.viewportScrollWidth = Math.max(e, a), this.viewportScrollHeight = Math.max(o, l), this.render(), this._scrollBy(0, 0);\n        });\n        _(this, \"_onScroll\", ()=>{\n            const { scrollLeft: t, scrollTop: r } = this.wrapperElement, { zoom: e = I.zoom } = this, o = t - this.scrollLeft, a = r - this.scrollTop, l = this.getScrollLeft(), h = this.getScrollTop();\n            this.isLoop && (this.isLoop = !1), this.scrollLeft = t, this.scrollTop = r, this.scrollTo(l + o / e, h + a / e);\n        });\n        _(this, \"onWheel\", (t)=>{\n            const r = this.options, e = r.pinchDirection, o = r.maxPinchWheel || 1 / 0, a = t[\"\".concat(this.wheelPinchKey, \"Key\")] || t.ctrlKey;\n            if (r.useWheelPinch && a) {\n                let l = t.deltaY;\n                const h = l >= 0 ? 1 : -1, u = Math.min(o, Math.abs(l));\n                l = h * u;\n                const d = -l, v = Math.max(1 + d * (r.wheelScale || 0.01), dn);\n                clearTimeout(this._tempRectTimer), this._tempRectTimer = window.setTimeout(()=>{\n                    this._tempRect = null;\n                }, 100), this._triggerPinch({\n                    distance: u,\n                    scale: v,\n                    rotation: 0,\n                    zoom: this.zoom * v,\n                    zoomX: this.zoomX * (e === \"vertical\" ? 1 : v),\n                    zoomY: this.zoomY * (e === \"horizontal\" ? 1 : v),\n                    inputEvent: t,\n                    isWheel: !0,\n                    clientX: t.clientX,\n                    clientY: t.clientY,\n                    ratioX: 0,\n                    ratioY: 0\n                });\n            } else if (r.useWheelScroll) {\n                let l = t.deltaX, h = t.deltaY;\n                t.shiftKey && !l && (l = h, h = 0), this.scrollBy(l / this.zoomX, h / this.zoomY);\n            } else return;\n            t.preventDefault();\n        });\n        _(this, \"onGestureStart\", (t)=>{\n            this._tempScale = [\n                this.zoomX,\n                this.zoomY\n            ], this._setClientRect(), t.preventDefault();\n        });\n        _(this, \"onGestureChange\", (t)=>{\n            if (t.preventDefault(), this.gesto.isFlag() || !this._tempScale) {\n                this._tempScale = [\n                    1,\n                    1\n                ];\n                return;\n            }\n            const r = t.scale, e = this._tempScale[0], o = this._tempScale[1], a = this.options.pinchDirection;\n            this._triggerPinch({\n                distance: 0,\n                scale: r,\n                rotation: t.rotation,\n                inputEvent: t,\n                isWheel: !0,\n                zoom: (e + o) * r / 2,\n                zoomX: e * (a === \"vertical\" ? 1 : r),\n                zoomY: o * (a === \"horizontal\" ? 1 : r),\n                clientX: t.clientX,\n                clientY: t.clientY,\n                ratioX: 0,\n                ratioY: 0\n            });\n        });\n        _(this, \"onGestureEnd\", ()=>{});\n        this._containerElement = t, _e(r) ? (this._viewportElement = r, this.options = {\n            ...I,\n            ...e\n        }) : (this._viewportElement = t.children[0], this.options = {\n            ...I,\n            ...r\n        }), this.init();\n    }\n};\nHt.addProperties(Gt, Ht.prototype);\nlet _n = class extends Ht {\n};\nconst Ye = Ge.map(_c39 = (i)=>Ae(\"on \".concat(i)));\n_c40 = Ye;\nclass Cn extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    render() {\n        const t = this.props.className;\n        return /* @__PURE__ */ Q.jsxs(\"div\", {\n            className: \"\".concat(t || \"\", \" \").concat(qe),\n            ref: dt(this, \"containerElement\"),\n            children: [\n                /* @__PURE__ */ Q.jsxs(\"div\", {\n                    className: \"infinite-viewer-wrapper\",\n                    ref: dt(this, \"wrapperElement\"),\n                    children: [\n                        /* @__PURE__ */ Q.jsx(\"div\", {\n                            className: \"infinite-viewer-scroll-area\",\n                            ref: dt(this, \"scrollAreaElement\")\n                        }),\n                        this.props.children\n                    ]\n                }),\n                /* @__PURE__ */ Q.jsx(\"div\", {\n                    className: \"infinite-viewer-scroll-bar infinite-viewer-horizontal-scroll-bar\",\n                    ref: dt(this, \"horizontalScrollElement\"),\n                    children: /* @__PURE__ */ Q.jsx(\"div\", {\n                        className: \"infinite-viewer-scroll-thumb\"\n                    })\n                }),\n                /* @__PURE__ */ Q.jsx(\"div\", {\n                    className: \"infinite-viewer-scroll-bar infinite-viewer-vertical-scroll-bar\",\n                    ref: dt(this, \"verticalScrollElement\"),\n                    children: /* @__PURE__ */ Q.jsx(\"div\", {\n                        className: \"infinite-viewer-scroll-thumb\"\n                    })\n                })\n            ]\n        });\n    }\n    componentDidMount() {\n        const t = this.props, r = {};\n        vn.forEach((e)=>{\n            e in t && typeof t[e] < \"u\" && (r[e] = t[e]);\n        }), this.infiniteViewer = new _n(this.containerElement, this.scrollAreaElement.nextElementSibling, {\n            ...r,\n            wrapperElement: this.wrapperElement,\n            scrollAreaElement: this.scrollAreaElement,\n            horizontalScrollElement: this.horizontalScrollElement,\n            verticalScrollElement: this.verticalScrollElement\n        }), Ge.forEach((e, o)=>{\n            this.infiniteViewer.on(e, (a)=>{\n                const l = this.props;\n                (l[Ye[o]] && l[Ye[o]](a)) === !1 && a.stop();\n            });\n        });\n    }\n    componentDidUpdate() {\n        const t = this.props, r = this.infiniteViewer;\n        Gt.forEach((e)=>{\n            e in t && r[e] !== t[e] && (r[e] = t[e]);\n        });\n    }\n    componentWillUnmount() {\n        this.infiniteViewer.destroy();\n    }\n    getElement() {\n        return this.containerElement;\n    }\n    constructor(){\n        super(...arguments);\n        _(this, \"infiniteViewer\");\n        _(this, \"containerElement\");\n        _(this, \"wrapperElement\");\n        _(this, \"scrollAreaElement\");\n        _(this, \"horizontalScrollElement\");\n        _(this, \"verticalScrollElement\");\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40;\n$RefreshReg$(_c, \"Dr\");\n$RefreshReg$(_c1, \"Yr\");\n$RefreshReg$(_c2, \"Oe\");\n$RefreshReg$(_c3, \"Wr\");\n$RefreshReg$(_c4, \"Lr\");\n$RefreshReg$(_c5, \"Xe\");\n$RefreshReg$(_c6, \"Vt\");\n$RefreshReg$(_c7, \"Fr\");\n$RefreshReg$(_c8, \"Pe\");\n$RefreshReg$(_c9, \"Ir\");\n$RefreshReg$(_c10, \"Ae\");\n$RefreshReg$(_c11, \"Me\");\n$RefreshReg$(_c12, \"Ft\");\n$RefreshReg$(_c13, \"G\");\n$RefreshReg$(_c14, \"O\");\n$RefreshReg$(_c15, \"Y\");\n$RefreshReg$(_c16, \"Nt\");\n$RefreshReg$(_c17, \"Br\");\n$RefreshReg$(_c18, \"Hr\");\n$RefreshReg$(_c19, \"It\");\n$RefreshReg$(_c20, \"Vr\");\n$RefreshReg$(_c21, \"M\");\n$RefreshReg$(_c22, \"Nr\");\n$RefreshReg$(_c23, \"Mt\");\n$RefreshReg$(_c24, \"Zr\");\n$RefreshReg$(_c25, \"Ct\");\n$RefreshReg$(_c26, \"Ur\");\n$RefreshReg$(_c27, \"Se\");\n$RefreshReg$(_c28, \"Gr\");\n$RefreshReg$(_c29, \"Jr\");\n$RefreshReg$(_c30, \"Qr\");\n$RefreshReg$(_c31, \"Ut\");\n$RefreshReg$(_c32, \"Le\");\n$RefreshReg$(_c33, \"Fe\");\n$RefreshReg$(_c34, \"Tt\");\n$RefreshReg$(_c35, \"Ve\");\n$RefreshReg$(_c36, \"Ke\");\n$RefreshReg$(_c37, \"U\");\n$RefreshReg$(_c38, \"Re\");\n$RefreshReg$(_c39, \"Ye$Ge.map\");\n$RefreshReg$(_c40, \"Ye\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@interactify/infinite-viewer/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@remotion/player/dist/esm/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@remotion/player/dist/esm/index.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: function() { return /* binding */ Player; },\n/* harmony export */   PlayerInternals: function() { return /* binding */ PlayerInternals; },\n/* harmony export */   Thumbnail: function() { return /* binding */ Thumbnail; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var remotion_no_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remotion/no-react */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/no-react.mjs\");\n/* __next_internal_client_entry_do_not_use__ Thumbnail,PlayerInternals,Player auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$();\n// src/icons.tsx\n\nvar ICON_SIZE = 25;\nvar fullscreenIconSize = 16;\nvar PlayIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 25 25\",\n        fill: \"none\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M8 6.375C7.40904 8.17576 7.06921 10.2486 7.01438 12.3871C6.95955 14.5255 7.19163 16.6547 7.6875 18.5625C9.95364 18.2995 12.116 17.6164 14.009 16.5655C15.902 15.5147 17.4755 14.124 18.6088 12.5C17.5158 10.8949 15.9949 9.51103 14.1585 8.45082C12.3222 7.3906 10.2174 6.68116 8 6.375Z\",\n            fill: \"white\",\n            stroke: \"white\",\n            strokeWidth: \"6.25\",\n            strokeLinejoin: \"round\"\n        })\n    });\n};\n_c = PlayIcon;\nvar PauseIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                x: \"25\",\n                y: \"20\",\n                width: \"20\",\n                height: \"60\",\n                fill: \"#fff\",\n                ry: \"5\",\n                rx: \"5\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                x: \"55\",\n                y: \"20\",\n                width: \"20\",\n                height: \"60\",\n                fill: \"#fff\",\n                ry: \"5\",\n                rx: \"5\"\n            })\n        ]\n    });\n};\n_c1 = PauseIcon;\nvar FullscreenIcon = (param)=>{\n    let { isFullscreen } = param;\n    const strokeWidth = 6;\n    const viewSize = 32;\n    const out = isFullscreen ? 0 : strokeWidth / 2;\n    const middleInset = isFullscreen ? strokeWidth * 1.6 : strokeWidth / 2;\n    const inset = isFullscreen ? strokeWidth * 1.6 : strokeWidth * 2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        viewBox: \"0 0 \".concat(viewSize, \" \").concat(viewSize),\n        height: fullscreenIconSize,\n        width: fullscreenIconSize,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"\\n\t\t\t\tM \".concat(out, \" \").concat(inset, \"\\n\t\t\t\tL \").concat(middleInset, \" \").concat(middleInset, \"\\n\t\t\t\tL \").concat(inset, \" \").concat(out, \"\\n\t\t\t\t\"),\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"\\n\t\t\t\tM \".concat(viewSize - out, \" \").concat(inset, \"\\n\t\t\t\tL \").concat(viewSize - middleInset, \" \").concat(middleInset, \"\\n\t\t\t\tL \").concat(viewSize - inset, \" \").concat(out, \"\\n\t\t\t\t\"),\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"\\n\t\t\t\tM \".concat(out, \" \").concat(viewSize - inset, \"\\n\t\t\t\tL \").concat(middleInset, \" \").concat(viewSize - middleInset, \"\\n\t\t\t\tL \").concat(inset, \" \").concat(viewSize - out, \"\\n\t\t\t\t\"),\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"\\n\t\t\t\tM \".concat(viewSize - out, \" \").concat(viewSize - inset, \"\\n\t\t\t\tL \").concat(viewSize - middleInset, \" \").concat(viewSize - middleInset, \"\\n\t\t\t\tL \").concat(viewSize - inset, \" \").concat(viewSize - out, \"\\n\t\t\t\t\"),\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            })\n        ]\n    });\n};\n_c2 = FullscreenIcon;\nvar VolumeOffIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 24 24\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M3.63 3.63a.996.996 0 000 1.41L7.29 8.7 7 9H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71v-4.17l4.18 4.18c-.49.37-1.02.68-1.6.91-.36.15-.58.53-.58.92 0 .72.73 1.18 1.39.91.8-.33 1.55-.77 2.22-1.31l1.34 1.34a.996.996 0 101.41-1.41L5.05 3.63c-.39-.39-1.02-.39-1.42 0zM19 12c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-3.83-2.4-7.11-5.78-8.4-.59-.23-1.22.23-1.22.86v.19c0 .38.25.71.61.85C17.18 6.54 19 9.06 19 12zm-8.71-6.29l-.17.17L12 7.76V6.41c0-.89-1.08-1.33-1.71-.7zM16.5 12A4.5 4.5 0 0014 7.97v1.79l2.48 2.48c.01-.08.02-.16.02-.24z\",\n            fill: \"#fff\"\n        })\n    });\n};\n_c3 = VolumeOffIcon;\nvar VolumeOnIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 24 24\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M3 10v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71V6.41c0-.89-1.08-1.34-1.71-.71L7 9H4c-.55 0-1 .45-1 1zm13.5 2A4.5 4.5 0 0014 7.97v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 4.45v.2c0 .38.25.71.6.85C17.18 6.53 19 9.06 19 12s-1.82 5.47-4.4 6.5c-.36.14-.6.47-.6.85v.2c0 .63.63 1.07 1.21.85C18.6 19.11 21 15.84 21 12s-2.4-7.11-5.79-8.4c-.58-.23-1.21.22-1.21.85z\",\n            fill: \"#fff\"\n        })\n    });\n};\n_c4 = VolumeOnIcon;\n// src/BufferingIndicator.tsx\n\nvar className = \"__remotion_buffering_indicator\";\nvar remotionBufferingAnimation = \"__remotion_buffering_animation\";\nvar playerStyle = {\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    overflow: \"hidden\",\n    lineHeight: \"normal\",\n    fontSize: \"inherit\"\n};\nvar studioStyle = {\n    width: 14,\n    height: 14,\n    overflow: \"hidden\",\n    lineHeight: \"normal\",\n    fontSize: \"inherit\"\n};\nvar BufferingIndicator = (param)=>{\n    let { type } = param;\n    const style = type === \"player\" ? playerStyle : studioStyle;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"style\", {\n                type: \"text/css\",\n                children: \"\\n\t\t\t\t@keyframes \".concat(remotionBufferingAnimation, \" {\\n          0% {\\n            rotate: 0deg;\\n          }\\n          100% {\\n            rotate: 360deg;\\n          }\\n        }\\n        \\n        .\").concat(className, \" {\\n            animation: \").concat(remotionBufferingAnimation, \" 1s linear infinite;\\n        }        \\n\t\t\t\")\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n                    viewBox: type === \"player\" ? \"0 0 22 22\" : \"0 0 18 18\",\n                    style,\n                    className,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                        d: type === \"player\" ? \"M 11 4 A 7 7 0 0 1 15.1145 16.66312\" : \"M 9 2 A 7 7 0 0 1 13.1145 14.66312\",\n                        stroke: \"white\",\n                        strokeLinecap: \"round\",\n                        fill: \"none\",\n                        strokeWidth: 3\n                    })\n                })\n            })\n        ]\n    });\n};\n_c5 = BufferingIndicator;\n// src/calculate-scale.ts\n\n// src/utils/calculate-player-size.ts\nvar calculatePlayerSize = (param)=>{\n    let { currentSize, width, height, compositionWidth, compositionHeight } = param;\n    if (width !== undefined && height === undefined) {\n        return {\n            aspectRatio: [\n                compositionWidth,\n                compositionHeight\n            ].join(\"/\")\n        };\n    }\n    if (height !== undefined && width === undefined) {\n        return {\n            aspectRatio: [\n                compositionWidth,\n                compositionHeight\n            ].join(\"/\")\n        };\n    }\n    if (!currentSize) {\n        return {\n            width: compositionWidth,\n            height: compositionHeight\n        };\n    }\n    return {\n        width: compositionWidth,\n        height: compositionHeight\n    };\n};\n// src/calculate-scale.ts\nvar calculateCanvasTransformation = (param)=>{\n    let { previewSize, compositionWidth, compositionHeight, canvasSize } = param;\n    const scale = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.calculateScale({\n        canvasSize,\n        compositionHeight,\n        compositionWidth,\n        previewSize\n    });\n    const correction = 0 - (1 - scale) / 2;\n    const xCorrection = correction * compositionWidth;\n    const yCorrection = correction * compositionHeight;\n    const width = compositionWidth * scale;\n    const height = compositionHeight * scale;\n    const centerX = canvasSize.width / 2 - width / 2;\n    const centerY = canvasSize.height / 2 - height / 2;\n    return {\n        centerX,\n        centerY,\n        xCorrection,\n        yCorrection,\n        scale\n    };\n};\nvar calculateOuterStyle = (param)=>{\n    let { config, style, canvasSize, overflowVisible, layout } = param;\n    if (!config) {\n        return {};\n    }\n    return {\n        position: \"relative\",\n        overflow: overflowVisible ? \"visible\" : \"hidden\",\n        ...calculatePlayerSize({\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            currentSize: canvasSize,\n            height: style === null || style === void 0 ? void 0 : style.height,\n            width: style === null || style === void 0 ? void 0 : style.width\n        }),\n        opacity: layout ? 1 : 0,\n        ...style\n    };\n};\nvar calculateContainerStyle = (param)=>{\n    let { config, canvasSize, layout, scale, overflowVisible } = param;\n    if (!config || !canvasSize || !layout) {\n        return {};\n    }\n    return {\n        position: \"absolute\",\n        width: config.width,\n        height: config.height,\n        display: \"flex\",\n        transform: \"scale(\".concat(scale, \")\"),\n        marginLeft: layout.xCorrection,\n        marginTop: layout.yCorrection,\n        overflow: overflowVisible ? \"visible\" : \"hidden\"\n    };\n};\nvar calculateOuter = (param)=>{\n    let { layout, scale, config, overflowVisible } = param;\n    if (!layout || !config) {\n        return {};\n    }\n    const { centerX, centerY } = layout;\n    return {\n        width: config.width * scale,\n        height: config.height * scale,\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"absolute\",\n        left: centerX,\n        top: centerY,\n        overflow: overflowVisible ? \"visible\" : \"hidden\"\n    };\n};\n// src/emitter-context.ts\n\nvar PlayerEventEmitterContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createContext(undefined);\nvar ThumbnailEmitterContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createContext(undefined);\n// src/EmitterProvider.tsx\n\n\n// src/event-emitter.ts\nclass PlayerEmitter {\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l)=>l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback)=>{\n            callback({\n                detail: context\n            });\n        });\n    }\n    dispatchSeek(frame) {\n        this.dispatchEvent(\"seeked\", {\n            frame\n        });\n    }\n    dispatchVolumeChange(volume) {\n        this.dispatchEvent(\"volumechange\", {\n            volume\n        });\n    }\n    dispatchPause() {\n        this.dispatchEvent(\"pause\", undefined);\n    }\n    dispatchPlay() {\n        this.dispatchEvent(\"play\", undefined);\n    }\n    dispatchEnded() {\n        this.dispatchEvent(\"ended\", undefined);\n    }\n    dispatchRateChange(playbackRate) {\n        this.dispatchEvent(\"ratechange\", {\n            playbackRate\n        });\n    }\n    dispatchScaleChange(scale) {\n        this.dispatchEvent(\"scalechange\", {\n            scale\n        });\n    }\n    dispatchError(error) {\n        this.dispatchEvent(\"error\", {\n            error\n        });\n    }\n    dispatchTimeUpdate(event) {\n        this.dispatchEvent(\"timeupdate\", event);\n    }\n    dispatchFrameUpdate(event) {\n        this.dispatchEvent(\"frameupdate\", event);\n    }\n    dispatchFullscreenChange(event) {\n        this.dispatchEvent(\"fullscreenchange\", event);\n    }\n    dispatchMuteChange(event) {\n        this.dispatchEvent(\"mutechange\", event);\n    }\n    dispatchWaiting(event) {\n        this.dispatchEvent(\"waiting\", event);\n    }\n    dispatchResume(event) {\n        this.dispatchEvent(\"resume\", event);\n    }\n    constructor(){\n        this.listeners = {\n            ended: [],\n            error: [],\n            pause: [],\n            play: [],\n            ratechange: [],\n            scalechange: [],\n            seeked: [],\n            timeupdate: [],\n            frameupdate: [],\n            fullscreenchange: [],\n            volumechange: [],\n            mutechange: [],\n            waiting: [],\n            resume: []\n        };\n    }\n}\nclass ThumbnailEmitter {\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l)=>l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback)=>{\n            callback({\n                detail: context\n            });\n        });\n    }\n    dispatchError(error) {\n        this.dispatchEvent(\"error\", {\n            error\n        });\n    }\n    dispatchWaiting(event) {\n        this.dispatchEvent(\"waiting\", event);\n    }\n    dispatchResume(event) {\n        this.dispatchEvent(\"resume\", event);\n    }\n    constructor(){\n        this.listeners = {\n            error: [],\n            waiting: [],\n            resume: []\n        };\n    }\n}\n// src/use-buffer-state-emitter.ts\n\n\nvar useBufferStateEmitter = (emitter)=>{\n    _s();\n    const bufferManager = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferManager) {\n        throw new Error(\"BufferingContextReact not found\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const clear1 = bufferManager.listenForBuffering(()=>{\n            bufferManager.buffering.current = true;\n            emitter.dispatchWaiting({});\n        });\n        const clear2 = bufferManager.listenForResume(()=>{\n            bufferManager.buffering.current = false;\n            emitter.dispatchResume({});\n        });\n        return ()=>{\n            clear1.remove();\n            clear2.remove();\n        };\n    }, [\n        bufferManager,\n        emitter\n    ]);\n};\n_s(useBufferStateEmitter, \"8emOf7oh9BxAsSojJ28TtTiOTRc=\");\n// src/EmitterProvider.tsx\n\nvar PlayerEmitterProvider = (param)=>{\n    let { children, currentPlaybackRate } = param;\n    _s1();\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>new PlayerEmitter);\n    const bufferManager = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferManager) {\n        throw new Error(\"BufferingContextReact not found\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (currentPlaybackRate) {\n            emitter.dispatchRateChange(currentPlaybackRate);\n        }\n    }, [\n        emitter,\n        currentPlaybackRate\n    ]);\n    useBufferStateEmitter(emitter);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerEventEmitterContext.Provider, {\n        value: emitter,\n        children\n    });\n};\n_s1(PlayerEmitterProvider, \"EZyCdxC6nAOSEntrtIk57DLBnGQ=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        useBufferStateEmitter\n    ];\n});\n_c6 = PlayerEmitterProvider;\n// src/use-hover-state.ts\n\nvar useHoverState = (ref, hideControlsWhenPointerDoesntMove)=>{\n    _s2();\n    const [hovered, setHovered] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const { current } = ref;\n        if (!current) {\n            return;\n        }\n        let hoverTimeout;\n        const addHoverTimeout = ()=>{\n            if (hideControlsWhenPointerDoesntMove) {\n                clearTimeout(hoverTimeout);\n                hoverTimeout = setTimeout(()=>{\n                    setHovered(false);\n                }, hideControlsWhenPointerDoesntMove === true ? 3000 : hideControlsWhenPointerDoesntMove);\n            }\n        };\n        const onHover = ()=>{\n            setHovered(true);\n            addHoverTimeout();\n        };\n        const onLeave = ()=>{\n            setHovered(false);\n            clearTimeout(hoverTimeout);\n        };\n        const onMove = ()=>{\n            setHovered(true);\n            addHoverTimeout();\n        };\n        current.addEventListener(\"mouseenter\", onHover);\n        current.addEventListener(\"mouseleave\", onLeave);\n        current.addEventListener(\"mousemove\", onMove);\n        return ()=>{\n            current.removeEventListener(\"mouseenter\", onHover);\n            current.removeEventListener(\"mouseleave\", onLeave);\n            current.removeEventListener(\"mousemove\", onMove);\n            clearTimeout(hoverTimeout);\n        };\n    }, [\n        hideControlsWhenPointerDoesntMove,\n        ref\n    ]);\n    return hovered;\n};\n_s2(useHoverState, \"Oc8LEVvXWIrZwAGASXe9s9nUROk=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect\n    ];\n});\n// src/use-playback.ts\n\n\n// src/browser-mediasession.ts\n\n// src/use-player.ts\n\n\nvar usePlayer = ()=>{\n    _s3();\n    const [playing, setPlaying, imperativePlaying] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.usePlayingState();\n    const [hasPlayed, setHasPlayed] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const playStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(frame);\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const setTimelinePosition = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContext);\n    const { audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(frame);\n    frameRef.current = frame;\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(PlayerEventEmitterContext);\n    var _config_durationInFrames;\n    const lastFrame = ((_config_durationInFrames = config === null || config === void 0 ? void 0 : config.durationInFrames) !== null && _config_durationInFrames !== void 0 ? _config_durationInFrames : 1) - 1;\n    const isLastFrame = frame === lastFrame;\n    const isFirstFrame = frame === 0;\n    if (!emitter) {\n        throw new TypeError(\"Expected Player event emitter context\");\n    }\n    const bufferingContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferingContext) {\n        throw new Error(\"Missing the buffering context. Most likely you have a Remotion version mismatch.\");\n    }\n    const { buffering } = bufferingContext;\n    const seek = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((newFrame)=>{\n        if (video === null || video === void 0 ? void 0 : video.id) {\n            setTimelinePosition((c)=>({\n                    ...c,\n                    [video.id]: newFrame\n                }));\n        }\n        frameRef.current = newFrame;\n        emitter.dispatchSeek(newFrame);\n    }, [\n        emitter,\n        setTimelinePosition,\n        video === null || video === void 0 ? void 0 : video.id\n    ]);\n    const play = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        if (imperativePlaying.current) {\n            return;\n        }\n        setHasPlayed(true);\n        if (isLastFrame) {\n            seek(0);\n        }\n        if (audioContext && audioContext.numberOfAudioTags > 0 && e) {\n            audioContext.playAllAudios();\n        }\n        audioAndVideoTags.current.forEach((a)=>a.play());\n        imperativePlaying.current = true;\n        setPlaying(true);\n        playStart.current = frameRef.current;\n        emitter.dispatchPlay();\n    }, [\n        imperativePlaying,\n        isLastFrame,\n        audioContext,\n        setPlaying,\n        emitter,\n        seek,\n        audioAndVideoTags\n    ]);\n    const pause = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (imperativePlaying.current) {\n            imperativePlaying.current = false;\n            setPlaying(false);\n            emitter.dispatchPause();\n        }\n    }, [\n        emitter,\n        imperativePlaying,\n        setPlaying\n    ]);\n    const pauseAndReturnToPlayStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (imperativePlaying.current) {\n            imperativePlaying.current = false;\n            frameRef.current = playStart.current;\n            if (config) {\n                setTimelinePosition((c)=>({\n                        ...c,\n                        [config.id]: playStart.current\n                    }));\n                setPlaying(false);\n                emitter.dispatchPause();\n            }\n        }\n    }, [\n        config,\n        emitter,\n        imperativePlaying,\n        setPlaying,\n        setTimelinePosition\n    ]);\n    const videoId = video === null || video === void 0 ? void 0 : video.id;\n    const frameBack = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((frames)=>{\n        if (!videoId) {\n            return null;\n        }\n        if (imperativePlaying.current) {\n            return;\n        }\n        setFrame((c)=>{\n            var _c_videoId, _ref;\n            const prev = (_ref = (_c_videoId = c[videoId]) !== null && _c_videoId !== void 0 ? _c_videoId : window.remotion_initialFrame) !== null && _ref !== void 0 ? _ref : 0;\n            return {\n                ...c,\n                [videoId]: Math.max(0, prev - frames)\n            };\n        });\n    }, [\n        imperativePlaying,\n        setFrame,\n        videoId\n    ]);\n    const frameForward = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((frames)=>{\n        if (!videoId) {\n            return null;\n        }\n        if (imperativePlaying.current) {\n            return;\n        }\n        setFrame((c)=>{\n            var _c_videoId, _ref;\n            const prev = (_ref = (_c_videoId = c[videoId]) !== null && _c_videoId !== void 0 ? _c_videoId : window.remotion_initialFrame) !== null && _ref !== void 0 ? _ref : 0;\n            return {\n                ...c,\n                [videoId]: Math.min(lastFrame, prev + frames)\n            };\n        });\n    }, [\n        videoId,\n        imperativePlaying,\n        lastFrame,\n        setFrame\n    ]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            frameBack,\n            frameForward,\n            isLastFrame,\n            emitter,\n            playing,\n            play,\n            pause,\n            seek,\n            isFirstFrame,\n            getCurrentFrame: ()=>frameRef.current,\n            isPlaying: ()=>imperativePlaying.current,\n            isBuffering: ()=>buffering.current,\n            pauseAndReturnToPlayStart,\n            hasPlayed,\n            remotionInternal_currentFrameRef: frameRef\n        };\n    }, [\n        frameBack,\n        frameForward,\n        isLastFrame,\n        emitter,\n        playing,\n        play,\n        pause,\n        seek,\n        isFirstFrame,\n        pauseAndReturnToPlayStart,\n        hasPlayed,\n        imperativePlaying,\n        buffering\n    ]);\n    return returnValue;\n};\n_s3(usePlayer, \"rHnR7CT41h/aCfbciofebwvp7QY=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext\n    ];\n});\n// src/browser-mediasession.ts\nvar useBrowserMediaSession = (param)=>{\n    let { browserMediaControlsBehavior, videoConfig, playbackRate } = param;\n    _s4();\n    const { playing, pause, play, emitter, getCurrentFrame, seek } = usePlayer();\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!navigator.mediaSession) {\n            return;\n        }\n        if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n            return;\n        }\n        if (playing) {\n            navigator.mediaSession.playbackState = \"playing\";\n        } else {\n            navigator.mediaSession.playbackState = \"paused\";\n        }\n    }, [\n        browserMediaControlsBehavior.mode,\n        playing\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!navigator.mediaSession) {\n            return;\n        }\n        if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n            return;\n        }\n        const onTimeUpdate = ()=>{\n            if (!videoConfig) {\n                return;\n            }\n            if (navigator.mediaSession) {\n                navigator.mediaSession.setPositionState({\n                    duration: videoConfig.durationInFrames / videoConfig.fps,\n                    playbackRate,\n                    position: getCurrentFrame() / videoConfig.fps\n                });\n            }\n        };\n        emitter.addEventListener(\"timeupdate\", onTimeUpdate);\n        return ()=>{\n            emitter.removeEventListener(\"timeupdate\", onTimeUpdate);\n        };\n    }, [\n        browserMediaControlsBehavior.mode,\n        emitter,\n        getCurrentFrame,\n        playbackRate,\n        videoConfig\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!navigator.mediaSession) {\n            return;\n        }\n        if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n            return;\n        }\n        navigator.mediaSession.setActionHandler(\"play\", ()=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                play();\n            }\n        });\n        navigator.mediaSession.setActionHandler(\"pause\", ()=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                pause();\n            }\n        });\n        navigator.mediaSession.setActionHandler(\"seekto\", (event)=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\" && event.seekTime !== undefined && videoConfig) {\n                seek(Math.round(event.seekTime * videoConfig.fps));\n            }\n        });\n        navigator.mediaSession.setActionHandler(\"seekbackward\", ()=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\" && videoConfig) {\n                seek(Math.max(0, Math.round((getCurrentFrame() - 10) * videoConfig.fps)));\n            }\n        });\n        navigator.mediaSession.setActionHandler(\"seekforward\", ()=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\" && videoConfig) {\n                seek(Math.max(videoConfig.durationInFrames - 1, Math.round((getCurrentFrame() + 10) * videoConfig.fps)));\n            }\n        });\n        navigator.mediaSession.setActionHandler(\"previoustrack\", ()=>{\n            if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                seek(0);\n            }\n        });\n        return ()=>{\n            navigator.mediaSession.metadata = null;\n            navigator.mediaSession.setActionHandler(\"play\", null);\n            navigator.mediaSession.setActionHandler(\"pause\", null);\n            navigator.mediaSession.setActionHandler(\"seekto\", null);\n            navigator.mediaSession.setActionHandler(\"seekbackward\", null);\n            navigator.mediaSession.setActionHandler(\"seekforward\", null);\n            navigator.mediaSession.setActionHandler(\"previoustrack\", null);\n        };\n    }, [\n        browserMediaControlsBehavior.mode,\n        getCurrentFrame,\n        pause,\n        play,\n        seek,\n        videoConfig\n    ]);\n};\n_s4(useBrowserMediaSession, \"utYZzAafjY7pQjvwBPI2GYB38to=\", false, function() {\n    return [\n        usePlayer,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect\n    ];\n});\n// src/calculate-next-frame.ts\nvar calculateNextFrame = (param)=>{\n    let { time, currentFrame: startFrame, playbackSpeed, fps, actualLastFrame, actualFirstFrame, framesAdvanced, shouldLoop } = param;\n    const op = playbackSpeed < 0 ? Math.ceil : Math.floor;\n    const framesToAdvance = op(time * playbackSpeed / (1000 / fps)) - framesAdvanced;\n    const nextFrame = framesToAdvance + startFrame;\n    const isCurrentFrameOutside = startFrame > actualLastFrame || startFrame < actualFirstFrame;\n    const isNextFrameOutside = nextFrame > actualLastFrame || nextFrame < actualFirstFrame;\n    const hasEnded = !shouldLoop && isNextFrameOutside && !isCurrentFrameOutside;\n    if (playbackSpeed > 0) {\n        if (isNextFrameOutside) {\n            return {\n                nextFrame: actualFirstFrame,\n                framesToAdvance,\n                hasEnded\n            };\n        }\n        return {\n            nextFrame,\n            framesToAdvance,\n            hasEnded\n        };\n    }\n    if (isNextFrameOutside) {\n        return {\n            nextFrame: actualLastFrame,\n            framesToAdvance,\n            hasEnded\n        };\n    }\n    return {\n        nextFrame,\n        framesToAdvance,\n        hasEnded\n    };\n};\n// src/is-backgrounded.ts\n\nvar getIsBackgrounded = ()=>{\n    if (typeof document === \"undefined\") {\n        return false;\n    }\n    return document.visibilityState === \"hidden\";\n};\nvar useIsBackgrounded = ()=>{\n    _s5();\n    const isBackgrounded = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(getIsBackgrounded());\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const onVisibilityChange = ()=>{\n            isBackgrounded.current = getIsBackgrounded();\n        };\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n        return ()=>{\n            document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        };\n    }, []);\n    return isBackgrounded;\n};\n_s5(useIsBackgrounded, \"UaFjLFkk5vdEhVAG6MTPm08RrtM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect\n    ];\n});\n// src/use-playback.ts\nvar usePlayback = (param)=>{\n    let { loop, playbackRate, moveToBeginningWhenEnded, inFrame, outFrame, frameRef, browserMediaControlsBehavior } = param;\n    _s6();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const { playing, pause, emitter } = usePlayer();\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const buffering = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const isBackgroundedRef = useIsBackgrounded();\n    const lastTimeUpdateEvent = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!context) {\n        throw new Error(\"Missing the buffering context. Most likely you have a Remotion version mismatch.\");\n    }\n    useBrowserMediaSession({\n        browserMediaControlsBehavior,\n        playbackRate,\n        videoConfig: config\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const onBufferClear = context.listenForBuffering(()=>{\n            buffering.current = performance.now();\n        });\n        const onResumeClear = context.listenForResume(()=>{\n            buffering.current = null;\n        });\n        return ()=>{\n            onBufferClear.remove();\n            onResumeClear.remove();\n        };\n    }, [\n        context\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!config) {\n            return;\n        }\n        if (!playing) {\n            return;\n        }\n        let hasBeenStopped = false;\n        let reqAnimFrameCall = null;\n        let startedTime = performance.now();\n        let framesAdvanced = 0;\n        const cancelQueuedFrame = ()=>{\n            if (reqAnimFrameCall !== null) {\n                if (reqAnimFrameCall.type === \"raf\") {\n                    cancelAnimationFrame(reqAnimFrameCall.id);\n                } else {\n                    clearTimeout(reqAnimFrameCall.id);\n                }\n            }\n        };\n        const stop = ()=>{\n            hasBeenStopped = true;\n            cancelQueuedFrame();\n        };\n        const callback = ()=>{\n            const time = performance.now() - startedTime;\n            const actualLastFrame = outFrame !== null && outFrame !== void 0 ? outFrame : config.durationInFrames - 1;\n            const actualFirstFrame = inFrame !== null && inFrame !== void 0 ? inFrame : 0;\n            const currentFrame = frameRef.current;\n            const { nextFrame, framesToAdvance, hasEnded } = calculateNextFrame({\n                time,\n                currentFrame,\n                playbackSpeed: playbackRate,\n                fps: config.fps,\n                actualFirstFrame,\n                actualLastFrame,\n                framesAdvanced,\n                shouldLoop: loop\n            });\n            framesAdvanced += framesToAdvance;\n            if (nextFrame !== frameRef.current && (!hasEnded || moveToBeginningWhenEnded)) {\n                setFrame((c)=>({\n                        ...c,\n                        [config.id]: nextFrame\n                    }));\n            }\n            if (hasEnded) {\n                stop();\n                pause();\n                emitter.dispatchEnded();\n                return;\n            }\n            if (!hasBeenStopped) {\n                queueNextFrame();\n            }\n        };\n        const queueNextFrame = ()=>{\n            if (buffering.current) {\n                const stopListening = context.listenForResume(()=>{\n                    stopListening.remove();\n                    if (hasBeenStopped) {\n                        return;\n                    }\n                    startedTime = performance.now();\n                    framesAdvanced = 0;\n                    callback();\n                });\n                return;\n            }\n            if (isBackgroundedRef.current) {\n                reqAnimFrameCall = {\n                    type: \"timeout\",\n                    id: setTimeout(callback, 1000 / config.fps)\n                };\n            } else {\n                reqAnimFrameCall = {\n                    type: \"raf\",\n                    id: requestAnimationFrame(callback)\n                };\n            }\n        };\n        queueNextFrame();\n        const onVisibilityChange = ()=>{\n            if (document.visibilityState === \"visible\") {\n                return;\n            }\n            cancelQueuedFrame();\n            callback();\n        };\n        window.addEventListener(\"visibilitychange\", onVisibilityChange);\n        return ()=>{\n            window.removeEventListener(\"visibilitychange\", onVisibilityChange);\n            stop();\n        };\n    }, [\n        config,\n        loop,\n        pause,\n        playing,\n        setFrame,\n        emitter,\n        playbackRate,\n        inFrame,\n        outFrame,\n        moveToBeginningWhenEnded,\n        isBackgroundedRef,\n        frameRef,\n        buffering,\n        context\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const interval = setInterval(()=>{\n            if (lastTimeUpdateEvent.current === frameRef.current) {\n                return;\n            }\n            emitter.dispatchTimeUpdate({\n                frame: frameRef.current\n            });\n            lastTimeUpdateEvent.current = frameRef.current;\n        }, 250);\n        return ()=>clearInterval(interval);\n    }, [\n        emitter,\n        frameRef\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        emitter.dispatchFrameUpdate({\n            frame\n        });\n    }, [\n        emitter,\n        frame\n    ]);\n};\n_s6(usePlayback, \"nTvOKUH5NDmIUD4imAk5f82wOw0=\", false, function() {\n    return [\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig,\n        usePlayer,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        useIsBackgrounded,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        useBrowserMediaSession,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect\n    ];\n});\n// src/utils/use-element-size.ts\n\nvar elementSizeHooks = [];\nvar updateAllElementsSizes = ()=>{\n    for (const listener of elementSizeHooks){\n        listener();\n    }\n};\nvar useElementSize = (ref, options)=>{\n    _s7();\n    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>{\n        if (!ref.current) {\n            return null;\n        }\n        const rect = ref.current.getClientRects();\n        if (!rect[0]) {\n            return null;\n        }\n        return {\n            width: rect[0].width,\n            height: rect[0].height,\n            left: rect[0].x,\n            top: rect[0].y,\n            windowSize: {\n                height: window.innerHeight,\n                width: window.innerWidth\n            }\n        };\n    });\n    const observer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (typeof ResizeObserver === \"undefined\") {\n            return null;\n        }\n        return new ResizeObserver((entries)=>{\n            const { contentRect, target } = entries[0];\n            const newSize = target.getClientRects();\n            if (!(newSize === null || newSize === void 0 ? void 0 : newSize[0])) {\n                setSize(null);\n                return;\n            }\n            const probableCssParentScale = contentRect.width === 0 ? 1 : newSize[0].width / contentRect.width;\n            const width = options.shouldApplyCssTransforms ? newSize[0].width : newSize[0].width * (1 / probableCssParentScale);\n            const height = options.shouldApplyCssTransforms ? newSize[0].height : newSize[0].height * (1 / probableCssParentScale);\n            setSize({\n                width,\n                height,\n                left: newSize[0].x,\n                top: newSize[0].y,\n                windowSize: {\n                    height: window.innerHeight,\n                    width: window.innerWidth\n                }\n            });\n        });\n    }, [\n        options.shouldApplyCssTransforms\n    ]);\n    const updateSize = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (!ref.current) {\n            return;\n        }\n        const rect = ref.current.getClientRects();\n        if (!rect[0]) {\n            setSize(null);\n            return;\n        }\n        setSize((prevState)=>{\n            const isSame = prevState && prevState.width === rect[0].width && prevState.height === rect[0].height && prevState.left === rect[0].x && prevState.top === rect[0].y && prevState.windowSize.height === window.innerHeight && prevState.windowSize.width === window.innerWidth;\n            if (isSame) {\n                return prevState;\n            }\n            return {\n                width: rect[0].width,\n                height: rect[0].height,\n                left: rect[0].x,\n                top: rect[0].y,\n                windowSize: {\n                    height: window.innerHeight,\n                    width: window.innerWidth\n                }\n            };\n        });\n    }, [\n        ref\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!observer) {\n            return;\n        }\n        const { current } = ref;\n        if (current) {\n            observer.observe(current);\n        }\n        return ()=>{\n            if (current) {\n                observer.unobserve(current);\n            }\n        };\n    }, [\n        observer,\n        ref,\n        updateSize\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!options.triggerOnWindowResize) {\n            return;\n        }\n        window.addEventListener(\"resize\", updateSize);\n        return ()=>{\n            window.removeEventListener(\"resize\", updateSize);\n        };\n    }, [\n        options.triggerOnWindowResize,\n        updateSize\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        elementSizeHooks.push(updateSize);\n        return ()=>{\n            elementSizeHooks = elementSizeHooks.filter((e)=>e !== updateSize);\n        };\n    }, [\n        updateSize\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!size) {\n            return null;\n        }\n        return {\n            ...size,\n            refresh: updateSize\n        };\n    }, [\n        size,\n        updateSize\n    ]);\n};\n_s7(useElementSize, \"H97zewFn0fLQdmGQPB6I9ZLLqYI=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n// src/Player.tsx\n\n\n// src/PlayerUI.tsx\n\n\n// src/PlayerControls.tsx\n\n\n// src/DefaultPlayPauseButton.tsx\n\nvar DefaultPlayPauseButton = (param)=>{\n    let { playing, buffering } = param;\n    if (playing && buffering) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BufferingIndicator, {\n            type: \"player\"\n        });\n    }\n    if (playing) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PauseIcon, {});\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayIcon, {});\n};\n_c7 = DefaultPlayPauseButton;\n// src/MediaVolumeSlider.tsx\n\n\n// src/render-volume-slider.tsx\n\n\n\nvar KNOB_SIZE = 12;\nvar BAR_HEIGHT = 5;\nvar DefaultVolumeSlider = (param)=>{\n    let { volume, isVertical, onBlur, inputRef, setVolume } = param;\n    _s8();\n    const sliderContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const paddingLeft = 5;\n        const common = {\n            paddingLeft,\n            height: ICON_SIZE,\n            width: VOLUME_SLIDER_WIDTH,\n            display: \"inline-flex\",\n            alignItems: \"center\"\n        };\n        if (isVertical) {\n            return {\n                ...common,\n                position: \"absolute\",\n                transform: \"rotate(-90deg) translateX(\".concat(VOLUME_SLIDER_WIDTH / 2 + ICON_SIZE / 2, \"px)\")\n            };\n        }\n        return {\n            ...common\n        };\n    }, [\n        isVertical\n    ]);\n    const randomId = typeof react__WEBPACK_IMPORTED_MODULE_2__.useId === \"undefined\" ? \"volume-slider\" : react__WEBPACK_IMPORTED_MODULE_2__.useId();\n    const [randomClass] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>\"__remotion-volume-slider-\".concat((0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(randomId)).replace(\".\", \"\"));\n    const onVolumeChange = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        setVolume(parseFloat(e.target.value));\n    }, [\n        setVolume\n    ]);\n    const inputStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const commonStyle = {\n            WebkitAppearance: \"none\",\n            backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n            borderRadius: BAR_HEIGHT / 2,\n            cursor: \"pointer\",\n            height: BAR_HEIGHT,\n            width: VOLUME_SLIDER_WIDTH,\n            backgroundImage: \"linear-gradient(\\n\t\t\t\tto right,\\n\t\t\t\twhite \".concat(volume * 100, \"%, rgba(255, 255, 255, 0) \").concat(volume * 100, \"%\\n\t\t\t)\")\n        };\n        if (isVertical) {\n            return {\n                ...commonStyle,\n                bottom: ICON_SIZE + VOLUME_SLIDER_WIDTH / 2\n            };\n        }\n        return commonStyle;\n    }, [\n        isVertical,\n        volume\n    ]);\n    const sliderStyle = \"\\n\t.\".concat(randomClass, \"::-webkit-slider-thumb {\\n\t\t-webkit-appearance: none;\\n\t\tbackground-color: white;\\n\t\tborder-radius: \").concat(KNOB_SIZE / 2, \"px;\\n\t\tbox-shadow: 0 0 2px black;\\n\t\theight: \").concat(KNOB_SIZE, \"px;\\n\t\twidth: \").concat(KNOB_SIZE, \"px;\\n\t}\\n\\n\t.\").concat(randomClass, \"::-moz-range-thumb {\\n\t\t-webkit-appearance: none;\\n\t\tbackground-color: white;\\n\t\tborder-radius: \").concat(KNOB_SIZE / 2, \"px;\\n\t\tbox-shadow: 0 0 2px black;\\n\t\theight: \").concat(KNOB_SIZE, \"px;\\n\t\twidth: \").concat(KNOB_SIZE, \"px;\\n\t}\\n\");\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        style: sliderContainer,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"style\", {\n                dangerouslySetInnerHTML: {\n                    __html: sliderStyle\n                }\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                ref: inputRef,\n                \"aria-label\": \"Change volume\",\n                className: randomClass,\n                max: 1,\n                min: 0,\n                onBlur,\n                onChange: onVolumeChange,\n                step: 0.01,\n                type: \"range\",\n                value: volume,\n                style: inputStyle\n            })\n        ]\n    });\n};\n_s8(DefaultVolumeSlider, \"T8N71c5sN5XE7H8aAQHMX4i6hmM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useId,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c8 = DefaultVolumeSlider;\nvar renderDefaultVolumeSlider = (props)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultVolumeSlider, {\n        ...props\n    });\n};\n// src/MediaVolumeSlider.tsx\n\nvar VOLUME_SLIDER_WIDTH = 100;\nvar MediaVolumeSlider = (param)=>{\n    let { displayVerticalVolumeSlider, renderMuteButton, renderVolumeSlider } = param;\n    _s9();\n    const [mediaMuted, setMediaMuted] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaMutedState();\n    const [mediaVolume, setMediaVolume] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaVolumeState();\n    const [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const parentDivRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const hover = useHoverState(parentDivRef, false);\n    const onBlur = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setTimeout(()=>{\n            if (inputRef.current && document.activeElement !== inputRef.current) {\n                setFocused(false);\n            }\n        }, 10);\n    }, []);\n    const isVolume0 = mediaVolume === 0;\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (isVolume0) {\n            setMediaVolume(1);\n            setMediaMuted(false);\n            return;\n        }\n        setMediaMuted((mute)=>!mute);\n    }, [\n        isVolume0,\n        setMediaMuted,\n        setMediaVolume\n    ]);\n    const parentDivStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            display: \"inline-flex\",\n            background: \"none\",\n            border: \"none\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            touchAction: \"none\",\n            ...displayVerticalVolumeSlider && {\n                position: \"relative\"\n            }\n        };\n    }, [\n        displayVerticalVolumeSlider\n    ]);\n    const volumeContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            display: \"inline\",\n            width: ICON_SIZE,\n            height: ICON_SIZE,\n            cursor: \"pointer\",\n            appearance: \"none\",\n            background: \"none\",\n            border: \"none\",\n            padding: 0\n        };\n    }, []);\n    const renderDefaultMuteButton = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((param)=>{\n        let { muted, volume } = param;\n        const isMutedOrZero = muted || volume === 0;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n            \"aria-label\": isMutedOrZero ? \"Unmute sound\" : \"Mute sound\",\n            title: isMutedOrZero ? \"Unmute sound\" : \"Mute sound\",\n            onClick,\n            onBlur,\n            onFocus: ()=>setFocused(true),\n            style: volumeContainer,\n            type: \"button\",\n            children: isMutedOrZero ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VolumeOffIcon, {}) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VolumeOnIcon, {})\n        });\n    }, [\n        onBlur,\n        onClick,\n        volumeContainer\n    ]);\n    const muteButton = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return renderMuteButton ? renderMuteButton({\n            muted: mediaMuted,\n            volume: mediaVolume\n        }) : renderDefaultMuteButton({\n            muted: mediaMuted,\n            volume: mediaVolume\n        });\n    }, [\n        mediaMuted,\n        mediaVolume,\n        renderDefaultMuteButton,\n        renderMuteButton\n    ]);\n    const volumeSlider = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return (focused || hover) && !mediaMuted && !remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.isIosSafari() ? (renderVolumeSlider !== null && renderVolumeSlider !== void 0 ? renderVolumeSlider : renderDefaultVolumeSlider)({\n            isVertical: displayVerticalVolumeSlider,\n            volume: mediaVolume,\n            onBlur: ()=>setFocused(false),\n            inputRef,\n            setVolume: setMediaVolume\n        }) : null;\n    }, [\n        displayVerticalVolumeSlider,\n        focused,\n        hover,\n        mediaMuted,\n        mediaVolume,\n        renderVolumeSlider,\n        setMediaVolume\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref: parentDivRef,\n        style: parentDivStyle,\n        children: [\n            muteButton,\n            volumeSlider\n        ]\n    });\n};\n_s9(MediaVolumeSlider, \"fWtbrJbT5sErpHKK47pbOiagx/E=\", false, function() {\n    return [\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaMutedState,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaVolumeState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        useHoverState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c9 = MediaVolumeSlider;\n// src/PlaybackrateControl.tsx\n\n\n// src/utils/use-component-visible.ts\n\nfunction useComponentVisible(initialIsVisible) {\n    _s10();\n    const [isComponentVisible, setIsComponentVisible] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(initialIsVisible);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            if (ref.current && !ref.current.contains(event.target)) {\n                setIsComponentVisible(false);\n            }\n        };\n        document.addEventListener(\"pointerup\", handleClickOutside, true);\n        return ()=>{\n            document.removeEventListener(\"pointerup\", handleClickOutside, true);\n        };\n    }, []);\n    return {\n        ref,\n        isComponentVisible,\n        setIsComponentVisible\n    };\n}\n_s10(useComponentVisible, \"10DhYda8ed5UZM9/m67AW2NlRd0=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect\n    ];\n});\n// src/PlaybackrateControl.tsx\n\nvar BOTTOM = 35;\nvar THRESHOLD = 70;\nvar rateDiv = {\n    height: 30,\n    paddingRight: 15,\n    paddingLeft: 12,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n};\nvar checkmarkContainer = {\n    width: 22,\n    display: \"flex\",\n    alignItems: \"center\"\n};\nvar checkmarkStyle = {\n    width: 14,\n    height: 14,\n    color: \"black\"\n};\nvar Checkmark = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        viewBox: \"0 0 512 512\",\n        style: checkmarkStyle,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            fill: \"currentColor\",\n            d: \"M435.848 83.466L172.804 346.51l-96.652-96.652c-4.686-4.686-12.284-4.686-16.971 0l-28.284 28.284c-4.686 4.686-4.686 12.284 0 16.971l133.421 133.421c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-28.284-28.284c-4.686-4.686-12.284-4.686-16.97 0z\"\n        })\n    });\n_c10 = Checkmark;\nvar PlaybackrateOption = (param)=>{\n    let { rate, onSelect, selectedRate, keyboardSelectedRate } = param;\n    _s11();\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        e.stopPropagation();\n        e.preventDefault();\n        onSelect(rate);\n    }, [\n        onSelect,\n        rate\n    ]);\n    const [hovered, setHovered] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setHovered(true);\n    }, []);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setHovered(false);\n    }, []);\n    const isFocused = keyboardSelectedRate === rate;\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            ...rateDiv,\n            backgroundColor: hovered || isFocused ? \"#eee\" : \"transparent\"\n        };\n    }, [\n        hovered,\n        isFocused\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        onMouseEnter,\n        onMouseLeave,\n        tabIndex: 0,\n        style: actualStyle,\n        onClick,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: checkmarkContainer,\n                children: rate === selectedRate ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Checkmark, {}) : null\n            }),\n            rate.toFixed(1),\n            \"x\"\n        ]\n    }, rate);\n};\n_s11(PlaybackrateOption, \"GCWPRB9bcIixBZaG1iJIl+6vvAA=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c11 = PlaybackrateOption;\nvar PlaybackPopup = (param)=>{\n    let { setIsComponentVisible, playbackRates, canvasSize } = param;\n    _s12();\n    const { setPlaybackRate, playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const [keyboardSelectedRate, setKeyboardSelectedRate] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(playbackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const listener = (e)=>{\n            e.preventDefault();\n            if (e.key === \"ArrowUp\") {\n                const currentIndex = playbackRates.findIndex((rate)=>rate === keyboardSelectedRate);\n                if (currentIndex === 0) {\n                    return;\n                }\n                if (currentIndex === -1) {\n                    setKeyboardSelectedRate(playbackRates[0]);\n                } else {\n                    setKeyboardSelectedRate(playbackRates[currentIndex - 1]);\n                }\n            } else if (e.key === \"ArrowDown\") {\n                const currentIndex = playbackRates.findIndex((rate)=>rate === keyboardSelectedRate);\n                if (currentIndex === playbackRates.length - 1) {\n                    return;\n                }\n                if (currentIndex === -1) {\n                    setKeyboardSelectedRate(playbackRates[playbackRates.length - 1]);\n                } else {\n                    setKeyboardSelectedRate(playbackRates[currentIndex + 1]);\n                }\n            } else if (e.key === \"Enter\") {\n                setPlaybackRate(keyboardSelectedRate);\n                setIsComponentVisible(false);\n            }\n        };\n        window.addEventListener(\"keydown\", listener);\n        return ()=>{\n            window.removeEventListener(\"keydown\", listener);\n        };\n    }, [\n        playbackRates,\n        keyboardSelectedRate,\n        setPlaybackRate,\n        setIsComponentVisible\n    ]);\n    const onSelect = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((rate)=>{\n        setPlaybackRate(rate);\n        setIsComponentVisible(false);\n    }, [\n        setIsComponentVisible,\n        setPlaybackRate\n    ]);\n    const playbackPopup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            position: \"absolute\",\n            right: 0,\n            width: 125,\n            maxHeight: canvasSize.height - THRESHOLD - BOTTOM,\n            bottom: 35,\n            background: \"#fff\",\n            borderRadius: 4,\n            overflow: \"auto\",\n            color: \"black\",\n            textAlign: \"left\"\n        };\n    }, [\n        canvasSize.height\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style: playbackPopup,\n        children: playbackRates.map((rate)=>{\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackrateOption, {\n                selectedRate: playbackRate,\n                onSelect,\n                rate,\n                keyboardSelectedRate\n            }, rate);\n        })\n    });\n};\n_s12(PlaybackPopup, \"l+YrSX/s5Lnl7qRu3sOO4qZsYAE=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c12 = PlaybackPopup;\nvar label = {\n    fontSize: 13,\n    fontWeight: \"bold\",\n    color: \"white\",\n    border: \"2px solid white\",\n    borderRadius: 20,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 2,\n    paddingBottom: 2\n};\nvar playerButtonStyle = {\n    appearance: \"none\",\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    cursor: \"pointer\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 6,\n    paddingBottom: 6,\n    height: 37,\n    display: \"inline-flex\",\n    marginBottom: 0,\n    marginTop: 0,\n    alignItems: \"center\"\n};\nvar button = {\n    ...playerButtonStyle,\n    position: \"relative\"\n};\nvar PlaybackrateControl = (param)=>{\n    let { playbackRates, canvasSize } = param;\n    _s13();\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const { playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        e.stopPropagation();\n        e.preventDefault();\n        setIsComponentVisible((prevIsComponentVisible)=>!prevIsComponentVisible);\n    }, [\n        setIsComponentVisible\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n            type: \"button\",\n            \"aria-label\": \"Change playback rate\",\n            style: button,\n            onClick,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    style: label,\n                    children: [\n                        playbackRate,\n                        \"x\"\n                    ]\n                }),\n                isComponentVisible && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackPopup, {\n                    canvasSize,\n                    playbackRates,\n                    setIsComponentVisible\n                })\n            ]\n        })\n    });\n};\n_s13(PlaybackrateControl, \"k0ojBLqSpNzzBF1wT++5SHPeHrs=\", false, function() {\n    return [\n        useComponentVisible,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback\n    ];\n});\n_c13 = PlaybackrateControl;\n// src/PlayerSeekBar.tsx\n\n\n\nvar getFrameFromX = (clientX, durationInFrames, width)=>{\n    const pos = clientX;\n    const frame = Math.round((0,remotion__WEBPACK_IMPORTED_MODULE_1__.interpolate)(pos, [\n        0,\n        width\n    ], [\n        0,\n        durationInFrames - 1\n    ], {\n        extrapolateLeft: \"clamp\",\n        extrapolateRight: \"clamp\"\n    }));\n    return frame;\n};\nvar BAR_HEIGHT2 = 5;\nvar KNOB_SIZE2 = 12;\nvar VERTICAL_PADDING = 4;\nvar containerStyle = {\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\",\n    paddingTop: VERTICAL_PADDING,\n    paddingBottom: VERTICAL_PADDING,\n    boxSizing: \"border-box\",\n    cursor: \"pointer\",\n    position: \"relative\",\n    touchAction: \"none\"\n};\nvar barBackground = {\n    height: BAR_HEIGHT2,\n    backgroundColor: \"rgba(255, 255, 255, 0.25)\",\n    width: \"100%\",\n    borderRadius: BAR_HEIGHT2 / 2\n};\nvar findBodyInWhichDivIsLocated = (div)=>{\n    let current = div;\n    while(current.parentElement){\n        current = current.parentElement;\n    }\n    return current;\n};\nvar PlayerSeekBar = (param)=>{\n    let { durationInFrames, onSeekEnd, onSeekStart, inFrame, outFrame } = param;\n    _s14();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const barHovered = useHoverState(containerRef, false);\n    const size = useElementSize(containerRef, {\n        triggerOnWindowResize: true,\n        shouldApplyCssTransforms: true\n    });\n    const { seek, play, pause, playing } = usePlayer();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        dragging: false\n    });\n    var _size_width;\n    const width = (_size_width = size === null || size === void 0 ? void 0 : size.width) !== null && _size_width !== void 0 ? _size_width : 0;\n    const onPointerDown = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        var _containerRef_current;\n        if (e.button !== 0) {\n            return;\n        }\n        const posLeft = (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.getBoundingClientRect().left;\n        const _frame = getFrameFromX(e.clientX - posLeft, durationInFrames, width);\n        pause();\n        seek(_frame);\n        setDragging({\n            dragging: true,\n            wasPlaying: playing\n        });\n        onSeekStart();\n    }, [\n        durationInFrames,\n        width,\n        pause,\n        seek,\n        playing,\n        onSeekStart\n    ]);\n    const onPointerMove = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        var _containerRef_current;\n        if (!size) {\n            throw new Error(\"Player has no size\");\n        }\n        if (!dragging.dragging) {\n            return;\n        }\n        const posLeft = (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.getBoundingClientRect().left;\n        const _frame = getFrameFromX(e.clientX - posLeft, durationInFrames, size.width);\n        seek(_frame);\n    }, [\n        dragging.dragging,\n        durationInFrames,\n        seek,\n        size\n    ]);\n    const onPointerUp = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setDragging({\n            dragging: false\n        });\n        if (!dragging.dragging) {\n            return;\n        }\n        if (dragging.wasPlaying) {\n            play();\n        } else {\n            pause();\n        }\n        onSeekEnd();\n    }, [\n        dragging,\n        onSeekEnd,\n        pause,\n        play\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!dragging.dragging) {\n            return;\n        }\n        const body = findBodyInWhichDivIsLocated(containerRef.current);\n        body.addEventListener(\"pointermove\", onPointerMove);\n        body.addEventListener(\"pointerup\", onPointerUp);\n        return ()=>{\n            body.removeEventListener(\"pointermove\", onPointerMove);\n            body.removeEventListener(\"pointerup\", onPointerUp);\n        };\n    }, [\n        dragging.dragging,\n        onPointerMove,\n        onPointerUp\n    ]);\n    const knobStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            height: KNOB_SIZE2,\n            width: KNOB_SIZE2,\n            borderRadius: KNOB_SIZE2 / 2,\n            position: \"absolute\",\n            top: VERTICAL_PADDING - KNOB_SIZE2 / 2 + 5 / 2,\n            backgroundColor: \"white\",\n            left: Math.max(0, frame / Math.max(1, durationInFrames - 1) * width - KNOB_SIZE2 / 2),\n            boxShadow: \"0 0 2px black\",\n            opacity: Number(barHovered)\n        };\n    }, [\n        barHovered,\n        durationInFrames,\n        frame,\n        width\n    ]);\n    const fillStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            height: BAR_HEIGHT2,\n            backgroundColor: \"rgba(255, 255, 255, 1)\",\n            width: (frame - (inFrame !== null && inFrame !== void 0 ? inFrame : 0)) / (durationInFrames - 1) * 100 + \"%\",\n            marginLeft: (inFrame !== null && inFrame !== void 0 ? inFrame : 0) / (durationInFrames - 1) * 100 + \"%\",\n            borderRadius: BAR_HEIGHT2 / 2\n        };\n    }, [\n        durationInFrames,\n        frame,\n        inFrame\n    ]);\n    const active = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            height: BAR_HEIGHT2,\n            backgroundColor: \"rgba(255, 255, 255, 0.25)\",\n            width: ((outFrame !== null && outFrame !== void 0 ? outFrame : durationInFrames - 1) - (inFrame !== null && inFrame !== void 0 ? inFrame : 0)) / (durationInFrames - 1) * 100 + \"%\",\n            marginLeft: (inFrame !== null && inFrame !== void 0 ? inFrame : 0) / (durationInFrames - 1) * 100 + \"%\",\n            borderRadius: BAR_HEIGHT2 / 2,\n            position: \"absolute\"\n        };\n    }, [\n        durationInFrames,\n        inFrame,\n        outFrame\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref: containerRef,\n        onPointerDown,\n        style: containerStyle,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                style: barBackground,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: active\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: fillStyle\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: knobStyle\n            })\n        ]\n    });\n};\n_s14(PlayerSeekBar, \"x9Unnk/fh9dVd0bBD11Cq1LhrWQ=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        useHoverState,\n        useElementSize,\n        usePlayer,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c14 = PlayerSeekBar;\n// src/format-time.ts\nvar formatTime = (timeInSeconds)=>{\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds - minutes * 60);\n    return \"\".concat(String(minutes), \":\").concat(String(seconds).padStart(2, \"0\"));\n};\n// src/use-video-controls-resize.ts\n\nvar X_SPACER = 10;\nvar X_PADDING = 12;\nvar useVideoControlsResize = (param)=>{\n    let { allowFullscreen: allowFullScreen, playerWidth } = param;\n    _s15();\n    const resizeInfo = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const playPauseIconSize = ICON_SIZE;\n        const volumeIconSize = ICON_SIZE;\n        const _fullscreenIconSize = allowFullScreen ? fullscreenIconSize : 0;\n        const elementsSize = volumeIconSize + playPauseIconSize + _fullscreenIconSize + X_PADDING * 2 + X_SPACER * 2;\n        const maxTimeLabelWidth = playerWidth - elementsSize;\n        const maxTimeLabelWidthWithoutNegativeValue = Math.max(maxTimeLabelWidth, 0);\n        const availableTimeLabelWidthIfVolumeOpen = maxTimeLabelWidthWithoutNegativeValue - VOLUME_SLIDER_WIDTH;\n        const computedLabelWidth = availableTimeLabelWidthIfVolumeOpen < VOLUME_SLIDER_WIDTH ? maxTimeLabelWidthWithoutNegativeValue : availableTimeLabelWidthIfVolumeOpen;\n        const minWidthForHorizontalDisplay = computedLabelWidth + elementsSize + VOLUME_SLIDER_WIDTH;\n        const displayVerticalVolumeSlider = playerWidth < minWidthForHorizontalDisplay;\n        return {\n            maxTimeLabelWidth: maxTimeLabelWidthWithoutNegativeValue === 0 ? null : maxTimeLabelWidthWithoutNegativeValue,\n            displayVerticalVolumeSlider\n        };\n    }, [\n        allowFullScreen,\n        playerWidth\n    ]);\n    return resizeInfo;\n};\n_s15(useVideoControlsResize, \"BU96NJorTdxzj6mMrz1UT8P1Tso=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n// src/PlayerControls.tsx\n\nvar gradientSteps = [\n    0,\n    0.013,\n    0.049,\n    0.104,\n    0.175,\n    0.259,\n    0.352,\n    0.45,\n    0.55,\n    0.648,\n    0.741,\n    0.825,\n    0.896,\n    0.951,\n    0.987\n];\nvar gradientOpacities = [\n    0,\n    8.1,\n    15.5,\n    22.5,\n    29,\n    35.3,\n    41.2,\n    47.1,\n    52.9,\n    58.8,\n    64.7,\n    71,\n    77.5,\n    84.5,\n    91.9\n];\nvar globalGradientOpacity = 1 / 0.7;\nvar containerStyle2 = {\n    boxSizing: \"border-box\",\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    paddingTop: 40,\n    paddingBottom: 10,\n    backgroundImage: \"linear-gradient(to bottom,\".concat(gradientSteps.map((g, i)=>{\n        return \"hsla(0, 0%, 0%, \".concat(g, \") \").concat(gradientOpacities[i] * globalGradientOpacity, \"%\");\n    }).join(\", \"), \", hsl(0, 0%, 0%) 100%)\"),\n    backgroundSize: \"auto 145px\",\n    display: \"flex\",\n    paddingRight: X_PADDING,\n    paddingLeft: X_PADDING,\n    flexDirection: \"column\",\n    transition: \"opacity 0.3s\"\n};\nvar controlsRow = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\"\n};\nvar leftPartStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\",\n    alignItems: \"center\"\n};\nvar xSpacer = {\n    width: 12\n};\nvar ySpacer = {\n    height: 8\n};\nvar flex1 = {\n    flex: 1\n};\nvar fullscreen = {};\nvar Controls = (param)=>{\n    let { durationInFrames, isFullscreen, fps, player, showVolumeControls, onFullscreenButtonClick, allowFullscreen, onExitFullscreenButtonClick, spaceKeyToPlayOrPause, onSeekEnd, onSeekStart, inFrame, outFrame, initiallyShowControls, canvasSize, renderPlayPauseButton, renderFullscreenButton, alwaysShowControls, showPlaybackRateControl, containerRef, buffering, hideControlsWhenPointerDoesntMove, onPointerDown, onDoubleClick, renderMuteButton, renderVolumeSlider } = param;\n    _s16();\n    const playButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const [supportsFullscreen, setSupportsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const hovered = useHoverState(containerRef, hideControlsWhenPointerDoesntMove);\n    var _canvasSize_width;\n    const { maxTimeLabelWidth, displayVerticalVolumeSlider } = useVideoControlsResize({\n        allowFullscreen,\n        playerWidth: (_canvasSize_width = canvasSize === null || canvasSize === void 0 ? void 0 : canvasSize.width) !== null && _canvasSize_width !== void 0 ? _canvasSize_width : 0\n    });\n    const [shouldShowInitially, setInitiallyShowControls] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>{\n        if (typeof initiallyShowControls === \"boolean\") {\n            return initiallyShowControls;\n        }\n        if (typeof initiallyShowControls === \"number\") {\n            if (initiallyShowControls % 1 !== 0) {\n                throw new Error(\"initiallyShowControls must be an integer or a boolean\");\n            }\n            if (Number.isNaN(initiallyShowControls)) {\n                throw new Error(\"initiallyShowControls must not be NaN\");\n            }\n            if (!Number.isFinite(initiallyShowControls)) {\n                throw new Error(\"initiallyShowControls must be finite\");\n            }\n            if (initiallyShowControls <= 0) {\n                throw new Error(\"initiallyShowControls must be a positive integer\");\n            }\n            return initiallyShowControls;\n        }\n        throw new TypeError(\"initiallyShowControls must be a number or a boolean\");\n    });\n    const containerCss = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const shouldShow = hovered || !player.playing || shouldShowInitially || alwaysShowControls;\n        return {\n            ...containerStyle2,\n            opacity: Number(shouldShow)\n        };\n    }, [\n        hovered,\n        shouldShowInitially,\n        player.playing,\n        alwaysShowControls\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (playButtonRef.current && spaceKeyToPlayOrPause) {\n            playButtonRef.current.focus({\n                preventScroll: true\n            });\n        }\n    }, [\n        player.playing,\n        spaceKeyToPlayOrPause\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        var _ref;\n        setSupportsFullscreen((_ref = typeof document !== \"undefined\" && (document.fullscreenEnabled || document.webkitFullscreenEnabled)) !== null && _ref !== void 0 ? _ref : false);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (shouldShowInitially === false) {\n            return;\n        }\n        const time = shouldShowInitially === true ? 2000 : shouldShowInitially;\n        const timeout = setTimeout(()=>{\n            setInitiallyShowControls(false);\n        }, time);\n        return ()=>{\n            clearInterval(timeout);\n        };\n    }, [\n        shouldShowInitially\n    ]);\n    const timeLabel = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            color: \"white\",\n            fontFamily: \"sans-serif\",\n            fontSize: 14,\n            maxWidth: maxTimeLabelWidth === null ? undefined : maxTimeLabelWidth,\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\"\n        };\n    }, [\n        maxTimeLabelWidth\n    ]);\n    const playbackRates = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (showPlaybackRateControl === true) {\n            return [\n                0.5,\n                0.8,\n                1,\n                1.2,\n                1.5,\n                1.8,\n                2,\n                2.5,\n                3\n            ];\n        }\n        if (Array.isArray(showPlaybackRateControl)) {\n            for (const rate of showPlaybackRateControl){\n                if (typeof rate !== \"number\") {\n                    throw new Error(\"Every item in showPlaybackRateControl must be a number\");\n                }\n                if (rate <= 0) {\n                    throw new Error(\"Every item in showPlaybackRateControl must be positive\");\n                }\n            }\n            return showPlaybackRateControl;\n        }\n        return null;\n    }, [\n        showPlaybackRateControl\n    ]);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const flexRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const onPointerDownIfContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        if (e.target === ref.current || e.target === flexRef.current) {\n            onPointerDown === null || onPointerDown === void 0 ? void 0 : onPointerDown(e);\n        }\n    }, [\n        onPointerDown\n    ]);\n    const onDoubleClickIfContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        if (e.target === ref.current || e.target === flexRef.current) {\n            onDoubleClick === null || onDoubleClick === void 0 ? void 0 : onDoubleClick(e);\n        }\n    }, [\n        onDoubleClick\n    ]);\n    var _renderPlayPauseButton;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref,\n        style: containerCss,\n        onPointerDown: onPointerDownIfContainer,\n        onDoubleClick: onDoubleClickIfContainer,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                ref: flexRef,\n                style: controlsRow,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        style: leftPartStyle,\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                ref: playButtonRef,\n                                type: \"button\",\n                                style: playerButtonStyle,\n                                onClick: player.playing ? player.pause : player.play,\n                                \"aria-label\": player.playing ? \"Pause video\" : \"Play video\",\n                                title: player.playing ? \"Pause video\" : \"Play video\",\n                                children: renderPlayPauseButton === null ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultPlayPauseButton, {\n                                    buffering,\n                                    playing: player.playing\n                                }) : (_renderPlayPauseButton = renderPlayPauseButton({\n                                    playing: player.playing,\n                                    isBuffering: buffering\n                                })) !== null && _renderPlayPauseButton !== void 0 ? _renderPlayPauseButton : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultPlayPauseButton, {\n                                    buffering,\n                                    playing: player.playing\n                                })\n                            }),\n                            showVolumeControls ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                        style: xSpacer\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MediaVolumeSlider, {\n                                        renderMuteButton,\n                                        renderVolumeSlider,\n                                        displayVerticalVolumeSlider\n                                    })\n                                ]\n                            }) : null,\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                style: xSpacer\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                style: timeLabel,\n                                children: [\n                                    formatTime(frame / fps),\n                                    \" / \",\n                                    formatTime(durationInFrames / fps)\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                style: xSpacer\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: flex1\n                    }),\n                    playbackRates && canvasSize && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackrateControl, {\n                        canvasSize,\n                        playbackRates\n                    }),\n                    playbackRates && supportsFullscreen && allowFullscreen ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: xSpacer\n                    }) : null,\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: fullscreen,\n                        children: supportsFullscreen && allowFullscreen ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                            type: \"button\",\n                            \"aria-label\": isFullscreen ? \"Exit fullscreen\" : \"Enter Fullscreen\",\n                            title: isFullscreen ? \"Exit fullscreen\" : \"Enter Fullscreen\",\n                            style: playerButtonStyle,\n                            onClick: isFullscreen ? onExitFullscreenButtonClick : onFullscreenButtonClick,\n                            children: renderFullscreenButton === null ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FullscreenIcon, {\n                                isFullscreen\n                            }) : renderFullscreenButton({\n                                isFullscreen\n                            })\n                        }) : null\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: ySpacer\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerSeekBar, {\n                onSeekEnd,\n                onSeekStart,\n                durationInFrames,\n                inFrame,\n                outFrame\n            })\n        ]\n    });\n};\n_s16(Controls, \"CzmlBzsblzPZ6IbAqHsBvJMXziQ=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        useHoverState,\n        useVideoControlsResize,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback\n    ];\n});\n_c15 = Controls;\n// src/error-boundary.tsx\n\n\nvar errorStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    height: \"100%\",\n    width: \"100%\"\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_2__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            hasError: error\n        };\n    }\n    componentDidCatch(error) {\n        this.props.onError(error);\n    }\n    render() {\n        if (this.state.hasError) {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: errorStyle,\n                children: this.props.errorFallback({\n                    error: this.state.hasError\n                })\n            });\n        }\n        return this.props.children;\n    }\n    constructor(...args){\n        super(...args);\n        this.state = {\n            hasError: null\n        };\n    }\n}\n// src/player-css-classname.ts\nvar PLAYER_CSS_CLASSNAME = \"__remotion-player\";\n// src/utils/is-node.ts\nvar IS_NODE = typeof document === \"undefined\";\n// src/utils/use-click-prevention-on-double-click.ts\n\n// src/utils/cancellable-promise.ts\nvar cancellablePromise = (promise)=>{\n    let isCanceled = false;\n    const wrappedPromise = new Promise((resolve, reject)=>{\n        promise.then((value)=>{\n            if (isCanceled) {\n                reject({\n                    isCanceled,\n                    value\n                });\n                return;\n            }\n            resolve(value);\n        }).catch((error)=>{\n            reject({\n                isCanceled,\n                error\n            });\n        });\n    });\n    return {\n        promise: wrappedPromise,\n        cancel: ()=>{\n            isCanceled = true;\n        }\n    };\n};\n// src/utils/delay.ts\nvar delay = (n)=>new Promise((resolve)=>setTimeout(resolve, n));\n// src/utils/use-cancellable-promises.ts\n\nvar useCancellablePromises = ()=>{\n    _s17();\n    const pendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const appendPendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((promise)=>{\n        pendingPromises.current = [\n            ...pendingPromises.current,\n            promise\n        ];\n    }, []);\n    const removePendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((promise)=>{\n        pendingPromises.current = pendingPromises.current.filter((p)=>p !== promise);\n    }, []);\n    const clearPendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>pendingPromises.current.map((p)=>p.cancel()), []);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>({\n            appendPendingPromise,\n            removePendingPromise,\n            clearPendingPromises\n        }), [\n        appendPendingPromise,\n        clearPendingPromises,\n        removePendingPromise\n    ]);\n    return api;\n};\n_s17(useCancellablePromises, \"nDeJZVeanCht3cDSTPPcIQxO6eI=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n// src/utils/use-click-prevention-on-double-click.ts\nvar useClickPreventionOnDoubleClick = (onClick, onDoubleClick, doubleClickToFullscreen)=>{\n    _s18();\n    const api = useCancellablePromises();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (e)=>{\n        if (e instanceof PointerEvent ? e.pointerType === \"touch\" : e.nativeEvent.pointerType === \"touch\") {\n            onClick(e);\n            return;\n        }\n        api.clearPendingPromises();\n        const waitForClick = cancellablePromise(delay(200));\n        api.appendPendingPromise(waitForClick);\n        try {\n            await waitForClick.promise;\n            api.removePendingPromise(waitForClick);\n            onClick(e);\n        } catch (errorInfo) {\n            const info = errorInfo;\n            api.removePendingPromise(waitForClick);\n            if (!info.isCanceled) {\n                throw info.error;\n            }\n        }\n    }, [\n        api,\n        onClick\n    ]);\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        document.addEventListener(\"pointerup\", (newEvt)=>{\n            handleClick(newEvt);\n        }, {\n            once: true\n        });\n    }, [\n        handleClick\n    ]);\n    const handleDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        api.clearPendingPromises();\n        onDoubleClick();\n    }, [\n        api,\n        onDoubleClick\n    ]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!doubleClickToFullscreen) {\n            return {\n                handlePointerDown: onClick,\n                handleDoubleClick: ()=>{\n                    return;\n                }\n            };\n        }\n        return {\n            handlePointerDown,\n            handleDoubleClick\n        };\n    }, [\n        doubleClickToFullscreen,\n        handleDoubleClick,\n        handlePointerDown,\n        onClick\n    ]);\n    return returnValue;\n};\n_s18(useClickPreventionOnDoubleClick, \"M0yHBqmBiwR/y/uoSSk6m5+TLh4=\", false, function() {\n    return [\n        useCancellablePromises,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n// src/PlayerUI.tsx\n\nvar reactVersion = react__WEBPACK_IMPORTED_MODULE_2__.version.split(\".\")[0];\nif (reactVersion === \"0\") {\n    throw new Error(\"Version \".concat(reactVersion, ' of \"react\" is not supported by Remotion'));\n}\nvar doesReactVersionSupportSuspense = parseInt(reactVersion, 10) >= 18;\nvar PlayerUI = (param, ref)=>{\n    let { controls, style, loop, autoPlay, allowFullscreen, inputProps, clickToPlay, showVolumeControls, doubleClickToFullscreen, spaceKeyToPlayOrPause, errorFallback, playbackRate, renderLoading, renderPoster, className: className2, moveToBeginningWhenEnded, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, showPosterWhenBuffering, inFrame, outFrame, initiallyShowControls, renderFullscreen: renderFullscreenButton, renderPlayPauseButton, renderMuteButton, renderVolumeSlider, alwaysShowControls, showPlaybackRateControl, posterFillMode, bufferStateDelayInMilliseconds, hideControlsWhenPointerDoesntMove, overflowVisible, browserMediaControlsBehavior } = param;\n    _s19();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false\n    });\n    const [hasPausedToResume, setHasPausedToResume] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [shouldAutoplay, setShouldAutoPlay] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(autoPlay);\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>false);\n    const [seeking, setSeeking] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const supportsFullScreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (typeof document === \"undefined\") {\n            return false;\n        }\n        return Boolean(document.fullscreenEnabled || document.webkitFullscreenEnabled);\n    }, []);\n    const player = usePlayer();\n    usePlayback({\n        loop,\n        playbackRate,\n        moveToBeginningWhenEnded,\n        inFrame,\n        outFrame,\n        frameRef: player.remotionInternal_currentFrameRef,\n        browserMediaControlsBehavior\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (hasPausedToResume && !player.playing) {\n            setHasPausedToResume(false);\n            player.play();\n        }\n    }, [\n        hasPausedToResume,\n        player\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const { current } = container;\n        if (!current) {\n            return;\n        }\n        const onFullscreenChange = ()=>{\n            const newValue = document.fullscreenElement === current || document.webkitFullscreenElement === current;\n            setIsFullscreen(newValue);\n        };\n        document.addEventListener(\"fullscreenchange\", onFullscreenChange);\n        document.addEventListener(\"webkitfullscreenchange\", onFullscreenChange);\n        return ()=>{\n            document.removeEventListener(\"fullscreenchange\", onFullscreenChange);\n            document.removeEventListener(\"webkitfullscreenchange\", onFullscreenChange);\n        };\n    }, []);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        if (player.isPlaying()) {\n            player.pause();\n        } else {\n            player.play(e);\n        }\n    }, [\n        player\n    ]);\n    const requestFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (!allowFullscreen) {\n            throw new Error(\"allowFullscreen is false\");\n        }\n        if (!supportsFullScreen) {\n            throw new Error(\"Browser doesnt support fullscreen\");\n        }\n        if (!container.current) {\n            throw new Error(\"No player ref found\");\n        }\n        if (container.current.webkitRequestFullScreen) {\n            container.current.webkitRequestFullScreen();\n        } else {\n            container.current.requestFullscreen();\n        }\n    }, [\n        allowFullscreen,\n        supportsFullScreen\n    ]);\n    const exitFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else {\n            document.exitFullscreen();\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        const { current } = container;\n        if (!current) {\n            return;\n        }\n        const fullscreenChange = ()=>{\n            var _document_webkitFullscreenElement;\n            const element = (_document_webkitFullscreenElement = document.webkitFullscreenElement) !== null && _document_webkitFullscreenElement !== void 0 ? _document_webkitFullscreenElement : document.fullscreenElement;\n            if (element && element === container.current) {\n                player.emitter.dispatchFullscreenChange({\n                    isFullscreen: true\n                });\n            } else {\n                player.emitter.dispatchFullscreenChange({\n                    isFullscreen: false\n                });\n            }\n        };\n        current.addEventListener(\"webkitfullscreenchange\", fullscreenChange);\n        current.addEventListener(\"fullscreenchange\", fullscreenChange);\n        return ()=>{\n            current.removeEventListener(\"webkitfullscreenchange\", fullscreenChange);\n            current.removeEventListener(\"fullscreenchange\", fullscreenChange);\n        };\n    }, [\n        player.emitter\n    ]);\n    var _config_durationInFrames;\n    const durationInFrames = (_config_durationInFrames = config === null || config === void 0 ? void 0 : config.durationInFrames) !== null && _config_durationInFrames !== void 0 ? _config_durationInFrames : 1;\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!config || !canvasSize) {\n            return null;\n        }\n        return calculateCanvasTransformation({\n            canvasSize,\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            previewSize: \"auto\"\n        });\n    }, [\n        canvasSize,\n        config\n    ]);\n    var _layout_scale;\n    const scale = (_layout_scale = layout === null || layout === void 0 ? void 0 : layout.scale) !== null && _layout_scale !== void 0 ? _layout_scale : 1;\n    const initialScaleIgnored = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!initialScaleIgnored.current) {\n            initialScaleIgnored.current = true;\n            return;\n        }\n        player.emitter.dispatchScaleChange(scale);\n    }, [\n        player.emitter,\n        scale\n    ]);\n    const { setMediaVolume, setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext);\n    const { mediaMuted, mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        player.emitter.dispatchVolumeChange(mediaVolume);\n    }, [\n        player.emitter,\n        mediaVolume\n    ]);\n    const isMuted = mediaMuted || mediaVolume === 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        player.emitter.dispatchMuteChange({\n            isMuted\n        });\n    }, [\n        player.emitter,\n        isMuted\n    ]);\n    const [showBufferIndicator, setShowBufferState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        let timeout = null;\n        let stopped = false;\n        const onBuffer = ()=>{\n            stopped = false;\n            requestAnimationFrame(()=>{\n                if (bufferStateDelayInMilliseconds === 0) {\n                    setShowBufferState(true);\n                } else {\n                    timeout = setTimeout(()=>{\n                        if (!stopped) {\n                            setShowBufferState(true);\n                        }\n                    }, bufferStateDelayInMilliseconds);\n                }\n            });\n        };\n        const onResume = ()=>{\n            requestAnimationFrame(()=>{\n                stopped = true;\n                setShowBufferState(false);\n                if (timeout) {\n                    clearTimeout(timeout);\n                }\n            });\n        };\n        player.emitter.addEventListener(\"waiting\", onBuffer);\n        player.emitter.addEventListener(\"resume\", onResume);\n        return ()=>{\n            player.emitter.removeEventListener(\"waiting\", onBuffer);\n            player.emitter.removeEventListener(\"resume\", onResume);\n            setShowBufferState(false);\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n            stopped = true;\n        };\n    }, [\n        bufferStateDelayInMilliseconds,\n        player.emitter\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, ()=>{\n        const methods = {\n            play: player.play,\n            pause: ()=>{\n                setHasPausedToResume(false);\n                player.pause();\n            },\n            toggle,\n            getContainerNode: ()=>container.current,\n            getCurrentFrame: player.getCurrentFrame,\n            isPlaying: player.isPlaying,\n            seekTo: (f)=>{\n                const lastFrame = durationInFrames - 1;\n                const frameToSeekTo = Math.max(0, Math.min(lastFrame, f));\n                if (player.isPlaying()) {\n                    const pauseToResume = frameToSeekTo !== lastFrame || loop;\n                    setHasPausedToResume(pauseToResume);\n                    player.pause();\n                }\n                if (frameToSeekTo === lastFrame && !loop) {\n                    player.emitter.dispatchEnded();\n                }\n                player.seek(frameToSeekTo);\n            },\n            isFullscreen: ()=>{\n                const { current } = container;\n                if (!current) {\n                    return false;\n                }\n                return document.fullscreenElement === current || document.webkitFullscreenElement === current;\n            },\n            requestFullscreen,\n            exitFullscreen,\n            getVolume: ()=>{\n                if (mediaMuted) {\n                    return 0;\n                }\n                return mediaVolume;\n            },\n            setVolume: (vol)=>{\n                if (typeof vol !== \"number\") {\n                    throw new TypeError(\"setVolume() takes a number, got value of type \".concat(typeof vol));\n                }\n                if (isNaN(vol)) {\n                    throw new TypeError(\"setVolume() got a number that is NaN. Volume must be between 0 and 1.\");\n                }\n                if (vol < 0 || vol > 1) {\n                    throw new TypeError(\"setVolume() got a number that is out of range. Must be between 0 and 1, got \".concat(typeof vol));\n                }\n                setMediaVolume(vol);\n            },\n            isMuted: ()=>isMuted,\n            mute: ()=>{\n                setMediaMuted(true);\n            },\n            unmute: ()=>{\n                setMediaMuted(false);\n            },\n            getScale: ()=>scale,\n            pauseAndReturnToPlayStart: ()=>{\n                player.pauseAndReturnToPlayStart();\n            }\n        };\n        return Object.assign(player.emitter, methods);\n    }, [\n        durationInFrames,\n        exitFullscreen,\n        loop,\n        mediaMuted,\n        isMuted,\n        mediaVolume,\n        player,\n        requestFullscreen,\n        setMediaMuted,\n        setMediaVolume,\n        toggle,\n        scale\n    ]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateOuterStyle({\n            canvasSize,\n            config,\n            style,\n            overflowVisible,\n            layout\n        });\n    }, [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        style\n    ]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateOuter({\n            config,\n            layout,\n            scale,\n            overflowVisible\n        });\n    }, [\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const containerStyle3 = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateContainerStyle({\n            canvasSize,\n            config,\n            layout,\n            scale,\n            overflowVisible\n        });\n    }, [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((error)=>{\n        player.pause();\n        player.emitter.dispatchError(error);\n    }, [\n        player\n    ]);\n    const onFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        e.stopPropagation();\n        requestFullscreen();\n    }, [\n        requestFullscreen\n    ]);\n    const onExitFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        e.stopPropagation();\n        exitFullscreen();\n    }, [\n        exitFullscreen\n    ]);\n    const onSingleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((e)=>{\n        const rightClick = e instanceof MouseEvent ? e.button === 2 : e.nativeEvent.button;\n        if (rightClick) {\n            return;\n        }\n        toggle(e);\n    }, [\n        toggle\n    ]);\n    const onSeekStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setSeeking(true);\n    }, []);\n    const onSeekEnd = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setSeeking(false);\n    }, []);\n    const onDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (isFullscreen) {\n            exitFullscreen();\n        } else {\n            requestFullscreen();\n        }\n    }, [\n        exitFullscreen,\n        isFullscreen,\n        requestFullscreen\n    ]);\n    const { handlePointerDown, handleDoubleClick } = useClickPreventionOnDoubleClick(onSingleClick, onDoubleClick, doubleClickToFullscreen && allowFullscreen && supportsFullScreen);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (shouldAutoplay) {\n            player.play();\n            setShouldAutoPlay(false);\n        }\n    }, [\n        shouldAutoplay,\n        player\n    ]);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return renderLoading ? renderLoading({\n            height: outerStyle.height,\n            width: outerStyle.width,\n            isBuffering: showBufferIndicator\n        }) : null;\n    }, [\n        outerStyle.height,\n        outerStyle.width,\n        renderLoading,\n        showBufferIndicator\n    ]);\n    const currentScale = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            type: \"scale\",\n            scale\n        };\n    }, [\n        scale\n    ]);\n    if (!config) {\n        return null;\n    }\n    const poster = renderPoster ? renderPoster({\n        height: posterFillMode === \"player-size\" ? outerStyle.height : config.height,\n        width: posterFillMode === \"player-size\" ? outerStyle.width : config.width,\n        isBuffering: showBufferIndicator\n    }) : null;\n    if (poster === undefined) {\n        throw new TypeError(\"renderPoster() must return a React element, but undefined was returned\");\n    }\n    const shouldShowPoster = poster && [\n        showPosterWhenPaused && !player.isPlaying() && !seeking,\n        showPosterWhenEnded && player.isLastFrame && !player.isPlaying(),\n        showPosterWhenUnplayed && !player.hasPlayed && !player.isPlaying(),\n        showPosterWhenBuffering && showBufferIndicator && player.isPlaying()\n    ].some(Boolean);\n    const { left, top, width, height, ...outerWithoutScale } = outer;\n    var _video_props;\n    const content = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: outer,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    style: containerStyle3,\n                    className: PLAYER_CSS_CLASSNAME,\n                    children: [\n                        VideoComponent ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorBoundary, {\n                            onError,\n                            errorFallback,\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.ClipComposition, {\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CurrentScaleContext.Provider, {\n                                    value: currentScale,\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoComponent, {\n                                        ...(_video_props = video === null || video === void 0 ? void 0 : video.props) !== null && _video_props !== void 0 ? _video_props : {},\n                                        ...inputProps !== null && inputProps !== void 0 ? inputProps : {}\n                                    })\n                                })\n                            })\n                        }) : null,\n                        shouldShowPoster && posterFillMode === \"composition-size\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            style: {\n                                ...outerWithoutScale,\n                                width: config.width,\n                                height: config.height\n                            },\n                            onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                            onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                            children: poster\n                        }) : null\n                    ]\n                })\n            }),\n            shouldShowPoster && posterFillMode === \"player-size\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: outer,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                children: poster\n            }) : null,\n            controls ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Controls, {\n                fps: config.fps,\n                durationInFrames: config.durationInFrames,\n                player,\n                containerRef: container,\n                onFullscreenButtonClick,\n                isFullscreen,\n                allowFullscreen,\n                showVolumeControls,\n                onExitFullscreenButtonClick,\n                spaceKeyToPlayOrPause,\n                onSeekEnd,\n                onSeekStart,\n                inFrame,\n                outFrame,\n                initiallyShowControls,\n                canvasSize,\n                renderFullscreenButton,\n                renderPlayPauseButton,\n                alwaysShowControls,\n                showPlaybackRateControl,\n                buffering: showBufferIndicator,\n                hideControlsWhenPointerDoesntMove,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                renderMuteButton,\n                renderVolumeSlider\n            }) : null\n        ]\n    });\n    if (IS_NODE && !doesReactVersionSupportSuspense) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: container,\n            style: outerStyle,\n            className: className2,\n            children: content\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: container,\n        style: outerStyle,\n        className: className2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n            fallback: loadingMarkup,\n            children: content\n        })\n    });\n};\n_s19(PlayerUI, \"iTXuKVVCVGCBOwTlmgAzetSXT14=\", false, function() {\n    return [\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        useElementSize,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        usePlayer,\n        usePlayback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        useClickPreventionOnDoubleClick,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c16 = PlayerUI;\nvar PlayerUI_default = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(PlayerUI);\n_c17 = PlayerUI_default;\n// src/SharedPlayerContext.tsx\n\n\n// src/volume-persistance.ts\nvar VOLUME_PERSISTANCE_KEY = \"remotion.volumePreference\";\nvar persistVolume = (volume)=>{\n    if (typeof window === \"undefined\") {\n        return;\n    }\n    try {\n        window.localStorage.setItem(VOLUME_PERSISTANCE_KEY, String(volume));\n    } catch (e) {\n        console.log(\"Could not persist volume\", e);\n    }\n};\nvar getPreferredVolume = ()=>{\n    if (typeof window === \"undefined\") {\n        return 1;\n    }\n    try {\n        const val = window.localStorage.getItem(VOLUME_PERSISTANCE_KEY);\n        return val ? Number(val) : 1;\n    } catch (e) {\n        return 1;\n    }\n};\n// src/SharedPlayerContext.tsx\n\nvar PLAYER_COMP_ID = \"player-comp\";\nvar SharedPlayerContexts = (param)=>{\n    let { children, timelineContext, fps, compositionHeight, compositionWidth, durationInFrames, component, numberOfSharedAudioTags, initiallyMuted } = param;\n    _s20();\n    const compositionManagerContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const context = {\n            compositions: [\n                {\n                    component,\n                    durationInFrames,\n                    height: compositionHeight,\n                    width: compositionWidth,\n                    fps,\n                    id: PLAYER_COMP_ID,\n                    nonce: 777,\n                    folderName: null,\n                    parentFolderName: null,\n                    schema: null,\n                    calculateMetadata: null\n                }\n            ],\n            folders: [],\n            registerFolder: ()=>{\n                return;\n            },\n            unregisterFolder: ()=>{\n                return;\n            },\n            registerComposition: ()=>{\n                return;\n            },\n            unregisterComposition: ()=>{\n                return;\n            },\n            currentCompositionMetadata: null,\n            setCurrentCompositionMetadata: ()=>{\n                return;\n            },\n            canvasContent: {\n                type: \"composition\",\n                compositionId: \"player-comp\"\n            },\n            setCanvasContent: ()=>{\n                return;\n            },\n            updateCompositionDefaultProps: ()=>{\n                return;\n            }\n        };\n        return context;\n    }, [\n        component,\n        durationInFrames,\n        compositionHeight,\n        compositionWidth,\n        fps\n    ]);\n    const [mediaMuted, setMediaMuted] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>initiallyMuted);\n    const [mediaVolume, setMediaVolume] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>getPreferredVolume());\n    const mediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            mediaMuted,\n            mediaVolume\n        };\n    }, [\n        mediaMuted,\n        mediaVolume\n    ]);\n    const setMediaVolumeAndPersist = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((vol)=>{\n        setMediaVolume(vol);\n        persistVolume(vol);\n    }, []);\n    const setMediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            setMediaMuted,\n            setMediaVolume: setMediaVolumeAndPersist\n        };\n    }, [\n        setMediaVolumeAndPersist\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CanUseRemotionHooksProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext.Provider, {\n            value: timelineContext,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CompositionManager.Provider, {\n                value: compositionManagerContext,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.ResolveCompositionConfig, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.PrefetchProvider, {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.DurationsContextProvider, {\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext.Provider, {\n                                value: mediaVolumeContextValue,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.NativeLayersProvider, {\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext.Provider, {\n                                        value: setMediaVolumeContextValue,\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContextProvider, {\n                                            numberOfAudioTags: numberOfSharedAudioTags,\n                                            component,\n                                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingProvider, {\n                                                children\n                                            })\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n};\n_s20(SharedPlayerContexts, \"fexdCwpphY3Ug4uGwpUqSs1QQPc=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c18 = SharedPlayerContexts;\n// src/utils/validate-in-out-frame.ts\nvar validateSingleFrame = (frame, variableName)=>{\n    if (typeof frame === \"undefined\" || frame === null) {\n        return frame !== null && frame !== void 0 ? frame : null;\n    }\n    if (typeof frame !== \"number\") {\n        throw new TypeError('\"'.concat(variableName, '\" must be a number, but is ').concat(JSON.stringify(frame)));\n    }\n    if (Number.isNaN(frame)) {\n        throw new TypeError('\"'.concat(variableName, '\" must not be NaN, but is ').concat(JSON.stringify(frame)));\n    }\n    if (!Number.isFinite(frame)) {\n        throw new TypeError('\"'.concat(variableName, '\" must be finite, but is ').concat(JSON.stringify(frame)));\n    }\n    if (frame % 1 !== 0) {\n        throw new TypeError('\"'.concat(variableName, '\" must be an integer, but is ').concat(JSON.stringify(frame)));\n    }\n    return frame;\n};\nvar validateInOutFrames = (param)=>{\n    let { inFrame, durationInFrames, outFrame } = param;\n    const validatedInFrame = validateSingleFrame(inFrame, \"inFrame\");\n    const validatedOutFrame = validateSingleFrame(outFrame, \"outFrame\");\n    if (validatedInFrame === null && validatedOutFrame === null) {\n        return;\n    }\n    if (validatedInFrame !== null && validatedInFrame > durationInFrames - 1) {\n        throw new Error(\"inFrame must be less than (durationInFrames - 1), but is \" + validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame > durationInFrames - 1) {\n        throw new Error(\"outFrame must be less than (durationInFrames - 1), but is \" + validatedOutFrame);\n    }\n    if (validatedInFrame !== null && validatedInFrame < 0) {\n        throw new Error(\"inFrame must be greater than 0, but is \" + validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame <= 0) {\n        throw new Error(\"outFrame must be greater than 0, but is \".concat(validatedOutFrame, \". If you want to render a single frame, use <Thumbnail /> instead.\"));\n    }\n    if (validatedOutFrame !== null && validatedInFrame !== null && validatedOutFrame <= validatedInFrame) {\n        throw new Error(\"outFrame must be greater than inFrame, but is \" + validatedOutFrame + \" <= \" + validatedInFrame);\n    }\n};\n// src/utils/validate-initial-frame.ts\nvar validateInitialFrame = (param)=>{\n    let { initialFrame, durationInFrames } = param;\n    if (typeof durationInFrames !== \"number\") {\n        throw new Error(\"`durationInFrames` must be a number, but is \".concat(JSON.stringify(durationInFrames)));\n    }\n    if (typeof initialFrame === \"undefined\") {\n        return;\n    }\n    if (typeof initialFrame !== \"number\") {\n        throw new Error(\"`initialFrame` must be a number, but is \".concat(JSON.stringify(initialFrame)));\n    }\n    if (Number.isNaN(initialFrame)) {\n        throw new Error(\"`initialFrame` must be a number, but is NaN\");\n    }\n    if (!Number.isFinite(initialFrame)) {\n        throw new Error(\"`initialFrame` must be a number, but is Infinity\");\n    }\n    if (initialFrame % 1 !== 0) {\n        throw new Error(\"`initialFrame` must be an integer, but is \".concat(JSON.stringify(initialFrame)));\n    }\n    if (initialFrame > durationInFrames - 1) {\n        throw new Error(\"`initialFrame` must be less or equal than `durationInFrames - 1`, but is \".concat(JSON.stringify(initialFrame)));\n    }\n};\n// src/utils/validate-playbackrate.ts\nvar validatePlaybackRate = (playbackRate)=>{\n    if (playbackRate === undefined) {\n        return;\n    }\n    if (playbackRate > 4) {\n        throw new Error(\"The highest possible playback rate is 4. You passed: \".concat(playbackRate));\n    }\n    if (playbackRate < -4) {\n        throw new Error(\"The lowest possible playback rate is -4. You passed: \".concat(playbackRate));\n    }\n    if (playbackRate === 0) {\n        throw new Error(\"A playback rate of 0 is not supported.\");\n    }\n};\n// src/validate.ts\n\nvar validateFps = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateFps;\nvar validateDimension = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDimension;\nvar validateDurationInFrames = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDurationInFrames;\nvar validateDefaultAndInputProps = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDefaultAndInputProps;\n// src/Player.tsx\n\nvar componentOrNullIfLazy = (props)=>{\n    if (\"component\" in props) {\n        return props.component;\n    }\n    return null;\n};\nvar PlayerFn = (param, ref)=>{\n    let { durationInFrames, compositionHeight, compositionWidth, fps, inputProps, style, controls = false, loop = false, autoPlay = false, showVolumeControls = true, allowFullscreen = true, clickToPlay, doubleClickToFullscreen = false, spaceKeyToPlayOrPause = true, moveToBeginningWhenEnded = true, numberOfSharedAudioTags = 5, errorFallback = ()=>\"⚠️\", playbackRate = 1, renderLoading, className: className2, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, showPosterWhenBuffering, initialFrame, renderPoster, inFrame, outFrame, initiallyShowControls, renderFullscreenButton, renderPlayPauseButton, renderVolumeSlider, alwaysShowControls = false, initiallyMuted = false, showPlaybackRateControl = false, posterFillMode = \"player-size\", bufferStateDelayInMilliseconds, hideControlsWhenPointerDoesntMove = true, overflowVisible = false, renderMuteButton, browserMediaControlsBehavior: passedBrowserMediaControlsBehavior, ...componentProps } = param;\n    _s21();\n    if (typeof window !== \"undefined\") {\n        (0,react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n            window.remotion_isPlayer = true;\n        }, []);\n    }\n    if (componentProps.defaultProps !== undefined) {\n        throw new Error(\"The <Player /> component does not accept `defaultProps`, but some were passed. Use `inputProps` instead.\");\n    }\n    const componentForValidation = componentOrNullIfLazy(componentProps);\n    if ((componentForValidation === null || componentForValidation === void 0 ? void 0 : componentForValidation.type) === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(\"'component' should not be an instance of <Composition/>. Pass the React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.\");\n    }\n    if (componentForValidation === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(\"'component' must not be the 'Composition' component. Pass your own React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.\");\n    }\n    const component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent(componentProps);\n    validateInitialFrame({\n        initialFrame,\n        durationInFrames\n    });\n    const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>({\n            [PLAYER_COMP_ID]: initialFrame !== null && initialFrame !== void 0 ? initialFrame : 0\n        }));\n    const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [rootId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"player-comp\");\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(false);\n    const [currentPlaybackRate, setCurrentPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(playbackRate);\n    if (typeof compositionHeight !== \"number\") {\n        throw new TypeError(\"'compositionHeight' must be a number but got '\".concat(typeof compositionHeight, \"' instead\"));\n    }\n    if (typeof compositionWidth !== \"number\") {\n        throw new TypeError(\"'compositionWidth' must be a number but got '\".concat(typeof compositionWidth, \"' instead\"));\n    }\n    validateDimension(compositionHeight, \"compositionHeight\", \"of the <Player /> component\");\n    validateDimension(compositionWidth, \"compositionWidth\", \"of the <Player /> component\");\n    validateDurationInFrames(durationInFrames, {\n        component: \"of the <Player/> component\",\n        allowFloats: false\n    });\n    validateFps(fps, \"as a prop of the <Player/> component\", false);\n    validateDefaultAndInputProps(inputProps, \"inputProps\", null);\n    validateInOutFrames({\n        durationInFrames,\n        inFrame,\n        outFrame\n    });\n    if (typeof controls !== \"boolean\" && typeof controls !== \"undefined\") {\n        throw new TypeError(\"'controls' must be a boolean or undefined but got '\".concat(typeof controls, \"' instead\"));\n    }\n    if (typeof autoPlay !== \"boolean\" && typeof autoPlay !== \"undefined\") {\n        throw new TypeError(\"'autoPlay' must be a boolean or undefined but got '\".concat(typeof autoPlay, \"' instead\"));\n    }\n    if (typeof loop !== \"boolean\" && typeof loop !== \"undefined\") {\n        throw new TypeError(\"'loop' must be a boolean or undefined but got '\".concat(typeof loop, \"' instead\"));\n    }\n    if (typeof doubleClickToFullscreen !== \"boolean\" && typeof doubleClickToFullscreen !== \"undefined\") {\n        throw new TypeError(\"'doubleClickToFullscreen' must be a boolean or undefined but got '\".concat(typeof doubleClickToFullscreen, \"' instead\"));\n    }\n    if (typeof showVolumeControls !== \"boolean\" && typeof showVolumeControls !== \"undefined\") {\n        throw new TypeError(\"'showVolumeControls' must be a boolean or undefined but got '\".concat(typeof showVolumeControls, \"' instead\"));\n    }\n    if (typeof allowFullscreen !== \"boolean\" && typeof allowFullscreen !== \"undefined\") {\n        throw new TypeError(\"'allowFullscreen' must be a boolean or undefined but got '\".concat(typeof allowFullscreen, \"' instead\"));\n    }\n    if (typeof clickToPlay !== \"boolean\" && typeof clickToPlay !== \"undefined\") {\n        throw new TypeError(\"'clickToPlay' must be a boolean or undefined but got '\".concat(typeof clickToPlay, \"' instead\"));\n    }\n    if (typeof spaceKeyToPlayOrPause !== \"boolean\" && typeof spaceKeyToPlayOrPause !== \"undefined\") {\n        throw new TypeError(\"'spaceKeyToPlayOrPause' must be a boolean or undefined but got '\".concat(typeof spaceKeyToPlayOrPause, \"' instead\"));\n    }\n    if (typeof numberOfSharedAudioTags !== \"number\" || numberOfSharedAudioTags % 1 !== 0 || !Number.isFinite(numberOfSharedAudioTags) || Number.isNaN(numberOfSharedAudioTags) || numberOfSharedAudioTags < 0) {\n        throw new TypeError(\"'numberOfSharedAudioTags' must be an integer but got '\".concat(numberOfSharedAudioTags, \"' instead\"));\n    }\n    validatePlaybackRate(currentPlaybackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        setCurrentPlaybackRate(playbackRate);\n    }, [\n        playbackRate\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, ()=>rootRef.current, []);\n    const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            frame,\n            playing,\n            rootId,\n            playbackRate: currentPlaybackRate,\n            imperativePlaying,\n            setPlaybackRate: (rate)=>{\n                setCurrentPlaybackRate(rate);\n            },\n            audioAndVideoTags\n        };\n    }, [\n        frame,\n        currentPlaybackRate,\n        playing,\n        rootId\n    ]);\n    const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            setFrame,\n            setPlaying\n        };\n    }, [\n        setFrame\n    ]);\n    if (typeof window !== \"undefined\") {\n        (0,react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n            remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CSSUtils.injectCSS(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CSSUtils.makeDefaultPreviewCSS(\".\".concat(PLAYER_CSS_CLASSNAME), \"#fff\"));\n        }, []);\n    }\n    const actualInputProps = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>inputProps !== null && inputProps !== void 0 ? inputProps : {}, [\n        inputProps\n    ]);\n    const browserMediaControlsBehavior = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return passedBrowserMediaControlsBehavior !== null && passedBrowserMediaControlsBehavior !== void 0 ? passedBrowserMediaControlsBehavior : {\n            mode: \"prevent-media-session\"\n        };\n    }, [\n        passedBrowserMediaControlsBehavior\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SharedPlayerContexts, {\n            timelineContext: timelineContextValue,\n            component,\n            compositionHeight,\n            compositionWidth,\n            durationInFrames,\n            fps,\n            numberOfSharedAudioTags,\n            initiallyMuted,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.SetTimelineContext.Provider, {\n                value: setTimelineContextValue,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerEmitterProvider, {\n                    currentPlaybackRate,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerUI_default, {\n                        ref: rootRef,\n                        posterFillMode,\n                        renderLoading,\n                        autoPlay: Boolean(autoPlay),\n                        loop: Boolean(loop),\n                        controls: Boolean(controls),\n                        errorFallback,\n                        style,\n                        inputProps: actualInputProps,\n                        allowFullscreen: Boolean(allowFullscreen),\n                        moveToBeginningWhenEnded: Boolean(moveToBeginningWhenEnded),\n                        clickToPlay: typeof clickToPlay === \"boolean\" ? clickToPlay : Boolean(controls),\n                        showVolumeControls: Boolean(showVolumeControls),\n                        doubleClickToFullscreen: Boolean(doubleClickToFullscreen),\n                        spaceKeyToPlayOrPause: Boolean(spaceKeyToPlayOrPause),\n                        playbackRate: currentPlaybackRate,\n                        className: className2 !== null && className2 !== void 0 ? className2 : undefined,\n                        showPosterWhenUnplayed: Boolean(showPosterWhenUnplayed),\n                        showPosterWhenEnded: Boolean(showPosterWhenEnded),\n                        showPosterWhenPaused: Boolean(showPosterWhenPaused),\n                        showPosterWhenBuffering: Boolean(showPosterWhenBuffering),\n                        renderPoster,\n                        inFrame: inFrame !== null && inFrame !== void 0 ? inFrame : null,\n                        outFrame: outFrame !== null && outFrame !== void 0 ? outFrame : null,\n                        initiallyShowControls: initiallyShowControls !== null && initiallyShowControls !== void 0 ? initiallyShowControls : true,\n                        renderFullscreen: renderFullscreenButton !== null && renderFullscreenButton !== void 0 ? renderFullscreenButton : null,\n                        renderPlayPauseButton: renderPlayPauseButton !== null && renderPlayPauseButton !== void 0 ? renderPlayPauseButton : null,\n                        renderMuteButton: renderMuteButton !== null && renderMuteButton !== void 0 ? renderMuteButton : null,\n                        renderVolumeSlider: renderVolumeSlider !== null && renderVolumeSlider !== void 0 ? renderVolumeSlider : null,\n                        alwaysShowControls,\n                        showPlaybackRateControl,\n                        bufferStateDelayInMilliseconds: bufferStateDelayInMilliseconds !== null && bufferStateDelayInMilliseconds !== void 0 ? bufferStateDelayInMilliseconds : 300,\n                        hideControlsWhenPointerDoesntMove,\n                        overflowVisible,\n                        browserMediaControlsBehavior\n                    })\n                })\n            })\n        })\n    });\n};\n_s21(PlayerFn, \"KveOCcw4hYVvSmlRUddXB8uMraA=\", false, function() {\n    return [\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c19 = PlayerFn;\nvar forward = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;\nvar Player = forward(PlayerFn);\n_c20 = Player;\n// src/Thumbnail.tsx\n\n\n// src/ThumbnailUI.tsx\n\n\n// src/use-thumbnail.ts\n\nvar useThumbnail = ()=>{\n    _s22();\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(ThumbnailEmitterContext);\n    if (!emitter) {\n        throw new TypeError(\"Expected Player event emitter context\");\n    }\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            emitter\n        };\n    }, [\n        emitter\n    ]);\n    return returnValue;\n};\n_s22(useThumbnail, \"2BG1+BUMBXiB4ZphL9eWI9NZtqk=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useContext,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n// src/ThumbnailUI.tsx\n\nvar reactVersion2 = react__WEBPACK_IMPORTED_MODULE_2__.version.split(\".\")[0];\nif (reactVersion2 === \"0\") {\n    throw new Error(\"Version \".concat(reactVersion2, ' of \"react\" is not supported by Remotion'));\n}\nvar doesReactVersionSupportSuspense2 = parseInt(reactVersion2, 10) >= 18;\nvar ThumbnailUI = (param, ref)=>{\n    let { style, inputProps, errorFallback, renderLoading, className: className2, overflowVisible } = param;\n    _s23();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false\n    });\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!config || !canvasSize) {\n            return null;\n        }\n        return calculateCanvasTransformation({\n            canvasSize,\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            previewSize: \"auto\"\n        });\n    }, [\n        canvasSize,\n        config\n    ]);\n    var _layout_scale;\n    const scale = (_layout_scale = layout === null || layout === void 0 ? void 0 : layout.scale) !== null && _layout_scale !== void 0 ? _layout_scale : 1;\n    const thumbnail = useThumbnail();\n    useBufferStateEmitter(thumbnail.emitter);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, ()=>{\n        const methods = {\n            getContainerNode: ()=>container.current,\n            getScale: ()=>scale\n        };\n        return Object.assign(thumbnail.emitter, methods);\n    }, [\n        scale,\n        thumbnail.emitter\n    ]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateOuterStyle({\n            config,\n            style,\n            canvasSize,\n            overflowVisible,\n            layout\n        });\n    }, [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        style\n    ]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateOuter({\n            config,\n            layout,\n            scale,\n            overflowVisible\n        });\n    }, [\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const containerStyle3 = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return calculateContainerStyle({\n            canvasSize,\n            config,\n            layout,\n            scale,\n            overflowVisible\n        });\n    }, [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((error)=>{\n        thumbnail.emitter.dispatchError(error);\n    }, [\n        thumbnail.emitter\n    ]);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return renderLoading ? renderLoading({\n            height: outerStyle.height,\n            width: outerStyle.width,\n            isBuffering: false\n        }) : null;\n    }, [\n        outerStyle.height,\n        outerStyle.width,\n        renderLoading\n    ]);\n    const currentScaleContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return {\n            type: \"scale\",\n            scale\n        };\n    }, [\n        scale\n    ]);\n    if (!config) {\n        return null;\n    }\n    var _video_props;\n    const content = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style: outer,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            style: containerStyle3,\n            className: PLAYER_CSS_CLASSNAME,\n            children: VideoComponent ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorBoundary, {\n                onError,\n                errorFallback,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CurrentScaleContext.Provider, {\n                    value: currentScaleContext,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoComponent, {\n                        ...(_video_props = video === null || video === void 0 ? void 0 : video.props) !== null && _video_props !== void 0 ? _video_props : {},\n                        ...inputProps !== null && inputProps !== void 0 ? inputProps : {}\n                    })\n                })\n            }) : null\n        })\n    });\n    if (IS_NODE && !doesReactVersionSupportSuspense2) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: container,\n            style: outerStyle,\n            className: className2,\n            children: content\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: container,\n        style: outerStyle,\n        className: className2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n            fallback: loadingMarkup,\n            children: content\n        })\n    });\n};\n_s23(ThumbnailUI, \"LcPWe868M/uwenHy/v8fETFHzks=\", false, function() {\n    return [\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        useElementSize,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        useThumbnail,\n        useBufferStateEmitter,\n        react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c21 = ThumbnailUI;\nvar ThumbnailUI_default = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(ThumbnailUI);\n_c22 = ThumbnailUI_default;\n// src/Thumbnail.tsx\n\nvar ThumbnailFn = (param, ref)=>{\n    let { frameToDisplay, style, inputProps, compositionHeight, compositionWidth, durationInFrames, fps, className: className2, errorFallback = ()=>\"⚠️\", renderLoading, overflowVisible = false, ...componentProps } = param;\n    _s24();\n    if (typeof window !== \"undefined\") {\n        (0,react__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n            window.remotion_isPlayer = true;\n        }, []);\n    }\n    const [thumbnailId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>String((0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(null)));\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const timelineState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        const value = {\n            playing: false,\n            frame: {\n                [PLAYER_COMP_ID]: frameToDisplay\n            },\n            rootId: thumbnailId,\n            imperativePlaying: {\n                current: false\n            },\n            playbackRate: 1,\n            setPlaybackRate: ()=>{\n                throw new Error(\"thumbnail\");\n            },\n            audioAndVideoTags: {\n                current: []\n            }\n        };\n        return value;\n    }, [\n        frameToDisplay,\n        thumbnailId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, ()=>rootRef.current, []);\n    const Component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent(componentProps);\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>new ThumbnailEmitter);\n    const passedInputProps = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return inputProps !== null && inputProps !== void 0 ? inputProps : {};\n    }, [\n        inputProps\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SharedPlayerContexts, {\n            timelineContext: timelineState,\n            component: Component,\n            compositionHeight,\n            compositionWidth,\n            durationInFrames,\n            fps,\n            numberOfSharedAudioTags: 0,\n            initiallyMuted: true,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThumbnailEmitterContext.Provider, {\n                value: emitter,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThumbnailUI_default, {\n                    ref: rootRef,\n                    className: className2,\n                    errorFallback,\n                    inputProps: passedInputProps,\n                    renderLoading,\n                    style,\n                    overflowVisible\n                })\n            })\n        })\n    });\n};\n_s24(ThumbnailFn, \"G99/2lHKZ/fRaf2/vIo6BMSOPQg=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle,\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent,\n        react__WEBPACK_IMPORTED_MODULE_2__.useState,\n        react__WEBPACK_IMPORTED_MODULE_2__.useMemo\n    ];\n});\n_c23 = ThumbnailFn;\nvar forward2 = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;\nvar Thumbnail = forward2(ThumbnailFn);\n_c24 = Thumbnail;\n// src/index.ts\nvar PlayerInternals = {\n    PlayerEventEmitterContext,\n    PlayerEmitter,\n    usePlayer,\n    usePlayback,\n    useElementSize,\n    calculateCanvasTransformation,\n    useHoverState,\n    updateAllElementsSizes,\n    PlayerEmitterProvider,\n    BufferingIndicator\n};\n\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24;\n$RefreshReg$(_c, \"PlayIcon\");\n$RefreshReg$(_c1, \"PauseIcon\");\n$RefreshReg$(_c2, \"FullscreenIcon\");\n$RefreshReg$(_c3, \"VolumeOffIcon\");\n$RefreshReg$(_c4, \"VolumeOnIcon\");\n$RefreshReg$(_c5, \"BufferingIndicator\");\n$RefreshReg$(_c6, \"PlayerEmitterProvider\");\n$RefreshReg$(_c7, \"DefaultPlayPauseButton\");\n$RefreshReg$(_c8, \"DefaultVolumeSlider\");\n$RefreshReg$(_c9, \"MediaVolumeSlider\");\n$RefreshReg$(_c10, \"Checkmark\");\n$RefreshReg$(_c11, \"PlaybackrateOption\");\n$RefreshReg$(_c12, \"PlaybackPopup\");\n$RefreshReg$(_c13, \"PlaybackrateControl\");\n$RefreshReg$(_c14, \"PlayerSeekBar\");\n$RefreshReg$(_c15, \"Controls\");\n$RefreshReg$(_c16, \"PlayerUI\");\n$RefreshReg$(_c17, \"PlayerUI_default\");\n$RefreshReg$(_c18, \"SharedPlayerContexts\");\n$RefreshReg$(_c19, \"PlayerFn\");\n$RefreshReg$(_c20, \"Player\");\n$RefreshReg$(_c21, \"ThumbnailUI\");\n$RefreshReg$(_c22, \"ThumbnailUI_default\");\n$RefreshReg$(_c23, \"ThumbnailFn\");\n$RefreshReg$(_c24, \"Thumbnail\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVtb3Rpb24vcGxheWVyL2Rpc3QvZXNtL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBLGdCQUFnQjtBQUM4QjtBQUM5QyxJQUFJRSxZQUFZO0FBQ2hCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxXQUFXO0lBQ2IsT0FBTyxhQUFhLEdBQUdKLHNEQUFHQSxDQUFDLE9BQU87UUFDaENLLE9BQU9IO1FBQ1BJLFFBQVFKO1FBQ1JLLFNBQVM7UUFDVEMsTUFBTTtRQUNOQyxVQUFVLGFBQWEsR0FBR1Qsc0RBQUdBLENBQUMsUUFBUTtZQUNwQ1UsR0FBRztZQUNIRixNQUFNO1lBQ05HLFFBQVE7WUFDUkMsYUFBYTtZQUNiQyxnQkFBZ0I7UUFDbEI7SUFDRjtBQUNGO0tBZElUO0FBZUosSUFBSVUsWUFBWTtJQUNkLE9BQU8sYUFBYSxHQUFHYix1REFBSUEsQ0FBQyxPQUFPO1FBQ2pDTSxTQUFTO1FBQ1RGLE9BQU9IO1FBQ1BJLFFBQVFKO1FBQ1JPLFVBQVU7WUFDUixhQUFhLEdBQUdULHNEQUFHQSxDQUFDLFFBQVE7Z0JBQzFCZSxHQUFHO2dCQUNIQyxHQUFHO2dCQUNIWCxPQUFPO2dCQUNQQyxRQUFRO2dCQUNSRSxNQUFNO2dCQUNOUyxJQUFJO2dCQUNKQyxJQUFJO1lBQ047WUFDQSxhQUFhLEdBQUdsQixzREFBR0EsQ0FBQyxRQUFRO2dCQUMxQmUsR0FBRztnQkFDSEMsR0FBRztnQkFDSFgsT0FBTztnQkFDUEMsUUFBUTtnQkFDUkUsTUFBTTtnQkFDTlMsSUFBSTtnQkFDSkMsSUFBSTtZQUNOO1NBQ0Q7SUFDSDtBQUNGO01BMUJJSjtBQTJCSixJQUFJSyxpQkFBaUI7UUFBQyxFQUNwQkMsWUFBWSxFQUNiO0lBQ0MsTUFBTVIsY0FBYztJQUNwQixNQUFNUyxXQUFXO0lBQ2pCLE1BQU1DLE1BQU1GLGVBQWUsSUFBSVIsY0FBYztJQUM3QyxNQUFNVyxjQUFjSCxlQUFlUixjQUFjLE1B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QyxZQUFZRCxTQUFTTDs7QUFFekIsZUFBZTtBQUNmLElBQUlPLGtCQUFrQjtJQUNwQnJ4QjtJQUNBUztJQUNBMEY7SUFDQTJGO0lBQ0E4QjtJQUNBdFA7SUFDQXNHO0lBQ0E4STtJQUNBcEo7SUFDQTVHO0FBQ0Y7QUFLRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlbW90aW9uL3BsYXllci9kaXN0L2VzbS9pbmRleC5tanM/MTQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbi8vIHNyYy9pY29ucy50c3hcbmltcG9ydCB7IGpzeCwganN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIElDT05fU0laRSA9IDI1O1xudmFyIGZ1bGxzY3JlZW5JY29uU2l6ZSA9IDE2O1xudmFyIFBsYXlJY29uID0gKCkgPT4ge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeChcInN2Z1wiLCB7XG4gICAgd2lkdGg6IElDT05fU0laRSxcbiAgICBoZWlnaHQ6IElDT05fU0laRSxcbiAgICB2aWV3Qm94OiBcIjAgMCAyNSAyNVwiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4KFwicGF0aFwiLCB7XG4gICAgICBkOiBcIk04IDYuMzc1QzcuNDA5MDQgOC4xNzU3NiA3LjA2OTIxIDEwLjI0ODYgNy4wMTQzOCAxMi4zODcxQzYuOTU5NTUgMTQuNTI1NSA3LjE5MTYzIDE2LjY1NDcgNy42ODc1IDE4LjU2MjVDOS45NTM2NCAxOC4yOTk1IDEyLjExNiAxNy42MTY0IDE0LjAwOSAxNi41NjU1QzE1LjkwMiAxNS41MTQ3IDE3LjQ3NTUgMTQuMTI0IDE4LjYwODggMTIuNUMxNy41MTU4IDEwLjg5NDkgMTUuOTk0OSA5LjUxMTAzIDE0LjE1ODUgOC40NTA4MkMxMi4zMjIyIDcuMzkwNiAxMC4yMTc0IDYuNjgxMTYgOCA2LjM3NVpcIixcbiAgICAgIGZpbGw6IFwid2hpdGVcIixcbiAgICAgIHN0cm9rZTogXCJ3aGl0ZVwiLFxuICAgICAgc3Ryb2tlV2lkdGg6IFwiNi4yNVwiLFxuICAgICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICAgIH0pXG4gIH0pO1xufTtcbnZhciBQYXVzZUljb24gPSAoKSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4cyhcInN2Z1wiLCB7XG4gICAgdmlld0JveDogXCIwIDAgMTAwIDEwMFwiLFxuICAgIHdpZHRoOiBJQ09OX1NJWkUsXG4gICAgaGVpZ2h0OiBJQ09OX1NJWkUsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJyZWN0XCIsIHtcbiAgICAgICAgeDogXCIyNVwiLFxuICAgICAgICB5OiBcIjIwXCIsXG4gICAgICAgIHdpZHRoOiBcIjIwXCIsXG4gICAgICAgIGhlaWdodDogXCI2MFwiLFxuICAgICAgICBmaWxsOiBcIiNmZmZcIixcbiAgICAgICAgcnk6IFwiNVwiLFxuICAgICAgICByeDogXCI1XCJcbiAgICAgIH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChcInJlY3RcIiwge1xuICAgICAgICB4OiBcIjU1XCIsXG4gICAgICAgIHk6IFwiMjBcIixcbiAgICAgICAgd2lkdGg6IFwiMjBcIixcbiAgICAgICAgaGVpZ2h0OiBcIjYwXCIsXG4gICAgICAgIGZpbGw6IFwiI2ZmZlwiLFxuICAgICAgICByeTogXCI1XCIsXG4gICAgICAgIHJ4OiBcIjVcIlxuICAgICAgfSlcbiAgICBdXG4gIH0pO1xufTtcbnZhciBGdWxsc2NyZWVuSWNvbiA9ICh7XG4gIGlzRnVsbHNjcmVlblxufSkgPT4ge1xuICBjb25zdCBzdHJva2VXaWR0aCA9IDY7XG4gIGNvbnN0IHZpZXdTaXplID0gMzI7XG4gIGNvbnN0IG91dCA9IGlzRnVsbHNjcmVlbiA/IDAgOiBzdHJva2VXaWR0aCAvIDI7XG4gIGNvbnN0IG1pZGRsZUluc2V0ID0gaXNGdWxsc2NyZWVuID8gc3Ryb2tlV2lkdGggKiAxLjYgOiBzdHJva2VXaWR0aCAvIDI7XG4gIGNvbnN0IGluc2V0ID0gaXNGdWxsc2NyZWVuID8gc3Ryb2tlV2lkdGggKiAxLjYgOiBzdHJva2VXaWR0aCAqIDI7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4cyhcInN2Z1wiLCB7XG4gICAgdmlld0JveDogYDAgMCAke3ZpZXdTaXplfSAke3ZpZXdTaXplfWAsXG4gICAgaGVpZ2h0OiBmdWxsc2NyZWVuSWNvblNpemUsXG4gICAgd2lkdGg6IGZ1bGxzY3JlZW5JY29uU2l6ZSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChcInBhdGhcIiwge1xuICAgICAgICBkOiBgXG5cdFx0XHRcdE0gJHtvdXR9ICR7aW5zZXR9XG5cdFx0XHRcdEwgJHttaWRkbGVJbnNldH0gJHttaWRkbGVJbnNldH1cblx0XHRcdFx0TCAke2luc2V0fSAke291dH1cblx0XHRcdFx0YCxcbiAgICAgICAgc3Ryb2tlOiBcIiNmZmZcIixcbiAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiXG4gICAgICB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJwYXRoXCIsIHtcbiAgICAgICAgZDogYFxuXHRcdFx0XHRNICR7dmlld1NpemUgLSBvdXR9ICR7aW5zZXR9XG5cdFx0XHRcdEwgJHt2aWV3U2l6ZSAtIG1pZGRsZUluc2V0fSAke21pZGRsZUluc2V0fVxuXHRcdFx0XHRMICR7dmlld1NpemUgLSBpbnNldH0gJHtvdXR9XG5cdFx0XHRcdGAsXG4gICAgICAgIHN0cm9rZTogXCIjZmZmXCIsXG4gICAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgICBmaWxsOiBcIm5vbmVcIlxuICAgICAgfSksXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4KFwicGF0aFwiLCB7XG4gICAgICAgIGQ6IGBcblx0XHRcdFx0TSAke291dH0gJHt2aWV3U2l6ZSAtIGluc2V0fVxuXHRcdFx0XHRMICR7bWlkZGxlSW5zZXR9ICR7dmlld1NpemUgLSBtaWRkbGVJbnNldH1cblx0XHRcdFx0TCAke2luc2V0fSAke3ZpZXdTaXplIC0gb3V0fVxuXHRcdFx0XHRgLFxuICAgICAgICBzdHJva2U6IFwiI2ZmZlwiLFxuICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgZmlsbDogXCJub25lXCJcbiAgICAgIH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChcInBhdGhcIiwge1xuICAgICAgICBkOiBgXG5cdFx0XHRcdE0gJHt2aWV3U2l6ZSAtIG91dH0gJHt2aWV3U2l6ZSAtIGluc2V0fVxuXHRcdFx0XHRMICR7dmlld1NpemUgLSBtaWRkbGVJbnNldH0gJHt2aWV3U2l6ZSAtIG1pZGRsZUluc2V0fVxuXHRcdFx0XHRMICR7dmlld1NpemUgLSBpbnNldH0gJHt2aWV3U2l6ZSAtIG91dH1cblx0XHRcdFx0YCxcbiAgICAgICAgc3Ryb2tlOiBcIiNmZmZcIixcbiAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiXG4gICAgICB9KVxuICAgIF1cbiAgfSk7XG59O1xudmFyIFZvbHVtZU9mZkljb24gPSAoKSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwic3ZnXCIsIHtcbiAgICB3aWR0aDogSUNPTl9TSVpFLFxuICAgIGhlaWdodDogSUNPTl9TSVpFLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTMuNjMgMy42M2EuOTk2Ljk5NiAwIDAwMCAxLjQxTDcuMjkgOC43IDcgOUg0Yy0uNTUgMC0xIC40NS0xIDF2NGMwIC41NS40NSAxIDEgMWgzbDMuMjkgMy4yOWMuNjMuNjMgMS43MS4xOCAxLjcxLS43MXYtNC4xN2w0LjE4IDQuMThjLS40OS4zNy0xLjAyLjY4LTEuNi45MS0uMzYuMTUtLjU4LjUzLS41OC45MiAwIC43Mi43MyAxLjE4IDEuMzkuOTEuOC0uMzMgMS41NS0uNzcgMi4yMi0xLjMxbDEuMzQgMS4zNGEuOTk2Ljk5NiAwIDEwMS40MS0xLjQxTDUuMDUgMy42M2MtLjM5LS4zOS0xLjAyLS4zOS0xLjQyIDB6TTE5IDEyYzAgLjgyLS4xNSAxLjYxLS40MSAyLjM0bDEuNTMgMS41M2MuNTYtMS4xNy44OC0yLjQ4Ljg4LTMuODcgMC0zLjgzLTIuNC03LjExLTUuNzgtOC40LS41OS0uMjMtMS4yMi4yMy0xLjIyLjg2di4xOWMwIC4zOC4yNS43MS42MS44NUMxNy4xOCA2LjU0IDE5IDkuMDYgMTkgMTJ6bS04LjcxLTYuMjlsLS4xNy4xN0wxMiA3Ljc2VjYuNDFjMC0uODktMS4wOC0xLjMzLTEuNzEtLjd6TTE2LjUgMTJBNC41IDQuNSAwIDAwMTQgNy45N3YxLjc5bDIuNDggMi40OGMuMDEtLjA4LjAyLS4xNi4wMi0uMjR6XCIsXG4gICAgICBmaWxsOiBcIiNmZmZcIlxuICAgIH0pXG4gIH0pO1xufTtcbnZhciBWb2x1bWVPbkljb24gPSAoKSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFwic3ZnXCIsIHtcbiAgICB3aWR0aDogSUNPTl9TSVpFLFxuICAgIGhlaWdodDogSUNPTl9TSVpFLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3goXCJwYXRoXCIsIHtcbiAgICAgIGQ6IFwiTTMgMTB2NGMwIC41NS40NSAxIDEgMWgzbDMuMjkgMy4yOWMuNjMuNjMgMS43MS4xOCAxLjcxLS43MVY2LjQxYzAtLjg5LTEuMDgtMS4zNC0xLjcxLS43MUw3IDlINGMtLjU1IDAtMSAuNDUtMSAxem0xMy41IDJBNC41IDQuNSAwIDAwMTQgNy45N3Y4LjA1YzEuNDgtLjczIDIuNS0yLjI1IDIuNS00LjAyek0xNCA0LjQ1di4yYzAgLjM4LjI1LjcxLjYuODVDMTcuMTggNi41MyAxOSA5LjA2IDE5IDEycy0xLjgyIDUuNDctNC40IDYuNWMtLjM2LjE0LS42LjQ3LS42Ljg1di4yYzAgLjYzLjYzIDEuMDcgMS4yMS44NUMxOC42IDE5LjExIDIxIDE1Ljg0IDIxIDEycy0yLjQtNy4xMS01Ljc5LTguNGMtLjU4LS4yMy0xLjIxLjIyLTEuMjEuODV6XCIsXG4gICAgICBmaWxsOiBcIiNmZmZcIlxuICAgIH0pXG4gIH0pO1xufTtcblxuLy8gc3JjL0J1ZmZlcmluZ0luZGljYXRvci50c3hcbmltcG9ydCB7IGpzeCBhcyBqc3gyLCBqc3hzIGFzIGpzeHMyLCBGcmFnbWVudCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIGNsYXNzTmFtZSA9IFwiX19yZW1vdGlvbl9idWZmZXJpbmdfaW5kaWNhdG9yXCI7XG52YXIgcmVtb3Rpb25CdWZmZXJpbmdBbmltYXRpb24gPSBcIl9fcmVtb3Rpb25fYnVmZmVyaW5nX2FuaW1hdGlvblwiO1xudmFyIHBsYXllclN0eWxlID0ge1xuICB3aWR0aDogSUNPTl9TSVpFLFxuICBoZWlnaHQ6IElDT05fU0laRSxcbiAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gIGxpbmVIZWlnaHQ6IFwibm9ybWFsXCIsXG4gIGZvbnRTaXplOiBcImluaGVyaXRcIlxufTtcbnZhciBzdHVkaW9TdHlsZSA9IHtcbiAgd2lkdGg6IDE0LFxuICBoZWlnaHQ6IDE0LFxuICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgbGluZUhlaWdodDogXCJub3JtYWxcIixcbiAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG59O1xudmFyIEJ1ZmZlcmluZ0luZGljYXRvciA9ICh7IHR5cGUgfSkgPT4ge1xuICBjb25zdCBzdHlsZSA9IHR5cGUgPT09IFwicGxheWVyXCIgPyBwbGF5ZXJTdHlsZSA6IHN0dWRpb1N0eWxlO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHMyKEZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3gyKFwic3R5bGVcIiwge1xuICAgICAgICB0eXBlOiBcInRleHQvY3NzXCIsXG4gICAgICAgIGNoaWxkcmVuOiBgXG5cdFx0XHRcdEBrZXlmcmFtZXMgJHtyZW1vdGlvbkJ1ZmZlcmluZ0FuaW1hdGlvbn0ge1xuICAgICAgICAgIDAlIHtcbiAgICAgICAgICAgIHJvdGF0ZTogMGRlZztcbiAgICAgICAgICB9XG4gICAgICAgICAgMTAwJSB7XG4gICAgICAgICAgICByb3RhdGU6IDM2MGRlZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC4ke2NsYXNzTmFtZX0ge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiAke3JlbW90aW9uQnVmZmVyaW5nQW5pbWF0aW9ufSAxcyBsaW5lYXIgaW5maW5pdGU7XG4gICAgICAgIH0gICAgICAgIFxuXHRcdFx0YFxuICAgICAgfSksXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4MihcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlLFxuICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDIoXCJzdmdcIiwge1xuICAgICAgICAgIHZpZXdCb3g6IHR5cGUgPT09IFwicGxheWVyXCIgPyBcIjAgMCAyMiAyMlwiIDogXCIwIDAgMTggMThcIixcbiAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gyKFwicGF0aFwiLCB7XG4gICAgICAgICAgICBkOiB0eXBlID09PSBcInBsYXllclwiID8gXCJNIDExIDQgQSA3IDcgMCAwIDEgMTUuMTE0NSAxNi42NjMxMlwiIDogXCJNIDkgMiBBIDcgNyAwIDAgMSAxMy4xMTQ1IDE0LjY2MzEyXCIsXG4gICAgICAgICAgICBzdHJva2U6IFwid2hpdGVcIixcbiAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICAgICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICBdXG4gIH0pO1xufTtcblxuLy8gc3JjL2NhbGN1bGF0ZS1zY2FsZS50c1xuaW1wb3J0IHsgSW50ZXJuYWxzIH0gZnJvbSBcInJlbW90aW9uXCI7XG5cbi8vIHNyYy91dGlscy9jYWxjdWxhdGUtcGxheWVyLXNpemUudHNcbnZhciBjYWxjdWxhdGVQbGF5ZXJTaXplID0gKHtcbiAgY3VycmVudFNpemUsXG4gIHdpZHRoLFxuICBoZWlnaHQsXG4gIGNvbXBvc2l0aW9uV2lkdGgsXG4gIGNvbXBvc2l0aW9uSGVpZ2h0XG59KSA9PiB7XG4gIGlmICh3aWR0aCAhPT0gdW5kZWZpbmVkICYmIGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzcGVjdFJhdGlvOiBbY29tcG9zaXRpb25XaWR0aCwgY29tcG9zaXRpb25IZWlnaHRdLmpvaW4oXCIvXCIpXG4gICAgfTtcbiAgfVxuICBpZiAoaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgd2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7XG4gICAgICBhc3BlY3RSYXRpbzogW2NvbXBvc2l0aW9uV2lkdGgsIGNvbXBvc2l0aW9uSGVpZ2h0XS5qb2luKFwiL1wiKVxuICAgIH07XG4gIH1cbiAgaWYgKCFjdXJyZW50U2l6ZSkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogY29tcG9zaXRpb25XaWR0aCxcbiAgICAgIGhlaWdodDogY29tcG9zaXRpb25IZWlnaHRcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGNvbXBvc2l0aW9uV2lkdGgsXG4gICAgaGVpZ2h0OiBjb21wb3NpdGlvbkhlaWdodFxuICB9O1xufTtcblxuLy8gc3JjL2NhbGN1bGF0ZS1zY2FsZS50c1xudmFyIGNhbGN1bGF0ZUNhbnZhc1RyYW5zZm9ybWF0aW9uID0gKHtcbiAgcHJldmlld1NpemUsXG4gIGNvbXBvc2l0aW9uV2lkdGgsXG4gIGNvbXBvc2l0aW9uSGVpZ2h0LFxuICBjYW52YXNTaXplXG59KSA9PiB7XG4gIGNvbnN0IHNjYWxlID0gSW50ZXJuYWxzLmNhbGN1bGF0ZVNjYWxlKHtcbiAgICBjYW52YXNTaXplLFxuICAgIGNvbXBvc2l0aW9uSGVpZ2h0LFxuICAgIGNvbXBvc2l0aW9uV2lkdGgsXG4gICAgcHJldmlld1NpemVcbiAgfSk7XG4gIGNvbnN0IGNvcnJlY3Rpb24gPSAwIC0gKDEgLSBzY2FsZSkgLyAyO1xuICBjb25zdCB4Q29ycmVjdGlvbiA9IGNvcnJlY3Rpb24gKiBjb21wb3NpdGlvbldpZHRoO1xuICBjb25zdCB5Q29ycmVjdGlvbiA9IGNvcnJlY3Rpb24gKiBjb21wb3NpdGlvbkhlaWdodDtcbiAgY29uc3Qgd2lkdGggPSBjb21wb3NpdGlvbldpZHRoICogc2NhbGU7XG4gIGNvbnN0IGhlaWdodCA9IGNvbXBvc2l0aW9uSGVpZ2h0ICogc2NhbGU7XG4gIGNvbnN0IGNlbnRlclggPSBjYW52YXNTaXplLndpZHRoIC8gMiAtIHdpZHRoIC8gMjtcbiAgY29uc3QgY2VudGVyWSA9IGNhbnZhc1NpemUuaGVpZ2h0IC8gMiAtIGhlaWdodCAvIDI7XG4gIHJldHVybiB7XG4gICAgY2VudGVyWCxcbiAgICBjZW50ZXJZLFxuICAgIHhDb3JyZWN0aW9uLFxuICAgIHlDb3JyZWN0aW9uLFxuICAgIHNjYWxlXG4gIH07XG59O1xudmFyIGNhbGN1bGF0ZU91dGVyU3R5bGUgPSAoe1xuICBjb25maWcsXG4gIHN0eWxlLFxuICBjYW52YXNTaXplLFxuICBvdmVyZmxvd1Zpc2libGUsXG4gIGxheW91dFxufSkgPT4ge1xuICBpZiAoIWNvbmZpZykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgb3ZlcmZsb3c6IG92ZXJmbG93VmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIixcbiAgICAuLi5jYWxjdWxhdGVQbGF5ZXJTaXplKHtcbiAgICAgIGNvbXBvc2l0aW9uSGVpZ2h0OiBjb25maWcuaGVpZ2h0LFxuICAgICAgY29tcG9zaXRpb25XaWR0aDogY29uZmlnLndpZHRoLFxuICAgICAgY3VycmVudFNpemU6IGNhbnZhc1NpemUsXG4gICAgICBoZWlnaHQ6IHN0eWxlPy5oZWlnaHQsXG4gICAgICB3aWR0aDogc3R5bGU/LndpZHRoXG4gICAgfSksXG4gICAgb3BhY2l0eTogbGF5b3V0ID8gMSA6IDAsXG4gICAgLi4uc3R5bGVcbiAgfTtcbn07XG52YXIgY2FsY3VsYXRlQ29udGFpbmVyU3R5bGUgPSAoe1xuICBjb25maWcsXG4gIGNhbnZhc1NpemUsXG4gIGxheW91dCxcbiAgc2NhbGUsXG4gIG92ZXJmbG93VmlzaWJsZVxufSkgPT4ge1xuICBpZiAoIWNvbmZpZyB8fCAhY2FudmFzU2l6ZSB8fCAhbGF5b3V0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB3aWR0aDogY29uZmlnLndpZHRoLFxuICAgIGhlaWdodDogY29uZmlnLmhlaWdodCxcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICB0cmFuc2Zvcm06IGBzY2FsZSgke3NjYWxlfSlgLFxuICAgIG1hcmdpbkxlZnQ6IGxheW91dC54Q29ycmVjdGlvbixcbiAgICBtYXJnaW5Ub3A6IGxheW91dC55Q29ycmVjdGlvbixcbiAgICBvdmVyZmxvdzogb3ZlcmZsb3dWaXNpYmxlID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiXG4gIH07XG59O1xudmFyIGNhbGN1bGF0ZU91dGVyID0gKHtcbiAgbGF5b3V0LFxuICBzY2FsZSxcbiAgY29uZmlnLFxuICBvdmVyZmxvd1Zpc2libGVcbn0pID0+IHtcbiAgaWYgKCFsYXlvdXQgfHwgIWNvbmZpZykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCB7IGNlbnRlclgsIGNlbnRlclkgfSA9IGxheW91dDtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogY29uZmlnLndpZHRoICogc2NhbGUsXG4gICAgaGVpZ2h0OiBjb25maWcuaGVpZ2h0ICogc2NhbGUsXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIGxlZnQ6IGNlbnRlclgsXG4gICAgdG9wOiBjZW50ZXJZLFxuICAgIG92ZXJmbG93OiBvdmVyZmxvd1Zpc2libGUgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCJcbiAgfTtcbn07XG5cbi8vIHNyYy9lbWl0dGVyLWNvbnRleHQudHNcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbnZhciBQbGF5ZXJFdmVudEVtaXR0ZXJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xudmFyIFRodW1ibmFpbEVtaXR0ZXJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuXG4vLyBzcmMvRW1pdHRlclByb3ZpZGVyLnRzeFxuaW1wb3J0IHsgdXNlQ29udGV4dCBhcyB1c2VDb250ZXh0MiwgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDIsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcm5hbHMgYXMgSW50ZXJuYWxzMyB9IGZyb20gXCJyZW1vdGlvblwiO1xuXG4vLyBzcmMvZXZlbnQtZW1pdHRlci50c1xuY2xhc3MgUGxheWVyRW1pdHRlciB7XG4gIGxpc3RlbmVycyA9IHtcbiAgICBlbmRlZDogW10sXG4gICAgZXJyb3I6IFtdLFxuICAgIHBhdXNlOiBbXSxcbiAgICBwbGF5OiBbXSxcbiAgICByYXRlY2hhbmdlOiBbXSxcbiAgICBzY2FsZWNoYW5nZTogW10sXG4gICAgc2Vla2VkOiBbXSxcbiAgICB0aW1ldXBkYXRlOiBbXSxcbiAgICBmcmFtZXVwZGF0ZTogW10sXG4gICAgZnVsbHNjcmVlbmNoYW5nZTogW10sXG4gICAgdm9sdW1lY2hhbmdlOiBbXSxcbiAgICBtdXRlY2hhbmdlOiBbXSxcbiAgICB3YWl0aW5nOiBbXSxcbiAgICByZXN1bWU6IFtdXG4gIH07XG4gIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmxpc3RlbmVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0gPSB0aGlzLmxpc3RlbmVyc1tuYW1lXS5maWx0ZXIoKGwpID0+IGwgIT09IGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaEV2ZW50KGRpc3BhdGNoTmFtZSwgY29udGV4dCkge1xuICAgIHRoaXMubGlzdGVuZXJzW2Rpc3BhdGNoTmFtZV0uZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgIGNhbGxiYWNrKHsgZGV0YWlsOiBjb250ZXh0IH0pO1xuICAgIH0pO1xuICB9XG4gIGRpc3BhdGNoU2VlayhmcmFtZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInNlZWtlZFwiLCB7XG4gICAgICBmcmFtZVxuICAgIH0pO1xuICB9XG4gIGRpc3BhdGNoVm9sdW1lQ2hhbmdlKHZvbHVtZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInZvbHVtZWNoYW5nZVwiLCB7XG4gICAgICB2b2x1bWVcbiAgICB9KTtcbiAgfVxuICBkaXNwYXRjaFBhdXNlKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInBhdXNlXCIsIHVuZGVmaW5lZCk7XG4gIH1cbiAgZGlzcGF0Y2hQbGF5KCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInBsYXlcIiwgdW5kZWZpbmVkKTtcbiAgfVxuICBkaXNwYXRjaEVuZGVkKCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcImVuZGVkXCIsIHVuZGVmaW5lZCk7XG4gIH1cbiAgZGlzcGF0Y2hSYXRlQ2hhbmdlKHBsYXliYWNrUmF0ZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInJhdGVjaGFuZ2VcIiwge1xuICAgICAgcGxheWJhY2tSYXRlXG4gICAgfSk7XG4gIH1cbiAgZGlzcGF0Y2hTY2FsZUNoYW5nZShzY2FsZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInNjYWxlY2hhbmdlXCIsIHtcbiAgICAgIHNjYWxlXG4gICAgfSk7XG4gIH1cbiAgZGlzcGF0Y2hFcnJvcihlcnJvcikge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcImVycm9yXCIsIHtcbiAgICAgIGVycm9yXG4gICAgfSk7XG4gIH1cbiAgZGlzcGF0Y2hUaW1lVXBkYXRlKGV2ZW50KSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KFwidGltZXVwZGF0ZVwiLCBldmVudCk7XG4gIH1cbiAgZGlzcGF0Y2hGcmFtZVVwZGF0ZShldmVudCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcImZyYW1ldXBkYXRlXCIsIGV2ZW50KTtcbiAgfVxuICBkaXNwYXRjaEZ1bGxzY3JlZW5DaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXCJmdWxsc2NyZWVuY2hhbmdlXCIsIGV2ZW50KTtcbiAgfVxuICBkaXNwYXRjaE11dGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXCJtdXRlY2hhbmdlXCIsIGV2ZW50KTtcbiAgfVxuICBkaXNwYXRjaFdhaXRpbmcoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXCJ3YWl0aW5nXCIsIGV2ZW50KTtcbiAgfVxuICBkaXNwYXRjaFJlc3VtZShldmVudCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInJlc3VtZVwiLCBldmVudCk7XG4gIH1cbn1cblxuY2xhc3MgVGh1bWJuYWlsRW1pdHRlciB7XG4gIGxpc3RlbmVycyA9IHtcbiAgICBlcnJvcjogW10sXG4gICAgd2FpdGluZzogW10sXG4gICAgcmVzdW1lOiBbXVxuICB9O1xuICBhZGRFdmVudExpc3RlbmVyKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBjYWxsYmFjaykge1xuICAgIHRoaXMubGlzdGVuZXJzW25hbWVdID0gdGhpcy5saXN0ZW5lcnNbbmFtZV0uZmlsdGVyKChsKSA9PiBsICE9PSBjYWxsYmFjayk7XG4gIH1cbiAgZGlzcGF0Y2hFdmVudChkaXNwYXRjaE5hbWUsIGNvbnRleHQpIHtcbiAgICB0aGlzLmxpc3RlbmVyc1tkaXNwYXRjaE5hbWVdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICBjYWxsYmFjayh7IGRldGFpbDogY29udGV4dCB9KTtcbiAgICB9KTtcbiAgfVxuICBkaXNwYXRjaEVycm9yKGVycm9yKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KFwiZXJyb3JcIiwge1xuICAgICAgZXJyb3JcbiAgICB9KTtcbiAgfVxuICBkaXNwYXRjaFdhaXRpbmcoZXZlbnQpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXCJ3YWl0aW5nXCIsIGV2ZW50KTtcbiAgfVxuICBkaXNwYXRjaFJlc3VtZShldmVudCkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcInJlc3VtZVwiLCBldmVudCk7XG4gIH1cbn1cblxuLy8gc3JjL3VzZS1idWZmZXItc3RhdGUtZW1pdHRlci50c1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcm5hbHMgYXMgSW50ZXJuYWxzMiB9IGZyb20gXCJyZW1vdGlvblwiO1xudmFyIHVzZUJ1ZmZlclN0YXRlRW1pdHRlciA9IChlbWl0dGVyKSA9PiB7XG4gIGNvbnN0IGJ1ZmZlck1hbmFnZXIgPSB1c2VDb250ZXh0KEludGVybmFsczIuQnVmZmVyaW5nQ29udGV4dFJlYWN0KTtcbiAgaWYgKCFidWZmZXJNYW5hZ2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQnVmZmVyaW5nQ29udGV4dFJlYWN0IG5vdCBmb3VuZFwiKTtcbiAgfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGNsZWFyMSA9IGJ1ZmZlck1hbmFnZXIubGlzdGVuRm9yQnVmZmVyaW5nKCgpID0+IHtcbiAgICAgIGJ1ZmZlck1hbmFnZXIuYnVmZmVyaW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZW1pdHRlci5kaXNwYXRjaFdhaXRpbmcoe30pO1xuICAgIH0pO1xuICAgIGNvbnN0IGNsZWFyMiA9IGJ1ZmZlck1hbmFnZXIubGlzdGVuRm9yUmVzdW1lKCgpID0+IHtcbiAgICAgIGJ1ZmZlck1hbmFnZXIuYnVmZmVyaW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGVtaXR0ZXIuZGlzcGF0Y2hSZXN1bWUoe30pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhcjEucmVtb3ZlKCk7XG4gICAgICBjbGVhcjIucmVtb3ZlKCk7XG4gICAgfTtcbiAgfSwgW2J1ZmZlck1hbmFnZXIsIGVtaXR0ZXJdKTtcbn07XG5cbi8vIHNyYy9FbWl0dGVyUHJvdmlkZXIudHN4XG5pbXBvcnQgeyBqc3ggYXMganN4MyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIFBsYXllckVtaXR0ZXJQcm92aWRlciA9ICh7IGNoaWxkcmVuLCBjdXJyZW50UGxheWJhY2tSYXRlIH0pID0+IHtcbiAgY29uc3QgW2VtaXR0ZXJdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFBsYXllckVtaXR0ZXIpO1xuICBjb25zdCBidWZmZXJNYW5hZ2VyID0gdXNlQ29udGV4dDIoSW50ZXJuYWxzMy5CdWZmZXJpbmdDb250ZXh0UmVhY3QpO1xuICBpZiAoIWJ1ZmZlck1hbmFnZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJpbmdDb250ZXh0UmVhY3Qgbm90IGZvdW5kXCIpO1xuICB9XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGlmIChjdXJyZW50UGxheWJhY2tSYXRlKSB7XG4gICAgICBlbWl0dGVyLmRpc3BhdGNoUmF0ZUNoYW5nZShjdXJyZW50UGxheWJhY2tSYXRlKTtcbiAgICB9XG4gIH0sIFtlbWl0dGVyLCBjdXJyZW50UGxheWJhY2tSYXRlXSk7XG4gIHVzZUJ1ZmZlclN0YXRlRW1pdHRlcihlbWl0dGVyKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3gzKFBsYXllckV2ZW50RW1pdHRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZW1pdHRlcixcbiAgICBjaGlsZHJlblxuICB9KTtcbn07XG5cbi8vIHNyYy91c2UtaG92ZXItc3RhdGUudHNcbmltcG9ydCB7IHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QzLCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTIgfSBmcm9tIFwicmVhY3RcIjtcbnZhciB1c2VIb3ZlclN0YXRlID0gKHJlZiwgaGlkZUNvbnRyb2xzV2hlblBvaW50ZXJEb2VzbnRNb3ZlKSA9PiB7XG4gIGNvbnN0IFtob3ZlcmVkLCBzZXRIb3ZlcmVkXSA9IHVzZVN0YXRlMihmYWxzZSk7XG4gIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudCB9ID0gcmVmO1xuICAgIGlmICghY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaG92ZXJUaW1lb3V0O1xuICAgIGNvbnN0IGFkZEhvdmVyVGltZW91dCA9ICgpID0+IHtcbiAgICAgIGlmIChoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZW91dCk7XG4gICAgICAgIGhvdmVyVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHNldEhvdmVyZWQoZmFsc2UpO1xuICAgICAgICB9LCBoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUgPT09IHRydWUgPyAzMDAwIDogaGlkZUNvbnRyb2xzV2hlblBvaW50ZXJEb2VzbnRNb3ZlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uSG92ZXIgPSAoKSA9PiB7XG4gICAgICBzZXRIb3ZlcmVkKHRydWUpO1xuICAgICAgYWRkSG92ZXJUaW1lb3V0KCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkxlYXZlID0gKCkgPT4ge1xuICAgICAgc2V0SG92ZXJlZChmYWxzZSk7XG4gICAgICBjbGVhclRpbWVvdXQoaG92ZXJUaW1lb3V0KTtcbiAgICB9O1xuICAgIGNvbnN0IG9uTW92ZSA9ICgpID0+IHtcbiAgICAgIHNldEhvdmVyZWQodHJ1ZSk7XG4gICAgICBhZGRIb3ZlclRpbWVvdXQoKTtcbiAgICB9O1xuICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgb25Ib3Zlcik7XG4gICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbkxlYXZlKTtcbiAgICBjdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3ZlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBvbkhvdmVyKTtcbiAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgb25MZWF2ZSk7XG4gICAgICBjdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3ZlKTtcbiAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVvdXQpO1xuICAgIH07XG4gIH0sIFtoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUsIHJlZl0pO1xuICByZXR1cm4gaG92ZXJlZDtcbn07XG5cbi8vIHNyYy91c2UtcGxheWJhY2sudHNcbmltcG9ydCB7IHVzZUNvbnRleHQgYXMgdXNlQ29udGV4dDQsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3Q2LCB1c2VSZWYgYXMgdXNlUmVmMyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgSW50ZXJuYWxzIGFzIEludGVybmFsczUgfSBmcm9tIFwicmVtb3Rpb25cIjtcblxuLy8gc3JjL2Jyb3dzZXItbWVkaWFzZXNzaW9uLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvdXNlLXBsYXllci50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQgYXMgdXNlQ29udGV4dDMsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgYXMgdXNlU3RhdGUzIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcm5hbHMgYXMgSW50ZXJuYWxzNCB9IGZyb20gXCJyZW1vdGlvblwiO1xudmFyIHVzZVBsYXllciA9ICgpID0+IHtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmcsIGltcGVyYXRpdmVQbGF5aW5nXSA9IEludGVybmFsczQuVGltZWxpbmUudXNlUGxheWluZ1N0YXRlKCk7XG4gIGNvbnN0IFtoYXNQbGF5ZWQsIHNldEhhc1BsYXllZF0gPSB1c2VTdGF0ZTMoZmFsc2UpO1xuICBjb25zdCBmcmFtZSA9IEludGVybmFsczQuVGltZWxpbmUudXNlVGltZWxpbmVQb3NpdGlvbigpO1xuICBjb25zdCBwbGF5U3RhcnQgPSB1c2VSZWYoZnJhbWUpO1xuICBjb25zdCBzZXRGcmFtZSA9IEludGVybmFsczQuVGltZWxpbmUudXNlVGltZWxpbmVTZXRGcmFtZSgpO1xuICBjb25zdCBzZXRUaW1lbGluZVBvc2l0aW9uID0gSW50ZXJuYWxzNC5UaW1lbGluZS51c2VUaW1lbGluZVNldEZyYW1lKCk7XG4gIGNvbnN0IGF1ZGlvQ29udGV4dCA9IHVzZUNvbnRleHQzKEludGVybmFsczQuU2hhcmVkQXVkaW9Db250ZXh0KTtcbiAgY29uc3QgeyBhdWRpb0FuZFZpZGVvVGFncyB9ID0gdXNlQ29udGV4dDMoSW50ZXJuYWxzNC5UaW1lbGluZS5UaW1lbGluZUNvbnRleHQpO1xuICBjb25zdCBmcmFtZVJlZiA9IHVzZVJlZihmcmFtZSk7XG4gIGZyYW1lUmVmLmN1cnJlbnQgPSBmcmFtZTtcbiAgY29uc3QgdmlkZW8gPSBJbnRlcm5hbHM0LnVzZVZpZGVvKCk7XG4gIGNvbnN0IGNvbmZpZyA9IEludGVybmFsczQudXNlVW5zYWZlVmlkZW9Db25maWcoKTtcbiAgY29uc3QgZW1pdHRlciA9IHVzZUNvbnRleHQzKFBsYXllckV2ZW50RW1pdHRlckNvbnRleHQpO1xuICBjb25zdCBsYXN0RnJhbWUgPSAoY29uZmlnPy5kdXJhdGlvbkluRnJhbWVzID8/IDEpIC0gMTtcbiAgY29uc3QgaXNMYXN0RnJhbWUgPSBmcmFtZSA9PT0gbGFzdEZyYW1lO1xuICBjb25zdCBpc0ZpcnN0RnJhbWUgPSBmcmFtZSA9PT0gMDtcbiAgaWYgKCFlbWl0dGVyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFBsYXllciBldmVudCBlbWl0dGVyIGNvbnRleHRcIik7XG4gIH1cbiAgY29uc3QgYnVmZmVyaW5nQ29udGV4dCA9IHVzZUNvbnRleHQzKEludGVybmFsczQuQnVmZmVyaW5nQ29udGV4dFJlYWN0KTtcbiAgaWYgKCFidWZmZXJpbmdDb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgYnVmZmVyaW5nIGNvbnRleHQuIE1vc3QgbGlrZWx5IHlvdSBoYXZlIGEgUmVtb3Rpb24gdmVyc2lvbiBtaXNtYXRjaC5cIik7XG4gIH1cbiAgY29uc3QgeyBidWZmZXJpbmcgfSA9IGJ1ZmZlcmluZ0NvbnRleHQ7XG4gIGNvbnN0IHNlZWsgPSB1c2VDYWxsYmFjaygobmV3RnJhbWUpID0+IHtcbiAgICBpZiAodmlkZW8/LmlkKSB7XG4gICAgICBzZXRUaW1lbGluZVBvc2l0aW9uKChjKSA9PiAoeyAuLi5jLCBbdmlkZW8uaWRdOiBuZXdGcmFtZSB9KSk7XG4gICAgfVxuICAgIGZyYW1lUmVmLmN1cnJlbnQgPSBuZXdGcmFtZTtcbiAgICBlbWl0dGVyLmRpc3BhdGNoU2VlayhuZXdGcmFtZSk7XG4gIH0sIFtlbWl0dGVyLCBzZXRUaW1lbGluZVBvc2l0aW9uLCB2aWRlbz8uaWRdKTtcbiAgY29uc3QgcGxheSA9IHVzZUNhbGxiYWNrKChlKSA9PiB7XG4gICAgaWYgKGltcGVyYXRpdmVQbGF5aW5nLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0SGFzUGxheWVkKHRydWUpO1xuICAgIGlmIChpc0xhc3RGcmFtZSkge1xuICAgICAgc2VlaygwKTtcbiAgICB9XG4gICAgaWYgKGF1ZGlvQ29udGV4dCAmJiBhdWRpb0NvbnRleHQubnVtYmVyT2ZBdWRpb1RhZ3MgPiAwICYmIGUpIHtcbiAgICAgIGF1ZGlvQ29udGV4dC5wbGF5QWxsQXVkaW9zKCk7XG4gICAgfVxuICAgIGF1ZGlvQW5kVmlkZW9UYWdzLmN1cnJlbnQuZm9yRWFjaCgoYSkgPT4gYS5wbGF5KCkpO1xuICAgIGltcGVyYXRpdmVQbGF5aW5nLmN1cnJlbnQgPSB0cnVlO1xuICAgIHNldFBsYXlpbmcodHJ1ZSk7XG4gICAgcGxheVN0YXJ0LmN1cnJlbnQgPSBmcmFtZVJlZi5jdXJyZW50O1xuICAgIGVtaXR0ZXIuZGlzcGF0Y2hQbGF5KCk7XG4gIH0sIFtcbiAgICBpbXBlcmF0aXZlUGxheWluZyxcbiAgICBpc0xhc3RGcmFtZSxcbiAgICBhdWRpb0NvbnRleHQsXG4gICAgc2V0UGxheWluZyxcbiAgICBlbWl0dGVyLFxuICAgIHNlZWssXG4gICAgYXVkaW9BbmRWaWRlb1RhZ3NcbiAgXSk7XG4gIGNvbnN0IHBhdXNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChpbXBlcmF0aXZlUGxheWluZy5jdXJyZW50KSB7XG4gICAgICBpbXBlcmF0aXZlUGxheWluZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBzZXRQbGF5aW5nKGZhbHNlKTtcbiAgICAgIGVtaXR0ZXIuZGlzcGF0Y2hQYXVzZSgpO1xuICAgIH1cbiAgfSwgW2VtaXR0ZXIsIGltcGVyYXRpdmVQbGF5aW5nLCBzZXRQbGF5aW5nXSk7XG4gIGNvbnN0IHBhdXNlQW5kUmV0dXJuVG9QbGF5U3RhcnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGltcGVyYXRpdmVQbGF5aW5nLmN1cnJlbnQpIHtcbiAgICAgIGltcGVyYXRpdmVQbGF5aW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGZyYW1lUmVmLmN1cnJlbnQgPSBwbGF5U3RhcnQuY3VycmVudDtcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgc2V0VGltZWxpbmVQb3NpdGlvbigoYykgPT4gKHtcbiAgICAgICAgICAuLi5jLFxuICAgICAgICAgIFtjb25maWcuaWRdOiBwbGF5U3RhcnQuY3VycmVudFxuICAgICAgICB9KSk7XG4gICAgICAgIHNldFBsYXlpbmcoZmFsc2UpO1xuICAgICAgICBlbWl0dGVyLmRpc3BhdGNoUGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtjb25maWcsIGVtaXR0ZXIsIGltcGVyYXRpdmVQbGF5aW5nLCBzZXRQbGF5aW5nLCBzZXRUaW1lbGluZVBvc2l0aW9uXSk7XG4gIGNvbnN0IHZpZGVvSWQgPSB2aWRlbz8uaWQ7XG4gIGNvbnN0IGZyYW1lQmFjayA9IHVzZUNhbGxiYWNrKChmcmFtZXMpID0+IHtcbiAgICBpZiAoIXZpZGVvSWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaW1wZXJhdGl2ZVBsYXlpbmcuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRGcmFtZSgoYykgPT4ge1xuICAgICAgY29uc3QgcHJldiA9IGNbdmlkZW9JZF0gPz8gd2luZG93LnJlbW90aW9uX2luaXRpYWxGcmFtZSA/PyAwO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uYyxcbiAgICAgICAgW3ZpZGVvSWRdOiBNYXRoLm1heCgwLCBwcmV2IC0gZnJhbWVzKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSwgW2ltcGVyYXRpdmVQbGF5aW5nLCBzZXRGcmFtZSwgdmlkZW9JZF0pO1xuICBjb25zdCBmcmFtZUZvcndhcmQgPSB1c2VDYWxsYmFjaygoZnJhbWVzKSA9PiB7XG4gICAgaWYgKCF2aWRlb0lkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGltcGVyYXRpdmVQbGF5aW5nLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0RnJhbWUoKGMpID0+IHtcbiAgICAgIGNvbnN0IHByZXYgPSBjW3ZpZGVvSWRdID8/IHdpbmRvdy5yZW1vdGlvbl9pbml0aWFsRnJhbWUgPz8gMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmMsXG4gICAgICAgIFt2aWRlb0lkXTogTWF0aC5taW4obGFzdEZyYW1lLCBwcmV2ICsgZnJhbWVzKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSwgW3ZpZGVvSWQsIGltcGVyYXRpdmVQbGF5aW5nLCBsYXN0RnJhbWUsIHNldEZyYW1lXSk7XG4gIGNvbnN0IHJldHVyblZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyYW1lQmFjayxcbiAgICAgIGZyYW1lRm9yd2FyZCxcbiAgICAgIGlzTGFzdEZyYW1lLFxuICAgICAgZW1pdHRlcixcbiAgICAgIHBsYXlpbmcsXG4gICAgICBwbGF5LFxuICAgICAgcGF1c2UsXG4gICAgICBzZWVrLFxuICAgICAgaXNGaXJzdEZyYW1lLFxuICAgICAgZ2V0Q3VycmVudEZyYW1lOiAoKSA9PiBmcmFtZVJlZi5jdXJyZW50LFxuICAgICAgaXNQbGF5aW5nOiAoKSA9PiBpbXBlcmF0aXZlUGxheWluZy5jdXJyZW50LFxuICAgICAgaXNCdWZmZXJpbmc6ICgpID0+IGJ1ZmZlcmluZy5jdXJyZW50LFxuICAgICAgcGF1c2VBbmRSZXR1cm5Ub1BsYXlTdGFydCxcbiAgICAgIGhhc1BsYXllZCxcbiAgICAgIHJlbW90aW9uSW50ZXJuYWxfY3VycmVudEZyYW1lUmVmOiBmcmFtZVJlZlxuICAgIH07XG4gIH0sIFtcbiAgICBmcmFtZUJhY2ssXG4gICAgZnJhbWVGb3J3YXJkLFxuICAgIGlzTGFzdEZyYW1lLFxuICAgIGVtaXR0ZXIsXG4gICAgcGxheWluZyxcbiAgICBwbGF5LFxuICAgIHBhdXNlLFxuICAgIHNlZWssXG4gICAgaXNGaXJzdEZyYW1lLFxuICAgIHBhdXNlQW5kUmV0dXJuVG9QbGF5U3RhcnQsXG4gICAgaGFzUGxheWVkLFxuICAgIGltcGVyYXRpdmVQbGF5aW5nLFxuICAgIGJ1ZmZlcmluZ1xuICBdKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufTtcblxuLy8gc3JjL2Jyb3dzZXItbWVkaWFzZXNzaW9uLnRzXG52YXIgdXNlQnJvd3Nlck1lZGlhU2Vzc2lvbiA9ICh7XG4gIGJyb3dzZXJNZWRpYUNvbnRyb2xzQmVoYXZpb3IsXG4gIHZpZGVvQ29uZmlnLFxuICBwbGF5YmFja1JhdGVcbn0pID0+IHtcbiAgY29uc3QgeyBwbGF5aW5nLCBwYXVzZSwgcGxheSwgZW1pdHRlciwgZ2V0Q3VycmVudEZyYW1lLCBzZWVrIH0gPSB1c2VQbGF5ZXIoKTtcbiAgdXNlRWZmZWN0NCgoKSA9PiB7XG4gICAgaWYgKCFuYXZpZ2F0b3IubWVkaWFTZXNzaW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUgPT09IFwiZG8tbm90aGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnBsYXliYWNrU3RhdGUgPSBcInBsYXlpbmdcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5wbGF5YmFja1N0YXRlID0gXCJwYXVzZWRcIjtcbiAgICB9XG4gIH0sIFticm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUsIHBsYXlpbmddKTtcbiAgdXNlRWZmZWN0NCgoKSA9PiB7XG4gICAgaWYgKCFuYXZpZ2F0b3IubWVkaWFTZXNzaW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUgPT09IFwiZG8tbm90aGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9uVGltZVVwZGF0ZSA9ICgpID0+IHtcbiAgICAgIGlmICghdmlkZW9Db25maWcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG5hdmlnYXRvci5tZWRpYVNlc3Npb24pIHtcbiAgICAgICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRQb3NpdGlvblN0YXRlKHtcbiAgICAgICAgICBkdXJhdGlvbjogdmlkZW9Db25maWcuZHVyYXRpb25JbkZyYW1lcyAvIHZpZGVvQ29uZmlnLmZwcyxcbiAgICAgICAgICBwbGF5YmFja1JhdGUsXG4gICAgICAgICAgcG9zaXRpb246IGdldEN1cnJlbnRGcmFtZSgpIC8gdmlkZW9Db25maWcuZnBzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKFwidGltZXVwZGF0ZVwiLCBvblRpbWVVcGRhdGUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0aW1ldXBkYXRlXCIsIG9uVGltZVVwZGF0ZSk7XG4gICAgfTtcbiAgfSwgW1xuICAgIGJyb3dzZXJNZWRpYUNvbnRyb2xzQmVoYXZpb3IubW9kZSxcbiAgICBlbWl0dGVyLFxuICAgIGdldEN1cnJlbnRGcmFtZSxcbiAgICBwbGF5YmFja1JhdGUsXG4gICAgdmlkZW9Db25maWdcbiAgXSk7XG4gIHVzZUVmZmVjdDQoKCkgPT4ge1xuICAgIGlmICghbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvci5tb2RlID09PSBcImRvLW5vdGhpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnNldEFjdGlvbkhhbmRsZXIoXCJwbGF5XCIsICgpID0+IHtcbiAgICAgIGlmIChicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUgPT09IFwicmVnaXN0ZXItbWVkaWEtc2Vzc2lvblwiKSB7XG4gICAgICAgIHBsYXkoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnNldEFjdGlvbkhhbmRsZXIoXCJwYXVzZVwiLCAoKSA9PiB7XG4gICAgICBpZiAoYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvci5tb2RlID09PSBcInJlZ2lzdGVyLW1lZGlhLXNlc3Npb25cIikge1xuICAgICAgICBwYXVzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcihcInNlZWt0b1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUgPT09IFwicmVnaXN0ZXItbWVkaWEtc2Vzc2lvblwiICYmIGV2ZW50LnNlZWtUaW1lICE9PSB1bmRlZmluZWQgJiYgdmlkZW9Db25maWcpIHtcbiAgICAgICAgc2VlayhNYXRoLnJvdW5kKGV2ZW50LnNlZWtUaW1lICogdmlkZW9Db25maWcuZnBzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKFwic2Vla2JhY2t3YXJkXCIsICgpID0+IHtcbiAgICAgIGlmIChicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLm1vZGUgPT09IFwicmVnaXN0ZXItbWVkaWEtc2Vzc2lvblwiICYmIHZpZGVvQ29uZmlnKSB7XG4gICAgICAgIHNlZWsoTWF0aC5tYXgoMCwgTWF0aC5yb3VuZCgoZ2V0Q3VycmVudEZyYW1lKCkgLSAxMCkgKiB2aWRlb0NvbmZpZy5mcHMpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKFwic2Vla2ZvcndhcmRcIiwgKCkgPT4ge1xuICAgICAgaWYgKGJyb3dzZXJNZWRpYUNvbnRyb2xzQmVoYXZpb3IubW9kZSA9PT0gXCJyZWdpc3Rlci1tZWRpYS1zZXNzaW9uXCIgJiYgdmlkZW9Db25maWcpIHtcbiAgICAgICAgc2VlayhNYXRoLm1heCh2aWRlb0NvbmZpZy5kdXJhdGlvbkluRnJhbWVzIC0gMSwgTWF0aC5yb3VuZCgoZ2V0Q3VycmVudEZyYW1lKCkgKyAxMCkgKiB2aWRlb0NvbmZpZy5mcHMpKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKFwicHJldmlvdXN0cmFja1wiLCAoKSA9PiB7XG4gICAgICBpZiAoYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvci5tb2RlID09PSBcInJlZ2lzdGVyLW1lZGlhLXNlc3Npb25cIikge1xuICAgICAgICBzZWVrKDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLm1ldGFkYXRhID0gbnVsbDtcbiAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcihcInBsYXlcIiwgbnVsbCk7XG4gICAgICBuYXZpZ2F0b3IubWVkaWFTZXNzaW9uLnNldEFjdGlvbkhhbmRsZXIoXCJwYXVzZVwiLCBudWxsKTtcbiAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcihcInNlZWt0b1wiLCBudWxsKTtcbiAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcihcInNlZWtiYWNrd2FyZFwiLCBudWxsKTtcbiAgICAgIG5hdmlnYXRvci5tZWRpYVNlc3Npb24uc2V0QWN0aW9uSGFuZGxlcihcInNlZWtmb3J3YXJkXCIsIG51bGwpO1xuICAgICAgbmF2aWdhdG9yLm1lZGlhU2Vzc2lvbi5zZXRBY3Rpb25IYW5kbGVyKFwicHJldmlvdXN0cmFja1wiLCBudWxsKTtcbiAgICB9O1xuICB9LCBbXG4gICAgYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvci5tb2RlLFxuICAgIGdldEN1cnJlbnRGcmFtZSxcbiAgICBwYXVzZSxcbiAgICBwbGF5LFxuICAgIHNlZWssXG4gICAgdmlkZW9Db25maWdcbiAgXSk7XG59O1xuXG4vLyBzcmMvY2FsY3VsYXRlLW5leHQtZnJhbWUudHNcbnZhciBjYWxjdWxhdGVOZXh0RnJhbWUgPSAoe1xuICB0aW1lLFxuICBjdXJyZW50RnJhbWU6IHN0YXJ0RnJhbWUsXG4gIHBsYXliYWNrU3BlZWQsXG4gIGZwcyxcbiAgYWN0dWFsTGFzdEZyYW1lLFxuICBhY3R1YWxGaXJzdEZyYW1lLFxuICBmcmFtZXNBZHZhbmNlZCxcbiAgc2hvdWxkTG9vcFxufSkgPT4ge1xuICBjb25zdCBvcCA9IHBsYXliYWNrU3BlZWQgPCAwID8gTWF0aC5jZWlsIDogTWF0aC5mbG9vcjtcbiAgY29uc3QgZnJhbWVzVG9BZHZhbmNlID0gb3AodGltZSAqIHBsYXliYWNrU3BlZWQgLyAoMTAwMCAvIGZwcykpIC0gZnJhbWVzQWR2YW5jZWQ7XG4gIGNvbnN0IG5leHRGcmFtZSA9IGZyYW1lc1RvQWR2YW5jZSArIHN0YXJ0RnJhbWU7XG4gIGNvbnN0IGlzQ3VycmVudEZyYW1lT3V0c2lkZSA9IHN0YXJ0RnJhbWUgPiBhY3R1YWxMYXN0RnJhbWUgfHwgc3RhcnRGcmFtZSA8IGFjdHVhbEZpcnN0RnJhbWU7XG4gIGNvbnN0IGlzTmV4dEZyYW1lT3V0c2lkZSA9IG5leHRGcmFtZSA+IGFjdHVhbExhc3RGcmFtZSB8fCBuZXh0RnJhbWUgPCBhY3R1YWxGaXJzdEZyYW1lO1xuICBjb25zdCBoYXNFbmRlZCA9ICFzaG91bGRMb29wICYmIGlzTmV4dEZyYW1lT3V0c2lkZSAmJiAhaXNDdXJyZW50RnJhbWVPdXRzaWRlO1xuICBpZiAocGxheWJhY2tTcGVlZCA+IDApIHtcbiAgICBpZiAoaXNOZXh0RnJhbWVPdXRzaWRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0RnJhbWU6IGFjdHVhbEZpcnN0RnJhbWUsXG4gICAgICAgIGZyYW1lc1RvQWR2YW5jZSxcbiAgICAgICAgaGFzRW5kZWRcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7IG5leHRGcmFtZSwgZnJhbWVzVG9BZHZhbmNlLCBoYXNFbmRlZCB9O1xuICB9XG4gIGlmIChpc05leHRGcmFtZU91dHNpZGUpIHtcbiAgICByZXR1cm4geyBuZXh0RnJhbWU6IGFjdHVhbExhc3RGcmFtZSwgZnJhbWVzVG9BZHZhbmNlLCBoYXNFbmRlZCB9O1xuICB9XG4gIHJldHVybiB7IG5leHRGcmFtZSwgZnJhbWVzVG9BZHZhbmNlLCBoYXNFbmRlZCB9O1xufTtcblxuLy8gc3JjL2lzLWJhY2tncm91bmRlZC50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDUsIHVzZVJlZiBhcyB1c2VSZWYyIH0gZnJvbSBcInJlYWN0XCI7XG52YXIgZ2V0SXNCYWNrZ3JvdW5kZWQgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJoaWRkZW5cIjtcbn07XG52YXIgdXNlSXNCYWNrZ3JvdW5kZWQgPSAoKSA9PiB7XG4gIGNvbnN0IGlzQmFja2dyb3VuZGVkID0gdXNlUmVmMihnZXRJc0JhY2tncm91bmRlZCgpKTtcbiAgdXNlRWZmZWN0NSgoKSA9PiB7XG4gICAgY29uc3Qgb25WaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgaXNCYWNrZ3JvdW5kZWQuY3VycmVudCA9IGdldElzQmFja2dyb3VuZGVkKCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGlzQmFja2dyb3VuZGVkO1xufTtcblxuLy8gc3JjL3VzZS1wbGF5YmFjay50c1xudmFyIHVzZVBsYXliYWNrID0gKHtcbiAgbG9vcCxcbiAgcGxheWJhY2tSYXRlLFxuICBtb3ZlVG9CZWdpbm5pbmdXaGVuRW5kZWQsXG4gIGluRnJhbWUsXG4gIG91dEZyYW1lLFxuICBmcmFtZVJlZixcbiAgYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvclxufSkgPT4ge1xuICBjb25zdCBjb25maWcgPSBJbnRlcm5hbHM1LnVzZVVuc2FmZVZpZGVvQ29uZmlnKCk7XG4gIGNvbnN0IGZyYW1lID0gSW50ZXJuYWxzNS5UaW1lbGluZS51c2VUaW1lbGluZVBvc2l0aW9uKCk7XG4gIGNvbnN0IHsgcGxheWluZywgcGF1c2UsIGVtaXR0ZXIgfSA9IHVzZVBsYXllcigpO1xuICBjb25zdCBzZXRGcmFtZSA9IEludGVybmFsczUuVGltZWxpbmUudXNlVGltZWxpbmVTZXRGcmFtZSgpO1xuICBjb25zdCBidWZmZXJpbmcgPSB1c2VSZWYzKG51bGwpO1xuICBjb25zdCBpc0JhY2tncm91bmRlZFJlZiA9IHVzZUlzQmFja2dyb3VuZGVkKCk7XG4gIGNvbnN0IGxhc3RUaW1lVXBkYXRlRXZlbnQgPSB1c2VSZWYzKG51bGwpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dDQoSW50ZXJuYWxzNS5CdWZmZXJpbmdDb250ZXh0UmVhY3QpO1xuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSBidWZmZXJpbmcgY29udGV4dC4gTW9zdCBsaWtlbHkgeW91IGhhdmUgYSBSZW1vdGlvbiB2ZXJzaW9uIG1pc21hdGNoLlwiKTtcbiAgfVxuICB1c2VCcm93c2VyTWVkaWFTZXNzaW9uKHtcbiAgICBicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLFxuICAgIHBsYXliYWNrUmF0ZSxcbiAgICB2aWRlb0NvbmZpZzogY29uZmlnXG4gIH0pO1xuICB1c2VFZmZlY3Q2KCgpID0+IHtcbiAgICBjb25zdCBvbkJ1ZmZlckNsZWFyID0gY29udGV4dC5saXN0ZW5Gb3JCdWZmZXJpbmcoKCkgPT4ge1xuICAgICAgYnVmZmVyaW5nLmN1cnJlbnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9KTtcbiAgICBjb25zdCBvblJlc3VtZUNsZWFyID0gY29udGV4dC5saXN0ZW5Gb3JSZXN1bWUoKCkgPT4ge1xuICAgICAgYnVmZmVyaW5nLmN1cnJlbnQgPSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBvbkJ1ZmZlckNsZWFyLnJlbW92ZSgpO1xuICAgICAgb25SZXN1bWVDbGVhci5yZW1vdmUoKTtcbiAgICB9O1xuICB9LCBbY29udGV4dF0pO1xuICB1c2VFZmZlY3Q2KCgpID0+IHtcbiAgICBpZiAoIWNvbmZpZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXBsYXlpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGhhc0JlZW5TdG9wcGVkID0gZmFsc2U7XG4gICAgbGV0IHJlcUFuaW1GcmFtZUNhbGwgPSBudWxsO1xuICAgIGxldCBzdGFydGVkVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGxldCBmcmFtZXNBZHZhbmNlZCA9IDA7XG4gICAgY29uc3QgY2FuY2VsUXVldWVkRnJhbWUgPSAoKSA9PiB7XG4gICAgICBpZiAocmVxQW5pbUZyYW1lQ2FsbCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAocmVxQW5pbUZyYW1lQ2FsbC50eXBlID09PSBcInJhZlwiKSB7XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxQW5pbUZyYW1lQ2FsbC5pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcUFuaW1GcmFtZUNhbGwuaWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdG9wID0gKCkgPT4ge1xuICAgICAgaGFzQmVlblN0b3BwZWQgPSB0cnVlO1xuICAgICAgY2FuY2VsUXVldWVkRnJhbWUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRlZFRpbWU7XG4gICAgICBjb25zdCBhY3R1YWxMYXN0RnJhbWUgPSBvdXRGcmFtZSA/PyBjb25maWcuZHVyYXRpb25JbkZyYW1lcyAtIDE7XG4gICAgICBjb25zdCBhY3R1YWxGaXJzdEZyYW1lID0gaW5GcmFtZSA/PyAwO1xuICAgICAgY29uc3QgY3VycmVudEZyYW1lID0gZnJhbWVSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IHsgbmV4dEZyYW1lLCBmcmFtZXNUb0FkdmFuY2UsIGhhc0VuZGVkIH0gPSBjYWxjdWxhdGVOZXh0RnJhbWUoe1xuICAgICAgICB0aW1lLFxuICAgICAgICBjdXJyZW50RnJhbWUsXG4gICAgICAgIHBsYXliYWNrU3BlZWQ6IHBsYXliYWNrUmF0ZSxcbiAgICAgICAgZnBzOiBjb25maWcuZnBzLFxuICAgICAgICBhY3R1YWxGaXJzdEZyYW1lLFxuICAgICAgICBhY3R1YWxMYXN0RnJhbWUsXG4gICAgICAgIGZyYW1lc0FkdmFuY2VkLFxuICAgICAgICBzaG91bGRMb29wOiBsb29wXG4gICAgICB9KTtcbiAgICAgIGZyYW1lc0FkdmFuY2VkICs9IGZyYW1lc1RvQWR2YW5jZTtcbiAgICAgIGlmIChuZXh0RnJhbWUgIT09IGZyYW1lUmVmLmN1cnJlbnQgJiYgKCFoYXNFbmRlZCB8fCBtb3ZlVG9CZWdpbm5pbmdXaGVuRW5kZWQpKSB7XG4gICAgICAgIHNldEZyYW1lKChjKSA9PiAoeyAuLi5jLCBbY29uZmlnLmlkXTogbmV4dEZyYW1lIH0pKTtcbiAgICAgIH1cbiAgICAgIGlmIChoYXNFbmRlZCkge1xuICAgICAgICBzdG9wKCk7XG4gICAgICAgIHBhdXNlKCk7XG4gICAgICAgIGVtaXR0ZXIuZGlzcGF0Y2hFbmRlZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWhhc0JlZW5TdG9wcGVkKSB7XG4gICAgICAgIHF1ZXVlTmV4dEZyYW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBxdWV1ZU5leHRGcmFtZSA9ICgpID0+IHtcbiAgICAgIGlmIChidWZmZXJpbmcuY3VycmVudCkge1xuICAgICAgICBjb25zdCBzdG9wTGlzdGVuaW5nID0gY29udGV4dC5saXN0ZW5Gb3JSZXN1bWUoKCkgPT4ge1xuICAgICAgICAgIHN0b3BMaXN0ZW5pbmcucmVtb3ZlKCk7XG4gICAgICAgICAgaWYgKGhhc0JlZW5TdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXJ0ZWRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgZnJhbWVzQWR2YW5jZWQgPSAwO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNCYWNrZ3JvdW5kZWRSZWYuY3VycmVudCkge1xuICAgICAgICByZXFBbmltRnJhbWVDYWxsID0ge1xuICAgICAgICAgIHR5cGU6IFwidGltZW91dFwiLFxuICAgICAgICAgIGlkOiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gY29uZmlnLmZwcylcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcUFuaW1GcmFtZUNhbGwgPSB7IHR5cGU6IFwicmFmXCIsIGlkOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIH07XG4gICAgICB9XG4gICAgfTtcbiAgICBxdWV1ZU5leHRGcmFtZSgpO1xuICAgIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhbmNlbFF1ZXVlZEZyYW1lKCk7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgICAgc3RvcCgpO1xuICAgIH07XG4gIH0sIFtcbiAgICBjb25maWcsXG4gICAgbG9vcCxcbiAgICBwYXVzZSxcbiAgICBwbGF5aW5nLFxuICAgIHNldEZyYW1lLFxuICAgIGVtaXR0ZXIsXG4gICAgcGxheWJhY2tSYXRlLFxuICAgIGluRnJhbWUsXG4gICAgb3V0RnJhbWUsXG4gICAgbW92ZVRvQmVnaW5uaW5nV2hlbkVuZGVkLFxuICAgIGlzQmFja2dyb3VuZGVkUmVmLFxuICAgIGZyYW1lUmVmLFxuICAgIGJ1ZmZlcmluZyxcbiAgICBjb250ZXh0XG4gIF0pO1xuICB1c2VFZmZlY3Q2KCgpID0+IHtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChsYXN0VGltZVVwZGF0ZUV2ZW50LmN1cnJlbnQgPT09IGZyYW1lUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZW1pdHRlci5kaXNwYXRjaFRpbWVVcGRhdGUoeyBmcmFtZTogZnJhbWVSZWYuY3VycmVudCB9KTtcbiAgICAgIGxhc3RUaW1lVXBkYXRlRXZlbnQuY3VycmVudCA9IGZyYW1lUmVmLmN1cnJlbnQ7XG4gICAgfSwgMjUwKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0sIFtlbWl0dGVyLCBmcmFtZVJlZl0pO1xuICB1c2VFZmZlY3Q2KCgpID0+IHtcbiAgICBlbWl0dGVyLmRpc3BhdGNoRnJhbWVVcGRhdGUoeyBmcmFtZSB9KTtcbiAgfSwgW2VtaXR0ZXIsIGZyYW1lXSk7XG59O1xuXG4vLyBzcmMvdXRpbHMvdXNlLWVsZW1lbnQtc2l6ZS50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2syLCB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NywgdXNlTWVtbyBhcyB1c2VNZW1vMiwgdXNlU3RhdGUgYXMgdXNlU3RhdGU0IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgZWxlbWVudFNpemVIb29rcyA9IFtdO1xudmFyIHVwZGF0ZUFsbEVsZW1lbnRzU2l6ZXMgPSAoKSA9PiB7XG4gIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgZWxlbWVudFNpemVIb29rcykge1xuICAgIGxpc3RlbmVyKCk7XG4gIH1cbn07XG52YXIgdXNlRWxlbWVudFNpemUgPSAocmVmLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IFtzaXplLCBzZXRTaXplXSA9IHVzZVN0YXRlNCgoKSA9PiB7XG4gICAgaWYgKCFyZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlY3QgPSByZWYuY3VycmVudC5nZXRDbGllbnRSZWN0cygpO1xuICAgIGlmICghcmVjdFswXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogcmVjdFswXS53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdFswXS5oZWlnaHQsXG4gICAgICBsZWZ0OiByZWN0WzBdLngsXG4gICAgICB0b3A6IHJlY3RbMF0ueSxcbiAgICAgIHdpbmRvd1NpemU6IHtcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICBjb25zdCBvYnNlcnZlciA9IHVzZU1lbW8yKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgY29uc3QgeyBjb250ZW50UmVjdCwgdGFyZ2V0IH0gPSBlbnRyaWVzWzBdO1xuICAgICAgY29uc3QgbmV3U2l6ZSA9IHRhcmdldC5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgaWYgKCFuZXdTaXplPy5bMF0pIHtcbiAgICAgICAgc2V0U2l6ZShudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvYmFibGVDc3NQYXJlbnRTY2FsZSA9IGNvbnRlbnRSZWN0LndpZHRoID09PSAwID8gMSA6IG5ld1NpemVbMF0ud2lkdGggLyBjb250ZW50UmVjdC53aWR0aDtcbiAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy5zaG91bGRBcHBseUNzc1RyYW5zZm9ybXMgPyBuZXdTaXplWzBdLndpZHRoIDogbmV3U2l6ZVswXS53aWR0aCAqICgxIC8gcHJvYmFibGVDc3NQYXJlbnRTY2FsZSk7XG4gICAgICBjb25zdCBoZWlnaHQgPSBvcHRpb25zLnNob3VsZEFwcGx5Q3NzVHJhbnNmb3JtcyA/IG5ld1NpemVbMF0uaGVpZ2h0IDogbmV3U2l6ZVswXS5oZWlnaHQgKiAoMSAvIHByb2JhYmxlQ3NzUGFyZW50U2NhbGUpO1xuICAgICAgc2V0U2l6ZSh7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIGxlZnQ6IG5ld1NpemVbMF0ueCxcbiAgICAgICAgdG9wOiBuZXdTaXplWzBdLnksXG4gICAgICAgIHdpbmRvd1NpemU6IHtcbiAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtvcHRpb25zLnNob3VsZEFwcGx5Q3NzVHJhbnNmb3Jtc10pO1xuICBjb25zdCB1cGRhdGVTaXplID0gdXNlQ2FsbGJhY2syKCgpID0+IHtcbiAgICBpZiAoIXJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlY3QgPSByZWYuY3VycmVudC5nZXRDbGllbnRSZWN0cygpO1xuICAgIGlmICghcmVjdFswXSkge1xuICAgICAgc2V0U2l6ZShudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0U2l6ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICBjb25zdCBpc1NhbWUgPSBwcmV2U3RhdGUgJiYgcHJldlN0YXRlLndpZHRoID09PSByZWN0WzBdLndpZHRoICYmIHByZXZTdGF0ZS5oZWlnaHQgPT09IHJlY3RbMF0uaGVpZ2h0ICYmIHByZXZTdGF0ZS5sZWZ0ID09PSByZWN0WzBdLnggJiYgcHJldlN0YXRlLnRvcCA9PT0gcmVjdFswXS55ICYmIHByZXZTdGF0ZS53aW5kb3dTaXplLmhlaWdodCA9PT0gd2luZG93LmlubmVySGVpZ2h0ICYmIHByZXZTdGF0ZS53aW5kb3dTaXplLndpZHRoID09PSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGlmIChpc1NhbWUpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiByZWN0WzBdLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJlY3RbMF0uaGVpZ2h0LFxuICAgICAgICBsZWZ0OiByZWN0WzBdLngsXG4gICAgICAgIHRvcDogcmVjdFswXS55LFxuICAgICAgICB3aW5kb3dTaXplOiB7XG4gICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0sIFtyZWZdKTtcbiAgdXNlRWZmZWN0NygoKSA9PiB7XG4gICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGN1cnJlbnQgfSA9IHJlZjtcbiAgICBpZiAoY3VycmVudCkge1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShjdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbb2JzZXJ2ZXIsIHJlZiwgdXBkYXRlU2l6ZV0pO1xuICB1c2VFZmZlY3Q3KCgpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMudHJpZ2dlck9uV2luZG93UmVzaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHVwZGF0ZVNpemUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB1cGRhdGVTaXplKTtcbiAgICB9O1xuICB9LCBbb3B0aW9ucy50cmlnZ2VyT25XaW5kb3dSZXNpemUsIHVwZGF0ZVNpemVdKTtcbiAgdXNlRWZmZWN0NygoKSA9PiB7XG4gICAgZWxlbWVudFNpemVIb29rcy5wdXNoKHVwZGF0ZVNpemUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBlbGVtZW50U2l6ZUhvb2tzID0gZWxlbWVudFNpemVIb29rcy5maWx0ZXIoKGUpID0+IGUgIT09IHVwZGF0ZVNpemUpO1xuICAgIH07XG4gIH0sIFt1cGRhdGVTaXplXSk7XG4gIHJldHVybiB1c2VNZW1vMigoKSA9PiB7XG4gICAgaWYgKCFzaXplKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHsgLi4uc2l6ZSwgcmVmcmVzaDogdXBkYXRlU2l6ZSB9O1xuICB9LCBbc2l6ZSwgdXBkYXRlU2l6ZV0pO1xufTtcblxuLy8gc3JjL1BsYXllci50c3hcbmltcG9ydCB7XG4gIGZvcndhcmRSZWYgYXMgZm9yd2FyZFJlZjIsXG4gIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QxMyxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZSBhcyB1c2VJbXBlcmF0aXZlSGFuZGxlMixcbiAgdXNlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vIGFzIHVzZU1lbW8xMyxcbiAgdXNlUmVmIGFzIHVzZVJlZjEwLFxuICB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTEzXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29tcG9zaXRpb24sIEludGVybmFscyBhcyBJbnRlcm5hbHMxMiB9IGZyb20gXCJyZW1vdGlvblwiO1xuXG4vLyBzcmMvUGxheWVyVUkudHN4XG5pbXBvcnQgUmVhY3Q4LCB7XG4gIFN1c3BlbnNlLFxuICBmb3J3YXJkUmVmLFxuICB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazEwLFxuICB1c2VDb250ZXh0IGFzIHVzZUNvbnRleHQ2LFxuICB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0MTIsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUsXG4gIHVzZU1lbW8gYXMgdXNlTWVtbzExLFxuICB1c2VSZWYgYXMgdXNlUmVmOSxcbiAgdXNlU3RhdGUgYXMgdXNlU3RhdGUxMVxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEludGVybmFscyBhcyBJbnRlcm5hbHMxMCB9IGZyb20gXCJyZW1vdGlvblwiO1xuXG4vLyBzcmMvUGxheWVyQ29udHJvbHMudHN4XG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazcsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QxMSwgdXNlTWVtbyBhcyB1c2VNZW1vOCwgdXNlUmVmIGFzIHVzZVJlZjcsIHVzZVN0YXRlIGFzIHVzZVN0YXRlMTAgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEludGVybmFscyBhcyBJbnRlcm5hbHM5IH0gZnJvbSBcInJlbW90aW9uXCI7XG5cbi8vIHNyYy9EZWZhdWx0UGxheVBhdXNlQnV0dG9uLnRzeFxuaW1wb3J0IHsganN4IGFzIGpzeDQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBEZWZhdWx0UGxheVBhdXNlQnV0dG9uID0gKHsgcGxheWluZywgYnVmZmVyaW5nIH0pID0+IHtcbiAgaWYgKHBsYXlpbmcgJiYgYnVmZmVyaW5nKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3g0KEJ1ZmZlcmluZ0luZGljYXRvciwge1xuICAgICAgdHlwZTogXCJwbGF5ZXJcIlxuICAgIH0pO1xuICB9XG4gIGlmIChwbGF5aW5nKSB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3g0KFBhdXNlSWNvbiwge30pO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4NChQbGF5SWNvbiwge30pO1xufTtcblxuLy8gc3JjL01lZGlhVm9sdW1lU2xpZGVyLnRzeFxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2s0LCB1c2VNZW1vIGFzIHVzZU1lbW80LCB1c2VSZWYgYXMgdXNlUmVmNCwgdXNlU3RhdGUgYXMgdXNlU3RhdGU2IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcm5hbHMgYXMgSW50ZXJuYWxzNiB9IGZyb20gXCJyZW1vdGlvblwiO1xuXG4vLyBzcmMvcmVuZGVyLXZvbHVtZS1zbGlkZXIudHN4XG5pbXBvcnQgUmVhY3QzLCB7IHVzZUNhbGxiYWNrIGFzIHVzZUNhbGxiYWNrMywgdXNlTWVtbyBhcyB1c2VNZW1vMywgdXNlU3RhdGUgYXMgdXNlU3RhdGU1IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByYW5kb20gfSBmcm9tIFwicmVtb3Rpb25cIjtcbmltcG9ydCB7IGpzeCBhcyBqc3g1LCBqc3hzIGFzIGpzeHMzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgS05PQl9TSVpFID0gMTI7XG52YXIgQkFSX0hFSUdIVCA9IDU7XG52YXIgRGVmYXVsdFZvbHVtZVNsaWRlciA9ICh7XG4gIHZvbHVtZSxcbiAgaXNWZXJ0aWNhbCxcbiAgb25CbHVyLFxuICBpbnB1dFJlZixcbiAgc2V0Vm9sdW1lXG59KSA9PiB7XG4gIGNvbnN0IHNsaWRlckNvbnRhaW5lciA9IHVzZU1lbW8zKCgpID0+IHtcbiAgICBjb25zdCBwYWRkaW5nTGVmdCA9IDU7XG4gICAgY29uc3QgY29tbW9uID0ge1xuICAgICAgcGFkZGluZ0xlZnQsXG4gICAgICBoZWlnaHQ6IElDT05fU0laRSxcbiAgICAgIHdpZHRoOiBWT0xVTUVfU0xJREVSX1dJRFRILFxuICAgICAgZGlzcGxheTogXCJpbmxpbmUtZmxleFwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIlxuICAgIH07XG4gICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC05MGRlZykgdHJhbnNsYXRlWCgke1ZPTFVNRV9TTElERVJfV0lEVEggLyAyICsgSUNPTl9TSVpFIC8gMn1weClgXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29tbW9uXG4gICAgfTtcbiAgfSwgW2lzVmVydGljYWxdKTtcbiAgY29uc3QgcmFuZG9tSWQgPSB0eXBlb2YgUmVhY3QzLnVzZUlkID09PSBcInVuZGVmaW5lZFwiID8gXCJ2b2x1bWUtc2xpZGVyXCIgOiBSZWFjdDMudXNlSWQoKTtcbiAgY29uc3QgW3JhbmRvbUNsYXNzXSA9IHVzZVN0YXRlNSgoKSA9PiBgX19yZW1vdGlvbi12b2x1bWUtc2xpZGVyLSR7cmFuZG9tKHJhbmRvbUlkKX1gLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgY29uc3Qgb25Wb2x1bWVDaGFuZ2UgPSB1c2VDYWxsYmFjazMoKGUpID0+IHtcbiAgICBzZXRWb2x1bWUocGFyc2VGbG9hdChlLnRhcmdldC52YWx1ZSkpO1xuICB9LCBbc2V0Vm9sdW1lXSk7XG4gIGNvbnN0IGlucHV0U3R5bGUgPSB1c2VNZW1vMygoKSA9PiB7XG4gICAgY29uc3QgY29tbW9uU3R5bGUgPSB7XG4gICAgICBXZWJraXRBcHBlYXJhbmNlOiBcIm5vbmVcIixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIixcbiAgICAgIGJvcmRlclJhZGl1czogQkFSX0hFSUdIVCAvIDIsXG4gICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgaGVpZ2h0OiBCQVJfSEVJR0hULFxuICAgICAgd2lkdGg6IFZPTFVNRV9TTElERVJfV0lEVEgsXG4gICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQoXG5cdFx0XHRcdHRvIHJpZ2h0LFxuXHRcdFx0XHR3aGl0ZSAke3ZvbHVtZSAqIDEwMH0lLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApICR7dm9sdW1lICogMTAwfSVcblx0XHRcdClgXG4gICAgfTtcbiAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY29tbW9uU3R5bGUsXG4gICAgICAgIGJvdHRvbTogSUNPTl9TSVpFICsgVk9MVU1FX1NMSURFUl9XSURUSCAvIDJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb21tb25TdHlsZTtcbiAgfSwgW2lzVmVydGljYWwsIHZvbHVtZV0pO1xuICBjb25zdCBzbGlkZXJTdHlsZSA9IGBcblx0LiR7cmFuZG9tQ2xhc3N9Ojotd2Via2l0LXNsaWRlci10aHVtYiB7XG5cdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXHRcdGJvcmRlci1yYWRpdXM6ICR7S05PQl9TSVpFIC8gMn1weDtcblx0XHRib3gtc2hhZG93OiAwIDAgMnB4IGJsYWNrO1xuXHRcdGhlaWdodDogJHtLTk9CX1NJWkV9cHg7XG5cdFx0d2lkdGg6ICR7S05PQl9TSVpFfXB4O1xuXHR9XG5cblx0LiR7cmFuZG9tQ2xhc3N9OjotbW96LXJhbmdlLXRodW1iIHtcblx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG5cdFx0Ym9yZGVyLXJhZGl1czogJHtLTk9CX1NJWkUgLyAyfXB4O1xuXHRcdGJveC1zaGFkb3c6IDAgMCAycHggYmxhY2s7XG5cdFx0aGVpZ2h0OiAke0tOT0JfU0laRX1weDtcblx0XHR3aWR0aDogJHtLTk9CX1NJWkV9cHg7XG5cdH1cbmA7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4czMoXCJkaXZcIiwge1xuICAgIHN0eWxlOiBzbGlkZXJDb250YWluZXIsXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3g1KFwic3R5bGVcIiwge1xuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogc2xpZGVyU3R5bGVcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4NShcImlucHV0XCIsIHtcbiAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiQ2hhbmdlIHZvbHVtZVwiLFxuICAgICAgICBjbGFzc05hbWU6IHJhbmRvbUNsYXNzLFxuICAgICAgICBtYXg6IDEsXG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgb25CbHVyLFxuICAgICAgICBvbkNoYW5nZTogb25Wb2x1bWVDaGFuZ2UsXG4gICAgICAgIHN0ZXA6IDAuMDEsXG4gICAgICAgIHR5cGU6IFwicmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IHZvbHVtZSxcbiAgICAgICAgc3R5bGU6IGlucHV0U3R5bGVcbiAgICAgIH0pXG4gICAgXVxuICB9KTtcbn07XG52YXIgcmVuZGVyRGVmYXVsdFZvbHVtZVNsaWRlciA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeDUoRGVmYXVsdFZvbHVtZVNsaWRlciwge1xuICAgIC4uLnByb3BzXG4gIH0pO1xufTtcblxuLy8gc3JjL01lZGlhVm9sdW1lU2xpZGVyLnRzeFxuaW1wb3J0IHsganN4IGFzIGpzeDYsIGpzeHMgYXMganN4czQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBWT0xVTUVfU0xJREVSX1dJRFRIID0gMTAwO1xudmFyIE1lZGlhVm9sdW1lU2xpZGVyID0gKHsgZGlzcGxheVZlcnRpY2FsVm9sdW1lU2xpZGVyLCByZW5kZXJNdXRlQnV0dG9uLCByZW5kZXJWb2x1bWVTbGlkZXIgfSkgPT4ge1xuICBjb25zdCBbbWVkaWFNdXRlZCwgc2V0TWVkaWFNdXRlZF0gPSBJbnRlcm5hbHM2LnVzZU1lZGlhTXV0ZWRTdGF0ZSgpO1xuICBjb25zdCBbbWVkaWFWb2x1bWUsIHNldE1lZGlhVm9sdW1lXSA9IEludGVybmFsczYudXNlTWVkaWFWb2x1bWVTdGF0ZSgpO1xuICBjb25zdCBbZm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSB1c2VTdGF0ZTYoZmFsc2UpO1xuICBjb25zdCBwYXJlbnREaXZSZWYgPSB1c2VSZWY0KG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZjQobnVsbCk7XG4gIGNvbnN0IGhvdmVyID0gdXNlSG92ZXJTdGF0ZShwYXJlbnREaXZSZWYsIGZhbHNlKTtcbiAgY29uc3Qgb25CbHVyID0gdXNlQ2FsbGJhY2s0KCgpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICB9XG4gICAgfSwgMTApO1xuICB9LCBbXSk7XG4gIGNvbnN0IGlzVm9sdW1lMCA9IG1lZGlhVm9sdW1lID09PSAwO1xuICBjb25zdCBvbkNsaWNrID0gdXNlQ2FsbGJhY2s0KCgpID0+IHtcbiAgICBpZiAoaXNWb2x1bWUwKSB7XG4gICAgICBzZXRNZWRpYVZvbHVtZSgxKTtcbiAgICAgIHNldE1lZGlhTXV0ZWQoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRNZWRpYU11dGVkKChtdXRlKSA9PiAhbXV0ZSk7XG4gIH0sIFtpc1ZvbHVtZTAsIHNldE1lZGlhTXV0ZWQsIHNldE1lZGlhVm9sdW1lXSk7XG4gIGNvbnN0IHBhcmVudERpdlN0eWxlID0gdXNlTWVtbzQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwbGF5OiBcImlubGluZS1mbGV4XCIsXG4gICAgICBiYWNrZ3JvdW5kOiBcIm5vbmVcIixcbiAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICB0b3VjaEFjdGlvbjogXCJub25lXCIsXG4gICAgICAuLi5kaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXIgJiYgeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH1cbiAgICB9O1xuICB9LCBbZGlzcGxheVZlcnRpY2FsVm9sdW1lU2xpZGVyXSk7XG4gIGNvbnN0IHZvbHVtZUNvbnRhaW5lciA9IHVzZU1lbW80KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheTogXCJpbmxpbmVcIixcbiAgICAgIHdpZHRoOiBJQ09OX1NJWkUsXG4gICAgICBoZWlnaHQ6IElDT05fU0laRSxcbiAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICBhcHBlYXJhbmNlOiBcIm5vbmVcIixcbiAgICAgIGJhY2tncm91bmQ6IFwibm9uZVwiLFxuICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHJlbmRlckRlZmF1bHRNdXRlQnV0dG9uID0gdXNlQ2FsbGJhY2s0KCh7IG11dGVkLCB2b2x1bWUgfSkgPT4ge1xuICAgIGNvbnN0IGlzTXV0ZWRPclplcm8gPSBtdXRlZCB8fCB2b2x1bWUgPT09IDA7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3g2KFwiYnV0dG9uXCIsIHtcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBpc011dGVkT3JaZXJvID8gXCJVbm11dGUgc291bmRcIiA6IFwiTXV0ZSBzb3VuZFwiLFxuICAgICAgdGl0bGU6IGlzTXV0ZWRPclplcm8gPyBcIlVubXV0ZSBzb3VuZFwiIDogXCJNdXRlIHNvdW5kXCIsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25CbHVyLFxuICAgICAgb25Gb2N1czogKCkgPT4gc2V0Rm9jdXNlZCh0cnVlKSxcbiAgICAgIHN0eWxlOiB2b2x1bWVDb250YWluZXIsXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgY2hpbGRyZW46IGlzTXV0ZWRPclplcm8gPyAvKiBAX19QVVJFX18gKi8ganN4NihWb2x1bWVPZmZJY29uLCB7fSkgOiAvKiBAX19QVVJFX18gKi8ganN4NihWb2x1bWVPbkljb24sIHt9KVxuICAgIH0pO1xuICB9LCBbb25CbHVyLCBvbkNsaWNrLCB2b2x1bWVDb250YWluZXJdKTtcbiAgY29uc3QgbXV0ZUJ1dHRvbiA9IHVzZU1lbW80KCgpID0+IHtcbiAgICByZXR1cm4gcmVuZGVyTXV0ZUJ1dHRvbiA/IHJlbmRlck11dGVCdXR0b24oeyBtdXRlZDogbWVkaWFNdXRlZCwgdm9sdW1lOiBtZWRpYVZvbHVtZSB9KSA6IHJlbmRlckRlZmF1bHRNdXRlQnV0dG9uKHsgbXV0ZWQ6IG1lZGlhTXV0ZWQsIHZvbHVtZTogbWVkaWFWb2x1bWUgfSk7XG4gIH0sIFttZWRpYU11dGVkLCBtZWRpYVZvbHVtZSwgcmVuZGVyRGVmYXVsdE11dGVCdXR0b24sIHJlbmRlck11dGVCdXR0b25dKTtcbiAgY29uc3Qgdm9sdW1lU2xpZGVyID0gdXNlTWVtbzQoKCkgPT4ge1xuICAgIHJldHVybiAoZm9jdXNlZCB8fCBob3ZlcikgJiYgIW1lZGlhTXV0ZWQgJiYgIUludGVybmFsczYuaXNJb3NTYWZhcmkoKSA/IChyZW5kZXJWb2x1bWVTbGlkZXIgPz8gcmVuZGVyRGVmYXVsdFZvbHVtZVNsaWRlcikoe1xuICAgICAgaXNWZXJ0aWNhbDogZGlzcGxheVZlcnRpY2FsVm9sdW1lU2xpZGVyLFxuICAgICAgdm9sdW1lOiBtZWRpYVZvbHVtZSxcbiAgICAgIG9uQmx1cjogKCkgPT4gc2V0Rm9jdXNlZChmYWxzZSksXG4gICAgICBpbnB1dFJlZixcbiAgICAgIHNldFZvbHVtZTogc2V0TWVkaWFWb2x1bWVcbiAgICB9KSA6IG51bGw7XG4gIH0sIFtcbiAgICBkaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXIsXG4gICAgZm9jdXNlZCxcbiAgICBob3ZlcixcbiAgICBtZWRpYU11dGVkLFxuICAgIG1lZGlhVm9sdW1lLFxuICAgIHJlbmRlclZvbHVtZVNsaWRlcixcbiAgICBzZXRNZWRpYVZvbHVtZVxuICBdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzNChcImRpdlwiLCB7XG4gICAgcmVmOiBwYXJlbnREaXZSZWYsXG4gICAgc3R5bGU6IHBhcmVudERpdlN0eWxlLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICBtdXRlQnV0dG9uLFxuICAgICAgdm9sdW1lU2xpZGVyXG4gICAgXVxuICB9KTtcbn07XG5cbi8vIHNyYy9QbGF5YmFja3JhdGVDb250cm9sLnRzeFxuaW1wb3J0IHtcbiAgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2s1LFxuICB1c2VDb250ZXh0IGFzIHVzZUNvbnRleHQ1LFxuICB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0OSxcbiAgdXNlTWVtbyBhcyB1c2VNZW1vNSxcbiAgdXNlU3RhdGUgYXMgdXNlU3RhdGU4XG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgSW50ZXJuYWxzIGFzIEludGVybmFsczcgfSBmcm9tIFwicmVtb3Rpb25cIjtcblxuLy8gc3JjL3V0aWxzL3VzZS1jb21wb25lbnQtdmlzaWJsZS50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDgsIHVzZVJlZiBhcyB1c2VSZWY1LCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTcgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNvbXBvbmVudFZpc2libGUoaW5pdGlhbElzVmlzaWJsZSkge1xuICBjb25zdCBbaXNDb21wb25lbnRWaXNpYmxlLCBzZXRJc0NvbXBvbmVudFZpc2libGVdID0gdXNlU3RhdGU3KGluaXRpYWxJc1Zpc2libGUpO1xuICBjb25zdCByZWYgPSB1c2VSZWY1KG51bGwpO1xuICB1c2VFZmZlY3Q4KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVDbGlja091dHNpZGUgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChyZWYuY3VycmVudCAmJiAhcmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBzZXRJc0NvbXBvbmVudFZpc2libGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBoYW5kbGVDbGlja091dHNpZGUsIHRydWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSwgdHJ1ZSk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4geyByZWYsIGlzQ29tcG9uZW50VmlzaWJsZSwgc2V0SXNDb21wb25lbnRWaXNpYmxlIH07XG59XG5cbi8vIHNyYy9QbGF5YmFja3JhdGVDb250cm9sLnRzeFxuaW1wb3J0IHsganN4IGFzIGpzeDcsIGpzeHMgYXMganN4czUgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBCT1RUT00gPSAzNTtcbnZhciBUSFJFU0hPTEQgPSA3MDtcbnZhciByYXRlRGl2ID0ge1xuICBoZWlnaHQ6IDMwLFxuICBwYWRkaW5nUmlnaHQ6IDE1LFxuICBwYWRkaW5nTGVmdDogMTIsXG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiXG59O1xudmFyIGNoZWNrbWFya0NvbnRhaW5lciA9IHtcbiAgd2lkdGg6IDIyLFxuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIlxufTtcbnZhciBjaGVja21hcmtTdHlsZSA9IHtcbiAgd2lkdGg6IDE0LFxuICBoZWlnaHQ6IDE0LFxuICBjb2xvcjogXCJibGFja1wiXG59O1xudmFyIENoZWNrbWFyayA9ICgpID0+IC8qIEBfX1BVUkVfXyAqLyBqc3g3KFwic3ZnXCIsIHtcbiAgdmlld0JveDogXCIwIDAgNTEyIDUxMlwiLFxuICBzdHlsZTogY2hlY2ttYXJrU3R5bGUsXG4gIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4NyhcInBhdGhcIiwge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZDogXCJNNDM1Ljg0OCA4My40NjZMMTcyLjgwNCAzNDYuNTFsLTk2LjY1Mi05Ni42NTJjLTQuNjg2LTQuNjg2LTEyLjI4NC00LjY4Ni0xNi45NzEgMGwtMjguMjg0IDI4LjI4NGMtNC42ODYgNC42ODYtNC42ODYgMTIuMjg0IDAgMTYuOTcxbDEzMy40MjEgMTMzLjQyMWM0LjY4NiA0LjY4NiAxMi4yODQgNC42ODYgMTYuOTcxIDBsMjk5LjgxMy0yOTkuODEzYzQuNjg2LTQuNjg2IDQuNjg2LTEyLjI4NCAwLTE2Ljk3MWwtMjguMjg0LTI4LjI4NGMtNC42ODYtNC42ODYtMTIuMjg0LTQuNjg2LTE2Ljk3IDB6XCJcbiAgfSlcbn0pO1xudmFyIFBsYXliYWNrcmF0ZU9wdGlvbiA9ICh7IHJhdGUsIG9uU2VsZWN0LCBzZWxlY3RlZFJhdGUsIGtleWJvYXJkU2VsZWN0ZWRSYXRlIH0pID0+IHtcbiAgY29uc3Qgb25DbGljayA9IHVzZUNhbGxiYWNrNSgoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG9uU2VsZWN0KHJhdGUpO1xuICB9LCBbb25TZWxlY3QsIHJhdGVdKTtcbiAgY29uc3QgW2hvdmVyZWQsIHNldEhvdmVyZWRdID0gdXNlU3RhdGU4KGZhbHNlKTtcbiAgY29uc3Qgb25Nb3VzZUVudGVyID0gdXNlQ2FsbGJhY2s1KCgpID0+IHtcbiAgICBzZXRIb3ZlcmVkKHRydWUpO1xuICB9LCBbXSk7XG4gIGNvbnN0IG9uTW91c2VMZWF2ZSA9IHVzZUNhbGxiYWNrNSgoKSA9PiB7XG4gICAgc2V0SG92ZXJlZChmYWxzZSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgaXNGb2N1c2VkID0ga2V5Ym9hcmRTZWxlY3RlZFJhdGUgPT09IHJhdGU7XG4gIGNvbnN0IGFjdHVhbFN0eWxlID0gdXNlTWVtbzUoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yYXRlRGl2LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBob3ZlcmVkIHx8IGlzRm9jdXNlZCA/IFwiI2VlZVwiIDogXCJ0cmFuc3BhcmVudFwiXG4gICAgfTtcbiAgfSwgW2hvdmVyZWQsIGlzRm9jdXNlZF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHM1KFwiZGl2XCIsIHtcbiAgICBvbk1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlLFxuICAgIHRhYkluZGV4OiAwLFxuICAgIHN0eWxlOiBhY3R1YWxTdHlsZSxcbiAgICBvbkNsaWNrLFxuICAgIGNoaWxkcmVuOiBbXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4NyhcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiBjaGVja21hcmtDb250YWluZXIsXG4gICAgICAgIGNoaWxkcmVuOiByYXRlID09PSBzZWxlY3RlZFJhdGUgPyAvKiBAX19QVVJFX18gKi8ganN4NyhDaGVja21hcmssIHt9KSA6IG51bGxcbiAgICAgIH0pLFxuICAgICAgcmF0ZS50b0ZpeGVkKDEpLFxuICAgICAgXCJ4XCJcbiAgICBdXG4gIH0sIHJhdGUpO1xufTtcbnZhciBQbGF5YmFja1BvcHVwID0gKHsgc2V0SXNDb21wb25lbnRWaXNpYmxlLCBwbGF5YmFja1JhdGVzLCBjYW52YXNTaXplIH0pID0+IHtcbiAgY29uc3QgeyBzZXRQbGF5YmFja1JhdGUsIHBsYXliYWNrUmF0ZSB9ID0gdXNlQ29udGV4dDUoSW50ZXJuYWxzNy5UaW1lbGluZS5UaW1lbGluZUNvbnRleHQpO1xuICBjb25zdCBba2V5Ym9hcmRTZWxlY3RlZFJhdGUsIHNldEtleWJvYXJkU2VsZWN0ZWRSYXRlXSA9IHVzZVN0YXRlOChwbGF5YmFja1JhdGUpO1xuICB1c2VFZmZlY3Q5KCgpID0+IHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoZS5rZXkgPT09IFwiQXJyb3dVcFwiKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHBsYXliYWNrUmF0ZXMuZmluZEluZGV4KChyYXRlKSA9PiByYXRlID09PSBrZXlib2FyZFNlbGVjdGVkUmF0ZSk7XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBzZXRLZXlib2FyZFNlbGVjdGVkUmF0ZShwbGF5YmFja1JhdGVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRLZXlib2FyZFNlbGVjdGVkUmF0ZShwbGF5YmFja1JhdGVzW2N1cnJlbnRJbmRleCAtIDFdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gXCJBcnJvd0Rvd25cIikge1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBwbGF5YmFja1JhdGVzLmZpbmRJbmRleCgocmF0ZSkgPT4gcmF0ZSA9PT0ga2V5Ym9hcmRTZWxlY3RlZFJhdGUpO1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSBwbGF5YmFja1JhdGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBzZXRLZXlib2FyZFNlbGVjdGVkUmF0ZShwbGF5YmFja1JhdGVzW3BsYXliYWNrUmF0ZXMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldEtleWJvYXJkU2VsZWN0ZWRSYXRlKHBsYXliYWNrUmF0ZXNbY3VycmVudEluZGV4ICsgMV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgc2V0UGxheWJhY2tSYXRlKGtleWJvYXJkU2VsZWN0ZWRSYXRlKTtcbiAgICAgICAgc2V0SXNDb21wb25lbnRWaXNpYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgfSwgW1xuICAgIHBsYXliYWNrUmF0ZXMsXG4gICAga2V5Ym9hcmRTZWxlY3RlZFJhdGUsXG4gICAgc2V0UGxheWJhY2tSYXRlLFxuICAgIHNldElzQ29tcG9uZW50VmlzaWJsZVxuICBdKTtcbiAgY29uc3Qgb25TZWxlY3QgPSB1c2VDYWxsYmFjazUoKHJhdGUpID0+IHtcbiAgICBzZXRQbGF5YmFja1JhdGUocmF0ZSk7XG4gICAgc2V0SXNDb21wb25lbnRWaXNpYmxlKGZhbHNlKTtcbiAgfSwgW3NldElzQ29tcG9uZW50VmlzaWJsZSwgc2V0UGxheWJhY2tSYXRlXSk7XG4gIGNvbnN0IHBsYXliYWNrUG9wdXAgPSB1c2VNZW1vNSgoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICByaWdodDogMCxcbiAgICAgIHdpZHRoOiAxMjUsXG4gICAgICBtYXhIZWlnaHQ6IGNhbnZhc1NpemUuaGVpZ2h0IC0gVEhSRVNIT0xEIC0gQk9UVE9NLFxuICAgICAgYm90dG9tOiAzNSxcbiAgICAgIGJhY2tncm91bmQ6IFwiI2ZmZlwiLFxuICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICAgICAgY29sb3I6IFwiYmxhY2tcIixcbiAgICAgIHRleHRBbGlnbjogXCJsZWZ0XCJcbiAgICB9O1xuICB9LCBbY2FudmFzU2l6ZS5oZWlnaHRdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3g3KFwiZGl2XCIsIHtcbiAgICBzdHlsZTogcGxheWJhY2tQb3B1cCxcbiAgICBjaGlsZHJlbjogcGxheWJhY2tSYXRlcy5tYXAoKHJhdGUpID0+IHtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4NyhQbGF5YmFja3JhdGVPcHRpb24sIHtcbiAgICAgICAgc2VsZWN0ZWRSYXRlOiBwbGF5YmFja1JhdGUsXG4gICAgICAgIG9uU2VsZWN0LFxuICAgICAgICByYXRlLFxuICAgICAgICBrZXlib2FyZFNlbGVjdGVkUmF0ZVxuICAgICAgfSwgcmF0ZSk7XG4gICAgfSlcbiAgfSk7XG59O1xudmFyIGxhYmVsID0ge1xuICBmb250U2l6ZTogMTMsXG4gIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxuICBjb2xvcjogXCJ3aGl0ZVwiLFxuICBib3JkZXI6IFwiMnB4IHNvbGlkIHdoaXRlXCIsXG4gIGJvcmRlclJhZGl1czogMjAsXG4gIHBhZGRpbmdMZWZ0OiA4LFxuICBwYWRkaW5nUmlnaHQ6IDgsXG4gIHBhZGRpbmdUb3A6IDIsXG4gIHBhZGRpbmdCb3R0b206IDJcbn07XG52YXIgcGxheWVyQnV0dG9uU3R5bGUgPSB7XG4gIGFwcGVhcmFuY2U6IFwibm9uZVwiLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgYm9yZGVyOiBcIm5vbmVcIixcbiAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgcGFkZGluZ0xlZnQ6IDAsXG4gIHBhZGRpbmdSaWdodDogMCxcbiAgcGFkZGluZ1RvcDogNixcbiAgcGFkZGluZ0JvdHRvbTogNixcbiAgaGVpZ2h0OiAzNyxcbiAgZGlzcGxheTogXCJpbmxpbmUtZmxleFwiLFxuICBtYXJnaW5Cb3R0b206IDAsXG4gIG1hcmdpblRvcDogMCxcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIlxufTtcbnZhciBidXR0b24gPSB7XG4gIC4uLnBsYXllckJ1dHRvblN0eWxlLFxuICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG59O1xudmFyIFBsYXliYWNrcmF0ZUNvbnRyb2wgPSAoeyBwbGF5YmFja1JhdGVzLCBjYW52YXNTaXplIH0pID0+IHtcbiAgY29uc3QgeyByZWYsIGlzQ29tcG9uZW50VmlzaWJsZSwgc2V0SXNDb21wb25lbnRWaXNpYmxlIH0gPSB1c2VDb21wb25lbnRWaXNpYmxlKGZhbHNlKTtcbiAgY29uc3QgeyBwbGF5YmFja1JhdGUgfSA9IHVzZUNvbnRleHQ1KEludGVybmFsczcuVGltZWxpbmUuVGltZWxpbmVDb250ZXh0KTtcbiAgY29uc3Qgb25DbGljayA9IHVzZUNhbGxiYWNrNSgoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNldElzQ29tcG9uZW50VmlzaWJsZSgocHJldklzQ29tcG9uZW50VmlzaWJsZSkgPT4gIXByZXZJc0NvbXBvbmVudFZpc2libGUpO1xuICB9LCBbc2V0SXNDb21wb25lbnRWaXNpYmxlXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4NyhcImRpdlwiLCB7XG4gICAgcmVmLFxuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4czUoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIkNoYW5nZSBwbGF5YmFjayByYXRlXCIsXG4gICAgICBzdHlsZTogYnV0dG9uLFxuICAgICAgb25DbGljayxcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3hzNShcImRpdlwiLCB7XG4gICAgICAgICAgc3R5bGU6IGxhYmVsLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICBwbGF5YmFja1JhdGUsXG4gICAgICAgICAgICBcInhcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSksXG4gICAgICAgIGlzQ29tcG9uZW50VmlzaWJsZSAmJiAvKiBAX19QVVJFX18gKi8ganN4NyhQbGF5YmFja1BvcHVwLCB7XG4gICAgICAgICAgY2FudmFzU2l6ZSxcbiAgICAgICAgICBwbGF5YmFja1JhdGVzLFxuICAgICAgICAgIHNldElzQ29tcG9uZW50VmlzaWJsZVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pXG4gIH0pO1xufTtcblxuLy8gc3JjL1BsYXllclNlZWtCYXIudHN4XG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazYsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QxMCwgdXNlTWVtbyBhcyB1c2VNZW1vNiwgdXNlUmVmIGFzIHVzZVJlZjYsIHVzZVN0YXRlIGFzIHVzZVN0YXRlOSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgSW50ZXJuYWxzIGFzIEludGVybmFsczgsIGludGVycG9sYXRlIH0gZnJvbSBcInJlbW90aW9uXCI7XG5pbXBvcnQgeyBqc3ggYXMganN4OCwganN4cyBhcyBqc3hzNiB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIGdldEZyYW1lRnJvbVggPSAoY2xpZW50WCwgZHVyYXRpb25JbkZyYW1lcywgd2lkdGgpID0+IHtcbiAgY29uc3QgcG9zID0gY2xpZW50WDtcbiAgY29uc3QgZnJhbWUgPSBNYXRoLnJvdW5kKGludGVycG9sYXRlKHBvcywgWzAsIHdpZHRoXSwgWzAsIGR1cmF0aW9uSW5GcmFtZXMgLSAxXSwge1xuICAgIGV4dHJhcG9sYXRlTGVmdDogXCJjbGFtcFwiLFxuICAgIGV4dHJhcG9sYXRlUmlnaHQ6IFwiY2xhbXBcIlxuICB9KSk7XG4gIHJldHVybiBmcmFtZTtcbn07XG52YXIgQkFSX0hFSUdIVDIgPSA1O1xudmFyIEtOT0JfU0laRTIgPSAxMjtcbnZhciBWRVJUSUNBTF9QQURESU5HID0gNDtcbnZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gIFdlYmtpdFVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBwYWRkaW5nVG9wOiBWRVJUSUNBTF9QQURESU5HLFxuICBwYWRkaW5nQm90dG9tOiBWRVJUSUNBTF9QQURESU5HLFxuICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICB0b3VjaEFjdGlvbjogXCJub25lXCJcbn07XG52YXIgYmFyQmFja2dyb3VuZCA9IHtcbiAgaGVpZ2h0OiBCQVJfSEVJR0hUMixcbiAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNSlcIixcbiAgd2lkdGg6IFwiMTAwJVwiLFxuICBib3JkZXJSYWRpdXM6IEJBUl9IRUlHSFQyIC8gMlxufTtcbnZhciBmaW5kQm9keUluV2hpY2hEaXZJc0xvY2F0ZWQgPSAoZGl2KSA9PiB7XG4gIGxldCBjdXJyZW50ID0gZGl2O1xuICB3aGlsZSAoY3VycmVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gY3VycmVudDtcbn07XG52YXIgUGxheWVyU2Vla0JhciA9ICh7IGR1cmF0aW9uSW5GcmFtZXMsIG9uU2Vla0VuZCwgb25TZWVrU3RhcnQsIGluRnJhbWUsIG91dEZyYW1lIH0pID0+IHtcbiAgY29uc3QgY29udGFpbmVyUmVmID0gdXNlUmVmNihudWxsKTtcbiAgY29uc3QgYmFySG92ZXJlZCA9IHVzZUhvdmVyU3RhdGUoY29udGFpbmVyUmVmLCBmYWxzZSk7XG4gIGNvbnN0IHNpemUgPSB1c2VFbGVtZW50U2l6ZShjb250YWluZXJSZWYsIHtcbiAgICB0cmlnZ2VyT25XaW5kb3dSZXNpemU6IHRydWUsXG4gICAgc2hvdWxkQXBwbHlDc3NUcmFuc2Zvcm1zOiB0cnVlXG4gIH0pO1xuICBjb25zdCB7IHNlZWssIHBsYXksIHBhdXNlLCBwbGF5aW5nIH0gPSB1c2VQbGF5ZXIoKTtcbiAgY29uc3QgZnJhbWUgPSBJbnRlcm5hbHM4LlRpbWVsaW5lLnVzZVRpbWVsaW5lUG9zaXRpb24oKTtcbiAgY29uc3QgW2RyYWdnaW5nLCBzZXREcmFnZ2luZ10gPSB1c2VTdGF0ZTkoe1xuICAgIGRyYWdnaW5nOiBmYWxzZVxuICB9KTtcbiAgY29uc3Qgd2lkdGggPSBzaXplPy53aWR0aCA/PyAwO1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gdXNlQ2FsbGJhY2s2KChlKSA9PiB7XG4gICAgaWYgKGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBvc0xlZnQgPSBjb250YWluZXJSZWYuY3VycmVudD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICBjb25zdCBfZnJhbWUgPSBnZXRGcmFtZUZyb21YKGUuY2xpZW50WCAtIHBvc0xlZnQsIGR1cmF0aW9uSW5GcmFtZXMsIHdpZHRoKTtcbiAgICBwYXVzZSgpO1xuICAgIHNlZWsoX2ZyYW1lKTtcbiAgICBzZXREcmFnZ2luZyh7XG4gICAgICBkcmFnZ2luZzogdHJ1ZSxcbiAgICAgIHdhc1BsYXlpbmc6IHBsYXlpbmdcbiAgICB9KTtcbiAgICBvblNlZWtTdGFydCgpO1xuICB9LCBbZHVyYXRpb25JbkZyYW1lcywgd2lkdGgsIHBhdXNlLCBzZWVrLCBwbGF5aW5nLCBvblNlZWtTdGFydF0pO1xuICBjb25zdCBvblBvaW50ZXJNb3ZlID0gdXNlQ2FsbGJhY2s2KChlKSA9PiB7XG4gICAgaWYgKCFzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF5ZXIgaGFzIG5vIHNpemVcIik7XG4gICAgfVxuICAgIGlmICghZHJhZ2dpbmcuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcG9zTGVmdCA9IGNvbnRhaW5lclJlZi5jdXJyZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIGNvbnN0IF9mcmFtZSA9IGdldEZyYW1lRnJvbVgoZS5jbGllbnRYIC0gcG9zTGVmdCwgZHVyYXRpb25JbkZyYW1lcywgc2l6ZS53aWR0aCk7XG4gICAgc2VlayhfZnJhbWUpO1xuICB9LCBbZHJhZ2dpbmcuZHJhZ2dpbmcsIGR1cmF0aW9uSW5GcmFtZXMsIHNlZWssIHNpemVdKTtcbiAgY29uc3Qgb25Qb2ludGVyVXAgPSB1c2VDYWxsYmFjazYoKCkgPT4ge1xuICAgIHNldERyYWdnaW5nKHtcbiAgICAgIGRyYWdnaW5nOiBmYWxzZVxuICAgIH0pO1xuICAgIGlmICghZHJhZ2dpbmcuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRyYWdnaW5nLndhc1BsYXlpbmcpIHtcbiAgICAgIHBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF1c2UoKTtcbiAgICB9XG4gICAgb25TZWVrRW5kKCk7XG4gIH0sIFtkcmFnZ2luZywgb25TZWVrRW5kLCBwYXVzZSwgcGxheV0pO1xuICB1c2VFZmZlY3QxMCgoKSA9PiB7XG4gICAgaWYgKCFkcmFnZ2luZy5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gZmluZEJvZHlJbldoaWNoRGl2SXNMb2NhdGVkKGNvbnRhaW5lclJlZi5jdXJyZW50KTtcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBvblBvaW50ZXJNb3ZlKTtcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgb25Qb2ludGVyVXApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBvblBvaW50ZXJNb3ZlKTtcbiAgICAgIGJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBvblBvaW50ZXJVcCk7XG4gICAgfTtcbiAgfSwgW2RyYWdnaW5nLmRyYWdnaW5nLCBvblBvaW50ZXJNb3ZlLCBvblBvaW50ZXJVcF0pO1xuICBjb25zdCBrbm9iU3R5bGUgPSB1c2VNZW1vNigoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogS05PQl9TSVpFMixcbiAgICAgIHdpZHRoOiBLTk9CX1NJWkUyLFxuICAgICAgYm9yZGVyUmFkaXVzOiBLTk9CX1NJWkUyIC8gMixcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICB0b3A6IFZFUlRJQ0FMX1BBRERJTkcgLSBLTk9CX1NJWkUyIC8gMiArIDUgLyAyLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsXG4gICAgICBsZWZ0OiBNYXRoLm1heCgwLCBmcmFtZSAvIE1hdGgubWF4KDEsIGR1cmF0aW9uSW5GcmFtZXMgLSAxKSAqIHdpZHRoIC0gS05PQl9TSVpFMiAvIDIpLFxuICAgICAgYm94U2hhZG93OiBcIjAgMCAycHggYmxhY2tcIixcbiAgICAgIG9wYWNpdHk6IE51bWJlcihiYXJIb3ZlcmVkKVxuICAgIH07XG4gIH0sIFtiYXJIb3ZlcmVkLCBkdXJhdGlvbkluRnJhbWVzLCBmcmFtZSwgd2lkdGhdKTtcbiAgY29uc3QgZmlsbFN0eWxlID0gdXNlTWVtbzYoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IEJBUl9IRUlHSFQyLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixcbiAgICAgIHdpZHRoOiAoZnJhbWUgLSAoaW5GcmFtZSA/PyAwKSkgLyAoZHVyYXRpb25JbkZyYW1lcyAtIDEpICogMTAwICsgXCIlXCIsXG4gICAgICBtYXJnaW5MZWZ0OiAoaW5GcmFtZSA/PyAwKSAvIChkdXJhdGlvbkluRnJhbWVzIC0gMSkgKiAxMDAgKyBcIiVcIixcbiAgICAgIGJvcmRlclJhZGl1czogQkFSX0hFSUdIVDIgLyAyXG4gICAgfTtcbiAgfSwgW2R1cmF0aW9uSW5GcmFtZXMsIGZyYW1lLCBpbkZyYW1lXSk7XG4gIGNvbnN0IGFjdGl2ZSA9IHVzZU1lbW82KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBCQVJfSEVJR0hUMixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpXCIsXG4gICAgICB3aWR0aDogKChvdXRGcmFtZSA/PyBkdXJhdGlvbkluRnJhbWVzIC0gMSkgLSAoaW5GcmFtZSA/PyAwKSkgLyAoZHVyYXRpb25JbkZyYW1lcyAtIDEpICogMTAwICsgXCIlXCIsXG4gICAgICBtYXJnaW5MZWZ0OiAoaW5GcmFtZSA/PyAwKSAvIChkdXJhdGlvbkluRnJhbWVzIC0gMSkgKiAxMDAgKyBcIiVcIixcbiAgICAgIGJvcmRlclJhZGl1czogQkFSX0hFSUdIVDIgLyAyLFxuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuICAgIH07XG4gIH0sIFtkdXJhdGlvbkluRnJhbWVzLCBpbkZyYW1lLCBvdXRGcmFtZV0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeHM2KFwiZGl2XCIsIHtcbiAgICByZWY6IGNvbnRhaW5lclJlZixcbiAgICBvblBvaW50ZXJEb3duLFxuICAgIHN0eWxlOiBjb250YWluZXJTdHlsZSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLyogQF9fUFVSRV9fICovIGpzeHM2KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IGJhckJhY2tncm91bmQsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgLyogQF9fUFVSRV9fICovIGpzeDgoXCJkaXZcIiwge1xuICAgICAgICAgICAgc3R5bGU6IGFjdGl2ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3g4KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIHN0eWxlOiBmaWxsU3R5bGVcbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3g4KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IGtub2JTdHlsZVxuICAgICAgfSlcbiAgICBdXG4gIH0pO1xufTtcblxuLy8gc3JjL2Zvcm1hdC10aW1lLnRzXG52YXIgZm9ybWF0VGltZSA9ICh0aW1lSW5TZWNvbmRzKSA9PiB7XG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWVJblNlY29uZHMgLyA2MCk7XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKHRpbWVJblNlY29uZHMgLSBtaW51dGVzICogNjApO1xuICByZXR1cm4gYCR7U3RyaW5nKG1pbnV0ZXMpfToke1N0cmluZyhzZWNvbmRzKS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbn07XG5cbi8vIHNyYy91c2UtdmlkZW8tY29udHJvbHMtcmVzaXplLnRzXG5pbXBvcnQgeyB1c2VNZW1vIGFzIHVzZU1lbW83IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgWF9TUEFDRVIgPSAxMDtcbnZhciBYX1BBRERJTkcgPSAxMjtcbnZhciB1c2VWaWRlb0NvbnRyb2xzUmVzaXplID0gKHtcbiAgYWxsb3dGdWxsc2NyZWVuOiBhbGxvd0Z1bGxTY3JlZW4sXG4gIHBsYXllcldpZHRoXG59KSA9PiB7XG4gIGNvbnN0IHJlc2l6ZUluZm8gPSB1c2VNZW1vNygoKSA9PiB7XG4gICAgY29uc3QgcGxheVBhdXNlSWNvblNpemUgPSBJQ09OX1NJWkU7XG4gICAgY29uc3Qgdm9sdW1lSWNvblNpemUgPSBJQ09OX1NJWkU7XG4gICAgY29uc3QgX2Z1bGxzY3JlZW5JY29uU2l6ZSA9IGFsbG93RnVsbFNjcmVlbiA/IGZ1bGxzY3JlZW5JY29uU2l6ZSA6IDA7XG4gICAgY29uc3QgZWxlbWVudHNTaXplID0gdm9sdW1lSWNvblNpemUgKyBwbGF5UGF1c2VJY29uU2l6ZSArIF9mdWxsc2NyZWVuSWNvblNpemUgKyBYX1BBRERJTkcgKiAyICsgWF9TUEFDRVIgKiAyO1xuICAgIGNvbnN0IG1heFRpbWVMYWJlbFdpZHRoID0gcGxheWVyV2lkdGggLSBlbGVtZW50c1NpemU7XG4gICAgY29uc3QgbWF4VGltZUxhYmVsV2lkdGhXaXRob3V0TmVnYXRpdmVWYWx1ZSA9IE1hdGgubWF4KG1heFRpbWVMYWJlbFdpZHRoLCAwKTtcbiAgICBjb25zdCBhdmFpbGFibGVUaW1lTGFiZWxXaWR0aElmVm9sdW1lT3BlbiA9IG1heFRpbWVMYWJlbFdpZHRoV2l0aG91dE5lZ2F0aXZlVmFsdWUgLSBWT0xVTUVfU0xJREVSX1dJRFRIO1xuICAgIGNvbnN0IGNvbXB1dGVkTGFiZWxXaWR0aCA9IGF2YWlsYWJsZVRpbWVMYWJlbFdpZHRoSWZWb2x1bWVPcGVuIDwgVk9MVU1FX1NMSURFUl9XSURUSCA/IG1heFRpbWVMYWJlbFdpZHRoV2l0aG91dE5lZ2F0aXZlVmFsdWUgOiBhdmFpbGFibGVUaW1lTGFiZWxXaWR0aElmVm9sdW1lT3BlbjtcbiAgICBjb25zdCBtaW5XaWR0aEZvckhvcml6b250YWxEaXNwbGF5ID0gY29tcHV0ZWRMYWJlbFdpZHRoICsgZWxlbWVudHNTaXplICsgVk9MVU1FX1NMSURFUl9XSURUSDtcbiAgICBjb25zdCBkaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXIgPSBwbGF5ZXJXaWR0aCA8IG1pbldpZHRoRm9ySG9yaXpvbnRhbERpc3BsYXk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1heFRpbWVMYWJlbFdpZHRoOiBtYXhUaW1lTGFiZWxXaWR0aFdpdGhvdXROZWdhdGl2ZVZhbHVlID09PSAwID8gbnVsbCA6IG1heFRpbWVMYWJlbFdpZHRoV2l0aG91dE5lZ2F0aXZlVmFsdWUsXG4gICAgICBkaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXJcbiAgICB9O1xuICB9LCBbYWxsb3dGdWxsU2NyZWVuLCBwbGF5ZXJXaWR0aF0pO1xuICByZXR1cm4gcmVzaXplSW5mbztcbn07XG5cbi8vIHNyYy9QbGF5ZXJDb250cm9scy50c3hcbmltcG9ydCB7IGpzeCBhcyBqc3g5LCBqc3hzIGFzIGpzeHM3LCBGcmFnbWVudCBhcyBGcmFnbWVudDIgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBncmFkaWVudFN0ZXBzID0gW1xuICAwLFxuICAwLjAxMyxcbiAgMC4wNDksXG4gIDAuMTA0LFxuICAwLjE3NSxcbiAgMC4yNTksXG4gIDAuMzUyLFxuICAwLjQ1LFxuICAwLjU1LFxuICAwLjY0OCxcbiAgMC43NDEsXG4gIDAuODI1LFxuICAwLjg5NixcbiAgMC45NTEsXG4gIDAuOTg3XG5dO1xudmFyIGdyYWRpZW50T3BhY2l0aWVzID0gW1xuICAwLFxuICA4LjEsXG4gIDE1LjUsXG4gIDIyLjUsXG4gIDI5LFxuICAzNS4zLFxuICA0MS4yLFxuICA0Ny4xLFxuICA1Mi45LFxuICA1OC44LFxuICA2NC43LFxuICA3MSxcbiAgNzcuNSxcbiAgODQuNSxcbiAgOTEuOVxuXTtcbnZhciBnbG9iYWxHcmFkaWVudE9wYWNpdHkgPSAxIC8gMC43O1xudmFyIGNvbnRhaW5lclN0eWxlMiA9IHtcbiAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDAlXCIsXG4gIHBhZGRpbmdUb3A6IDQwLFxuICBwYWRkaW5nQm90dG9tOiAxMCxcbiAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwke2dyYWRpZW50U3RlcHMubWFwKChnLCBpKSA9PiB7XG4gICAgcmV0dXJuIGBoc2xhKDAsIDAlLCAwJSwgJHtnfSkgJHtncmFkaWVudE9wYWNpdGllc1tpXSAqIGdsb2JhbEdyYWRpZW50T3BhY2l0eX0lYDtcbiAgfSkuam9pbihcIiwgXCIpfSwgaHNsKDAsIDAlLCAwJSkgMTAwJSlgLFxuICBiYWNrZ3JvdW5kU2l6ZTogXCJhdXRvIDE0NXB4XCIsXG4gIGRpc3BsYXk6IFwiZmxleFwiLFxuICBwYWRkaW5nUmlnaHQ6IFhfUEFERElORyxcbiAgcGFkZGluZ0xlZnQ6IFhfUEFERElORyxcbiAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgdHJhbnNpdGlvbjogXCJvcGFjaXR5IDAuM3NcIlxufTtcbnZhciBjb250cm9sc1JvdyA9IHtcbiAgZGlzcGxheTogXCJmbGV4XCIsXG4gIGZsZXhEaXJlY3Rpb246IFwicm93XCIsXG4gIHdpZHRoOiBcIjEwMCVcIixcbiAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBXZWJraXRVc2VyU2VsZWN0OiBcIm5vbmVcIlxufTtcbnZhciBsZWZ0UGFydFN0eWxlID0ge1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAgZmxleERpcmVjdGlvbjogXCJyb3dcIixcbiAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gIFdlYmtpdFVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiXG59O1xudmFyIHhTcGFjZXIgPSB7XG4gIHdpZHRoOiAxMlxufTtcbnZhciB5U3BhY2VyID0ge1xuICBoZWlnaHQ6IDhcbn07XG52YXIgZmxleDEgPSB7XG4gIGZsZXg6IDFcbn07XG52YXIgZnVsbHNjcmVlbiA9IHt9O1xudmFyIENvbnRyb2xzID0gKHtcbiAgZHVyYXRpb25JbkZyYW1lcyxcbiAgaXNGdWxsc2NyZWVuLFxuICBmcHMsXG4gIHBsYXllcixcbiAgc2hvd1ZvbHVtZUNvbnRyb2xzLFxuICBvbkZ1bGxzY3JlZW5CdXR0b25DbGljayxcbiAgYWxsb3dGdWxsc2NyZWVuLFxuICBvbkV4aXRGdWxsc2NyZWVuQnV0dG9uQ2xpY2ssXG4gIHNwYWNlS2V5VG9QbGF5T3JQYXVzZSxcbiAgb25TZWVrRW5kLFxuICBvblNlZWtTdGFydCxcbiAgaW5GcmFtZSxcbiAgb3V0RnJhbWUsXG4gIGluaXRpYWxseVNob3dDb250cm9scyxcbiAgY2FudmFzU2l6ZSxcbiAgcmVuZGVyUGxheVBhdXNlQnV0dG9uLFxuICByZW5kZXJGdWxsc2NyZWVuQnV0dG9uLFxuICBhbHdheXNTaG93Q29udHJvbHMsXG4gIHNob3dQbGF5YmFja1JhdGVDb250cm9sLFxuICBjb250YWluZXJSZWYsXG4gIGJ1ZmZlcmluZyxcbiAgaGlkZUNvbnRyb2xzV2hlblBvaW50ZXJEb2VzbnRNb3ZlLFxuICBvblBvaW50ZXJEb3duLFxuICBvbkRvdWJsZUNsaWNrLFxuICByZW5kZXJNdXRlQnV0dG9uLFxuICByZW5kZXJWb2x1bWVTbGlkZXJcbn0pID0+IHtcbiAgY29uc3QgcGxheUJ1dHRvblJlZiA9IHVzZVJlZjcobnVsbCk7XG4gIGNvbnN0IGZyYW1lID0gSW50ZXJuYWxzOS5UaW1lbGluZS51c2VUaW1lbGluZVBvc2l0aW9uKCk7XG4gIGNvbnN0IFtzdXBwb3J0c0Z1bGxzY3JlZW4sIHNldFN1cHBvcnRzRnVsbHNjcmVlbl0gPSB1c2VTdGF0ZTEwKGZhbHNlKTtcbiAgY29uc3QgaG92ZXJlZCA9IHVzZUhvdmVyU3RhdGUoY29udGFpbmVyUmVmLCBoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUpO1xuICBjb25zdCB7IG1heFRpbWVMYWJlbFdpZHRoLCBkaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXIgfSA9IHVzZVZpZGVvQ29udHJvbHNSZXNpemUoe1xuICAgIGFsbG93RnVsbHNjcmVlbixcbiAgICBwbGF5ZXJXaWR0aDogY2FudmFzU2l6ZT8ud2lkdGggPz8gMFxuICB9KTtcbiAgY29uc3QgW3Nob3VsZFNob3dJbml0aWFsbHksIHNldEluaXRpYWxseVNob3dDb250cm9sc10gPSB1c2VTdGF0ZTEwKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGluaXRpYWxseVNob3dDb250cm9scyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiBpbml0aWFsbHlTaG93Q29udHJvbHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5pdGlhbGx5U2hvd0NvbnRyb2xzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaW5pdGlhbGx5U2hvd0NvbnRyb2xzICUgMSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0aWFsbHlTaG93Q29udHJvbHMgbXVzdCBiZSBhbiBpbnRlZ2VyIG9yIGEgYm9vbGVhblwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChOdW1iZXIuaXNOYU4oaW5pdGlhbGx5U2hvd0NvbnRyb2xzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0aWFsbHlTaG93Q29udHJvbHMgbXVzdCBub3QgYmUgTmFOXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5pdGlhbGx5U2hvd0NvbnRyb2xzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0aWFsbHlTaG93Q29udHJvbHMgbXVzdCBiZSBmaW5pdGVcIik7XG4gICAgICB9XG4gICAgICBpZiAoaW5pdGlhbGx5U2hvd0NvbnRyb2xzIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5pdGlhbGx5U2hvd0NvbnRyb2xzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluaXRpYWxseVNob3dDb250cm9scztcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImluaXRpYWxseVNob3dDb250cm9scyBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgYm9vbGVhblwiKTtcbiAgfSk7XG4gIGNvbnN0IGNvbnRhaW5lckNzcyA9IHVzZU1lbW84KCgpID0+IHtcbiAgICBjb25zdCBzaG91bGRTaG93ID0gaG92ZXJlZCB8fCAhcGxheWVyLnBsYXlpbmcgfHwgc2hvdWxkU2hvd0luaXRpYWxseSB8fCBhbHdheXNTaG93Q29udHJvbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNvbnRhaW5lclN0eWxlMixcbiAgICAgIG9wYWNpdHk6IE51bWJlcihzaG91bGRTaG93KVxuICAgIH07XG4gIH0sIFtob3ZlcmVkLCBzaG91bGRTaG93SW5pdGlhbGx5LCBwbGF5ZXIucGxheWluZywgYWx3YXlzU2hvd0NvbnRyb2xzXSk7XG4gIHVzZUVmZmVjdDExKCgpID0+IHtcbiAgICBpZiAocGxheUJ1dHRvblJlZi5jdXJyZW50ICYmIHNwYWNlS2V5VG9QbGF5T3JQYXVzZSkge1xuICAgICAgcGxheUJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKHtcbiAgICAgICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcGxheWVyLnBsYXlpbmcsIHNwYWNlS2V5VG9QbGF5T3JQYXVzZV0pO1xuICB1c2VFZmZlY3QxMSgoKSA9PiB7XG4gICAgc2V0U3VwcG9ydHNGdWxsc2NyZWVuKCh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbmFibGVkIHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkKSkgPz8gZmFsc2UpO1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdDExKCgpID0+IHtcbiAgICBpZiAoc2hvdWxkU2hvd0luaXRpYWxseSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGltZSA9IHNob3VsZFNob3dJbml0aWFsbHkgPT09IHRydWUgPyAyMDAwIDogc2hvdWxkU2hvd0luaXRpYWxseTtcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXRJbml0aWFsbHlTaG93Q29udHJvbHMoZmFsc2UpO1xuICAgIH0sIHRpbWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVvdXQpO1xuICAgIH07XG4gIH0sIFtzaG91bGRTaG93SW5pdGlhbGx5XSk7XG4gIGNvbnN0IHRpbWVMYWJlbCA9IHVzZU1lbW84KCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgIGZvbnRGYW1pbHk6IFwic2Fucy1zZXJpZlwiLFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgbWF4V2lkdGg6IG1heFRpbWVMYWJlbFdpZHRoID09PSBudWxsID8gdW5kZWZpbmVkIDogbWF4VGltZUxhYmVsV2lkdGgsXG4gICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgIHRleHRPdmVyZmxvdzogXCJlbGxpcHNpc1wiXG4gICAgfTtcbiAgfSwgW21heFRpbWVMYWJlbFdpZHRoXSk7XG4gIGNvbnN0IHBsYXliYWNrUmF0ZXMgPSB1c2VNZW1vOCgoKSA9PiB7XG4gICAgaWYgKHNob3dQbGF5YmFja1JhdGVDb250cm9sID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gWzAuNSwgMC44LCAxLCAxLjIsIDEuNSwgMS44LCAyLCAyLjUsIDNdO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzaG93UGxheWJhY2tSYXRlQ29udHJvbCkpIHtcbiAgICAgIGZvciAoY29uc3QgcmF0ZSBvZiBzaG93UGxheWJhY2tSYXRlQ29udHJvbCkge1xuICAgICAgICBpZiAodHlwZW9mIHJhdGUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdmVyeSBpdGVtIGluIHNob3dQbGF5YmFja1JhdGVDb250cm9sIG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhdGUgPD0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZXJ5IGl0ZW0gaW4gc2hvd1BsYXliYWNrUmF0ZUNvbnRyb2wgbXVzdCBiZSBwb3NpdGl2ZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3dQbGF5YmFja1JhdGVDb250cm9sO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgW3Nob3dQbGF5YmFja1JhdGVDb250cm9sXSk7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjcobnVsbCk7XG4gIGNvbnN0IGZsZXhSZWYgPSB1c2VSZWY3KG51bGwpO1xuICBjb25zdCBvblBvaW50ZXJEb3duSWZDb250YWluZXIgPSB1c2VDYWxsYmFjazcoKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHJlZi5jdXJyZW50IHx8IGUudGFyZ2V0ID09PSBmbGV4UmVmLmN1cnJlbnQpIHtcbiAgICAgIG9uUG9pbnRlckRvd24/LihlKTtcbiAgICB9XG4gIH0sIFtvblBvaW50ZXJEb3duXSk7XG4gIGNvbnN0IG9uRG91YmxlQ2xpY2tJZkNvbnRhaW5lciA9IHVzZUNhbGxiYWNrNygoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldCA9PT0gcmVmLmN1cnJlbnQgfHwgZS50YXJnZXQgPT09IGZsZXhSZWYuY3VycmVudCkge1xuICAgICAgb25Eb3VibGVDbGljaz8uKGUpO1xuICAgIH1cbiAgfSwgW29uRG91YmxlQ2xpY2tdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3hzNyhcImRpdlwiLCB7XG4gICAgcmVmLFxuICAgIHN0eWxlOiBjb250YWluZXJDc3MsXG4gICAgb25Qb2ludGVyRG93bjogb25Qb2ludGVyRG93bklmQ29udGFpbmVyLFxuICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2tJZkNvbnRhaW5lcixcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLyogQF9fUFVSRV9fICovIGpzeHM3KFwiZGl2XCIsIHtcbiAgICAgICAgcmVmOiBmbGV4UmVmLFxuICAgICAgICBzdHlsZTogY29udHJvbHNSb3csXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgLyogQF9fUFVSRV9fICovIGpzeHM3KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIHN0eWxlOiBsZWZ0UGFydFN0eWxlLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgLyogQF9fUFVSRV9fICovIGpzeDkoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICAgIHJlZjogcGxheUJ1dHRvblJlZixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBwbGF5ZXJCdXR0b25TdHlsZSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBwbGF5ZXIucGxheWluZyA/IHBsYXllci5wYXVzZSA6IHBsYXllci5wbGF5LFxuICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBwbGF5ZXIucGxheWluZyA/IFwiUGF1c2UgdmlkZW9cIiA6IFwiUGxheSB2aWRlb1wiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwbGF5ZXIucGxheWluZyA/IFwiUGF1c2UgdmlkZW9cIiA6IFwiUGxheSB2aWRlb1wiLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiByZW5kZXJQbGF5UGF1c2VCdXR0b24gPT09IG51bGwgPyAvKiBAX19QVVJFX18gKi8ganN4OShEZWZhdWx0UGxheVBhdXNlQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICBidWZmZXJpbmcsXG4gICAgICAgICAgICAgICAgICBwbGF5aW5nOiBwbGF5ZXIucGxheWluZ1xuICAgICAgICAgICAgICAgIH0pIDogcmVuZGVyUGxheVBhdXNlQnV0dG9uKHtcbiAgICAgICAgICAgICAgICAgIHBsYXlpbmc6IHBsYXllci5wbGF5aW5nLFxuICAgICAgICAgICAgICAgICAgaXNCdWZmZXJpbmc6IGJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgIH0pID8/IC8qIEBfX1BVUkVfXyAqLyBqc3g5KERlZmF1bHRQbGF5UGF1c2VCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgIGJ1ZmZlcmluZyxcbiAgICAgICAgICAgICAgICAgIHBsYXlpbmc6IHBsYXllci5wbGF5aW5nXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHNob3dWb2x1bWVDb250cm9scyA/IC8qIEBfX1BVUkVfXyAqLyBqc3hzNyhGcmFnbWVudDIsIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgLyogQF9fUFVSRV9fICovIGpzeDkoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogeFNwYWNlclxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4OShNZWRpYVZvbHVtZVNsaWRlciwge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJNdXRlQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJWb2x1bWVTbGlkZXIsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlWZXJ0aWNhbFZvbHVtZVNsaWRlclxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0pIDogbnVsbCxcbiAgICAgICAgICAgICAgLyogQF9fUFVSRV9fICovIGpzeDkoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB4U3BhY2VyXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4czcoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB0aW1lTGFiZWwsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgIGZvcm1hdFRpbWUoZnJhbWUgLyBmcHMpLFxuICAgICAgICAgICAgICAgICAgXCIgLyBcIixcbiAgICAgICAgICAgICAgICAgIGZvcm1hdFRpbWUoZHVyYXRpb25JbkZyYW1lcyAvIGZwcylcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4OShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHhTcGFjZXJcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4OShcImRpdlwiLCB7XG4gICAgICAgICAgICBzdHlsZTogZmxleDFcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBwbGF5YmFja1JhdGVzICYmIGNhbnZhc1NpemUgJiYgLyogQF9fUFVSRV9fICovIGpzeDkoUGxheWJhY2tyYXRlQ29udHJvbCwge1xuICAgICAgICAgICAgY2FudmFzU2l6ZSxcbiAgICAgICAgICAgIHBsYXliYWNrUmF0ZXNcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBwbGF5YmFja1JhdGVzICYmIHN1cHBvcnRzRnVsbHNjcmVlbiAmJiBhbGxvd0Z1bGxzY3JlZW4gPyAvKiBAX19QVVJFX18gKi8ganN4OShcImRpdlwiLCB7XG4gICAgICAgICAgICBzdHlsZTogeFNwYWNlclxuICAgICAgICAgIH0pIDogbnVsbCxcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8ganN4OShcImRpdlwiLCB7XG4gICAgICAgICAgICBzdHlsZTogZnVsbHNjcmVlbixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBzdXBwb3J0c0Z1bGxzY3JlZW4gJiYgYWxsb3dGdWxsc2NyZWVuID8gLyogQF9fUFVSRV9fICovIGpzeDkoXCJidXR0b25cIiwge1xuICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogaXNGdWxsc2NyZWVuID8gXCJFeGl0IGZ1bGxzY3JlZW5cIiA6IFwiRW50ZXIgRnVsbHNjcmVlblwiLFxuICAgICAgICAgICAgICB0aXRsZTogaXNGdWxsc2NyZWVuID8gXCJFeGl0IGZ1bGxzY3JlZW5cIiA6IFwiRW50ZXIgRnVsbHNjcmVlblwiLFxuICAgICAgICAgICAgICBzdHlsZTogcGxheWVyQnV0dG9uU3R5bGUsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IGlzRnVsbHNjcmVlbiA/IG9uRXhpdEZ1bGxzY3JlZW5CdXR0b25DbGljayA6IG9uRnVsbHNjcmVlbkJ1dHRvbkNsaWNrLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogcmVuZGVyRnVsbHNjcmVlbkJ1dHRvbiA9PT0gbnVsbCA/IC8qIEBfX1BVUkVfXyAqLyBqc3g5KEZ1bGxzY3JlZW5JY29uLCB7XG4gICAgICAgICAgICAgICAgaXNGdWxsc2NyZWVuXG4gICAgICAgICAgICAgIH0pIDogcmVuZGVyRnVsbHNjcmVlbkJ1dHRvbih7IGlzRnVsbHNjcmVlbiB9KVxuICAgICAgICAgICAgfSkgOiBudWxsXG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSksXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4OShcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB5U3BhY2VyXG4gICAgICB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3g5KFBsYXllclNlZWtCYXIsIHtcbiAgICAgICAgb25TZWVrRW5kLFxuICAgICAgICBvblNlZWtTdGFydCxcbiAgICAgICAgZHVyYXRpb25JbkZyYW1lcyxcbiAgICAgICAgaW5GcmFtZSxcbiAgICAgICAgb3V0RnJhbWVcbiAgICAgIH0pXG4gICAgXVxuICB9KTtcbn07XG5cbi8vIHNyYy9lcnJvci1ib3VuZGFyeS50c3hcbmltcG9ydCBSZWFjdDcgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBqc3ggYXMganN4MTAgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbnZhciBlcnJvclN0eWxlID0ge1xuICBkaXNwbGF5OiBcImZsZXhcIixcbiAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gIGZsZXg6IDEsXG4gIGhlaWdodDogXCIxMDAlXCIsXG4gIHdpZHRoOiBcIjEwMCVcIlxufTtcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0Ny5Db21wb25lbnQge1xuICBzdGF0ZSA9IHsgaGFzRXJyb3I6IG51bGwgfTtcbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7IGhhc0Vycm9yOiBlcnJvciB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yKSB7XG4gICAgdGhpcy5wcm9wcy5vbkVycm9yKGVycm9yKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4MTAoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogZXJyb3JTdHlsZSxcbiAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuZXJyb3JGYWxsYmFjayh7XG4gICAgICAgICAgZXJyb3I6IHRoaXMuc3RhdGUuaGFzRXJyb3JcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuXG4vLyBzcmMvcGxheWVyLWNzcy1jbGFzc25hbWUudHNcbnZhciBQTEFZRVJfQ1NTX0NMQVNTTkFNRSA9IFwiX19yZW1vdGlvbi1wbGF5ZXJcIjtcblxuLy8gc3JjL3V0aWxzL2lzLW5vZGUudHNcbnZhciBJU19OT0RFID0gdHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiO1xuXG4vLyBzcmMvdXRpbHMvdXNlLWNsaWNrLXByZXZlbnRpb24tb24tZG91YmxlLWNsaWNrLnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazksIHVzZU1lbW8gYXMgdXNlTWVtbzEwIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy91dGlscy9jYW5jZWxsYWJsZS1wcm9taXNlLnRzXG52YXIgY2FuY2VsbGFibGVQcm9taXNlID0gKHByb21pc2UpID0+IHtcbiAgbGV0IGlzQ2FuY2VsZWQgPSBmYWxzZTtcbiAgY29uc3Qgd3JhcHBlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcHJvbWlzZS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKGlzQ2FuY2VsZWQpIHtcbiAgICAgICAgcmVqZWN0KHsgaXNDYW5jZWxlZCwgdmFsdWUgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgcmVqZWN0KHsgaXNDYW5jZWxlZCwgZXJyb3IgfSk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHByb21pc2U6IHdyYXBwZWRQcm9taXNlLFxuICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgaXNDYW5jZWxlZCA9IHRydWU7XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL3V0aWxzL2RlbGF5LnRzXG52YXIgZGVsYXkgPSAobikgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbikpO1xuXG4vLyBzcmMvdXRpbHMvdXNlLWNhbmNlbGxhYmxlLXByb21pc2VzLnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazgsIHVzZU1lbW8gYXMgdXNlTWVtbzksIHVzZVJlZiBhcyB1c2VSZWY4IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlQ2FuY2VsbGFibGVQcm9taXNlcyA9ICgpID0+IHtcbiAgY29uc3QgcGVuZGluZ1Byb21pc2VzID0gdXNlUmVmOChbXSk7XG4gIGNvbnN0IGFwcGVuZFBlbmRpbmdQcm9taXNlID0gdXNlQ2FsbGJhY2s4KChwcm9taXNlKSA9PiB7XG4gICAgcGVuZGluZ1Byb21pc2VzLmN1cnJlbnQgPSBbLi4ucGVuZGluZ1Byb21pc2VzLmN1cnJlbnQsIHByb21pc2VdO1xuICB9LCBbXSk7XG4gIGNvbnN0IHJlbW92ZVBlbmRpbmdQcm9taXNlID0gdXNlQ2FsbGJhY2s4KChwcm9taXNlKSA9PiB7XG4gICAgcGVuZGluZ1Byb21pc2VzLmN1cnJlbnQgPSBwZW5kaW5nUHJvbWlzZXMuY3VycmVudC5maWx0ZXIoKHApID0+IHAgIT09IHByb21pc2UpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGNsZWFyUGVuZGluZ1Byb21pc2VzID0gdXNlQ2FsbGJhY2s4KCgpID0+IHBlbmRpbmdQcm9taXNlcy5jdXJyZW50Lm1hcCgocCkgPT4gcC5jYW5jZWwoKSksIFtdKTtcbiAgY29uc3QgYXBpID0gdXNlTWVtbzkoKCkgPT4gKHtcbiAgICBhcHBlbmRQZW5kaW5nUHJvbWlzZSxcbiAgICByZW1vdmVQZW5kaW5nUHJvbWlzZSxcbiAgICBjbGVhclBlbmRpbmdQcm9taXNlc1xuICB9KSwgW2FwcGVuZFBlbmRpbmdQcm9taXNlLCBjbGVhclBlbmRpbmdQcm9taXNlcywgcmVtb3ZlUGVuZGluZ1Byb21pc2VdKTtcbiAgcmV0dXJuIGFwaTtcbn07XG5cbi8vIHNyYy91dGlscy91c2UtY2xpY2stcHJldmVudGlvbi1vbi1kb3VibGUtY2xpY2sudHNcbnZhciB1c2VDbGlja1ByZXZlbnRpb25PbkRvdWJsZUNsaWNrID0gKG9uQ2xpY2ssIG9uRG91YmxlQ2xpY2ssIGRvdWJsZUNsaWNrVG9GdWxsc2NyZWVuKSA9PiB7XG4gIGNvbnN0IGFwaSA9IHVzZUNhbmNlbGxhYmxlUHJvbWlzZXMoKTtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjazkoYXN5bmMgKGUpID0+IHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudCA/IGUucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIiA6IGUubmF0aXZlRXZlbnQucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIikge1xuICAgICAgb25DbGljayhlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXBpLmNsZWFyUGVuZGluZ1Byb21pc2VzKCk7XG4gICAgY29uc3Qgd2FpdEZvckNsaWNrID0gY2FuY2VsbGFibGVQcm9taXNlKGRlbGF5KDIwMCkpO1xuICAgIGFwaS5hcHBlbmRQZW5kaW5nUHJvbWlzZSh3YWl0Rm9yQ2xpY2spO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3YWl0Rm9yQ2xpY2sucHJvbWlzZTtcbiAgICAgIGFwaS5yZW1vdmVQZW5kaW5nUHJvbWlzZSh3YWl0Rm9yQ2xpY2spO1xuICAgICAgb25DbGljayhlKTtcbiAgICB9IGNhdGNoIChlcnJvckluZm8pIHtcbiAgICAgIGNvbnN0IGluZm8gPSBlcnJvckluZm87XG4gICAgICBhcGkucmVtb3ZlUGVuZGluZ1Byb21pc2Uod2FpdEZvckNsaWNrKTtcbiAgICAgIGlmICghaW5mby5pc0NhbmNlbGVkKSB7XG4gICAgICAgIHRocm93IGluZm8uZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYXBpLCBvbkNsaWNrXSk7XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJEb3duID0gdXNlQ2FsbGJhY2s5KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIChuZXdFdnQpID0+IHtcbiAgICAgIGhhbmRsZUNsaWNrKG5ld0V2dCk7XG4gICAgfSwge1xuICAgICAgb25jZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbaGFuZGxlQ2xpY2tdKTtcbiAgY29uc3QgaGFuZGxlRG91YmxlQ2xpY2sgPSB1c2VDYWxsYmFjazkoKCkgPT4ge1xuICAgIGFwaS5jbGVhclBlbmRpbmdQcm9taXNlcygpO1xuICAgIG9uRG91YmxlQ2xpY2soKTtcbiAgfSwgW2FwaSwgb25Eb3VibGVDbGlja10pO1xuICBjb25zdCByZXR1cm5WYWx1ZSA9IHVzZU1lbW8xMCgoKSA9PiB7XG4gICAgaWYgKCFkb3VibGVDbGlja1RvRnVsbHNjcmVlbikge1xuICAgICAgcmV0dXJuIHsgaGFuZGxlUG9pbnRlckRvd246IG9uQ2xpY2ssIGhhbmRsZURvdWJsZUNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaGFuZGxlUG9pbnRlckRvd24sIGhhbmRsZURvdWJsZUNsaWNrIH07XG4gIH0sIFtkb3VibGVDbGlja1RvRnVsbHNjcmVlbiwgaGFuZGxlRG91YmxlQ2xpY2ssIGhhbmRsZVBvaW50ZXJEb3duLCBvbkNsaWNrXSk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn07XG5cbi8vIHNyYy9QbGF5ZXJVSS50c3hcbmltcG9ydCB7IGpzeCBhcyBqc3gxMSwganN4cyBhcyBqc3hzOCwgRnJhZ21lbnQgYXMgRnJhZ21lbnQzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgcmVhY3RWZXJzaW9uID0gUmVhY3Q4LnZlcnNpb24uc3BsaXQoXCIuXCIpWzBdO1xuaWYgKHJlYWN0VmVyc2lvbiA9PT0gXCIwXCIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBWZXJzaW9uICR7cmVhY3RWZXJzaW9ufSBvZiBcInJlYWN0XCIgaXMgbm90IHN1cHBvcnRlZCBieSBSZW1vdGlvbmApO1xufVxudmFyIGRvZXNSZWFjdFZlcnNpb25TdXBwb3J0U3VzcGVuc2UgPSBwYXJzZUludChyZWFjdFZlcnNpb24sIDEwKSA+PSAxODtcbnZhciBQbGF5ZXJVSSA9ICh7XG4gIGNvbnRyb2xzLFxuICBzdHlsZSxcbiAgbG9vcCxcbiAgYXV0b1BsYXksXG4gIGFsbG93RnVsbHNjcmVlbixcbiAgaW5wdXRQcm9wcyxcbiAgY2xpY2tUb1BsYXksXG4gIHNob3dWb2x1bWVDb250cm9scyxcbiAgZG91YmxlQ2xpY2tUb0Z1bGxzY3JlZW4sXG4gIHNwYWNlS2V5VG9QbGF5T3JQYXVzZSxcbiAgZXJyb3JGYWxsYmFjayxcbiAgcGxheWJhY2tSYXRlLFxuICByZW5kZXJMb2FkaW5nLFxuICByZW5kZXJQb3N0ZXIsXG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lMixcbiAgbW92ZVRvQmVnaW5uaW5nV2hlbkVuZGVkLFxuICBzaG93UG9zdGVyV2hlblVucGxheWVkLFxuICBzaG93UG9zdGVyV2hlbkVuZGVkLFxuICBzaG93UG9zdGVyV2hlblBhdXNlZCxcbiAgc2hvd1Bvc3RlcldoZW5CdWZmZXJpbmcsXG4gIGluRnJhbWUsXG4gIG91dEZyYW1lLFxuICBpbml0aWFsbHlTaG93Q29udHJvbHMsXG4gIHJlbmRlckZ1bGxzY3JlZW46IHJlbmRlckZ1bGxzY3JlZW5CdXR0b24sXG4gIHJlbmRlclBsYXlQYXVzZUJ1dHRvbixcbiAgcmVuZGVyTXV0ZUJ1dHRvbixcbiAgcmVuZGVyVm9sdW1lU2xpZGVyLFxuICBhbHdheXNTaG93Q29udHJvbHMsXG4gIHNob3dQbGF5YmFja1JhdGVDb250cm9sLFxuICBwb3N0ZXJGaWxsTW9kZSxcbiAgYnVmZmVyU3RhdGVEZWxheUluTWlsbGlzZWNvbmRzLFxuICBoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUsXG4gIG92ZXJmbG93VmlzaWJsZSxcbiAgYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvclxufSwgcmVmKSA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IEludGVybmFsczEwLnVzZVVuc2FmZVZpZGVvQ29uZmlnKCk7XG4gIGNvbnN0IHZpZGVvID0gSW50ZXJuYWxzMTAudXNlVmlkZW8oKTtcbiAgY29uc3QgY29udGFpbmVyID0gdXNlUmVmOShudWxsKTtcbiAgY29uc3QgY2FudmFzU2l6ZSA9IHVzZUVsZW1lbnRTaXplKGNvbnRhaW5lciwge1xuICAgIHRyaWdnZXJPbldpbmRvd1Jlc2l6ZTogZmFsc2UsXG4gICAgc2hvdWxkQXBwbHlDc3NUcmFuc2Zvcm1zOiBmYWxzZVxuICB9KTtcbiAgY29uc3QgW2hhc1BhdXNlZFRvUmVzdW1lLCBzZXRIYXNQYXVzZWRUb1Jlc3VtZV0gPSB1c2VTdGF0ZTExKGZhbHNlKTtcbiAgY29uc3QgW3Nob3VsZEF1dG9wbGF5LCBzZXRTaG91bGRBdXRvUGxheV0gPSB1c2VTdGF0ZTExKGF1dG9QbGF5KTtcbiAgY29uc3QgW2lzRnVsbHNjcmVlbiwgc2V0SXNGdWxsc2NyZWVuXSA9IHVzZVN0YXRlMTEoKCkgPT4gZmFsc2UpO1xuICBjb25zdCBbc2Vla2luZywgc2V0U2Vla2luZ10gPSB1c2VTdGF0ZTExKGZhbHNlKTtcbiAgY29uc3Qgc3VwcG9ydHNGdWxsU2NyZWVuID0gdXNlTWVtbzExKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50LmZ1bGxzY3JlZW5FbmFibGVkIHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkKTtcbiAgfSwgW10pO1xuICBjb25zdCBwbGF5ZXIgPSB1c2VQbGF5ZXIoKTtcbiAgdXNlUGxheWJhY2soe1xuICAgIGxvb3AsXG4gICAgcGxheWJhY2tSYXRlLFxuICAgIG1vdmVUb0JlZ2lubmluZ1doZW5FbmRlZCxcbiAgICBpbkZyYW1lLFxuICAgIG91dEZyYW1lLFxuICAgIGZyYW1lUmVmOiBwbGF5ZXIucmVtb3Rpb25JbnRlcm5hbF9jdXJyZW50RnJhbWVSZWYsXG4gICAgYnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvclxuICB9KTtcbiAgdXNlRWZmZWN0MTIoKCkgPT4ge1xuICAgIGlmIChoYXNQYXVzZWRUb1Jlc3VtZSAmJiAhcGxheWVyLnBsYXlpbmcpIHtcbiAgICAgIHNldEhhc1BhdXNlZFRvUmVzdW1lKGZhbHNlKTtcbiAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgfVxuICB9LCBbaGFzUGF1c2VkVG9SZXN1bWUsIHBsYXllcl0pO1xuICB1c2VFZmZlY3QxMigoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50IH0gPSBjb250YWluZXI7XG4gICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9uRnVsbHNjcmVlbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGN1cnJlbnQgfHwgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgPT09IGN1cnJlbnQ7XG4gICAgICBzZXRJc0Z1bGxzY3JlZW4obmV3VmFsdWUpO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgb25GdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLCBvbkZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZnVsbHNjcmVlbmNoYW5nZVwiLCBvbkZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIiwgb25GdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHRvZ2dsZSA9IHVzZUNhbGxiYWNrMTAoKGUpID0+IHtcbiAgICBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICBwbGF5ZXIucGF1c2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxheWVyLnBsYXkoZSk7XG4gICAgfVxuICB9LCBbcGxheWVyXSk7XG4gIGNvbnN0IHJlcXVlc3RGdWxsc2NyZWVuID0gdXNlQ2FsbGJhY2sxMCgoKSA9PiB7XG4gICAgaWYgKCFhbGxvd0Z1bGxzY3JlZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFsbG93RnVsbHNjcmVlbiBpcyBmYWxzZVwiKTtcbiAgICB9XG4gICAgaWYgKCFzdXBwb3J0c0Z1bGxTY3JlZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG9lc250IHN1cHBvcnQgZnVsbHNjcmVlblwiKTtcbiAgICB9XG4gICAgaWYgKCFjb250YWluZXIuY3VycmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcGxheWVyIHJlZiBmb3VuZFwiKTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5lci5jdXJyZW50LndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgICBjb250YWluZXIuY3VycmVudC53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuY3VycmVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgIH1cbiAgfSwgW2FsbG93RnVsbHNjcmVlbiwgc3VwcG9ydHNGdWxsU2NyZWVuXSk7XG4gIGNvbnN0IGV4aXRGdWxsc2NyZWVuID0gdXNlQ2FsbGJhY2sxMCgoKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xuICAgIH1cbiAgfSwgW10pO1xuICB1c2VFZmZlY3QxMigoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50IH0gPSBjb250YWluZXI7XG4gICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxzY3JlZW5DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgPz8gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQ7XG4gICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50ID09PSBjb250YWluZXIuY3VycmVudCkge1xuICAgICAgICBwbGF5ZXIuZW1pdHRlci5kaXNwYXRjaEZ1bGxzY3JlZW5DaGFuZ2Uoe1xuICAgICAgICAgIGlzRnVsbHNjcmVlbjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllci5lbWl0dGVyLmRpc3BhdGNoRnVsbHNjcmVlbkNoYW5nZSh7XG4gICAgICAgICAgaXNGdWxsc2NyZWVuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIiwgZnVsbHNjcmVlbkNoYW5nZSk7XG4gICAgY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZnVsbHNjcmVlbmNoYW5nZVwiLCBmdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLCBmdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICAgIGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgZnVsbHNjcmVlbkNoYW5nZSk7XG4gICAgfTtcbiAgfSwgW3BsYXllci5lbWl0dGVyXSk7XG4gIGNvbnN0IGR1cmF0aW9uSW5GcmFtZXMgPSBjb25maWc/LmR1cmF0aW9uSW5GcmFtZXMgPz8gMTtcbiAgY29uc3QgbGF5b3V0ID0gdXNlTWVtbzExKCgpID0+IHtcbiAgICBpZiAoIWNvbmZpZyB8fCAhY2FudmFzU2l6ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjYWxjdWxhdGVDYW52YXNUcmFuc2Zvcm1hdGlvbih7XG4gICAgICBjYW52YXNTaXplLFxuICAgICAgY29tcG9zaXRpb25IZWlnaHQ6IGNvbmZpZy5oZWlnaHQsXG4gICAgICBjb21wb3NpdGlvbldpZHRoOiBjb25maWcud2lkdGgsXG4gICAgICBwcmV2aWV3U2l6ZTogXCJhdXRvXCJcbiAgICB9KTtcbiAgfSwgW2NhbnZhc1NpemUsIGNvbmZpZ10pO1xuICBjb25zdCBzY2FsZSA9IGxheW91dD8uc2NhbGUgPz8gMTtcbiAgY29uc3QgaW5pdGlhbFNjYWxlSWdub3JlZCA9IHVzZVJlZjkoZmFsc2UpO1xuICB1c2VFZmZlY3QxMigoKSA9PiB7XG4gICAgaWYgKCFpbml0aWFsU2NhbGVJZ25vcmVkLmN1cnJlbnQpIHtcbiAgICAgIGluaXRpYWxTY2FsZUlnbm9yZWQuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBsYXllci5lbWl0dGVyLmRpc3BhdGNoU2NhbGVDaGFuZ2Uoc2NhbGUpO1xuICB9LCBbcGxheWVyLmVtaXR0ZXIsIHNjYWxlXSk7XG4gIGNvbnN0IHsgc2V0TWVkaWFWb2x1bWUsIHNldE1lZGlhTXV0ZWQgfSA9IHVzZUNvbnRleHQ2KEludGVybmFsczEwLlNldE1lZGlhVm9sdW1lQ29udGV4dCk7XG4gIGNvbnN0IHsgbWVkaWFNdXRlZCwgbWVkaWFWb2x1bWUgfSA9IHVzZUNvbnRleHQ2KEludGVybmFsczEwLk1lZGlhVm9sdW1lQ29udGV4dCk7XG4gIHVzZUVmZmVjdDEyKCgpID0+IHtcbiAgICBwbGF5ZXIuZW1pdHRlci5kaXNwYXRjaFZvbHVtZUNoYW5nZShtZWRpYVZvbHVtZSk7XG4gIH0sIFtwbGF5ZXIuZW1pdHRlciwgbWVkaWFWb2x1bWVdKTtcbiAgY29uc3QgaXNNdXRlZCA9IG1lZGlhTXV0ZWQgfHwgbWVkaWFWb2x1bWUgPT09IDA7XG4gIHVzZUVmZmVjdDEyKCgpID0+IHtcbiAgICBwbGF5ZXIuZW1pdHRlci5kaXNwYXRjaE11dGVDaGFuZ2Uoe1xuICAgICAgaXNNdXRlZFxuICAgIH0pO1xuICB9LCBbcGxheWVyLmVtaXR0ZXIsIGlzTXV0ZWRdKTtcbiAgY29uc3QgW3Nob3dCdWZmZXJJbmRpY2F0b3IsIHNldFNob3dCdWZmZXJTdGF0ZV0gPSB1c2VTdGF0ZTExKGZhbHNlKTtcbiAgdXNlRWZmZWN0MTIoKCkgPT4ge1xuICAgIGxldCB0aW1lb3V0ID0gbnVsbDtcbiAgICBsZXQgc3RvcHBlZCA9IGZhbHNlO1xuICAgIGNvbnN0IG9uQnVmZmVyID0gKCkgPT4ge1xuICAgICAgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXRlRGVsYXlJbk1pbGxpc2Vjb25kcyA9PT0gMCkge1xuICAgICAgICAgIHNldFNob3dCdWZmZXJTdGF0ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgc2V0U2hvd0J1ZmZlclN0YXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGJ1ZmZlclN0YXRlRGVsYXlJbk1pbGxpc2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb25SZXN1bWUgPSAoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgc2V0U2hvd0J1ZmZlclN0YXRlKGZhbHNlKTtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgcGxheWVyLmVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndhaXRpbmdcIiwgb25CdWZmZXIpO1xuICAgIHBsYXllci5lbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXN1bWVcIiwgb25SZXN1bWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwbGF5ZXIuZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwid2FpdGluZ1wiLCBvbkJ1ZmZlcik7XG4gICAgICBwbGF5ZXIuZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzdW1lXCIsIG9uUmVzdW1lKTtcbiAgICAgIHNldFNob3dCdWZmZXJTdGF0ZShmYWxzZSk7XG4gICAgICBpZiAodGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB9XG4gICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbYnVmZmVyU3RhdGVEZWxheUluTWlsbGlzZWNvbmRzLCBwbGF5ZXIuZW1pdHRlcl0pO1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB7XG4gICAgICBwbGF5OiBwbGF5ZXIucGxheSxcbiAgICAgIHBhdXNlOiAoKSA9PiB7XG4gICAgICAgIHNldEhhc1BhdXNlZFRvUmVzdW1lKGZhbHNlKTtcbiAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICB9LFxuICAgICAgdG9nZ2xlLFxuICAgICAgZ2V0Q29udGFpbmVyTm9kZTogKCkgPT4gY29udGFpbmVyLmN1cnJlbnQsXG4gICAgICBnZXRDdXJyZW50RnJhbWU6IHBsYXllci5nZXRDdXJyZW50RnJhbWUsXG4gICAgICBpc1BsYXlpbmc6IHBsYXllci5pc1BsYXlpbmcsXG4gICAgICBzZWVrVG86IChmKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhc3RGcmFtZSA9IGR1cmF0aW9uSW5GcmFtZXMgLSAxO1xuICAgICAgICBjb25zdCBmcmFtZVRvU2Vla1RvID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obGFzdEZyYW1lLCBmKSk7XG4gICAgICAgIGlmIChwbGF5ZXIuaXNQbGF5aW5nKCkpIHtcbiAgICAgICAgICBjb25zdCBwYXVzZVRvUmVzdW1lID0gZnJhbWVUb1NlZWtUbyAhPT0gbGFzdEZyYW1lIHx8IGxvb3A7XG4gICAgICAgICAgc2V0SGFzUGF1c2VkVG9SZXN1bWUocGF1c2VUb1Jlc3VtZSk7XG4gICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyYW1lVG9TZWVrVG8gPT09IGxhc3RGcmFtZSAmJiAhbG9vcCkge1xuICAgICAgICAgIHBsYXllci5lbWl0dGVyLmRpc3BhdGNoRW5kZWQoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIuc2VlayhmcmFtZVRvU2Vla1RvKTtcbiAgICAgIH0sXG4gICAgICBpc0Z1bGxzY3JlZW46ICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50IH0gPSBjb250YWluZXI7XG4gICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGN1cnJlbnQgfHwgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgPT09IGN1cnJlbnQ7XG4gICAgICB9LFxuICAgICAgcmVxdWVzdEZ1bGxzY3JlZW4sXG4gICAgICBleGl0RnVsbHNjcmVlbixcbiAgICAgIGdldFZvbHVtZTogKCkgPT4ge1xuICAgICAgICBpZiAobWVkaWFNdXRlZCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYVZvbHVtZTtcbiAgICAgIH0sXG4gICAgICBzZXRWb2x1bWU6ICh2b2wpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2b2wgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBzZXRWb2x1bWUoKSB0YWtlcyBhIG51bWJlciwgZ290IHZhbHVlIG9mIHR5cGUgJHt0eXBlb2Ygdm9sfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05hTih2b2wpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgc2V0Vm9sdW1lKCkgZ290IGEgbnVtYmVyIHRoYXQgaXMgTmFOLiBWb2x1bWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZvbCA8IDAgfHwgdm9sID4gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHNldFZvbHVtZSgpIGdvdCBhIG51bWJlciB0aGF0IGlzIG91dCBvZiByYW5nZS4gTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEsIGdvdCAke3R5cGVvZiB2b2x9YCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0TWVkaWFWb2x1bWUodm9sKTtcbiAgICAgIH0sXG4gICAgICBpc011dGVkOiAoKSA9PiBpc011dGVkLFxuICAgICAgbXV0ZTogKCkgPT4ge1xuICAgICAgICBzZXRNZWRpYU11dGVkKHRydWUpO1xuICAgICAgfSxcbiAgICAgIHVubXV0ZTogKCkgPT4ge1xuICAgICAgICBzZXRNZWRpYU11dGVkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBnZXRTY2FsZTogKCkgPT4gc2NhbGUsXG4gICAgICBwYXVzZUFuZFJldHVyblRvUGxheVN0YXJ0OiAoKSA9PiB7XG4gICAgICAgIHBsYXllci5wYXVzZUFuZFJldHVyblRvUGxheVN0YXJ0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwbGF5ZXIuZW1pdHRlciwgbWV0aG9kcyk7XG4gIH0sIFtcbiAgICBkdXJhdGlvbkluRnJhbWVzLFxuICAgIGV4aXRGdWxsc2NyZWVuLFxuICAgIGxvb3AsXG4gICAgbWVkaWFNdXRlZCxcbiAgICBpc011dGVkLFxuICAgIG1lZGlhVm9sdW1lLFxuICAgIHBsYXllcixcbiAgICByZXF1ZXN0RnVsbHNjcmVlbixcbiAgICBzZXRNZWRpYU11dGVkLFxuICAgIHNldE1lZGlhVm9sdW1lLFxuICAgIHRvZ2dsZSxcbiAgICBzY2FsZVxuICBdKTtcbiAgY29uc3QgVmlkZW9Db21wb25lbnQgPSB2aWRlbyA/IHZpZGVvLmNvbXBvbmVudCA6IG51bGw7XG4gIGNvbnN0IG91dGVyU3R5bGUgPSB1c2VNZW1vMTEoKCkgPT4ge1xuICAgIHJldHVybiBjYWxjdWxhdGVPdXRlclN0eWxlKHtcbiAgICAgIGNhbnZhc1NpemUsXG4gICAgICBjb25maWcsXG4gICAgICBzdHlsZSxcbiAgICAgIG92ZXJmbG93VmlzaWJsZSxcbiAgICAgIGxheW91dFxuICAgIH0pO1xuICB9LCBbY2FudmFzU2l6ZSwgY29uZmlnLCBsYXlvdXQsIG92ZXJmbG93VmlzaWJsZSwgc3R5bGVdKTtcbiAgY29uc3Qgb3V0ZXIgPSB1c2VNZW1vMTEoKCkgPT4ge1xuICAgIHJldHVybiBjYWxjdWxhdGVPdXRlcih7IGNvbmZpZywgbGF5b3V0LCBzY2FsZSwgb3ZlcmZsb3dWaXNpYmxlIH0pO1xuICB9LCBbY29uZmlnLCBsYXlvdXQsIG92ZXJmbG93VmlzaWJsZSwgc2NhbGVdKTtcbiAgY29uc3QgY29udGFpbmVyU3R5bGUzID0gdXNlTWVtbzExKCgpID0+IHtcbiAgICByZXR1cm4gY2FsY3VsYXRlQ29udGFpbmVyU3R5bGUoe1xuICAgICAgY2FudmFzU2l6ZSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGxheW91dCxcbiAgICAgIHNjYWxlLFxuICAgICAgb3ZlcmZsb3dWaXNpYmxlXG4gICAgfSk7XG4gIH0sIFtjYW52YXNTaXplLCBjb25maWcsIGxheW91dCwgb3ZlcmZsb3dWaXNpYmxlLCBzY2FsZV0pO1xuICBjb25zdCBvbkVycm9yID0gdXNlQ2FsbGJhY2sxMCgoZXJyb3IpID0+IHtcbiAgICBwbGF5ZXIucGF1c2UoKTtcbiAgICBwbGF5ZXIuZW1pdHRlci5kaXNwYXRjaEVycm9yKGVycm9yKTtcbiAgfSwgW3BsYXllcl0pO1xuICBjb25zdCBvbkZ1bGxzY3JlZW5CdXR0b25DbGljayA9IHVzZUNhbGxiYWNrMTAoKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH0sIFtyZXF1ZXN0RnVsbHNjcmVlbl0pO1xuICBjb25zdCBvbkV4aXRGdWxsc2NyZWVuQnV0dG9uQ2xpY2sgPSB1c2VDYWxsYmFjazEwKChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBleGl0RnVsbHNjcmVlbigpO1xuICB9LCBbZXhpdEZ1bGxzY3JlZW5dKTtcbiAgY29uc3Qgb25TaW5nbGVDbGljayA9IHVzZUNhbGxiYWNrMTAoKGUpID0+IHtcbiAgICBjb25zdCByaWdodENsaWNrID0gZSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQgPyBlLmJ1dHRvbiA9PT0gMiA6IGUubmF0aXZlRXZlbnQuYnV0dG9uO1xuICAgIGlmIChyaWdodENsaWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvZ2dsZShlKTtcbiAgfSwgW3RvZ2dsZV0pO1xuICBjb25zdCBvblNlZWtTdGFydCA9IHVzZUNhbGxiYWNrMTAoKCkgPT4ge1xuICAgIHNldFNlZWtpbmcodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25TZWVrRW5kID0gdXNlQ2FsbGJhY2sxMCgoKSA9PiB7XG4gICAgc2V0U2Vla2luZyhmYWxzZSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25Eb3VibGVDbGljayA9IHVzZUNhbGxiYWNrMTAoKCkgPT4ge1xuICAgIGlmIChpc0Z1bGxzY3JlZW4pIHtcbiAgICAgIGV4aXRGdWxsc2NyZWVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgfVxuICB9LCBbZXhpdEZ1bGxzY3JlZW4sIGlzRnVsbHNjcmVlbiwgcmVxdWVzdEZ1bGxzY3JlZW5dKTtcbiAgY29uc3QgeyBoYW5kbGVQb2ludGVyRG93biwgaGFuZGxlRG91YmxlQ2xpY2sgfSA9IHVzZUNsaWNrUHJldmVudGlvbk9uRG91YmxlQ2xpY2sob25TaW5nbGVDbGljaywgb25Eb3VibGVDbGljaywgZG91YmxlQ2xpY2tUb0Z1bGxzY3JlZW4gJiYgYWxsb3dGdWxsc2NyZWVuICYmIHN1cHBvcnRzRnVsbFNjcmVlbik7XG4gIHVzZUVmZmVjdDEyKCgpID0+IHtcbiAgICBpZiAoc2hvdWxkQXV0b3BsYXkpIHtcbiAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgICBzZXRTaG91bGRBdXRvUGxheShmYWxzZSk7XG4gICAgfVxuICB9LCBbc2hvdWxkQXV0b3BsYXksIHBsYXllcl0pO1xuICBjb25zdCBsb2FkaW5nTWFya3VwID0gdXNlTWVtbzExKCgpID0+IHtcbiAgICByZXR1cm4gcmVuZGVyTG9hZGluZyA/IHJlbmRlckxvYWRpbmcoe1xuICAgICAgaGVpZ2h0OiBvdXRlclN0eWxlLmhlaWdodCxcbiAgICAgIHdpZHRoOiBvdXRlclN0eWxlLndpZHRoLFxuICAgICAgaXNCdWZmZXJpbmc6IHNob3dCdWZmZXJJbmRpY2F0b3JcbiAgICB9KSA6IG51bGw7XG4gIH0sIFtvdXRlclN0eWxlLmhlaWdodCwgb3V0ZXJTdHlsZS53aWR0aCwgcmVuZGVyTG9hZGluZywgc2hvd0J1ZmZlckluZGljYXRvcl0pO1xuICBjb25zdCBjdXJyZW50U2NhbGUgPSB1c2VNZW1vMTEoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInNjYWxlXCIsXG4gICAgICBzY2FsZVxuICAgIH07XG4gIH0sIFtzY2FsZV0pO1xuICBpZiAoIWNvbmZpZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHBvc3RlciA9IHJlbmRlclBvc3RlciA/IHJlbmRlclBvc3Rlcih7XG4gICAgaGVpZ2h0OiBwb3N0ZXJGaWxsTW9kZSA9PT0gXCJwbGF5ZXItc2l6ZVwiID8gb3V0ZXJTdHlsZS5oZWlnaHQgOiBjb25maWcuaGVpZ2h0LFxuICAgIHdpZHRoOiBwb3N0ZXJGaWxsTW9kZSA9PT0gXCJwbGF5ZXItc2l6ZVwiID8gb3V0ZXJTdHlsZS53aWR0aCA6IGNvbmZpZy53aWR0aCxcbiAgICBpc0J1ZmZlcmluZzogc2hvd0J1ZmZlckluZGljYXRvclxuICB9KSA6IG51bGw7XG4gIGlmIChwb3N0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJyZW5kZXJQb3N0ZXIoKSBtdXN0IHJldHVybiBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB1bmRlZmluZWQgd2FzIHJldHVybmVkXCIpO1xuICB9XG4gIGNvbnN0IHNob3VsZFNob3dQb3N0ZXIgPSBwb3N0ZXIgJiYgW1xuICAgIHNob3dQb3N0ZXJXaGVuUGF1c2VkICYmICFwbGF5ZXIuaXNQbGF5aW5nKCkgJiYgIXNlZWtpbmcsXG4gICAgc2hvd1Bvc3RlcldoZW5FbmRlZCAmJiBwbGF5ZXIuaXNMYXN0RnJhbWUgJiYgIXBsYXllci5pc1BsYXlpbmcoKSxcbiAgICBzaG93UG9zdGVyV2hlblVucGxheWVkICYmICFwbGF5ZXIuaGFzUGxheWVkICYmICFwbGF5ZXIuaXNQbGF5aW5nKCksXG4gICAgc2hvd1Bvc3RlcldoZW5CdWZmZXJpbmcgJiYgc2hvd0J1ZmZlckluZGljYXRvciAmJiBwbGF5ZXIuaXNQbGF5aW5nKClcbiAgXS5zb21lKEJvb2xlYW4pO1xuICBjb25zdCB7IGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCwgLi4ub3V0ZXJXaXRob3V0U2NhbGUgfSA9IG91dGVyO1xuICBjb25zdCBjb250ZW50ID0gLyogQF9fUFVSRV9fICovIGpzeHM4KEZyYWdtZW50Mywge1xuICAgIGNoaWxkcmVuOiBbXG4gICAgICAvKiBAX19QVVJFX18gKi8ganN4MTEoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogb3V0ZXIsXG4gICAgICAgIG9uUG9pbnRlckRvd246IGNsaWNrVG9QbGF5ID8gaGFuZGxlUG9pbnRlckRvd24gOiB1bmRlZmluZWQsXG4gICAgICAgIG9uRG91YmxlQ2xpY2s6IGRvdWJsZUNsaWNrVG9GdWxsc2NyZWVuID8gaGFuZGxlRG91YmxlQ2xpY2sgOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4czgoXCJkaXZcIiwge1xuICAgICAgICAgIHN0eWxlOiBjb250YWluZXJTdHlsZTMsXG4gICAgICAgICAgY2xhc3NOYW1lOiBQTEFZRVJfQ1NTX0NMQVNTTkFNRSxcbiAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgVmlkZW9Db21wb25lbnQgPyAvKiBAX19QVVJFX18gKi8ganN4MTEoRXJyb3JCb3VuZGFyeSwge1xuICAgICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgICBlcnJvckZhbGxiYWNrLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDExKEludGVybmFsczEwLkNsaXBDb21wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTEoSW50ZXJuYWxzMTAuQ3VycmVudFNjYWxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnRTY2FsZSxcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTEoVmlkZW9Db21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4udmlkZW8/LnByb3BzID8/IHt9LFxuICAgICAgICAgICAgICAgICAgICAuLi5pbnB1dFByb3BzID8/IHt9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSA6IG51bGwsXG4gICAgICAgICAgICBzaG91bGRTaG93UG9zdGVyICYmIHBvc3RlckZpbGxNb2RlID09PSBcImNvbXBvc2l0aW9uLXNpemVcIiA/IC8qIEBfX1BVUkVfXyAqLyBqc3gxMShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgLi4ub3V0ZXJXaXRob3V0U2NhbGUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGNvbmZpZy53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbmZpZy5oZWlnaHRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Qb2ludGVyRG93bjogY2xpY2tUb1BsYXkgPyBoYW5kbGVQb2ludGVyRG93biA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgb25Eb3VibGVDbGljazogZG91YmxlQ2xpY2tUb0Z1bGxzY3JlZW4gPyBoYW5kbGVEb3VibGVDbGljayA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHBvc3RlclxuICAgICAgICAgICAgfSkgOiBudWxsXG4gICAgICAgICAgXVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBzaG91bGRTaG93UG9zdGVyICYmIHBvc3RlckZpbGxNb2RlID09PSBcInBsYXllci1zaXplXCIgPyAvKiBAX19QVVJFX18gKi8ganN4MTEoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogb3V0ZXIsXG4gICAgICAgIG9uUG9pbnRlckRvd246IGNsaWNrVG9QbGF5ID8gaGFuZGxlUG9pbnRlckRvd24gOiB1bmRlZmluZWQsXG4gICAgICAgIG9uRG91YmxlQ2xpY2s6IGRvdWJsZUNsaWNrVG9GdWxsc2NyZWVuID8gaGFuZGxlRG91YmxlQ2xpY2sgOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiBwb3N0ZXJcbiAgICAgIH0pIDogbnVsbCxcbiAgICAgIGNvbnRyb2xzID8gLyogQF9fUFVSRV9fICovIGpzeDExKENvbnRyb2xzLCB7XG4gICAgICAgIGZwczogY29uZmlnLmZwcyxcbiAgICAgICAgZHVyYXRpb25JbkZyYW1lczogY29uZmlnLmR1cmF0aW9uSW5GcmFtZXMsXG4gICAgICAgIHBsYXllcixcbiAgICAgICAgY29udGFpbmVyUmVmOiBjb250YWluZXIsXG4gICAgICAgIG9uRnVsbHNjcmVlbkJ1dHRvbkNsaWNrLFxuICAgICAgICBpc0Z1bGxzY3JlZW4sXG4gICAgICAgIGFsbG93RnVsbHNjcmVlbixcbiAgICAgICAgc2hvd1ZvbHVtZUNvbnRyb2xzLFxuICAgICAgICBvbkV4aXRGdWxsc2NyZWVuQnV0dG9uQ2xpY2ssXG4gICAgICAgIHNwYWNlS2V5VG9QbGF5T3JQYXVzZSxcbiAgICAgICAgb25TZWVrRW5kLFxuICAgICAgICBvblNlZWtTdGFydCxcbiAgICAgICAgaW5GcmFtZSxcbiAgICAgICAgb3V0RnJhbWUsXG4gICAgICAgIGluaXRpYWxseVNob3dDb250cm9scyxcbiAgICAgICAgY2FudmFzU2l6ZSxcbiAgICAgICAgcmVuZGVyRnVsbHNjcmVlbkJ1dHRvbixcbiAgICAgICAgcmVuZGVyUGxheVBhdXNlQnV0dG9uLFxuICAgICAgICBhbHdheXNTaG93Q29udHJvbHMsXG4gICAgICAgIHNob3dQbGF5YmFja1JhdGVDb250cm9sLFxuICAgICAgICBidWZmZXJpbmc6IHNob3dCdWZmZXJJbmRpY2F0b3IsXG4gICAgICAgIGhpZGVDb250cm9sc1doZW5Qb2ludGVyRG9lc250TW92ZSxcbiAgICAgICAgb25Eb3VibGVDbGljazogZG91YmxlQ2xpY2tUb0Z1bGxzY3JlZW4gPyBoYW5kbGVEb3VibGVDbGljayA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25Qb2ludGVyRG93bjogY2xpY2tUb1BsYXkgPyBoYW5kbGVQb2ludGVyRG93biA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVuZGVyTXV0ZUJ1dHRvbixcbiAgICAgICAgcmVuZGVyVm9sdW1lU2xpZGVyXG4gICAgICB9KSA6IG51bGxcbiAgICBdXG4gIH0pO1xuICBpZiAoSVNfTk9ERSAmJiAhZG9lc1JlYWN0VmVyc2lvblN1cHBvcnRTdXNwZW5zZSkge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4MTEoXCJkaXZcIiwge1xuICAgICAgcmVmOiBjb250YWluZXIsXG4gICAgICBzdHlsZTogb3V0ZXJTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lMixcbiAgICAgIGNoaWxkcmVuOiBjb250ZW50XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3gxMShcImRpdlwiLCB7XG4gICAgcmVmOiBjb250YWluZXIsXG4gICAgc3R5bGU6IG91dGVyU3R5bGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUyLFxuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTEoU3VzcGVuc2UsIHtcbiAgICAgIGZhbGxiYWNrOiBsb2FkaW5nTWFya3VwLFxuICAgICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgICB9KVxuICB9KTtcbn07XG52YXIgUGxheWVyVUlfZGVmYXVsdCA9IGZvcndhcmRSZWYoUGxheWVyVUkpO1xuXG4vLyBzcmMvU2hhcmVkUGxheWVyQ29udGV4dC50c3hcbmltcG9ydCB7IHVzZUNhbGxiYWNrIGFzIHVzZUNhbGxiYWNrMTEsIHVzZU1lbW8gYXMgdXNlTWVtbzEyLCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTEyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcm5hbHMgYXMgSW50ZXJuYWxzMTEgfSBmcm9tIFwicmVtb3Rpb25cIjtcblxuLy8gc3JjL3ZvbHVtZS1wZXJzaXN0YW5jZS50c1xudmFyIFZPTFVNRV9QRVJTSVNUQU5DRV9LRVkgPSBcInJlbW90aW9uLnZvbHVtZVByZWZlcmVuY2VcIjtcbnZhciBwZXJzaXN0Vm9sdW1lID0gKHZvbHVtZSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICB0cnkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShWT0xVTUVfUEVSU0lTVEFOQ0VfS0VZLCBTdHJpbmcodm9sdW1lKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIkNvdWxkIG5vdCBwZXJzaXN0IHZvbHVtZVwiLCBlKTtcbiAgfVxufTtcbnZhciBnZXRQcmVmZXJyZWRWb2x1bWUgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCB2YWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oVk9MVU1FX1BFUlNJU1RBTkNFX0tFWSk7XG4gICAgcmV0dXJuIHZhbCA/IE51bWJlcih2YWwpIDogMTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiAxO1xuICB9XG59O1xuXG4vLyBzcmMvU2hhcmVkUGxheWVyQ29udGV4dC50c3hcbmltcG9ydCB7IGpzeCBhcyBqc3gxMiB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIFBMQVlFUl9DT01QX0lEID0gXCJwbGF5ZXItY29tcFwiO1xudmFyIFNoYXJlZFBsYXllckNvbnRleHRzID0gKHtcbiAgY2hpbGRyZW4sXG4gIHRpbWVsaW5lQ29udGV4dCxcbiAgZnBzLFxuICBjb21wb3NpdGlvbkhlaWdodCxcbiAgY29tcG9zaXRpb25XaWR0aCxcbiAgZHVyYXRpb25JbkZyYW1lcyxcbiAgY29tcG9uZW50LFxuICBudW1iZXJPZlNoYXJlZEF1ZGlvVGFncyxcbiAgaW5pdGlhbGx5TXV0ZWRcbn0pID0+IHtcbiAgY29uc3QgY29tcG9zaXRpb25NYW5hZ2VyQ29udGV4dCA9IHVzZU1lbW8xMigoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGNvbXBvc2l0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgIGR1cmF0aW9uSW5GcmFtZXMsXG4gICAgICAgICAgaGVpZ2h0OiBjb21wb3NpdGlvbkhlaWdodCxcbiAgICAgICAgICB3aWR0aDogY29tcG9zaXRpb25XaWR0aCxcbiAgICAgICAgICBmcHMsXG4gICAgICAgICAgaWQ6IFBMQVlFUl9DT01QX0lELFxuICAgICAgICAgIG5vbmNlOiA3NzcsXG4gICAgICAgICAgZm9sZGVyTmFtZTogbnVsbCxcbiAgICAgICAgICBwYXJlbnRGb2xkZXJOYW1lOiBudWxsLFxuICAgICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgICBjYWxjdWxhdGVNZXRhZGF0YTogbnVsbFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9sZGVyczogW10sXG4gICAgICByZWdpc3RlckZvbGRlcjogKCkgPT4ge1xuICAgICAgICByZXR1cm47XG4gICAgICB9LFxuICAgICAgdW5yZWdpc3RlckZvbGRlcjogKCkgPT4ge1xuICAgICAgICByZXR1cm47XG4gICAgICB9LFxuICAgICAgcmVnaXN0ZXJDb21wb3NpdGlvbjogKCkgPT4ge1xuICAgICAgICByZXR1cm47XG4gICAgICB9LFxuICAgICAgdW5yZWdpc3RlckNvbXBvc2l0aW9uOiAoKSA9PiB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0sXG4gICAgICBjdXJyZW50Q29tcG9zaXRpb25NZXRhZGF0YTogbnVsbCxcbiAgICAgIHNldEN1cnJlbnRDb21wb3NpdGlvbk1ldGFkYXRhOiAoKSA9PiB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0sXG4gICAgICBjYW52YXNDb250ZW50OiB7IHR5cGU6IFwiY29tcG9zaXRpb25cIiwgY29tcG9zaXRpb25JZDogXCJwbGF5ZXItY29tcFwiIH0sXG4gICAgICBzZXRDYW52YXNDb250ZW50OiAoKSA9PiB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVDb21wb3NpdGlvbkRlZmF1bHRQcm9wczogKCkgPT4ge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gY29udGV4dDtcbiAgfSwgW2NvbXBvbmVudCwgZHVyYXRpb25JbkZyYW1lcywgY29tcG9zaXRpb25IZWlnaHQsIGNvbXBvc2l0aW9uV2lkdGgsIGZwc10pO1xuICBjb25zdCBbbWVkaWFNdXRlZCwgc2V0TWVkaWFNdXRlZF0gPSB1c2VTdGF0ZTEyKCgpID0+IGluaXRpYWxseU11dGVkKTtcbiAgY29uc3QgW21lZGlhVm9sdW1lLCBzZXRNZWRpYVZvbHVtZV0gPSB1c2VTdGF0ZTEyKCgpID0+IGdldFByZWZlcnJlZFZvbHVtZSgpKTtcbiAgY29uc3QgbWVkaWFWb2x1bWVDb250ZXh0VmFsdWUgPSB1c2VNZW1vMTIoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBtZWRpYU11dGVkLFxuICAgICAgbWVkaWFWb2x1bWVcbiAgICB9O1xuICB9LCBbbWVkaWFNdXRlZCwgbWVkaWFWb2x1bWVdKTtcbiAgY29uc3Qgc2V0TWVkaWFWb2x1bWVBbmRQZXJzaXN0ID0gdXNlQ2FsbGJhY2sxMSgodm9sKSA9PiB7XG4gICAgc2V0TWVkaWFWb2x1bWUodm9sKTtcbiAgICBwZXJzaXN0Vm9sdW1lKHZvbCk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgc2V0TWVkaWFWb2x1bWVDb250ZXh0VmFsdWUgPSB1c2VNZW1vMTIoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzZXRNZWRpYU11dGVkLFxuICAgICAgc2V0TWVkaWFWb2x1bWU6IHNldE1lZGlhVm9sdW1lQW5kUGVyc2lzdFxuICAgIH07XG4gIH0sIFtzZXRNZWRpYVZvbHVtZUFuZFBlcnNpc3RdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3gxMihJbnRlcm5hbHMxMS5DYW5Vc2VSZW1vdGlvbkhvb2tzUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDEyKEludGVybmFsczExLlRpbWVsaW5lLlRpbWVsaW5lQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRpbWVsaW5lQ29udGV4dCxcbiAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTIoSW50ZXJuYWxzMTEuQ29tcG9zaXRpb25NYW5hZ2VyLlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb21wb3NpdGlvbk1hbmFnZXJDb250ZXh0LFxuICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDEyKEludGVybmFsczExLlJlc29sdmVDb21wb3NpdGlvbkNvbmZpZywge1xuICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTIoSW50ZXJuYWxzMTEuUHJlZmV0Y2hQcm92aWRlciwge1xuICAgICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gxMihJbnRlcm5hbHMxMS5EdXJhdGlvbnNDb250ZXh0UHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gxMihJbnRlcm5hbHMxMS5NZWRpYVZvbHVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWVkaWFWb2x1bWVDb250ZXh0VmFsdWUsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gxMihJbnRlcm5hbHMxMS5OYXRpdmVMYXllcnNQcm92aWRlciwge1xuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gxMihJbnRlcm5hbHMxMS5TZXRNZWRpYVZvbHVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNldE1lZGlhVm9sdW1lQ29udGV4dFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDEyKEludGVybmFsczExLlNoYXJlZEF1ZGlvQ29udGV4dFByb3ZpZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZBdWRpb1RhZ3M6IG51bWJlck9mU2hhcmVkQXVkaW9UYWdzLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDEyKEludGVybmFsczExLkJ1ZmZlcmluZ1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pO1xufTtcblxuLy8gc3JjL3V0aWxzL3ZhbGlkYXRlLWluLW91dC1mcmFtZS50c1xudmFyIHZhbGlkYXRlU2luZ2xlRnJhbWUgPSAoZnJhbWUsIHZhcmlhYmxlTmFtZSkgPT4ge1xuICBpZiAodHlwZW9mIGZyYW1lID09PSBcInVuZGVmaW5lZFwiIHx8IGZyYW1lID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZyYW1lID8/IG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiBmcmFtZSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFwiJHt2YXJpYWJsZU5hbWV9XCIgbXVzdCBiZSBhIG51bWJlciwgYnV0IGlzICR7SlNPTi5zdHJpbmdpZnkoZnJhbWUpfWApO1xuICB9XG4gIGlmIChOdW1iZXIuaXNOYU4oZnJhbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgXCIke3ZhcmlhYmxlTmFtZX1cIiBtdXN0IG5vdCBiZSBOYU4sIGJ1dCBpcyAke0pTT04uc3RyaW5naWZ5KGZyYW1lKX1gKTtcbiAgfVxuICBpZiAoIU51bWJlci5pc0Zpbml0ZShmcmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBcIiR7dmFyaWFibGVOYW1lfVwiIG11c3QgYmUgZmluaXRlLCBidXQgaXMgJHtKU09OLnN0cmluZ2lmeShmcmFtZSl9YCk7XG4gIH1cbiAgaWYgKGZyYW1lICUgMSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFwiJHt2YXJpYWJsZU5hbWV9XCIgbXVzdCBiZSBhbiBpbnRlZ2VyLCBidXQgaXMgJHtKU09OLnN0cmluZ2lmeShmcmFtZSl9YCk7XG4gIH1cbiAgcmV0dXJuIGZyYW1lO1xufTtcbnZhciB2YWxpZGF0ZUluT3V0RnJhbWVzID0gKHtcbiAgaW5GcmFtZSxcbiAgZHVyYXRpb25JbkZyYW1lcyxcbiAgb3V0RnJhbWVcbn0pID0+IHtcbiAgY29uc3QgdmFsaWRhdGVkSW5GcmFtZSA9IHZhbGlkYXRlU2luZ2xlRnJhbWUoaW5GcmFtZSwgXCJpbkZyYW1lXCIpO1xuICBjb25zdCB2YWxpZGF0ZWRPdXRGcmFtZSA9IHZhbGlkYXRlU2luZ2xlRnJhbWUob3V0RnJhbWUsIFwib3V0RnJhbWVcIik7XG4gIGlmICh2YWxpZGF0ZWRJbkZyYW1lID09PSBudWxsICYmIHZhbGlkYXRlZE91dEZyYW1lID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh2YWxpZGF0ZWRJbkZyYW1lICE9PSBudWxsICYmIHZhbGlkYXRlZEluRnJhbWUgPiBkdXJhdGlvbkluRnJhbWVzIC0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImluRnJhbWUgbXVzdCBiZSBsZXNzIHRoYW4gKGR1cmF0aW9uSW5GcmFtZXMgLSAxKSwgYnV0IGlzIFwiICsgdmFsaWRhdGVkSW5GcmFtZSk7XG4gIH1cbiAgaWYgKHZhbGlkYXRlZE91dEZyYW1lICE9PSBudWxsICYmIHZhbGlkYXRlZE91dEZyYW1lID4gZHVyYXRpb25JbkZyYW1lcyAtIDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJvdXRGcmFtZSBtdXN0IGJlIGxlc3MgdGhhbiAoZHVyYXRpb25JbkZyYW1lcyAtIDEpLCBidXQgaXMgXCIgKyB2YWxpZGF0ZWRPdXRGcmFtZSk7XG4gIH1cbiAgaWYgKHZhbGlkYXRlZEluRnJhbWUgIT09IG51bGwgJiYgdmFsaWRhdGVkSW5GcmFtZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbkZyYW1lIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAsIGJ1dCBpcyBcIiArIHZhbGlkYXRlZEluRnJhbWUpO1xuICB9XG4gIGlmICh2YWxpZGF0ZWRPdXRGcmFtZSAhPT0gbnVsbCAmJiB2YWxpZGF0ZWRPdXRGcmFtZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBvdXRGcmFtZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLCBidXQgaXMgJHt2YWxpZGF0ZWRPdXRGcmFtZX0uIElmIHlvdSB3YW50IHRvIHJlbmRlciBhIHNpbmdsZSBmcmFtZSwgdXNlIDxUaHVtYm5haWwgLz4gaW5zdGVhZC5gKTtcbiAgfVxuICBpZiAodmFsaWRhdGVkT3V0RnJhbWUgIT09IG51bGwgJiYgdmFsaWRhdGVkSW5GcmFtZSAhPT0gbnVsbCAmJiB2YWxpZGF0ZWRPdXRGcmFtZSA8PSB2YWxpZGF0ZWRJbkZyYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwib3V0RnJhbWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gaW5GcmFtZSwgYnV0IGlzIFwiICsgdmFsaWRhdGVkT3V0RnJhbWUgKyBcIiA8PSBcIiArIHZhbGlkYXRlZEluRnJhbWUpO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvdmFsaWRhdGUtaW5pdGlhbC1mcmFtZS50c1xudmFyIHZhbGlkYXRlSW5pdGlhbEZyYW1lID0gKHtcbiAgaW5pdGlhbEZyYW1lLFxuICBkdXJhdGlvbkluRnJhbWVzXG59KSA9PiB7XG4gIGlmICh0eXBlb2YgZHVyYXRpb25JbkZyYW1lcyAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgXFxgZHVyYXRpb25JbkZyYW1lc1xcYCBtdXN0IGJlIGEgbnVtYmVyLCBidXQgaXMgJHtKU09OLnN0cmluZ2lmeShkdXJhdGlvbkluRnJhbWVzKX1gKTtcbiAgfVxuICBpZiAodHlwZW9mIGluaXRpYWxGcmFtZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIGluaXRpYWxGcmFtZSAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgXFxgaW5pdGlhbEZyYW1lXFxgIG11c3QgYmUgYSBudW1iZXIsIGJ1dCBpcyAke0pTT04uc3RyaW5naWZ5KGluaXRpYWxGcmFtZSl9YCk7XG4gIH1cbiAgaWYgKE51bWJlci5pc05hTihpbml0aWFsRnJhbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBcXGBpbml0aWFsRnJhbWVcXGAgbXVzdCBiZSBhIG51bWJlciwgYnV0IGlzIE5hTmApO1xuICB9XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKGluaXRpYWxGcmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFxcYGluaXRpYWxGcmFtZVxcYCBtdXN0IGJlIGEgbnVtYmVyLCBidXQgaXMgSW5maW5pdHlgKTtcbiAgfVxuICBpZiAoaW5pdGlhbEZyYW1lICUgMSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXFxgaW5pdGlhbEZyYW1lXFxgIG11c3QgYmUgYW4gaW50ZWdlciwgYnV0IGlzICR7SlNPTi5zdHJpbmdpZnkoaW5pdGlhbEZyYW1lKX1gKTtcbiAgfVxuICBpZiAoaW5pdGlhbEZyYW1lID4gZHVyYXRpb25JbkZyYW1lcyAtIDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFxcYGluaXRpYWxGcmFtZVxcYCBtdXN0IGJlIGxlc3Mgb3IgZXF1YWwgdGhhbiBcXGBkdXJhdGlvbkluRnJhbWVzIC0gMVxcYCwgYnV0IGlzICR7SlNPTi5zdHJpbmdpZnkoaW5pdGlhbEZyYW1lKX1gKTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL3ZhbGlkYXRlLXBsYXliYWNrcmF0ZS50c1xudmFyIHZhbGlkYXRlUGxheWJhY2tSYXRlID0gKHBsYXliYWNrUmF0ZSkgPT4ge1xuICBpZiAocGxheWJhY2tSYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBsYXliYWNrUmF0ZSA+IDQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBoaWdoZXN0IHBvc3NpYmxlIHBsYXliYWNrIHJhdGUgaXMgNC4gWW91IHBhc3NlZDogJHtwbGF5YmFja1JhdGV9YCk7XG4gIH1cbiAgaWYgKHBsYXliYWNrUmF0ZSA8IC00KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbG93ZXN0IHBvc3NpYmxlIHBsYXliYWNrIHJhdGUgaXMgLTQuIFlvdSBwYXNzZWQ6ICR7cGxheWJhY2tSYXRlfWApO1xuICB9XG4gIGlmIChwbGF5YmFja1JhdGUgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEEgcGxheWJhY2sgcmF0ZSBvZiAwIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gIH1cbn07XG5cbi8vIHNyYy92YWxpZGF0ZS50c1xuaW1wb3J0IHsgTm9SZWFjdEludGVybmFscyB9IGZyb20gXCJyZW1vdGlvbi9uby1yZWFjdFwiO1xudmFyIHZhbGlkYXRlRnBzID0gTm9SZWFjdEludGVybmFscy52YWxpZGF0ZUZwcztcbnZhciB2YWxpZGF0ZURpbWVuc2lvbiA9IE5vUmVhY3RJbnRlcm5hbHMudmFsaWRhdGVEaW1lbnNpb247XG52YXIgdmFsaWRhdGVEdXJhdGlvbkluRnJhbWVzID0gTm9SZWFjdEludGVybmFscy52YWxpZGF0ZUR1cmF0aW9uSW5GcmFtZXM7XG52YXIgdmFsaWRhdGVEZWZhdWx0QW5kSW5wdXRQcm9wcyA9IE5vUmVhY3RJbnRlcm5hbHMudmFsaWRhdGVEZWZhdWx0QW5kSW5wdXRQcm9wcztcblxuLy8gc3JjL1BsYXllci50c3hcbmltcG9ydCB7IGpzeCBhcyBqc3gxMyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xudmFyIGNvbXBvbmVudE9yTnVsbElmTGF6eSA9IChwcm9wcykgPT4ge1xuICBpZiAoXCJjb21wb25lbnRcIiBpbiBwcm9wcykge1xuICAgIHJldHVybiBwcm9wcy5jb21wb25lbnQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xudmFyIFBsYXllckZuID0gKHtcbiAgZHVyYXRpb25JbkZyYW1lcyxcbiAgY29tcG9zaXRpb25IZWlnaHQsXG4gIGNvbXBvc2l0aW9uV2lkdGgsXG4gIGZwcyxcbiAgaW5wdXRQcm9wcyxcbiAgc3R5bGUsXG4gIGNvbnRyb2xzID0gZmFsc2UsXG4gIGxvb3AgPSBmYWxzZSxcbiAgYXV0b1BsYXkgPSBmYWxzZSxcbiAgc2hvd1ZvbHVtZUNvbnRyb2xzID0gdHJ1ZSxcbiAgYWxsb3dGdWxsc2NyZWVuID0gdHJ1ZSxcbiAgY2xpY2tUb1BsYXksXG4gIGRvdWJsZUNsaWNrVG9GdWxsc2NyZWVuID0gZmFsc2UsXG4gIHNwYWNlS2V5VG9QbGF5T3JQYXVzZSA9IHRydWUsXG4gIG1vdmVUb0JlZ2lubmluZ1doZW5FbmRlZCA9IHRydWUsXG4gIG51bWJlck9mU2hhcmVkQXVkaW9UYWdzID0gNSxcbiAgZXJyb3JGYWxsYmFjayA9ICgpID0+IFwiXFx1MjZBMFxcdUZFMEZcIixcbiAgcGxheWJhY2tSYXRlID0gMSxcbiAgcmVuZGVyTG9hZGluZyxcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUyLFxuICBzaG93UG9zdGVyV2hlblVucGxheWVkLFxuICBzaG93UG9zdGVyV2hlbkVuZGVkLFxuICBzaG93UG9zdGVyV2hlblBhdXNlZCxcbiAgc2hvd1Bvc3RlcldoZW5CdWZmZXJpbmcsXG4gIGluaXRpYWxGcmFtZSxcbiAgcmVuZGVyUG9zdGVyLFxuICBpbkZyYW1lLFxuICBvdXRGcmFtZSxcbiAgaW5pdGlhbGx5U2hvd0NvbnRyb2xzLFxuICByZW5kZXJGdWxsc2NyZWVuQnV0dG9uLFxuICByZW5kZXJQbGF5UGF1c2VCdXR0b24sXG4gIHJlbmRlclZvbHVtZVNsaWRlcixcbiAgYWx3YXlzU2hvd0NvbnRyb2xzID0gZmFsc2UsXG4gIGluaXRpYWxseU11dGVkID0gZmFsc2UsXG4gIHNob3dQbGF5YmFja1JhdGVDb250cm9sID0gZmFsc2UsXG4gIHBvc3RlckZpbGxNb2RlID0gXCJwbGF5ZXItc2l6ZVwiLFxuICBidWZmZXJTdGF0ZURlbGF5SW5NaWxsaXNlY29uZHMsXG4gIGhpZGVDb250cm9sc1doZW5Qb2ludGVyRG9lc250TW92ZSA9IHRydWUsXG4gIG92ZXJmbG93VmlzaWJsZSA9IGZhbHNlLFxuICByZW5kZXJNdXRlQnV0dG9uLFxuICBicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yOiBwYXNzZWRCcm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yLFxuICAuLi5jb21wb25lbnRQcm9wc1xufSwgcmVmKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdGlvbl9pc1BsYXllciA9IHRydWU7XG4gICAgfSwgW10pO1xuICB9XG4gIGlmIChjb21wb25lbnRQcm9wcy5kZWZhdWx0UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSA8UGxheWVyIC8+IGNvbXBvbmVudCBkb2VzIG5vdCBhY2NlcHQgYGRlZmF1bHRQcm9wc2AsIGJ1dCBzb21lIHdlcmUgcGFzc2VkLiBVc2UgYGlucHV0UHJvcHNgIGluc3RlYWQuXCIpO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudEZvclZhbGlkYXRpb24gPSBjb21wb25lbnRPck51bGxJZkxhenkoY29tcG9uZW50UHJvcHMpO1xuICBpZiAoY29tcG9uZW50Rm9yVmFsaWRhdGlvbj8udHlwZSA9PT0gQ29tcG9zaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnY29tcG9uZW50JyBzaG91bGQgbm90IGJlIGFuIGluc3RhbmNlIG9mIDxDb21wb3NpdGlvbi8+LiBQYXNzIHRoZSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHksIGFuZCBzZXQgdGhlIGR1cmF0aW9uLCBmcHMgYW5kIGRpbWVuc2lvbnMgYXMgc2VwYXJhdGUgcHJvcHMuIFNlZSBodHRwczovL3d3dy5yZW1vdGlvbi5kZXYvZG9jcy9wbGF5ZXIvZXhhbXBsZXMgZm9yIGFuIGV4YW1wbGUuYCk7XG4gIH1cbiAgaWYgKGNvbXBvbmVudEZvclZhbGlkYXRpb24gPT09IENvbXBvc2l0aW9uKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ2NvbXBvbmVudCcgbXVzdCBub3QgYmUgdGhlICdDb21wb3NpdGlvbicgY29tcG9uZW50LiBQYXNzIHlvdXIgb3duIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseSwgYW5kIHNldCB0aGUgZHVyYXRpb24sIGZwcyBhbmQgZGltZW5zaW9ucyBhcyBzZXBhcmF0ZSBwcm9wcy4gU2VlIGh0dHBzOi8vd3d3LnJlbW90aW9uLmRldi9kb2NzL3BsYXllci9leGFtcGxlcyBmb3IgYW4gZXhhbXBsZS5gKTtcbiAgfVxuICBjb25zdCBjb21wb25lbnQgPSBJbnRlcm5hbHMxMi51c2VMYXp5Q29tcG9uZW50KGNvbXBvbmVudFByb3BzKTtcbiAgdmFsaWRhdGVJbml0aWFsRnJhbWUoeyBpbml0aWFsRnJhbWUsIGR1cmF0aW9uSW5GcmFtZXMgfSk7XG4gIGNvbnN0IFtmcmFtZSwgc2V0RnJhbWVdID0gdXNlU3RhdGUxMygoKSA9PiAoe1xuICAgIFtQTEFZRVJfQ09NUF9JRF06IGluaXRpYWxGcmFtZSA/PyAwXG4gIH0pKTtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUxMyhmYWxzZSk7XG4gIGNvbnN0IFtyb290SWRdID0gdXNlU3RhdGUxMyhcInBsYXllci1jb21wXCIpO1xuICBjb25zdCByb290UmVmID0gdXNlUmVmMTAobnVsbCk7XG4gIGNvbnN0IGF1ZGlvQW5kVmlkZW9UYWdzID0gdXNlUmVmMTAoW10pO1xuICBjb25zdCBpbXBlcmF0aXZlUGxheWluZyA9IHVzZVJlZjEwKGZhbHNlKTtcbiAgY29uc3QgW2N1cnJlbnRQbGF5YmFja1JhdGUsIHNldEN1cnJlbnRQbGF5YmFja1JhdGVdID0gdXNlU3RhdGUxMyhwbGF5YmFja1JhdGUpO1xuICBpZiAodHlwZW9mIGNvbXBvc2l0aW9uSGVpZ2h0ICE9PSBcIm51bWJlclwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ2NvbXBvc2l0aW9uSGVpZ2h0JyBtdXN0IGJlIGEgbnVtYmVyIGJ1dCBnb3QgJyR7dHlwZW9mIGNvbXBvc2l0aW9uSGVpZ2h0fScgaW5zdGVhZGApO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9zaXRpb25XaWR0aCAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCdjb21wb3NpdGlvbldpZHRoJyBtdXN0IGJlIGEgbnVtYmVyIGJ1dCBnb3QgJyR7dHlwZW9mIGNvbXBvc2l0aW9uV2lkdGh9JyBpbnN0ZWFkYCk7XG4gIH1cbiAgdmFsaWRhdGVEaW1lbnNpb24oY29tcG9zaXRpb25IZWlnaHQsIFwiY29tcG9zaXRpb25IZWlnaHRcIiwgXCJvZiB0aGUgPFBsYXllciAvPiBjb21wb25lbnRcIik7XG4gIHZhbGlkYXRlRGltZW5zaW9uKGNvbXBvc2l0aW9uV2lkdGgsIFwiY29tcG9zaXRpb25XaWR0aFwiLCBcIm9mIHRoZSA8UGxheWVyIC8+IGNvbXBvbmVudFwiKTtcbiAgdmFsaWRhdGVEdXJhdGlvbkluRnJhbWVzKGR1cmF0aW9uSW5GcmFtZXMsIHtcbiAgICBjb21wb25lbnQ6IFwib2YgdGhlIDxQbGF5ZXIvPiBjb21wb25lbnRcIixcbiAgICBhbGxvd0Zsb2F0czogZmFsc2VcbiAgfSk7XG4gIHZhbGlkYXRlRnBzKGZwcywgXCJhcyBhIHByb3Agb2YgdGhlIDxQbGF5ZXIvPiBjb21wb25lbnRcIiwgZmFsc2UpO1xuICB2YWxpZGF0ZURlZmF1bHRBbmRJbnB1dFByb3BzKGlucHV0UHJvcHMsIFwiaW5wdXRQcm9wc1wiLCBudWxsKTtcbiAgdmFsaWRhdGVJbk91dEZyYW1lcyh7XG4gICAgZHVyYXRpb25JbkZyYW1lcyxcbiAgICBpbkZyYW1lLFxuICAgIG91dEZyYW1lXG4gIH0pO1xuICBpZiAodHlwZW9mIGNvbnRyb2xzICE9PSBcImJvb2xlYW5cIiAmJiB0eXBlb2YgY29udHJvbHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnY29udHJvbHMnIG11c3QgYmUgYSBib29sZWFuIG9yIHVuZGVmaW5lZCBidXQgZ290ICcke3R5cGVvZiBjb250cm9sc30nIGluc3RlYWRgKTtcbiAgfVxuICBpZiAodHlwZW9mIGF1dG9QbGF5ICE9PSBcImJvb2xlYW5cIiAmJiB0eXBlb2YgYXV0b1BsYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnYXV0b1BsYXknIG11c3QgYmUgYSBib29sZWFuIG9yIHVuZGVmaW5lZCBidXQgZ290ICcke3R5cGVvZiBhdXRvUGxheX0nIGluc3RlYWRgKTtcbiAgfVxuICBpZiAodHlwZW9mIGxvb3AgIT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiBsb29wICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ2xvb3AnIG11c3QgYmUgYSBib29sZWFuIG9yIHVuZGVmaW5lZCBidXQgZ290ICcke3R5cGVvZiBsb29wfScgaW5zdGVhZGApO1xuICB9XG4gIGlmICh0eXBlb2YgZG91YmxlQ2xpY2tUb0Z1bGxzY3JlZW4gIT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiBkb3VibGVDbGlja1RvRnVsbHNjcmVlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCdkb3VibGVDbGlja1RvRnVsbHNjcmVlbicgbXVzdCBiZSBhIGJvb2xlYW4gb3IgdW5kZWZpbmVkIGJ1dCBnb3QgJyR7dHlwZW9mIGRvdWJsZUNsaWNrVG9GdWxsc2NyZWVufScgaW5zdGVhZGApO1xuICB9XG4gIGlmICh0eXBlb2Ygc2hvd1ZvbHVtZUNvbnRyb2xzICE9PSBcImJvb2xlYW5cIiAmJiB0eXBlb2Ygc2hvd1ZvbHVtZUNvbnRyb2xzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ3Nob3dWb2x1bWVDb250cm9scycgbXVzdCBiZSBhIGJvb2xlYW4gb3IgdW5kZWZpbmVkIGJ1dCBnb3QgJyR7dHlwZW9mIHNob3dWb2x1bWVDb250cm9sc30nIGluc3RlYWRgKTtcbiAgfVxuICBpZiAodHlwZW9mIGFsbG93RnVsbHNjcmVlbiAhPT0gXCJib29sZWFuXCIgJiYgdHlwZW9mIGFsbG93RnVsbHNjcmVlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCdhbGxvd0Z1bGxzY3JlZW4nIG11c3QgYmUgYSBib29sZWFuIG9yIHVuZGVmaW5lZCBidXQgZ290ICcke3R5cGVvZiBhbGxvd0Z1bGxzY3JlZW59JyBpbnN0ZWFkYCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjbGlja1RvUGxheSAhPT0gXCJib29sZWFuXCIgJiYgdHlwZW9mIGNsaWNrVG9QbGF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ2NsaWNrVG9QbGF5JyBtdXN0IGJlIGEgYm9vbGVhbiBvciB1bmRlZmluZWQgYnV0IGdvdCAnJHt0eXBlb2YgY2xpY2tUb1BsYXl9JyBpbnN0ZWFkYCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUtleVRvUGxheU9yUGF1c2UgIT09IFwiYm9vbGVhblwiICYmIHR5cGVvZiBzcGFjZUtleVRvUGxheU9yUGF1c2UgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAnc3BhY2VLZXlUb1BsYXlPclBhdXNlJyBtdXN0IGJlIGEgYm9vbGVhbiBvciB1bmRlZmluZWQgYnV0IGdvdCAnJHt0eXBlb2Ygc3BhY2VLZXlUb1BsYXlPclBhdXNlfScgaW5zdGVhZGApO1xuICB9XG4gIGlmICh0eXBlb2YgbnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MgIT09IFwibnVtYmVyXCIgfHwgbnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MgJSAxICE9PSAwIHx8ICFOdW1iZXIuaXNGaW5pdGUobnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MpIHx8IE51bWJlci5pc05hTihudW1iZXJPZlNoYXJlZEF1ZGlvVGFncykgfHwgbnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJ251bWJlck9mU2hhcmVkQXVkaW9UYWdzJyBtdXN0IGJlIGFuIGludGVnZXIgYnV0IGdvdCAnJHtudW1iZXJPZlNoYXJlZEF1ZGlvVGFnc30nIGluc3RlYWRgKTtcbiAgfVxuICB2YWxpZGF0ZVBsYXliYWNrUmF0ZShjdXJyZW50UGxheWJhY2tSYXRlKTtcbiAgdXNlRWZmZWN0MTMoKCkgPT4ge1xuICAgIHNldEN1cnJlbnRQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKTtcbiAgfSwgW3BsYXliYWNrUmF0ZV0pO1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlMihyZWYsICgpID0+IHJvb3RSZWYuY3VycmVudCwgW10pO1xuICBjb25zdCB0aW1lbGluZUNvbnRleHRWYWx1ZSA9IHVzZU1lbW8xMygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyYW1lLFxuICAgICAgcGxheWluZyxcbiAgICAgIHJvb3RJZCxcbiAgICAgIHBsYXliYWNrUmF0ZTogY3VycmVudFBsYXliYWNrUmF0ZSxcbiAgICAgIGltcGVyYXRpdmVQbGF5aW5nLFxuICAgICAgc2V0UGxheWJhY2tSYXRlOiAocmF0ZSkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50UGxheWJhY2tSYXRlKHJhdGUpO1xuICAgICAgfSxcbiAgICAgIGF1ZGlvQW5kVmlkZW9UYWdzXG4gICAgfTtcbiAgfSwgW2ZyYW1lLCBjdXJyZW50UGxheWJhY2tSYXRlLCBwbGF5aW5nLCByb290SWRdKTtcbiAgY29uc3Qgc2V0VGltZWxpbmVDb250ZXh0VmFsdWUgPSB1c2VNZW1vMTMoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzZXRGcmFtZSxcbiAgICAgIHNldFBsYXlpbmdcbiAgICB9O1xuICB9LCBbc2V0RnJhbWVdKTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgSW50ZXJuYWxzMTIuQ1NTVXRpbHMuaW5qZWN0Q1NTKEludGVybmFsczEyLkNTU1V0aWxzLm1ha2VEZWZhdWx0UHJldmlld0NTUyhgLiR7UExBWUVSX0NTU19DTEFTU05BTUV9YCwgXCIjZmZmXCIpKTtcbiAgICB9LCBbXSk7XG4gIH1cbiAgY29uc3QgYWN0dWFsSW5wdXRQcm9wcyA9IHVzZU1lbW8xMygoKSA9PiBpbnB1dFByb3BzID8/IHt9LCBbaW5wdXRQcm9wc10pO1xuICBjb25zdCBicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yID0gdXNlTWVtbzEzKCgpID0+IHtcbiAgICByZXR1cm4gcGFzc2VkQnJvd3Nlck1lZGlhQ29udHJvbHNCZWhhdmlvciA/PyB7XG4gICAgICBtb2RlOiBcInByZXZlbnQtbWVkaWEtc2Vzc2lvblwiXG4gICAgfTtcbiAgfSwgW3Bhc3NlZEJyb3dzZXJNZWRpYUNvbnRyb2xzQmVoYXZpb3JdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3gxMyhJbnRlcm5hbHMxMi5Jc1BsYXllckNvbnRleHRQcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTMoU2hhcmVkUGxheWVyQ29udGV4dHMsIHtcbiAgICAgIHRpbWVsaW5lQ29udGV4dDogdGltZWxpbmVDb250ZXh0VmFsdWUsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBjb21wb3NpdGlvbkhlaWdodCxcbiAgICAgIGNvbXBvc2l0aW9uV2lkdGgsXG4gICAgICBkdXJhdGlvbkluRnJhbWVzLFxuICAgICAgZnBzLFxuICAgICAgbnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MsXG4gICAgICBpbml0aWFsbHlNdXRlZCxcbiAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTMoSW50ZXJuYWxzMTIuVGltZWxpbmUuU2V0VGltZWxpbmVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBzZXRUaW1lbGluZUNvbnRleHRWYWx1ZSxcbiAgICAgICAgY2hpbGRyZW46IC8qIEBfX1BVUkVfXyAqLyBqc3gxMyhQbGF5ZXJFbWl0dGVyUHJvdmlkZXIsIHtcbiAgICAgICAgICBjdXJyZW50UGxheWJhY2tSYXRlLFxuICAgICAgICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTMoUGxheWVyVUlfZGVmYXVsdCwge1xuICAgICAgICAgICAgcmVmOiByb290UmVmLFxuICAgICAgICAgICAgcG9zdGVyRmlsbE1vZGUsXG4gICAgICAgICAgICByZW5kZXJMb2FkaW5nLFxuICAgICAgICAgICAgYXV0b1BsYXk6IEJvb2xlYW4oYXV0b1BsYXkpLFxuICAgICAgICAgICAgbG9vcDogQm9vbGVhbihsb29wKSxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBCb29sZWFuKGNvbnRyb2xzKSxcbiAgICAgICAgICAgIGVycm9yRmFsbGJhY2ssXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIGlucHV0UHJvcHM6IGFjdHVhbElucHV0UHJvcHMsXG4gICAgICAgICAgICBhbGxvd0Z1bGxzY3JlZW46IEJvb2xlYW4oYWxsb3dGdWxsc2NyZWVuKSxcbiAgICAgICAgICAgIG1vdmVUb0JlZ2lubmluZ1doZW5FbmRlZDogQm9vbGVhbihtb3ZlVG9CZWdpbm5pbmdXaGVuRW5kZWQpLFxuICAgICAgICAgICAgY2xpY2tUb1BsYXk6IHR5cGVvZiBjbGlja1RvUGxheSA9PT0gXCJib29sZWFuXCIgPyBjbGlja1RvUGxheSA6IEJvb2xlYW4oY29udHJvbHMpLFxuICAgICAgICAgICAgc2hvd1ZvbHVtZUNvbnRyb2xzOiBCb29sZWFuKHNob3dWb2x1bWVDb250cm9scyksXG4gICAgICAgICAgICBkb3VibGVDbGlja1RvRnVsbHNjcmVlbjogQm9vbGVhbihkb3VibGVDbGlja1RvRnVsbHNjcmVlbiksXG4gICAgICAgICAgICBzcGFjZUtleVRvUGxheU9yUGF1c2U6IEJvb2xlYW4oc3BhY2VLZXlUb1BsYXlPclBhdXNlKSxcbiAgICAgICAgICAgIHBsYXliYWNrUmF0ZTogY3VycmVudFBsYXliYWNrUmF0ZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lMiA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaG93UG9zdGVyV2hlblVucGxheWVkOiBCb29sZWFuKHNob3dQb3N0ZXJXaGVuVW5wbGF5ZWQpLFxuICAgICAgICAgICAgc2hvd1Bvc3RlcldoZW5FbmRlZDogQm9vbGVhbihzaG93UG9zdGVyV2hlbkVuZGVkKSxcbiAgICAgICAgICAgIHNob3dQb3N0ZXJXaGVuUGF1c2VkOiBCb29sZWFuKHNob3dQb3N0ZXJXaGVuUGF1c2VkKSxcbiAgICAgICAgICAgIHNob3dQb3N0ZXJXaGVuQnVmZmVyaW5nOiBCb29sZWFuKHNob3dQb3N0ZXJXaGVuQnVmZmVyaW5nKSxcbiAgICAgICAgICAgIHJlbmRlclBvc3RlcixcbiAgICAgICAgICAgIGluRnJhbWU6IGluRnJhbWUgPz8gbnVsbCxcbiAgICAgICAgICAgIG91dEZyYW1lOiBvdXRGcmFtZSA/PyBudWxsLFxuICAgICAgICAgICAgaW5pdGlhbGx5U2hvd0NvbnRyb2xzOiBpbml0aWFsbHlTaG93Q29udHJvbHMgPz8gdHJ1ZSxcbiAgICAgICAgICAgIHJlbmRlckZ1bGxzY3JlZW46IHJlbmRlckZ1bGxzY3JlZW5CdXR0b24gPz8gbnVsbCxcbiAgICAgICAgICAgIHJlbmRlclBsYXlQYXVzZUJ1dHRvbjogcmVuZGVyUGxheVBhdXNlQnV0dG9uID8/IG51bGwsXG4gICAgICAgICAgICByZW5kZXJNdXRlQnV0dG9uOiByZW5kZXJNdXRlQnV0dG9uID8/IG51bGwsXG4gICAgICAgICAgICByZW5kZXJWb2x1bWVTbGlkZXI6IHJlbmRlclZvbHVtZVNsaWRlciA/PyBudWxsLFxuICAgICAgICAgICAgYWx3YXlzU2hvd0NvbnRyb2xzLFxuICAgICAgICAgICAgc2hvd1BsYXliYWNrUmF0ZUNvbnRyb2wsXG4gICAgICAgICAgICBidWZmZXJTdGF0ZURlbGF5SW5NaWxsaXNlY29uZHM6IGJ1ZmZlclN0YXRlRGVsYXlJbk1pbGxpc2Vjb25kcyA/PyAzMDAsXG4gICAgICAgICAgICBoaWRlQ29udHJvbHNXaGVuUG9pbnRlckRvZXNudE1vdmUsXG4gICAgICAgICAgICBvdmVyZmxvd1Zpc2libGUsXG4gICAgICAgICAgICBicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSk7XG59O1xudmFyIGZvcndhcmQgPSBmb3J3YXJkUmVmMjtcbnZhciBQbGF5ZXIgPSBmb3J3YXJkKFBsYXllckZuKTtcbi8vIHNyYy9UaHVtYm5haWwudHN4XG5pbXBvcnQge1xuICBmb3J3YXJkUmVmIGFzIGZvcndhcmRSZWY0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlIGFzIHVzZUltcGVyYXRpdmVIYW5kbGU0LFxuICB1c2VMYXlvdXRFZmZlY3QgYXMgdXNlTGF5b3V0RWZmZWN0MixcbiAgdXNlTWVtbyBhcyB1c2VNZW1vMTYsXG4gIHVzZVJlZiBhcyB1c2VSZWYxMixcbiAgdXNlU3RhdGUgYXMgdXNlU3RhdGUxNFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEludGVybmFscyBhcyBJbnRlcm5hbHMxNCwgcmFuZG9tIGFzIHJhbmRvbTIgfSBmcm9tIFwicmVtb3Rpb25cIjtcblxuLy8gc3JjL1RodW1ibmFpbFVJLnRzeFxuaW1wb3J0IFJlYWN0MTEsIHtcbiAgZm9yd2FyZFJlZiBhcyBmb3J3YXJkUmVmMyxcbiAgU3VzcGVuc2UgYXMgU3VzcGVuc2UyLFxuICB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazEyLFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUzLFxuICB1c2VNZW1vIGFzIHVzZU1lbW8xNSxcbiAgdXNlUmVmIGFzIHVzZVJlZjExXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgSW50ZXJuYWxzIGFzIEludGVybmFsczEzIH0gZnJvbSBcInJlbW90aW9uXCI7XG5cbi8vIHNyYy91c2UtdGh1bWJuYWlsLnRzXG5pbXBvcnQgeyB1c2VDb250ZXh0IGFzIHVzZUNvbnRleHQ3LCB1c2VNZW1vIGFzIHVzZU1lbW8xNCB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZVRodW1ibmFpbCA9ICgpID0+IHtcbiAgY29uc3QgZW1pdHRlciA9IHVzZUNvbnRleHQ3KFRodW1ibmFpbEVtaXR0ZXJDb250ZXh0KTtcbiAgaWYgKCFlbWl0dGVyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFBsYXllciBldmVudCBlbWl0dGVyIGNvbnRleHRcIik7XG4gIH1cbiAgY29uc3QgcmV0dXJuVmFsdWUgPSB1c2VNZW1vMTQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBlbWl0dGVyXG4gICAgfTtcbiAgfSwgW2VtaXR0ZXJdKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufTtcblxuLy8gc3JjL1RodW1ibmFpbFVJLnRzeFxuaW1wb3J0IHsganN4IGFzIGpzeDE0IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgcmVhY3RWZXJzaW9uMiA9IFJlYWN0MTEudmVyc2lvbi5zcGxpdChcIi5cIilbMF07XG5pZiAocmVhY3RWZXJzaW9uMiA9PT0gXCIwXCIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBWZXJzaW9uICR7cmVhY3RWZXJzaW9uMn0gb2YgXCJyZWFjdFwiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgUmVtb3Rpb25gKTtcbn1cbnZhciBkb2VzUmVhY3RWZXJzaW9uU3VwcG9ydFN1c3BlbnNlMiA9IHBhcnNlSW50KHJlYWN0VmVyc2lvbjIsIDEwKSA+PSAxODtcbnZhciBUaHVtYm5haWxVSSA9ICh7IHN0eWxlLCBpbnB1dFByb3BzLCBlcnJvckZhbGxiYWNrLCByZW5kZXJMb2FkaW5nLCBjbGFzc05hbWU6IGNsYXNzTmFtZTIsIG92ZXJmbG93VmlzaWJsZSB9LCByZWYpID0+IHtcbiAgY29uc3QgY29uZmlnID0gSW50ZXJuYWxzMTMudXNlVW5zYWZlVmlkZW9Db25maWcoKTtcbiAgY29uc3QgdmlkZW8gPSBJbnRlcm5hbHMxMy51c2VWaWRlbygpO1xuICBjb25zdCBjb250YWluZXIgPSB1c2VSZWYxMShudWxsKTtcbiAgY29uc3QgY2FudmFzU2l6ZSA9IHVzZUVsZW1lbnRTaXplKGNvbnRhaW5lciwge1xuICAgIHRyaWdnZXJPbldpbmRvd1Jlc2l6ZTogZmFsc2UsXG4gICAgc2hvdWxkQXBwbHlDc3NUcmFuc2Zvcm1zOiBmYWxzZVxuICB9KTtcbiAgY29uc3QgbGF5b3V0ID0gdXNlTWVtbzE1KCgpID0+IHtcbiAgICBpZiAoIWNvbmZpZyB8fCAhY2FudmFzU2l6ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjYWxjdWxhdGVDYW52YXNUcmFuc2Zvcm1hdGlvbih7XG4gICAgICBjYW52YXNTaXplLFxuICAgICAgY29tcG9zaXRpb25IZWlnaHQ6IGNvbmZpZy5oZWlnaHQsXG4gICAgICBjb21wb3NpdGlvbldpZHRoOiBjb25maWcud2lkdGgsXG4gICAgICBwcmV2aWV3U2l6ZTogXCJhdXRvXCJcbiAgICB9KTtcbiAgfSwgW2NhbnZhc1NpemUsIGNvbmZpZ10pO1xuICBjb25zdCBzY2FsZSA9IGxheW91dD8uc2NhbGUgPz8gMTtcbiAgY29uc3QgdGh1bWJuYWlsID0gdXNlVGh1bWJuYWlsKCk7XG4gIHVzZUJ1ZmZlclN0YXRlRW1pdHRlcih0aHVtYm5haWwuZW1pdHRlcik7XG4gIHVzZUltcGVyYXRpdmVIYW5kbGUzKHJlZiwgKCkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB7XG4gICAgICBnZXRDb250YWluZXJOb2RlOiAoKSA9PiBjb250YWluZXIuY3VycmVudCxcbiAgICAgIGdldFNjYWxlOiAoKSA9PiBzY2FsZVxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odGh1bWJuYWlsLmVtaXR0ZXIsIG1ldGhvZHMpO1xuICB9LCBbc2NhbGUsIHRodW1ibmFpbC5lbWl0dGVyXSk7XG4gIGNvbnN0IFZpZGVvQ29tcG9uZW50ID0gdmlkZW8gPyB2aWRlby5jb21wb25lbnQgOiBudWxsO1xuICBjb25zdCBvdXRlclN0eWxlID0gdXNlTWVtbzE1KCgpID0+IHtcbiAgICByZXR1cm4gY2FsY3VsYXRlT3V0ZXJTdHlsZSh7XG4gICAgICBjb25maWcsXG4gICAgICBzdHlsZSxcbiAgICAgIGNhbnZhc1NpemUsXG4gICAgICBvdmVyZmxvd1Zpc2libGUsXG4gICAgICBsYXlvdXRcbiAgICB9KTtcbiAgfSwgW2NhbnZhc1NpemUsIGNvbmZpZywgbGF5b3V0LCBvdmVyZmxvd1Zpc2libGUsIHN0eWxlXSk7XG4gIGNvbnN0IG91dGVyID0gdXNlTWVtbzE1KCgpID0+IHtcbiAgICByZXR1cm4gY2FsY3VsYXRlT3V0ZXIoeyBjb25maWcsIGxheW91dCwgc2NhbGUsIG92ZXJmbG93VmlzaWJsZSB9KTtcbiAgfSwgW2NvbmZpZywgbGF5b3V0LCBvdmVyZmxvd1Zpc2libGUsIHNjYWxlXSk7XG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlMyA9IHVzZU1lbW8xNSgoKSA9PiB7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZUNvbnRhaW5lclN0eWxlKHtcbiAgICAgIGNhbnZhc1NpemUsXG4gICAgICBjb25maWcsXG4gICAgICBsYXlvdXQsXG4gICAgICBzY2FsZSxcbiAgICAgIG92ZXJmbG93VmlzaWJsZVxuICAgIH0pO1xuICB9LCBbY2FudmFzU2l6ZSwgY29uZmlnLCBsYXlvdXQsIG92ZXJmbG93VmlzaWJsZSwgc2NhbGVdKTtcbiAgY29uc3Qgb25FcnJvciA9IHVzZUNhbGxiYWNrMTIoKGVycm9yKSA9PiB7XG4gICAgdGh1bWJuYWlsLmVtaXR0ZXIuZGlzcGF0Y2hFcnJvcihlcnJvcik7XG4gIH0sIFt0aHVtYm5haWwuZW1pdHRlcl0pO1xuICBjb25zdCBsb2FkaW5nTWFya3VwID0gdXNlTWVtbzE1KCgpID0+IHtcbiAgICByZXR1cm4gcmVuZGVyTG9hZGluZyA/IHJlbmRlckxvYWRpbmcoe1xuICAgICAgaGVpZ2h0OiBvdXRlclN0eWxlLmhlaWdodCxcbiAgICAgIHdpZHRoOiBvdXRlclN0eWxlLndpZHRoLFxuICAgICAgaXNCdWZmZXJpbmc6IGZhbHNlXG4gICAgfSkgOiBudWxsO1xuICB9LCBbb3V0ZXJTdHlsZS5oZWlnaHQsIG91dGVyU3R5bGUud2lkdGgsIHJlbmRlckxvYWRpbmddKTtcbiAgY29uc3QgY3VycmVudFNjYWxlQ29udGV4dCA9IHVzZU1lbW8xNSgoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic2NhbGVcIixcbiAgICAgIHNjYWxlXG4gICAgfTtcbiAgfSwgW3NjYWxlXSk7XG4gIGlmICghY29uZmlnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY29udGVudCA9IC8qIEBfX1BVUkVfXyAqLyBqc3gxNChcImRpdlwiLCB7XG4gICAgc3R5bGU6IG91dGVyLFxuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTQoXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IGNvbnRhaW5lclN0eWxlMyxcbiAgICAgIGNsYXNzTmFtZTogUExBWUVSX0NTU19DTEFTU05BTUUsXG4gICAgICBjaGlsZHJlbjogVmlkZW9Db21wb25lbnQgPyAvKiBAX19QVVJFX18gKi8ganN4MTQoRXJyb3JCb3VuZGFyeSwge1xuICAgICAgICBvbkVycm9yLFxuICAgICAgICBlcnJvckZhbGxiYWNrLFxuICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDE0KEludGVybmFsczEzLkN1cnJlbnRTY2FsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICB2YWx1ZTogY3VycmVudFNjYWxlQ29udGV4dCxcbiAgICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDE0KFZpZGVvQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAuLi52aWRlbz8ucHJvcHMgPz8ge30sXG4gICAgICAgICAgICAuLi5pbnB1dFByb3BzID8/IHt9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pIDogbnVsbFxuICAgIH0pXG4gIH0pO1xuICBpZiAoSVNfTk9ERSAmJiAhZG9lc1JlYWN0VmVyc2lvblN1cHBvcnRTdXNwZW5zZTIpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGpzeDE0KFwiZGl2XCIsIHtcbiAgICAgIHJlZjogY29udGFpbmVyLFxuICAgICAgc3R5bGU6IG91dGVyU3R5bGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZTIsXG4gICAgICBjaGlsZHJlbjogY29udGVudFxuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4MTQoXCJkaXZcIiwge1xuICAgIHJlZjogY29udGFpbmVyLFxuICAgIHN0eWxlOiBvdXRlclN0eWxlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lMixcbiAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDE0KFN1c3BlbnNlMiwge1xuICAgICAgZmFsbGJhY2s6IGxvYWRpbmdNYXJrdXAsXG4gICAgICBjaGlsZHJlbjogY29udGVudFxuICAgIH0pXG4gIH0pO1xufTtcbnZhciBUaHVtYm5haWxVSV9kZWZhdWx0ID0gZm9yd2FyZFJlZjMoVGh1bWJuYWlsVUkpO1xuXG4vLyBzcmMvVGh1bWJuYWlsLnRzeFxuaW1wb3J0IHsganN4IGFzIGpzeDE1IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgVGh1bWJuYWlsRm4gPSAoe1xuICBmcmFtZVRvRGlzcGxheSxcbiAgc3R5bGUsXG4gIGlucHV0UHJvcHMsXG4gIGNvbXBvc2l0aW9uSGVpZ2h0LFxuICBjb21wb3NpdGlvbldpZHRoLFxuICBkdXJhdGlvbkluRnJhbWVzLFxuICBmcHMsXG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lMixcbiAgZXJyb3JGYWxsYmFjayA9ICgpID0+IFwiXFx1MjZBMFxcdUZFMEZcIixcbiAgcmVuZGVyTG9hZGluZyxcbiAgb3ZlcmZsb3dWaXNpYmxlID0gZmFsc2UsXG4gIC4uLmNvbXBvbmVudFByb3BzXG59LCByZWYpID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB1c2VMYXlvdXRFZmZlY3QyKCgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdGlvbl9pc1BsYXllciA9IHRydWU7XG4gICAgfSwgW10pO1xuICB9XG4gIGNvbnN0IFt0aHVtYm5haWxJZF0gPSB1c2VTdGF0ZTE0KCgpID0+IFN0cmluZyhyYW5kb20yKG51bGwpKSk7XG4gIGNvbnN0IHJvb3RSZWYgPSB1c2VSZWYxMihudWxsKTtcbiAgY29uc3QgdGltZWxpbmVTdGF0ZSA9IHVzZU1lbW8xNigoKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSB7XG4gICAgICBwbGF5aW5nOiBmYWxzZSxcbiAgICAgIGZyYW1lOiB7XG4gICAgICAgIFtQTEFZRVJfQ09NUF9JRF06IGZyYW1lVG9EaXNwbGF5XG4gICAgICB9LFxuICAgICAgcm9vdElkOiB0aHVtYm5haWxJZCxcbiAgICAgIGltcGVyYXRpdmVQbGF5aW5nOiB7XG4gICAgICAgIGN1cnJlbnQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcGxheWJhY2tSYXRlOiAxLFxuICAgICAgc2V0UGxheWJhY2tSYXRlOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInRodW1ibmFpbFwiKTtcbiAgICAgIH0sXG4gICAgICBhdWRpb0FuZFZpZGVvVGFnczogeyBjdXJyZW50OiBbXSB9XG4gICAgfTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sIFtmcmFtZVRvRGlzcGxheSwgdGh1bWJuYWlsSWRdKTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTQocmVmLCAoKSA9PiByb290UmVmLmN1cnJlbnQsIFtdKTtcbiAgY29uc3QgQ29tcG9uZW50ID0gSW50ZXJuYWxzMTQudXNlTGF6eUNvbXBvbmVudChjb21wb25lbnRQcm9wcyk7XG4gIGNvbnN0IFtlbWl0dGVyXSA9IHVzZVN0YXRlMTQoKCkgPT4gbmV3IFRodW1ibmFpbEVtaXR0ZXIpO1xuICBjb25zdCBwYXNzZWRJbnB1dFByb3BzID0gdXNlTWVtbzE2KCgpID0+IHtcbiAgICByZXR1cm4gaW5wdXRQcm9wcyA/PyB7fTtcbiAgfSwgW2lucHV0UHJvcHNdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBqc3gxNShJbnRlcm5hbHMxNC5Jc1BsYXllckNvbnRleHRQcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiAvKiBAX19QVVJFX18gKi8ganN4MTUoU2hhcmVkUGxheWVyQ29udGV4dHMsIHtcbiAgICAgIHRpbWVsaW5lQ29udGV4dDogdGltZWxpbmVTdGF0ZSxcbiAgICAgIGNvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgY29tcG9zaXRpb25IZWlnaHQsXG4gICAgICBjb21wb3NpdGlvbldpZHRoLFxuICAgICAgZHVyYXRpb25JbkZyYW1lcyxcbiAgICAgIGZwcyxcbiAgICAgIG51bWJlck9mU2hhcmVkQXVkaW9UYWdzOiAwLFxuICAgICAgaW5pdGlhbGx5TXV0ZWQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDE1KFRodW1ibmFpbEVtaXR0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBlbWl0dGVyLFxuICAgICAgICBjaGlsZHJlbjogLyogQF9fUFVSRV9fICovIGpzeDE1KFRodW1ibmFpbFVJX2RlZmF1bHQsIHtcbiAgICAgICAgICByZWY6IHJvb3RSZWYsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUyLFxuICAgICAgICAgIGVycm9yRmFsbGJhY2ssXG4gICAgICAgICAgaW5wdXRQcm9wczogcGFzc2VkSW5wdXRQcm9wcyxcbiAgICAgICAgICByZW5kZXJMb2FkaW5nLFxuICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgIG92ZXJmbG93VmlzaWJsZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KTtcbn07XG52YXIgZm9yd2FyZDIgPSBmb3J3YXJkUmVmNDtcbnZhciBUaHVtYm5haWwgPSBmb3J3YXJkMihUaHVtYm5haWxGbik7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIFBsYXllckludGVybmFscyA9IHtcbiAgUGxheWVyRXZlbnRFbWl0dGVyQ29udGV4dCxcbiAgUGxheWVyRW1pdHRlcixcbiAgdXNlUGxheWVyLFxuICB1c2VQbGF5YmFjayxcbiAgdXNlRWxlbWVudFNpemUsXG4gIGNhbGN1bGF0ZUNhbnZhc1RyYW5zZm9ybWF0aW9uLFxuICB1c2VIb3ZlclN0YXRlLFxuICB1cGRhdGVBbGxFbGVtZW50c1NpemVzLFxuICBQbGF5ZXJFbWl0dGVyUHJvdmlkZXIsXG4gIEJ1ZmZlcmluZ0luZGljYXRvclxufTtcbmV4cG9ydCB7XG4gIFRodW1ibmFpbCxcbiAgUGxheWVySW50ZXJuYWxzLFxuICBQbGF5ZXJcbn07XG4iXSwibmFtZXMiOlsianN4IiwianN4cyIsIklDT05fU0laRSIsImZ1bGxzY3JlZW5JY29uU2l6ZSIsIlBsYXlJY29uIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiZmlsbCIsImNoaWxkcmVuIiwiZCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTGluZWpvaW4iLCJQYXVzZUljb24iLCJ4IiwieSIsInJ5IiwicngiLCJGdWxsc2NyZWVuSWNvbiIsImlzRnVsbHNjcmVlbiIsInZpZXdTaXplIiwib3V0IiwibWlkZGxlSW5zZXQiLCJpbnNldCIsIlZvbHVtZU9mZkljb24iLCJWb2x1bWVPbkljb24iLCJqc3gyIiwianN4czIiLCJGcmFnbWVudCIsImNsYXNzTmFtZSIsInJlbW90aW9uQnVmZmVyaW5nQW5pbWF0aW9uIiwicGxheWVyU3R5bGUiLCJvdmVyZmxvdyIsImxpbmVIZWlnaHQiLCJmb250U2l6ZSIsInN0dWRpb1N0eWxlIiwiQnVmZmVyaW5nSW5kaWNhdG9yIiwidHlwZSIsInN0eWxlIiwic3Ryb2tlTGluZWNhcCIsIkludGVybmFscyIsImNhbGN1bGF0ZVBsYXllclNpemUiLCJjdXJyZW50U2l6ZSIsImNvbXBvc2l0aW9uV2lkdGgiLCJjb21wb3NpdGlvbkhlaWdodCIsInVuZGVmaW5lZCIsImFzcGVjdFJhdGlvIiwiam9pbiIsImNhbGN1bGF0ZUNhbnZhc1RyYW5zZm9ybWF0aW9uIiwicHJldmlld1NpemUiLCJjYW52YXNTaXplIiwic2NhbGUiLCJjYWxjdWxhdGVTY2FsZSIsImNvcnJlY3Rpb24iLCJ4Q29ycmVjdGlvbiIsInlDb3JyZWN0aW9uIiwiY2VudGVyWCIsImNlbnRlclkiLCJjYWxjdWxhdGVPdXRlclN0eWxlIiwiY29uZmlnIiwib3ZlcmZsb3dWaXNpYmxlIiwibGF5b3V0IiwicG9zaXRpb24iLCJvcGFjaXR5IiwiY2FsY3VsYXRlQ29udGFpbmVyU3R5bGUiLCJkaXNwbGF5IiwidHJhbnNmb3JtIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImNhbGN1bGF0ZU91dGVyIiwiZmxleERpcmVjdGlvbiIsImxlZnQiLCJ0b3AiLCJSZWFjdCIsIlBsYXllckV2ZW50RW1pdHRlckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiVGh1bWJuYWlsRW1pdHRlckNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlQ29udGV4dDIiLCJ1c2VFZmZlY3QiLCJ1c2VFZmZlY3QyIiwidXNlU3RhdGUiLCJJbnRlcm5hbHMzIiwiUGxheWVyRW1pdHRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJuYW1lIiwiY2FsbGJhY2siLCJsaXN0ZW5lcnMiLCJwdXNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZpbHRlciIsImwiLCJkaXNwYXRjaEV2ZW50IiwiZGlzcGF0Y2hOYW1lIiwiY29udGV4dCIsImZvckVhY2giLCJkZXRhaWwiLCJkaXNwYXRjaFNlZWsiLCJmcmFtZSIsImRpc3BhdGNoVm9sdW1lQ2hhbmdlIiwidm9sdW1lIiwiZGlzcGF0Y2hQYXVzZSIsImRpc3BhdGNoUGxheSIsImRpc3BhdGNoRW5kZWQiLCJkaXNwYXRjaFJhdGVDaGFuZ2UiLCJwbGF5YmFja1JhdGUiLCJkaXNwYXRjaFNjYWxlQ2hhbmdlIiwiZGlzcGF0Y2hFcnJvciIsImVycm9yIiwiZGlzcGF0Y2hUaW1lVXBkYXRlIiwiZXZlbnQiLCJkaXNwYXRjaEZyYW1lVXBkYXRlIiwiZGlzcGF0Y2hGdWxsc2NyZWVuQ2hhbmdlIiwiZGlzcGF0Y2hNdXRlQ2hhbmdlIiwiZGlzcGF0Y2hXYWl0aW5nIiwiZGlzcGF0Y2hSZXN1bWUiLCJlbmRlZCIsInBhdXNlIiwicGxheSIsInJhdGVjaGFuZ2UiLCJzY2FsZWNoYW5nZSIsInNlZWtlZCIsInRpbWV1cGRhdGUiLCJmcmFtZXVwZGF0ZSIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJ2b2x1bWVjaGFuZ2UiLCJtdXRlY2hhbmdlIiwid2FpdGluZyIsInJlc3VtZSIsIlRodW1ibmFpbEVtaXR0ZXIiLCJJbnRlcm5hbHMyIiwidXNlQnVmZmVyU3RhdGVFbWl0dGVyIiwiZW1pdHRlciIsImJ1ZmZlck1hbmFnZXIiLCJCdWZmZXJpbmdDb250ZXh0UmVhY3QiLCJFcnJvciIsImNsZWFyMSIsImxpc3RlbkZvckJ1ZmZlcmluZyIsImJ1ZmZlcmluZyIsImN1cnJlbnQiLCJjbGVhcjIiLCJsaXN0ZW5Gb3JSZXN1bWUiLCJyZW1vdmUiLCJqc3gzIiwiUGxheWVyRW1pdHRlclByb3ZpZGVyIiwiY3VycmVudFBsYXliYWNrUmF0ZSIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VFZmZlY3QzIiwidXNlU3RhdGUyIiwidXNlSG92ZXJTdGF0ZSIsInJlZiIsImhpZGVDb250cm9sc1doZW5Qb2ludGVyRG9lc250TW92ZSIsImhvdmVyZWQiLCJzZXRIb3ZlcmVkIiwiaG92ZXJUaW1lb3V0IiwiYWRkSG92ZXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIm9uSG92ZXIiLCJvbkxlYXZlIiwib25Nb3ZlIiwidXNlQ29udGV4dDQiLCJ1c2VFZmZlY3Q2IiwidXNlUmVmIiwidXNlUmVmMyIsIkludGVybmFsczUiLCJ1c2VFZmZlY3Q0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0MyIsInVzZU1lbW8iLCJ1c2VTdGF0ZTMiLCJJbnRlcm5hbHM0IiwidXNlUGxheWVyIiwicGxheWluZyIsInNldFBsYXlpbmciLCJpbXBlcmF0aXZlUGxheWluZyIsIlRpbWVsaW5lIiwidXNlUGxheWluZ1N0YXRlIiwiaGFzUGxheWVkIiwic2V0SGFzUGxheWVkIiwidXNlVGltZWxpbmVQb3NpdGlvbiIsInBsYXlTdGFydCIsInNldEZyYW1lIiwidXNlVGltZWxpbmVTZXRGcmFtZSIsInNldFRpbWVsaW5lUG9zaXRpb24iLCJhdWRpb0NvbnRleHQiLCJTaGFyZWRBdWRpb0NvbnRleHQiLCJhdWRpb0FuZFZpZGVvVGFncyIsIlRpbWVsaW5lQ29udGV4dCIsImZyYW1lUmVmIiwidmlkZW8iLCJ1c2VWaWRlbyIsInVzZVVuc2FmZVZpZGVvQ29uZmlnIiwibGFzdEZyYW1lIiwiZHVyYXRpb25JbkZyYW1lcyIsImlzTGFzdEZyYW1lIiwiaXNGaXJzdEZyYW1lIiwiVHlwZUVycm9yIiwiYnVmZmVyaW5nQ29udGV4dCIsInNlZWsiLCJuZXdGcmFtZSIsImlkIiwiYyIsImUiLCJudW1iZXJPZkF1ZGlvVGFncyIsInBsYXlBbGxBdWRpb3MiLCJhIiwicGF1c2VBbmRSZXR1cm5Ub1BsYXlTdGFydCIsInZpZGVvSWQiLCJmcmFtZUJhY2siLCJmcmFtZXMiLCJwcmV2Iiwid2luZG93IiwicmVtb3Rpb25faW5pdGlhbEZyYW1lIiwiTWF0aCIsIm1heCIsImZyYW1lRm9yd2FyZCIsIm1pbiIsInJldHVyblZhbHVlIiwiZ2V0Q3VycmVudEZyYW1lIiwiaXNQbGF5aW5nIiwiaXNCdWZmZXJpbmciLCJyZW1vdGlvbkludGVybmFsX2N1cnJlbnRGcmFtZVJlZiIsInVzZUJyb3dzZXJNZWRpYVNlc3Npb24iLCJicm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yIiwidmlkZW9Db25maWciLCJuYXZpZ2F0b3IiLCJtZWRpYVNlc3Npb24iLCJtb2RlIiwicGxheWJhY2tTdGF0ZSIsIm9uVGltZVVwZGF0ZSIsInNldFBvc2l0aW9uU3RhdGUiLCJkdXJhdGlvbiIsImZwcyIsInNldEFjdGlvbkhhbmRsZXIiLCJzZWVrVGltZSIsInJvdW5kIiwibWV0YWRhdGEiLCJjYWxjdWxhdGVOZXh0RnJhbWUiLCJ0aW1lIiwiY3VycmVudEZyYW1lIiwic3RhcnRGcmFtZSIsInBsYXliYWNrU3BlZWQiLCJhY3R1YWxMYXN0RnJhbWUiLCJhY3R1YWxGaXJzdEZyYW1lIiwiZnJhbWVzQWR2YW5jZWQiLCJzaG91bGRMb29wIiwib3AiLCJjZWlsIiwiZmxvb3IiLCJmcmFtZXNUb0FkdmFuY2UiLCJuZXh0RnJhbWUiLCJpc0N1cnJlbnRGcmFtZU91dHNpZGUiLCJpc05leHRGcmFtZU91dHNpZGUiLCJoYXNFbmRlZCIsInVzZUVmZmVjdDUiLCJ1c2VSZWYyIiwiZ2V0SXNCYWNrZ3JvdW5kZWQiLCJkb2N1bWVudCIsInZpc2liaWxpdHlTdGF0ZSIsInVzZUlzQmFja2dyb3VuZGVkIiwiaXNCYWNrZ3JvdW5kZWQiLCJvblZpc2liaWxpdHlDaGFuZ2UiLCJ1c2VQbGF5YmFjayIsImxvb3AiLCJtb3ZlVG9CZWdpbm5pbmdXaGVuRW5kZWQiLCJpbkZyYW1lIiwib3V0RnJhbWUiLCJpc0JhY2tncm91bmRlZFJlZiIsImxhc3RUaW1lVXBkYXRlRXZlbnQiLCJvbkJ1ZmZlckNsZWFyIiwicGVyZm9ybWFuY2UiLCJub3ciLCJvblJlc3VtZUNsZWFyIiwiaGFzQmVlblN0b3BwZWQiLCJyZXFBbmltRnJhbWVDYWxsIiwic3RhcnRlZFRpbWUiLCJjYW5jZWxRdWV1ZWRGcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic3RvcCIsInF1ZXVlTmV4dEZyYW1lIiwic3RvcExpc3RlbmluZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidXNlQ2FsbGJhY2syIiwidXNlRWZmZWN0NyIsInVzZU1lbW8yIiwidXNlU3RhdGU0IiwiZWxlbWVudFNpemVIb29rcyIsInVwZGF0ZUFsbEVsZW1lbnRzU2l6ZXMiLCJsaXN0ZW5lciIsInVzZUVsZW1lbnRTaXplIiwib3B0aW9ucyIsInNpemUiLCJzZXRTaXplIiwicmVjdCIsImdldENsaWVudFJlY3RzIiwid2luZG93U2l6ZSIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsIm9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiY29udGVudFJlY3QiLCJ0YXJnZXQiLCJuZXdTaXplIiwicHJvYmFibGVDc3NQYXJlbnRTY2FsZSIsInNob3VsZEFwcGx5Q3NzVHJhbnNmb3JtcyIsInVwZGF0ZVNpemUiLCJwcmV2U3RhdGUiLCJpc1NhbWUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwidHJpZ2dlck9uV2luZG93UmVzaXplIiwicmVmcmVzaCIsImZvcndhcmRSZWYiLCJmb3J3YXJkUmVmMiIsInVzZUVmZmVjdDEzIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUltcGVyYXRpdmVIYW5kbGUyIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbzEzIiwidXNlUmVmMTAiLCJ1c2VTdGF0ZTEzIiwiQ29tcG9zaXRpb24iLCJJbnRlcm5hbHMxMiIsIlJlYWN0OCIsIlN1c3BlbnNlIiwidXNlQ2FsbGJhY2sxMCIsInVzZUNvbnRleHQ2IiwidXNlRWZmZWN0MTIiLCJ1c2VNZW1vMTEiLCJ1c2VSZWY5IiwidXNlU3RhdGUxMSIsIkludGVybmFsczEwIiwidXNlQ2FsbGJhY2s3IiwidXNlRWZmZWN0MTEiLCJ1c2VNZW1vOCIsInVzZVJlZjciLCJ1c2VTdGF0ZTEwIiwiSW50ZXJuYWxzOSIsImpzeDQiLCJEZWZhdWx0UGxheVBhdXNlQnV0dG9uIiwidXNlQ2FsbGJhY2s0IiwidXNlTWVtbzQiLCJ1c2VSZWY0IiwidXNlU3RhdGU2IiwiSW50ZXJuYWxzNiIsIlJlYWN0MyIsInVzZUNhbGxiYWNrMyIsInVzZU1lbW8zIiwidXNlU3RhdGU1IiwicmFuZG9tIiwianN4NSIsImpzeHMzIiwiS05PQl9TSVpFIiwiQkFSX0hFSUdIVCIsIkRlZmF1bHRWb2x1bWVTbGlkZXIiLCJpc1ZlcnRpY2FsIiwib25CbHVyIiwiaW5wdXRSZWYiLCJzZXRWb2x1bWUiLCJzbGlkZXJDb250YWluZXIiLCJwYWRkaW5nTGVmdCIsImNvbW1vbiIsIlZPTFVNRV9TTElERVJfV0lEVEgiLCJhbGlnbkl0ZW1zIiwicmFuZG9tSWQiLCJ1c2VJZCIsInJhbmRvbUNsYXNzIiwicmVwbGFjZSIsIm9uVm9sdW1lQ2hhbmdlIiwicGFyc2VGbG9hdCIsImlucHV0U3R5bGUiLCJjb21tb25TdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJjdXJzb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJib3R0b20iLCJzbGlkZXJTdHlsZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwib25DaGFuZ2UiLCJzdGVwIiwicmVuZGVyRGVmYXVsdFZvbHVtZVNsaWRlciIsInByb3BzIiwianN4NiIsImpzeHM0IiwiTWVkaWFWb2x1bWVTbGlkZXIiLCJkaXNwbGF5VmVydGljYWxWb2x1bWVTbGlkZXIiLCJyZW5kZXJNdXRlQnV0dG9uIiwicmVuZGVyVm9sdW1lU2xpZGVyIiwibWVkaWFNdXRlZCIsInNldE1lZGlhTXV0ZWQiLCJ1c2VNZWRpYU11dGVkU3RhdGUiLCJtZWRpYVZvbHVtZSIsInNldE1lZGlhVm9sdW1lIiwidXNlTWVkaWFWb2x1bWVTdGF0ZSIsImZvY3VzZWQiLCJzZXRGb2N1c2VkIiwicGFyZW50RGl2UmVmIiwiaG92ZXIiLCJhY3RpdmVFbGVtZW50IiwiaXNWb2x1bWUwIiwib25DbGljayIsIm11dGUiLCJwYXJlbnREaXZTdHlsZSIsImJhY2tncm91bmQiLCJib3JkZXIiLCJqdXN0aWZ5Q29udGVudCIsInRvdWNoQWN0aW9uIiwidm9sdW1lQ29udGFpbmVyIiwiYXBwZWFyYW5jZSIsInBhZGRpbmciLCJyZW5kZXJEZWZhdWx0TXV0ZUJ1dHRvbiIsIm11dGVkIiwiaXNNdXRlZE9yWmVybyIsInRpdGxlIiwib25Gb2N1cyIsIm11dGVCdXR0b24iLCJ2b2x1bWVTbGlkZXIiLCJpc0lvc1NhZmFyaSIsInVzZUNhbGxiYWNrNSIsInVzZUNvbnRleHQ1IiwidXNlRWZmZWN0OSIsInVzZU1lbW81IiwidXNlU3RhdGU4IiwiSW50ZXJuYWxzNyIsInVzZUVmZmVjdDgiLCJ1c2VSZWY1IiwidXNlU3RhdGU3IiwidXNlQ29tcG9uZW50VmlzaWJsZSIsImluaXRpYWxJc1Zpc2libGUiLCJpc0NvbXBvbmVudFZpc2libGUiLCJzZXRJc0NvbXBvbmVudFZpc2libGUiLCJoYW5kbGVDbGlja091dHNpZGUiLCJjb250YWlucyIsImpzeDciLCJqc3hzNSIsIkJPVFRPTSIsIlRIUkVTSE9MRCIsInJhdGVEaXYiLCJwYWRkaW5nUmlnaHQiLCJjaGVja21hcmtDb250YWluZXIiLCJjaGVja21hcmtTdHlsZSIsImNvbG9yIiwiQ2hlY2ttYXJrIiwiUGxheWJhY2tyYXRlT3B0aW9uIiwicmF0ZSIsIm9uU2VsZWN0Iiwic2VsZWN0ZWRSYXRlIiwia2V5Ym9hcmRTZWxlY3RlZFJhdGUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImlzRm9jdXNlZCIsImFjdHVhbFN0eWxlIiwidGFiSW5kZXgiLCJ0b0ZpeGVkIiwiUGxheWJhY2tQb3B1cCIsInBsYXliYWNrUmF0ZXMiLCJzZXRQbGF5YmFja1JhdGUiLCJzZXRLZXlib2FyZFNlbGVjdGVkUmF0ZSIsImtleSIsImN1cnJlbnRJbmRleCIsImZpbmRJbmRleCIsImxlbmd0aCIsInBsYXliYWNrUG9wdXAiLCJyaWdodCIsIm1heEhlaWdodCIsInRleHRBbGlnbiIsIm1hcCIsImxhYmVsIiwiZm9udFdlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGxheWVyQnV0dG9uU3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJidXR0b24iLCJQbGF5YmFja3JhdGVDb250cm9sIiwicHJldklzQ29tcG9uZW50VmlzaWJsZSIsInVzZUNhbGxiYWNrNiIsInVzZUVmZmVjdDEwIiwidXNlTWVtbzYiLCJ1c2VSZWY2IiwidXNlU3RhdGU5IiwiSW50ZXJuYWxzOCIsImludGVycG9sYXRlIiwianN4OCIsImpzeHM2IiwiZ2V0RnJhbWVGcm9tWCIsImNsaWVudFgiLCJwb3MiLCJleHRyYXBvbGF0ZUxlZnQiLCJleHRyYXBvbGF0ZVJpZ2h0IiwiQkFSX0hFSUdIVDIiLCJLTk9CX1NJWkUyIiwiVkVSVElDQUxfUEFERElORyIsImNvbnRhaW5lclN0eWxlIiwidXNlclNlbGVjdCIsIldlYmtpdFVzZXJTZWxlY3QiLCJib3hTaXppbmciLCJiYXJCYWNrZ3JvdW5kIiwiZmluZEJvZHlJbldoaWNoRGl2SXNMb2NhdGVkIiwiZGl2IiwicGFyZW50RWxlbWVudCIsIlBsYXllclNlZWtCYXIiLCJvblNlZWtFbmQiLCJvblNlZWtTdGFydCIsImNvbnRhaW5lclJlZiIsImJhckhvdmVyZWQiLCJkcmFnZ2luZyIsInNldERyYWdnaW5nIiwib25Qb2ludGVyRG93biIsInBvc0xlZnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfZnJhbWUiLCJ3YXNQbGF5aW5nIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwiYm9keSIsImtub2JTdHlsZSIsImJveFNoYWRvdyIsIk51bWJlciIsImZpbGxTdHlsZSIsImFjdGl2ZSIsImZvcm1hdFRpbWUiLCJ0aW1lSW5TZWNvbmRzIiwibWludXRlcyIsInNlY29uZHMiLCJTdHJpbmciLCJwYWRTdGFydCIsInVzZU1lbW83IiwiWF9TUEFDRVIiLCJYX1BBRERJTkciLCJ1c2VWaWRlb0NvbnRyb2xzUmVzaXplIiwiYWxsb3dGdWxsc2NyZWVuIiwiYWxsb3dGdWxsU2NyZWVuIiwicGxheWVyV2lkdGgiLCJyZXNpemVJbmZvIiwicGxheVBhdXNlSWNvblNpemUiLCJ2b2x1bWVJY29uU2l6ZSIsIl9mdWxsc2NyZWVuSWNvblNpemUiLCJlbGVtZW50c1NpemUiLCJtYXhUaW1lTGFiZWxXaWR0aCIsIm1heFRpbWVMYWJlbFdpZHRoV2l0aG91dE5lZ2F0aXZlVmFsdWUiLCJhdmFpbGFibGVUaW1lTGFiZWxXaWR0aElmVm9sdW1lT3BlbiIsImNvbXB1dGVkTGFiZWxXaWR0aCIsIm1pbldpZHRoRm9ySG9yaXpvbnRhbERpc3BsYXkiLCJqc3g5IiwianN4czciLCJGcmFnbWVudDIiLCJncmFkaWVudFN0ZXBzIiwiZ3JhZGllbnRPcGFjaXRpZXMiLCJnbG9iYWxHcmFkaWVudE9wYWNpdHkiLCJjb250YWluZXJTdHlsZTIiLCJnIiwiaSIsImJhY2tncm91bmRTaXplIiwidHJhbnNpdGlvbiIsImNvbnRyb2xzUm93IiwibGVmdFBhcnRTdHlsZSIsInhTcGFjZXIiLCJ5U3BhY2VyIiwiZmxleDEiLCJmbGV4IiwiZnVsbHNjcmVlbiIsIkNvbnRyb2xzIiwicGxheWVyIiwic2hvd1ZvbHVtZUNvbnRyb2xzIiwib25GdWxsc2NyZWVuQnV0dG9uQ2xpY2siLCJvbkV4aXRGdWxsc2NyZWVuQnV0dG9uQ2xpY2siLCJzcGFjZUtleVRvUGxheU9yUGF1c2UiLCJpbml0aWFsbHlTaG93Q29udHJvbHMiLCJyZW5kZXJQbGF5UGF1c2VCdXR0b24iLCJyZW5kZXJGdWxsc2NyZWVuQnV0dG9uIiwiYWx3YXlzU2hvd0NvbnRyb2xzIiwic2hvd1BsYXliYWNrUmF0ZUNvbnRyb2wiLCJvbkRvdWJsZUNsaWNrIiwicGxheUJ1dHRvblJlZiIsInN1cHBvcnRzRnVsbHNjcmVlbiIsInNldFN1cHBvcnRzRnVsbHNjcmVlbiIsInNob3VsZFNob3dJbml0aWFsbHkiLCJzZXRJbml0aWFsbHlTaG93Q29udHJvbHMiLCJpc05hTiIsImlzRmluaXRlIiwiY29udGFpbmVyQ3NzIiwic2hvdWxkU2hvdyIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsImZ1bGxzY3JlZW5FbmFibGVkIiwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWQiLCJ0aW1lb3V0IiwidGltZUxhYmVsIiwiZm9udEZhbWlseSIsIm1heFdpZHRoIiwidGV4dE92ZXJmbG93IiwiQXJyYXkiLCJpc0FycmF5IiwiZmxleFJlZiIsIm9uUG9pbnRlckRvd25JZkNvbnRhaW5lciIsIm9uRG91YmxlQ2xpY2tJZkNvbnRhaW5lciIsIlJlYWN0NyIsImpzeDEwIiwiZXJyb3JTdHlsZSIsIkVycm9yQm91bmRhcnkiLCJDb21wb25lbnQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJoYXNFcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwib25FcnJvciIsInJlbmRlciIsInN0YXRlIiwiZXJyb3JGYWxsYmFjayIsIlBMQVlFUl9DU1NfQ0xBU1NOQU1FIiwiSVNfTk9ERSIsInVzZUNhbGxiYWNrOSIsInVzZU1lbW8xMCIsImNhbmNlbGxhYmxlUHJvbWlzZSIsInByb21pc2UiLCJpc0NhbmNlbGVkIiwid3JhcHBlZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsImNhbmNlbCIsImRlbGF5IiwibiIsInVzZUNhbGxiYWNrOCIsInVzZU1lbW85IiwidXNlUmVmOCIsInVzZUNhbmNlbGxhYmxlUHJvbWlzZXMiLCJwZW5kaW5nUHJvbWlzZXMiLCJhcHBlbmRQZW5kaW5nUHJvbWlzZSIsInJlbW92ZVBlbmRpbmdQcm9taXNlIiwicCIsImNsZWFyUGVuZGluZ1Byb21pc2VzIiwiYXBpIiwidXNlQ2xpY2tQcmV2ZW50aW9uT25Eb3VibGVDbGljayIsImRvdWJsZUNsaWNrVG9GdWxsc2NyZWVuIiwiaGFuZGxlQ2xpY2siLCJQb2ludGVyRXZlbnQiLCJwb2ludGVyVHlwZSIsIm5hdGl2ZUV2ZW50Iiwid2FpdEZvckNsaWNrIiwiZXJyb3JJbmZvIiwiaW5mbyIsImhhbmRsZVBvaW50ZXJEb3duIiwibmV3RXZ0Iiwib25jZSIsImhhbmRsZURvdWJsZUNsaWNrIiwianN4MTEiLCJqc3hzOCIsIkZyYWdtZW50MyIsInJlYWN0VmVyc2lvbiIsInZlcnNpb24iLCJzcGxpdCIsImRvZXNSZWFjdFZlcnNpb25TdXBwb3J0U3VzcGVuc2UiLCJwYXJzZUludCIsIlBsYXllclVJIiwiY29udHJvbHMiLCJhdXRvUGxheSIsImlucHV0UHJvcHMiLCJjbGlja1RvUGxheSIsInJlbmRlckxvYWRpbmciLCJyZW5kZXJQb3N0ZXIiLCJjbGFzc05hbWUyIiwic2hvd1Bvc3RlcldoZW5VbnBsYXllZCIsInNob3dQb3N0ZXJXaGVuRW5kZWQiLCJzaG93UG9zdGVyV2hlblBhdXNlZCIsInNob3dQb3N0ZXJXaGVuQnVmZmVyaW5nIiwicmVuZGVyRnVsbHNjcmVlbiIsInBvc3RlckZpbGxNb2RlIiwiYnVmZmVyU3RhdGVEZWxheUluTWlsbGlzZWNvbmRzIiwiY29udGFpbmVyIiwiaGFzUGF1c2VkVG9SZXN1bWUiLCJzZXRIYXNQYXVzZWRUb1Jlc3VtZSIsInNob3VsZEF1dG9wbGF5Iiwic2V0U2hvdWxkQXV0b1BsYXkiLCJzZXRJc0Z1bGxzY3JlZW4iLCJzZWVraW5nIiwic2V0U2Vla2luZyIsInN1cHBvcnRzRnVsbFNjcmVlbiIsIkJvb2xlYW4iLCJvbkZ1bGxzY3JlZW5DaGFuZ2UiLCJuZXdWYWx1ZSIsImZ1bGxzY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJ0b2dnbGUiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbHNjcmVlbiIsImZ1bGxzY3JlZW5DaGFuZ2UiLCJlbGVtZW50IiwiaW5pdGlhbFNjYWxlSWdub3JlZCIsIlNldE1lZGlhVm9sdW1lQ29udGV4dCIsIk1lZGlhVm9sdW1lQ29udGV4dCIsImlzTXV0ZWQiLCJzaG93QnVmZmVySW5kaWNhdG9yIiwic2V0U2hvd0J1ZmZlclN0YXRlIiwic3RvcHBlZCIsIm9uQnVmZmVyIiwib25SZXN1bWUiLCJtZXRob2RzIiwiZ2V0Q29udGFpbmVyTm9kZSIsInNlZWtUbyIsImYiLCJmcmFtZVRvU2Vla1RvIiwicGF1c2VUb1Jlc3VtZSIsImdldFZvbHVtZSIsInZvbCIsInVubXV0ZSIsImdldFNjYWxlIiwiT2JqZWN0IiwiYXNzaWduIiwiVmlkZW9Db21wb25lbnQiLCJjb21wb25lbnQiLCJvdXRlclN0eWxlIiwib3V0ZXIiLCJjb250YWluZXJTdHlsZTMiLCJvblNpbmdsZUNsaWNrIiwicmlnaHRDbGljayIsIk1vdXNlRXZlbnQiLCJsb2FkaW5nTWFya3VwIiwiY3VycmVudFNjYWxlIiwicG9zdGVyIiwic2hvdWxkU2hvd1Bvc3RlciIsInNvbWUiLCJvdXRlcldpdGhvdXRTY2FsZSIsImNvbnRlbnQiLCJDbGlwQ29tcG9zaXRpb24iLCJDdXJyZW50U2NhbGVDb250ZXh0IiwiZmFsbGJhY2siLCJQbGF5ZXJVSV9kZWZhdWx0IiwidXNlQ2FsbGJhY2sxMSIsInVzZU1lbW8xMiIsInVzZVN0YXRlMTIiLCJJbnRlcm5hbHMxMSIsIlZPTFVNRV9QRVJTSVNUQU5DRV9LRVkiLCJwZXJzaXN0Vm9sdW1lIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImNvbnNvbGUiLCJsb2ciLCJnZXRQcmVmZXJyZWRWb2x1bWUiLCJ2YWwiLCJnZXRJdGVtIiwianN4MTIiLCJQTEFZRVJfQ09NUF9JRCIsIlNoYXJlZFBsYXllckNvbnRleHRzIiwidGltZWxpbmVDb250ZXh0IiwibnVtYmVyT2ZTaGFyZWRBdWRpb1RhZ3MiLCJpbml0aWFsbHlNdXRlZCIsImNvbXBvc2l0aW9uTWFuYWdlckNvbnRleHQiLCJjb21wb3NpdGlvbnMiLCJub25jZSIsImZvbGRlck5hbWUiLCJwYXJlbnRGb2xkZXJOYW1lIiwic2NoZW1hIiwiY2FsY3VsYXRlTWV0YWRhdGEiLCJmb2xkZXJzIiwicmVnaXN0ZXJGb2xkZXIiLCJ1bnJlZ2lzdGVyRm9sZGVyIiwicmVnaXN0ZXJDb21wb3NpdGlvbiIsInVucmVnaXN0ZXJDb21wb3NpdGlvbiIsImN1cnJlbnRDb21wb3NpdGlvbk1ldGFkYXRhIiwic2V0Q3VycmVudENvbXBvc2l0aW9uTWV0YWRhdGEiLCJjYW52YXNDb250ZW50IiwiY29tcG9zaXRpb25JZCIsInNldENhbnZhc0NvbnRlbnQiLCJ1cGRhdGVDb21wb3NpdGlvbkRlZmF1bHRQcm9wcyIsIm1lZGlhVm9sdW1lQ29udGV4dFZhbHVlIiwic2V0TWVkaWFWb2x1bWVBbmRQZXJzaXN0Iiwic2V0TWVkaWFWb2x1bWVDb250ZXh0VmFsdWUiLCJDYW5Vc2VSZW1vdGlvbkhvb2tzUHJvdmlkZXIiLCJDb21wb3NpdGlvbk1hbmFnZXIiLCJSZXNvbHZlQ29tcG9zaXRpb25Db25maWciLCJQcmVmZXRjaFByb3ZpZGVyIiwiRHVyYXRpb25zQ29udGV4dFByb3ZpZGVyIiwiTmF0aXZlTGF5ZXJzUHJvdmlkZXIiLCJTaGFyZWRBdWRpb0NvbnRleHRQcm92aWRlciIsIkJ1ZmZlcmluZ1Byb3ZpZGVyIiwidmFsaWRhdGVTaW5nbGVGcmFtZSIsInZhcmlhYmxlTmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ2YWxpZGF0ZUluT3V0RnJhbWVzIiwidmFsaWRhdGVkSW5GcmFtZSIsInZhbGlkYXRlZE91dEZyYW1lIiwidmFsaWRhdGVJbml0aWFsRnJhbWUiLCJpbml0aWFsRnJhbWUiLCJ2YWxpZGF0ZVBsYXliYWNrUmF0ZSIsIk5vUmVhY3RJbnRlcm5hbHMiLCJ2YWxpZGF0ZUZwcyIsInZhbGlkYXRlRGltZW5zaW9uIiwidmFsaWRhdGVEdXJhdGlvbkluRnJhbWVzIiwidmFsaWRhdGVEZWZhdWx0QW5kSW5wdXRQcm9wcyIsImpzeDEzIiwiY29tcG9uZW50T3JOdWxsSWZMYXp5IiwiUGxheWVyRm4iLCJwYXNzZWRCcm93c2VyTWVkaWFDb250cm9sc0JlaGF2aW9yIiwiY29tcG9uZW50UHJvcHMiLCJyZW1vdGlvbl9pc1BsYXllciIsImRlZmF1bHRQcm9wcyIsImNvbXBvbmVudEZvclZhbGlkYXRpb24iLCJ1c2VMYXp5Q29tcG9uZW50Iiwicm9vdElkIiwicm9vdFJlZiIsInNldEN1cnJlbnRQbGF5YmFja1JhdGUiLCJhbGxvd0Zsb2F0cyIsInRpbWVsaW5lQ29udGV4dFZhbHVlIiwic2V0VGltZWxpbmVDb250ZXh0VmFsdWUiLCJDU1NVdGlscyIsImluamVjdENTUyIsIm1ha2VEZWZhdWx0UHJldmlld0NTUyIsImFjdHVhbElucHV0UHJvcHMiLCJJc1BsYXllckNvbnRleHRQcm92aWRlciIsIlNldFRpbWVsaW5lQ29udGV4dCIsImZvcndhcmQiLCJQbGF5ZXIiLCJmb3J3YXJkUmVmNCIsInVzZUltcGVyYXRpdmVIYW5kbGU0IiwidXNlTGF5b3V0RWZmZWN0MiIsInVzZU1lbW8xNiIsInVzZVJlZjEyIiwidXNlU3RhdGUxNCIsIkludGVybmFsczE0IiwicmFuZG9tMiIsIlJlYWN0MTEiLCJmb3J3YXJkUmVmMyIsIlN1c3BlbnNlMiIsInVzZUNhbGxiYWNrMTIiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlMyIsInVzZU1lbW8xNSIsInVzZVJlZjExIiwiSW50ZXJuYWxzMTMiLCJ1c2VDb250ZXh0NyIsInVzZU1lbW8xNCIsInVzZVRodW1ibmFpbCIsImpzeDE0IiwicmVhY3RWZXJzaW9uMiIsImRvZXNSZWFjdFZlcnNpb25TdXBwb3J0U3VzcGVuc2UyIiwiVGh1bWJuYWlsVUkiLCJ0aHVtYm5haWwiLCJjdXJyZW50U2NhbGVDb250ZXh0IiwiVGh1bWJuYWlsVUlfZGVmYXVsdCIsImpzeDE1IiwiVGh1bWJuYWlsRm4iLCJmcmFtZVRvRGlzcGxheSIsInRodW1ibmFpbElkIiwidGltZWxpbmVTdGF0ZSIsInBhc3NlZElucHV0UHJvcHMiLCJmb3J3YXJkMiIsIlRodW1ibmFpbCIsIlBsYXllckludGVybmFscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@remotion/player/dist/esm/index.mjs\n"));

/***/ })

});