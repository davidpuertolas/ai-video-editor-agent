"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/player/OffthreadAlphaVideo.tsx":
/*!********************************************************!*\
  !*** ./features/editor/player/OffthreadAlphaVideo.tsx ***!
  \********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OffthreadAlphaVideo: function() { return /* binding */ OffthreadAlphaVideo; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/index.mjs\");\n\nvar _s = $RefreshSig$();\n\n\n/**\r\n * Componente personalizado para manejar videos MOV con canal alfa\r\n * Especialmente para formatos como AP4H o QuickTime Animation (RLE) con canal de transparencia\r\n */ const OffthreadAlphaVideo = (param)=>{\n    let { src, startFrom, endAt, playbackRate, volume = 0 } = param;\n    _s();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const isAPH4orRLEwithAlpha = src.toLowerCase().endsWith(\".mov\");\n    console.log(\"[OffthreadAlphaVideo] Inicializando componente para: \".concat(src));\n    console.log(\"[OffthreadAlphaVideo] Par\\xe1metros: startFrom=\".concat(startFrom, \", endAt=\").concat(endAt, \", playbackRate=\").concat(playbackRate, \", volume=\").concat(volume));\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"[OffthreadAlphaVideo] Efecto principal activado para: \".concat(src));\n        const video = videoRef.current;\n        const canvas = canvasRef.current;\n        if (!video || !canvas || !isAPH4orRLEwithAlpha) {\n            console.log(\"[OffthreadAlphaVideo] Referencias no disponibles o no es un archivo MOV: video=\".concat(!!video, \", canvas=\").concat(!!canvas, \", isMOV=\").concat(isAPH4orRLEwithAlpha));\n            return;\n        }\n        console.log(\"[OffthreadAlphaVideo] Inicializando canvas para video: \".concat(src));\n        const ctx = canvas.getContext(\"2d\", {\n            alpha: true\n        });\n        if (!ctx) {\n            console.error(\"[OffthreadAlphaVideo] No se pudo obtener el contexto 2D con alpha\");\n            return;\n        }\n        console.log(\"[OffthreadAlphaVideo] Contexto 2D obtenido con alpha=\".concat(ctx.globalAlpha));\n        const renderFrame = ()=>{\n            if (video.readyState >= 2) {\n                // Establecer el tamaño del canvas para que coincida con el video\n                if (canvas.width !== video.videoWidth || canvas.height !== video.videoHeight) {\n                    console.log(\"[OffthreadAlphaVideo] Ajustando tama\\xf1o del canvas: \".concat(video.videoWidth, \"x\").concat(video.videoHeight));\n                    canvas.width = video.videoWidth;\n                    canvas.height = video.videoHeight;\n                }\n                // Limpiar el canvas con fondo transparente\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                // Dibujar el video en el canvas preservando la transparencia\n                try {\n                    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n                    // Solo loggeamos cada 30 frames para no saturar la consola\n                    if (Math.random() < 0.03) {\n                        console.log(\"[OffthreadAlphaVideo] Frame renderizado: tiempo=\".concat(video.currentTime.toFixed(2), \"s\"));\n                    }\n                } catch (err) {\n                    console.error(\"[OffthreadAlphaVideo] Error al dibujar frame: \".concat(err));\n                }\n            } else {\n                console.log(\"[OffthreadAlphaVideo] Video a\\xfan no listo para renderizar, readyState=\".concat(video.readyState));\n            }\n            // Continuar el ciclo de renderizado\n            animationRef.current = requestAnimationFrame(renderFrame);\n        };\n        const handleCanPlay = ()=>{\n            console.log(\"[OffthreadAlphaVideo] Video listo para reproducir: \".concat(src));\n            // Iniciar el ciclo de renderizado\n            console.log(\"[OffthreadAlphaVideo] Iniciando ciclo de renderizado\");\n            animationRef.current = requestAnimationFrame(renderFrame);\n            // Buscar la posición correcta de inicio\n            if (startFrom) {\n                console.log(\"[OffthreadAlphaVideo] Buscando posici\\xf3n de inicio: \".concat(startFrom / 30, \"s\"));\n                video.currentTime = startFrom / 30; // Convertir frames a segundos (asumiendo 30fps)\n            }\n            // Reproducir el video\n            if (video.paused) {\n                console.log(\"[OffthreadAlphaVideo] Iniciando reproducci\\xf3n\");\n                video.play().catch((err)=>{\n                    console.error(\"[OffthreadAlphaVideo] Error al reproducir video: \".concat(err));\n                    console.log(\"[OffthreadAlphaVideo] Detalles del video:\", {\n                        src: video.src,\n                        readyState: video.readyState,\n                        paused: video.paused,\n                        error: video.error\n                    });\n                });\n            }\n        };\n        // Eventos adicionales para diagnóstico\n        const handleVideoError = ()=>{\n            var _video_error, _video_error1, _video_error2;\n            console.error(\"[OffthreadAlphaVideo] Error en elemento video: \".concat(((_video_error = video.error) === null || _video_error === void 0 ? void 0 : _video_error.message) || \"Desconocido\"));\n            console.log(\"[OffthreadAlphaVideo] Detalles del error:\", {\n                code: (_video_error1 = video.error) === null || _video_error1 === void 0 ? void 0 : _video_error1.code,\n                message: (_video_error2 = video.error) === null || _video_error2 === void 0 ? void 0 : _video_error2.message,\n                videoSrc: video.src\n            });\n        };\n        const handleVideoLoadStart = ()=>{\n            console.log(\"[OffthreadAlphaVideo] Comenzando a cargar video: \".concat(src));\n        };\n        const handleVideoProgress = ()=>{\n            if (Math.random() < 0.1) {\n                console.log(\"[OffthreadAlphaVideo] Progreso de carga del video: \".concat(video.buffered.length > 0 ? (video.buffered.end(video.buffered.length - 1) / video.duration * 100).toFixed(1) + \"%\" : \"No hay datos buffered\"));\n            }\n        };\n        // Configurar eventos del video\n        console.log(\"[OffthreadAlphaVideo] Configurando eventos del video\");\n        video.addEventListener(\"canplay\", handleCanPlay);\n        video.addEventListener(\"error\", handleVideoError);\n        video.addEventListener(\"loadstart\", handleVideoLoadStart);\n        video.addEventListener(\"progress\", handleVideoProgress);\n        return ()=>{\n            console.log(\"[OffthreadAlphaVideo] Limpiando recursos\");\n            cancelAnimationFrame(animationRef.current);\n            video.removeEventListener(\"canplay\", handleCanPlay);\n            video.removeEventListener(\"error\", handleVideoError);\n            video.removeEventListener(\"loadstart\", handleVideoLoadStart);\n            video.removeEventListener(\"progress\", handleVideoProgress);\n        };\n    }, [\n        src,\n        startFrom,\n        isAPH4orRLEwithAlpha\n    ]);\n    // Actualizar el tiempo y la reproducción cuando cambian las props\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const video = videoRef.current;\n        if (!video) {\n            console.log(\"[OffthreadAlphaVideo] Referencia de video no disponible para actualizaciones\");\n            return;\n        }\n        console.log(\"[OffthreadAlphaVideo] Actualizando propiedades: playbackRate=\".concat(playbackRate, \", volume=\").concat(volume));\n        // Actualizar velocidad de reproducción\n        video.playbackRate = playbackRate;\n        // Actualizar volumen\n        video.volume = volume;\n        // Manejar seek\n        if (startFrom) {\n            console.log(\"[OffthreadAlphaVideo] Ajustando tiempo actual a: \".concat(startFrom / 30, \"s\"));\n            video.currentTime = startFrom / 30; // Convertir frames a segundos (asumiendo 30fps)\n        }\n    }, [\n        startFrom,\n        playbackRate,\n        volume\n    ]);\n    if (!isAPH4orRLEwithAlpha) {\n        console.log(\"[OffthreadAlphaVideo] Skipping - No es un archivo MOV: \".concat(src));\n        // Si no es un MOV con canal alfa, usar el componente OffthreadVideo existente\n        return null;\n    }\n    console.log(\"[OffthreadAlphaVideo] Renderizando componente para: \".concat(src));\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_2__.AbsoluteFill, {\n        style: {\n            background: \"transparent\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"video\", {\n                ref: videoRef,\n                src: src,\n                style: {\n                    display: \"none\"\n                },\n                muted: volume === 0,\n                playsInline: true,\n                loop: true,\n                onLoadedMetadata: ()=>{\n                    const video = videoRef.current;\n                    console.log(\"[OffthreadAlphaVideo] Metadata cargada:\", {\n                        duration: video === null || video === void 0 ? void 0 : video.duration,\n                        dimensions: \"\".concat(video === null || video === void 0 ? void 0 : video.videoWidth, \"x\").concat(video === null || video === void 0 ? void 0 : video.videoHeight),\n                        readyState: video === null || video === void 0 ? void 0 : video.readyState\n                    });\n                }\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\OffthreadAlphaVideo.tsx\",\n                lineNumber: 181,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                ref: canvasRef,\n                style: {\n                    width: \"100%\",\n                    height: \"100%\",\n                    objectFit: \"contain\",\n                    background: \"transparent\"\n                },\n                onContextMenu: (e)=>{\n                    // Prevenir menú contextual para diagnóstico\n                    e.preventDefault();\n                    console.log(\"[OffthreadAlphaVideo] Canvas dimensiones:\", {\n                        clientWidth: e.currentTarget.clientWidth,\n                        clientHeight: e.currentTarget.clientHeight,\n                        width: e.currentTarget.width,\n                        height: e.currentTarget.height\n                    });\n                }\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\OffthreadAlphaVideo.tsx\",\n                lineNumber: 199,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\OffthreadAlphaVideo.tsx\",\n        lineNumber: 179,\n        columnNumber: 5\n    }, undefined);\n};\n_s(OffthreadAlphaVideo, \"H7TArDF+7aV4Ypz1SUf2CguDXm4=\");\n_c = OffthreadAlphaVideo;\n/* harmony default export */ __webpack_exports__[\"default\"] = (OffthreadAlphaVideo);\nvar _c;\n$RefreshReg$(_c, \"OffthreadAlphaVideo\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvT2ZmdGhyZWFkQWxwaGFWaWRlby50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpRDtBQUNUO0FBVXhDOzs7Q0FHQyxHQUNNLE1BQU1JLHNCQUEwRDtRQUFDLEVBQ3RFQyxHQUFHLEVBQ0hDLFNBQVMsRUFDVEMsS0FBSyxFQUNMQyxZQUFZLEVBQ1pDLFNBQVMsQ0FBQyxFQUNYOztJQUNDLE1BQU1DLFdBQVdSLDZDQUFNQSxDQUFtQjtJQUMxQyxNQUFNUyxZQUFZVCw2Q0FBTUEsQ0FBb0I7SUFDNUMsTUFBTVUsZUFBZVYsNkNBQU1BLENBQVM7SUFDcEMsTUFBTVcsdUJBQXVCUixJQUFJUyxXQUFXLEdBQUdDLFFBQVEsQ0FBQztJQUV4REMsUUFBUUMsR0FBRyxDQUFDLHdEQUE0RCxPQUFKWjtJQUNwRVcsUUFBUUMsR0FBRyxDQUFDLGtEQUFtRVYsT0FBcEJELFdBQVUsWUFBaUNFLE9BQXZCRCxPQUFNLG1CQUF5Q0UsT0FBeEJELGNBQWEsYUFBa0IsT0FBUEM7SUFFOUhSLGdEQUFTQSxDQUFDO1FBQ1JlLFFBQVFDLEdBQUcsQ0FBQyx5REFBNkQsT0FBSlo7UUFDckUsTUFBTWEsUUFBUVIsU0FBU1MsT0FBTztRQUM5QixNQUFNQyxTQUFTVCxVQUFVUSxPQUFPO1FBRWhDLElBQUksQ0FBQ0QsU0FBUyxDQUFDRSxVQUFVLENBQUNQLHNCQUFzQjtZQUM5Q0csUUFBUUMsR0FBRyxDQUFDLGtGQUFxRyxPQUFuQixDQUFDLENBQUNDLE9BQU0sYUFBOEJMLE9BQW5CLENBQUMsQ0FBQ08sUUFBTyxZQUErQixPQUFyQlA7WUFDcEk7UUFDRjtRQUVBRyxRQUFRQyxHQUFHLENBQUMsMERBQThELE9BQUpaO1FBQ3RFLE1BQU1nQixNQUFNRCxPQUFPRSxVQUFVLENBQUMsTUFBTTtZQUFFQyxPQUFPO1FBQUs7UUFDbEQsSUFBSSxDQUFDRixLQUFLO1lBQ1JMLFFBQVFRLEtBQUssQ0FBQztZQUNkO1FB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YUYsRUFBRUcsYUFBYSxDQUFDRCxXQUFXO3dCQUN4Q0UsY0FBY0osRUFBRUcsYUFBYSxDQUFDQyxZQUFZO3dCQUMxQzVDLE9BQU93QyxFQUFFRyxhQUFhLENBQUMzQyxLQUFLO3dCQUM1QkUsUUFBUXNDLEVBQUVHLGFBQWEsQ0FBQ3pDLE1BQU07b0JBQ2hDO2dCQUNGOzs7Ozs7Ozs7Ozs7QUFJUixFQUFFO0dBNU1XMUI7S0FBQUE7QUE4TWIsK0RBQWVBLG1CQUFtQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9mZWF0dXJlcy9lZGl0b3IvcGxheWVyL09mZnRocmVhZEFscGhhVmlkZW8udHN4PzI3MzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBYnNvbHV0ZUZpbGwgfSBmcm9tICdyZW1vdGlvbic7XHJcblxyXG5pbnRlcmZhY2UgT2ZmdGhyZWFkQWxwaGFWaWRlb1Byb3BzIHtcclxuICBzcmM6IHN0cmluZztcclxuICBzdGFydEZyb206IG51bWJlcjtcclxuICBlbmRBdDogbnVtYmVyO1xyXG4gIHBsYXliYWNrUmF0ZTogbnVtYmVyO1xyXG4gIHZvbHVtZT86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudGUgcGVyc29uYWxpemFkbyBwYXJhIG1hbmVqYXIgdmlkZW9zIE1PViBjb24gY2FuYWwgYWxmYVxyXG4gKiBFc3BlY2lhbG1lbnRlIHBhcmEgZm9ybWF0b3MgY29tbyBBUDRIIG8gUXVpY2tUaW1lIEFuaW1hdGlvbiAoUkxFKSBjb24gY2FuYWwgZGUgdHJhbnNwYXJlbmNpYVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE9mZnRocmVhZEFscGhhVmlkZW86IFJlYWN0LkZDPE9mZnRocmVhZEFscGhhVmlkZW9Qcm9wcz4gPSAoe1xyXG4gIHNyYyxcclxuICBzdGFydEZyb20sXHJcbiAgZW5kQXQsXHJcbiAgcGxheWJhY2tSYXRlLFxyXG4gIHZvbHVtZSA9IDBcclxufSkgPT4ge1xyXG4gIGNvbnN0IHZpZGVvUmVmID0gdXNlUmVmPEhUTUxWaWRlb0VsZW1lbnQ+KG51bGwpO1xyXG4gIGNvbnN0IGNhbnZhc1JlZiA9IHVzZVJlZjxIVE1MQ2FudmFzRWxlbWVudD4obnVsbCk7XHJcbiAgY29uc3QgYW5pbWF0aW9uUmVmID0gdXNlUmVmPG51bWJlcj4oMCk7XHJcbiAgY29uc3QgaXNBUEg0b3JSTEV3aXRoQWxwaGEgPSBzcmMudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgnLm1vdicpO1xyXG5cclxuICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIEluaWNpYWxpemFuZG8gY29tcG9uZW50ZSBwYXJhOiAke3NyY31gKTtcclxuICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIFBhcsOhbWV0cm9zOiBzdGFydEZyb209JHtzdGFydEZyb219LCBlbmRBdD0ke2VuZEF0fSwgcGxheWJhY2tSYXRlPSR7cGxheWJhY2tSYXRlfSwgdm9sdW1lPSR7dm9sdW1lfWApO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYFtPZmZ0aHJlYWRBbHBoYVZpZGVvXSBFZmVjdG8gcHJpbmNpcGFsIGFjdGl2YWRvIHBhcmE6ICR7c3JjfWApO1xyXG4gICAgY29uc3QgdmlkZW8gPSB2aWRlb1JlZi5jdXJyZW50O1xyXG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnQ7XHJcblxyXG4gICAgaWYgKCF2aWRlbyB8fCAhY2FudmFzIHx8ICFpc0FQSDRvclJMRXdpdGhBbHBoYSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIFJlZmVyZW5jaWFzIG5vIGRpc3BvbmlibGVzIG8gbm8gZXMgdW4gYXJjaGl2byBNT1Y6IHZpZGVvPSR7ISF2aWRlb30sIGNhbnZhcz0keyEhY2FudmFzfSwgaXNNT1Y9JHtpc0FQSDRvclJMRXdpdGhBbHBoYX1gKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gSW5pY2lhbGl6YW5kbyBjYW52YXMgcGFyYSB2aWRlbzogJHtzcmN9YCk7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IGFscGhhOiB0cnVlIH0pO1xyXG4gICAgaWYgKCFjdHgpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW09mZnRocmVhZEFscGhhVmlkZW9dIE5vIHNlIHB1ZG8gb2J0ZW5lciBlbCBjb250ZXh0byAyRCBjb24gYWxwaGEnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gQ29udGV4dG8gMkQgb2J0ZW5pZG8gY29uIGFscGhhPSR7Y3R4Lmdsb2JhbEFscGhhfWApO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlckZyYW1lID0gKCkgPT4ge1xyXG4gICAgICBpZiAodmlkZW8ucmVhZHlTdGF0ZSA+PSAyKSB7XHJcbiAgICAgICAgLy8gRXN0YWJsZWNlciBlbCB0YW1hw7FvIGRlbCBjYW52YXMgcGFyYSBxdWUgY29pbmNpZGEgY29uIGVsIHZpZGVvXHJcbiAgICAgICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gdmlkZW8udmlkZW9XaWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9PSB2aWRlby52aWRlb0hlaWdodCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFtPZmZ0aHJlYWRBbHBoYVZpZGVvXSBBanVzdGFuZG8gdGFtYcOxbyBkZWwgY2FudmFzOiAke3ZpZGVvLnZpZGVvV2lkdGh9eCR7dmlkZW8udmlkZW9IZWlnaHR9YCk7XHJcbiAgICAgICAgICBjYW52YXMud2lkdGggPSB2aWRlby52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgY2FudmFzLmhlaWdodCA9IHZpZGVvLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTGltcGlhciBlbCBjYW52YXMgY29uIGZvbmRvIHRyYW5zcGFyZW50ZVxyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gRGlidWphciBlbCB2aWRlbyBlbiBlbCBjYW52YXMgcHJlc2VydmFuZG8gbGEgdHJhbnNwYXJlbmNpYVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgLy8gU29sbyBsb2dnZWFtb3MgY2FkYSAzMCBmcmFtZXMgcGFyYSBubyBzYXR1cmFyIGxhIGNvbnNvbGFcclxuICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMykgeyAvLyB+MyUgZGUgbG9zIGZyYW1lc1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIEZyYW1lIHJlbmRlcml6YWRvOiB0aWVtcG89JHt2aWRlby5jdXJyZW50VGltZS50b0ZpeGVkKDIpfXNgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtPZmZ0aHJlYWRBbHBoYVZpZGVvXSBFcnJvciBhbCBkaWJ1amFyIGZyYW1lOiAke2Vycn1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFtPZmZ0aHJlYWRBbHBoYVZpZGVvXSBWaWRlbyBhw7puIG5vIGxpc3RvIHBhcmEgcmVuZGVyaXphciwgcmVhZHlTdGF0ZT0ke3ZpZGVvLnJlYWR5U3RhdGV9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbnRpbnVhciBlbCBjaWNsbyBkZSByZW5kZXJpemFkb1xyXG4gICAgICBhbmltYXRpb25SZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJGcmFtZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNhblBsYXkgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gVmlkZW8gbGlzdG8gcGFyYSByZXByb2R1Y2lyOiAke3NyY31gKTtcclxuXHJcbiAgICAgIC8vIEluaWNpYXIgZWwgY2ljbG8gZGUgcmVuZGVyaXphZG9cclxuICAgICAgY29uc29sZS5sb2coJ1tPZmZ0aHJlYWRBbHBoYVZpZGVvXSBJbmljaWFuZG8gY2ljbG8gZGUgcmVuZGVyaXphZG8nKTtcclxuICAgICAgYW5pbWF0aW9uUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyRnJhbWUpO1xyXG5cclxuICAgICAgLy8gQnVzY2FyIGxhIHBvc2ljacOzbiBjb3JyZWN0YSBkZSBpbmljaW9cclxuICAgICAgaWYgKHN0YXJ0RnJvbSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gQnVzY2FuZG8gcG9zaWNpw7NuIGRlIGluaWNpbzogJHtzdGFydEZyb20vMzB9c2ApO1xyXG4gICAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gc3RhcnRGcm9tIC8gMzA7IC8vIENvbnZlcnRpciBmcmFtZXMgYSBzZWd1bmRvcyAoYXN1bWllbmRvIDMwZnBzKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXByb2R1Y2lyIGVsIHZpZGVvXHJcbiAgICAgIGlmICh2aWRlby5wYXVzZWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW09mZnRocmVhZEFscGhhVmlkZW9dIEluaWNpYW5kbyByZXByb2R1Y2Npw7NuJyk7XHJcbiAgICAgICAgdmlkZW8ucGxheSgpLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gRXJyb3IgYWwgcmVwcm9kdWNpciB2aWRlbzogJHtlcnJ9YCk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW09mZnRocmVhZEFscGhhVmlkZW9dIERldGFsbGVzIGRlbCB2aWRlbzonLCB7XHJcbiAgICAgICAgICAgIHNyYzogdmlkZW8uc3JjLFxyXG4gICAgICAgICAgICByZWFkeVN0YXRlOiB2aWRlby5yZWFkeVN0YXRlLFxyXG4gICAgICAgICAgICBwYXVzZWQ6IHZpZGVvLnBhdXNlZCxcclxuICAgICAgICAgICAgZXJyb3I6IHZpZGVvLmVycm9yXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFdmVudG9zIGFkaWNpb25hbGVzIHBhcmEgZGlhZ27Ds3N0aWNvXHJcbiAgICBjb25zdCBoYW5kbGVWaWRlb0Vycm9yID0gKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gRXJyb3IgZW4gZWxlbWVudG8gdmlkZW86ICR7dmlkZW8uZXJyb3I/Lm1lc3NhZ2UgfHwgJ0Rlc2Nvbm9jaWRvJ31gKTtcclxuICAgICAgY29uc29sZS5sb2coJ1tPZmZ0aHJlYWRBbHBoYVZpZGVvXSBEZXRhbGxlcyBkZWwgZXJyb3I6Jywge1xyXG4gICAgICAgIGNvZGU6IHZpZGVvLmVycm9yPy5jb2RlLFxyXG4gICAgICAgIG1lc3NhZ2U6IHZpZGVvLmVycm9yPy5tZXNzYWdlLFxyXG4gICAgICAgIHZpZGVvU3JjOiB2aWRlby5zcmNcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVZpZGVvTG9hZFN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIENvbWVuemFuZG8gYSBjYXJnYXIgdmlkZW86ICR7c3JjfWApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVWaWRlb1Byb2dyZXNzID0gKCkgPT4ge1xyXG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMSkgeyAvLyAxMCUgZGUgbG9zIGV2ZW50b3MgcGFyYSBubyBzYXR1cmFyIGxvZ3NcclxuICAgICAgICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIFByb2dyZXNvIGRlIGNhcmdhIGRlbCB2aWRlbzogJHt2aWRlby5idWZmZXJlZC5sZW5ndGggPiAwID9cclxuICAgICAgICAgICh2aWRlby5idWZmZXJlZC5lbmQodmlkZW8uYnVmZmVyZWQubGVuZ3RoIC0gMSkgLyB2aWRlby5kdXJhdGlvbiAqIDEwMCkudG9GaXhlZCgxKSArICclJyA6XHJcbiAgICAgICAgICAnTm8gaGF5IGRhdG9zIGJ1ZmZlcmVkJ31gKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb25maWd1cmFyIGV2ZW50b3MgZGVsIHZpZGVvXHJcbiAgICBjb25zb2xlLmxvZygnW09mZnRocmVhZEFscGhhVmlkZW9dIENvbmZpZ3VyYW5kbyBldmVudG9zIGRlbCB2aWRlbycpO1xyXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGhhbmRsZUNhblBsYXkpO1xyXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVWaWRlb0Vycm9yKTtcclxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGhhbmRsZVZpZGVvTG9hZFN0YXJ0KTtcclxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgaGFuZGxlVmlkZW9Qcm9ncmVzcyk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1tPZmZ0aHJlYWRBbHBoYVZpZGVvXSBMaW1waWFuZG8gcmVjdXJzb3MnKTtcclxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uUmVmLmN1cnJlbnQpO1xyXG4gICAgICB2aWRlby5yZW1vdmVFdmVudExpc3RlbmVyKCdjYW5wbGF5JywgaGFuZGxlQ2FuUGxheSk7XHJcbiAgICAgIHZpZGVvLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgaGFuZGxlVmlkZW9FcnJvcik7XHJcbiAgICAgIHZpZGVvLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsIGhhbmRsZVZpZGVvTG9hZFN0YXJ0KTtcclxuICAgICAgdmlkZW8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBoYW5kbGVWaWRlb1Byb2dyZXNzKTtcclxuICAgIH07XHJcbiAgfSwgW3NyYywgc3RhcnRGcm9tLCBpc0FQSDRvclJMRXdpdGhBbHBoYV0pO1xyXG5cclxuICAvLyBBY3R1YWxpemFyIGVsIHRpZW1wbyB5IGxhIHJlcHJvZHVjY2nDs24gY3VhbmRvIGNhbWJpYW4gbGFzIHByb3BzXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IHZpZGVvID0gdmlkZW9SZWYuY3VycmVudDtcclxuICAgIGlmICghdmlkZW8pIHtcclxuICAgICAgY29uc29sZS5sb2coJ1tPZmZ0aHJlYWRBbHBoYVZpZGVvXSBSZWZlcmVuY2lhIGRlIHZpZGVvIG5vIGRpc3BvbmlibGUgcGFyYSBhY3R1YWxpemFjaW9uZXMnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gQWN0dWFsaXphbmRvIHByb3BpZWRhZGVzOiBwbGF5YmFja1JhdGU9JHtwbGF5YmFja1JhdGV9LCB2b2x1bWU9JHt2b2x1bWV9YCk7XHJcblxyXG4gICAgLy8gQWN0dWFsaXphciB2ZWxvY2lkYWQgZGUgcmVwcm9kdWNjacOzblxyXG4gICAgdmlkZW8ucGxheWJhY2tSYXRlID0gcGxheWJhY2tSYXRlO1xyXG5cclxuICAgIC8vIEFjdHVhbGl6YXIgdm9sdW1lblxyXG4gICAgdmlkZW8udm9sdW1lID0gdm9sdW1lO1xyXG5cclxuICAgIC8vIE1hbmVqYXIgc2Vla1xyXG4gICAgaWYgKHN0YXJ0RnJvbSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIEFqdXN0YW5kbyB0aWVtcG8gYWN0dWFsIGE6ICR7c3RhcnRGcm9tLzMwfXNgKTtcclxuICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSBzdGFydEZyb20gLyAzMDsgLy8gQ29udmVydGlyIGZyYW1lcyBhIHNlZ3VuZG9zIChhc3VtaWVuZG8gMzBmcHMpXHJcbiAgICB9XHJcbiAgfSwgW3N0YXJ0RnJvbSwgcGxheWJhY2tSYXRlLCB2b2x1bWVdKTtcclxuXHJcbiAgaWYgKCFpc0FQSDRvclJMRXdpdGhBbHBoYSkge1xyXG4gICAgY29uc29sZS5sb2coYFtPZmZ0aHJlYWRBbHBoYVZpZGVvXSBTa2lwcGluZyAtIE5vIGVzIHVuIGFyY2hpdm8gTU9WOiAke3NyY31gKTtcclxuICAgIC8vIFNpIG5vIGVzIHVuIE1PViBjb24gY2FuYWwgYWxmYSwgdXNhciBlbCBjb21wb25lbnRlIE9mZnRocmVhZFZpZGVvIGV4aXN0ZW50ZVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhgW09mZnRocmVhZEFscGhhVmlkZW9dIFJlbmRlcml6YW5kbyBjb21wb25lbnRlIHBhcmE6ICR7c3JjfWApO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEFic29sdXRlRmlsbCBzdHlsZT17eyBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnIH19PlxyXG4gICAgICB7LyogVmlkZW8gb2N1bHRvIHF1ZSBzaXJ2ZSBjb21vIGZ1ZW50ZSAqL31cclxuICAgICAgPHZpZGVvXHJcbiAgICAgICAgcmVmPXt2aWRlb1JlZn1cclxuICAgICAgICBzcmM9e3NyY31cclxuICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnbm9uZScgfX1cclxuICAgICAgICBtdXRlZD17dm9sdW1lID09PSAwfVxyXG4gICAgICAgIHBsYXlzSW5saW5lXHJcbiAgICAgICAgbG9vcFxyXG4gICAgICAgIG9uTG9hZGVkTWV0YWRhdGE9eygpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZpZGVvID0gdmlkZW9SZWYuY3VycmVudDtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBbT2ZmdGhyZWFkQWxwaGFWaWRlb10gTWV0YWRhdGEgY2FyZ2FkYTpgLCB7XHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiB2aWRlbz8uZHVyYXRpb24sXHJcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IGAke3ZpZGVvPy52aWRlb1dpZHRofXgke3ZpZGVvPy52aWRlb0hlaWdodH1gLFxyXG4gICAgICAgICAgICByZWFkeVN0YXRlOiB2aWRlbz8ucmVhZHlTdGF0ZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfX1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIHsvKiBDYW52YXMgcGFyYSByZW5kZXJpemFyIGVsIHZpZGVvIGNvbiB0cmFuc3BhcmVuY2lhICovfVxyXG4gICAgICA8Y2FudmFzXHJcbiAgICAgICAgcmVmPXtjYW52YXNSZWZ9XHJcbiAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgIG9iamVjdEZpdDogJ2NvbnRhaW4nLFxyXG4gICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50J1xyXG4gICAgICAgIH19XHJcbiAgICAgICAgb25Db250ZXh0TWVudT17KGUpID0+IHtcclxuICAgICAgICAgIC8vIFByZXZlbmlyIG1lbsO6IGNvbnRleHR1YWwgcGFyYSBkaWFnbsOzc3RpY29cclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbT2ZmdGhyZWFkQWxwaGFWaWRlb10gQ2FudmFzIGRpbWVuc2lvbmVzOicsIHtcclxuICAgICAgICAgICAgY2xpZW50V2lkdGg6IGUuY3VycmVudFRhcmdldC5jbGllbnRXaWR0aCxcclxuICAgICAgICAgICAgY2xpZW50SGVpZ2h0OiBlLmN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogZS5jdXJyZW50VGFyZ2V0LndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGUuY3VycmVudFRhcmdldC5oZWlnaHRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH19XHJcbiAgICAgIC8+XHJcbiAgICA8L0Fic29sdXRlRmlsbD5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgT2ZmdGhyZWFkQWxwaGFWaWRlbztcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlUmVmIiwiQWJzb2x1dGVGaWxsIiwiT2ZmdGhyZWFkQWxwaGFWaWRlbyIsInNyYyIsInN0YXJ0RnJvbSIsImVuZEF0IiwicGxheWJhY2tSYXRlIiwidm9sdW1lIiwidmlkZW9SZWYiLCJjYW52YXNSZWYiLCJhbmltYXRpb25SZWYiLCJpc0FQSDRvclJMRXdpdGhBbHBoYSIsInRvTG93ZXJDYXNlIiwiZW5kc1dpdGgiLCJjb25zb2xlIiwibG9nIiwidmlkZW8iLCJjdXJyZW50IiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImFscGhhIiwiZXJyb3IiLCJnbG9iYWxBbHBoYSIsInJlbmRlckZyYW1lIiwicmVhZHlTdGF0ZSIsIndpZHRoIiwidmlkZW9XaWR0aCIsImhlaWdodCIsInZpZGVvSGVpZ2h0IiwiY2xlYXJSZWN0IiwiZHJhd0ltYWdlIiwiTWF0aCIsInJhbmRvbSIsImN1cnJlbnRUaW1lIiwidG9GaXhlZCIsImVyciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhhbmRsZUNhblBsYXkiLCJwYXVzZWQiLCJwbGF5IiwiY2F0Y2giLCJoYW5kbGVWaWRlb0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJ2aWRlb1NyYyIsImhhbmRsZVZpZGVvTG9hZFN0YXJ0IiwiaGFuZGxlVmlkZW9Qcm9ncmVzcyIsImJ1ZmZlcmVkIiwibGVuZ3RoIiwiZW5kIiwiZHVyYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwicmVmIiwiZGlzcGxheSIsIm11dGVkIiwicGxheXNJbmxpbmUiLCJsb29wIiwib25Mb2FkZWRNZXRhZGF0YSIsImRpbWVuc2lvbnMiLCJvYmplY3RGaXQiLCJvbkNvbnRleHRNZW51IiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2xpZW50V2lkdGgiLCJjdXJyZW50VGFyZ2V0IiwiY2xpZW50SGVpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/OffthreadAlphaVideo.tsx\n"));

/***/ })

});