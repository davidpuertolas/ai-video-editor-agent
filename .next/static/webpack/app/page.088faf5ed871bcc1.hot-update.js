"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/ai-chat/ai-video-commands.ts":
/*!*************************************************!*\
  !*** ./components/ai-chat/ai-video-commands.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createVideoCommandExecutor: function() { return /* binding */ createVideoCommandExecutor; }\n/* harmony export */ });\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/events */ \"(app-pages-browser)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* harmony import */ var _designcombo_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @designcombo/state */ \"(app-pages-browser)/./node_modules/@designcombo/state/dist/index.es.js\");\n/* harmony import */ var _designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @designcombo/timeline */ \"(app-pages-browser)/./node_modules/@designcombo/timeline/dist/index.es.js\");\n\n\n\nfunction createVideoCommandExecutor(stateManager) {\n    // Crear el objeto executor con todos los métodos\n    const executor = {\n        addText: (text, options)=>{\n            const position = (options === null || options === void 0 ? void 0 : options.position) || {\n                x: 0.5,\n                y: 0.5\n            }; // Centrado por defecto\n            const fontSize = (options === null || options === void 0 ? void 0 : options.fontSize) || 48;\n            const fontFamily = (options === null || options === void 0 ? void 0 : options.fontFamily) || \"Roboto-Bold\";\n            const color = (options === null || options === void 0 ? void 0 : options.color) || \"#FFFFFF\";\n            const startTime = (options === null || options === void 0 ? void 0 : options.startTime) || 0; // Por defecto al inicio\n            const endTime = (options === null || options === void 0 ? void 0 : options.endTime) || 5; // Por defecto 5 segundos de duración\n            // Crear payload para el texto\n            const textPayload = {\n                id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                display: {\n                    from: startTime * 1000,\n                    to: endTime * 1000 // Convertir a milisegundos\n                },\n                type: \"text\",\n                details: {\n                    text: text,\n                    fontSize: fontSize,\n                    width: 600,\n                    fontFamily: fontFamily,\n                    color: color,\n                    wordWrap: \"break-word\",\n                    textAlign: \"center\",\n                    borderWidth: 0,\n                    borderColor: \"#000000\",\n                    boxShadow: {\n                        color: \"#ffffff\",\n                        x: 0,\n                        y: 0,\n                        blur: 0\n                    }\n                }\n            };\n            // Agregar texto al timeline\n            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_TEXT, {\n                payload: textPayload,\n                options: {}\n            });\n        },\n        changeColor: (elementId, color)=>{\n            // Simulación de cambio de color (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando color del elemento \".concat(elementId, \" a \").concat(color));\n        // Aquí iría la lógica real para cambiar el color de un elemento\n        },\n        addImage: (url, options)=>{\n            try {\n                // Asegurar que tenemos una URL válida\n                if (!url) {\n                    console.error(\"❌ URL de imagen no v\\xe1lida o vac\\xeda\");\n                    throw new Error(\"URL de imagen no proporcionada\");\n                }\n                console.log(\"=== INICIANDO PROCESO DE A\\xd1ADIR IMAGEN ===\");\n                console.log(\"URL:\", url);\n                console.log(\"Opciones:\", JSON.stringify(options, null, 2));\n                // Verificar si es una URL genérica de referencia, que no debe usarse directamente\n                if (url === \"imagen_adjunta_por_el_usuario.jpg\" || url.includes(\"/url_de_la_imagen\")) {\n                    console.error(\"Error: URL de imagen gen\\xe9rica inv\\xe1lida detectada\", url);\n                    throw new Error(\"La URL de imagen no es v\\xe1lida. Se intent\\xf3 usar un marcador gen\\xe9rico directamente.\");\n                }\n                const width = (options === null || options === void 0 ? void 0 : options.width) || 480;\n                const height = (options === null || options === void 0 ? void 0 : options.height) || 270;\n                const startTime = (options === null || options === void 0 ? void 0 : options.startTime) !== undefined ? options.startTime : 0;\n                const endTime = (options === null || options === void 0 ? void 0 : options.endTime) !== undefined ? options.endTime : startTime + 5;\n                // Detectores de tipo de imagen\n                const isExplicitlyAnimated = (options === null || options === void 0 ? void 0 : options.isAnimated) === true;\n                const isExplicitlyStatic = (options === null || options === void 0 ? void 0 : options.isStatic) === true;\n                const isAPNG = url.toLowerCase().endsWith(\".apng\");\n                const isGIF = url.toLowerCase().endsWith(\".gif\");\n                // Determinar si debe tratarse como imagen animada\n                const shouldTreatAsAnimated = (isExplicitlyAnimated || isAPNG || isGIF) && !isExplicitlyStatic;\n                // Log de modo detectado\n                if (shouldTreatAsAnimated) {\n                    console.log(\"\\uD83D\\uDD36 Detectada imagen animada: \".concat(url));\n                    console.log(\"Tipo: \".concat(isAPNG ? \"APNG\" : isGIF ? \"GIF\" : \"Animada gen\\xe9rica\"));\n                } else if (isAPNG || isGIF) {\n                    console.log(\"\\uD83D\\uDD39 Detectada imagen potencialmente animada pero trat\\xe1ndola como est\\xe1tica: \".concat(url));\n                } else {\n                    console.log(\"\\uD83D\\uDD37 Detectada imagen est\\xe1tica: \".concat(url));\n                }\n                // Para depuración, mostrar parte de la URL (truncada si es data:URL)\n                const logUrl = url.startsWith(\"data:\") ? \"\".concat(url.substring(0, 30), \"... (data URL)\") : url;\n                console.log(\"A\\xf1adiendo imagen desde \".concat(logUrl, \" desde segundo \").concat(startTime, \" hasta \").concat(endTime));\n                // Posición (centrada por defecto)\n                const position = (options === null || options === void 0 ? void 0 : options.position) || {\n                    x: 0.5,\n                    y: 0.5\n                };\n                // Modos de escala\n                const scaleMode = (options === null || options === void 0 ? void 0 : options.scaleMode) || \"fit\";\n                const useFullScreen = scaleMode === \"cover\";\n                // Propiedades para el payload, común para ambos casos\n                const commonPayloadProps = {\n                    from: startTime * 1000,\n                    to: endTime * 1000\n                };\n                // Propiedades de detalle comunes\n                const commonDetailsProps = {\n                    src: url,\n                    width: width,\n                    height: height,\n                    opacity: 100,\n                    scaleMode: scaleMode,\n                    left: position.x,\n                    top: position.y,\n                    originX: \"center\",\n                    originY: \"center\"\n                };\n                // Crear ID único\n                const imageId = (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)();\n                // Crear el payload de imagen simplificado\n                const imagePayload = {\n                    id: imageId,\n                    display: commonPayloadProps,\n                    type: \"image\",\n                    details: {\n                        ...commonDetailsProps,\n                        // Si es animada, añadir atributos específicos\n                        ...shouldTreatAsAnimated && {\n                            isAnimated: true\n                        },\n                        // Si a pantalla completa, ajustar dimensiones\n                        ...useFullScreen && {\n                            width: 1920,\n                            height: 1080\n                        }\n                    }\n                };\n                console.log(\"Payload de imagen a despachar:\", JSON.stringify({\n                    ...imagePayload,\n                    details: {\n                        ...imagePayload.details,\n                        src: imagePayload.details.src.substring(0, 30) + (imagePayload.details.src.length > 30 ? \"...\" : \"\")\n                    }\n                }, null, 2));\n                // Opciones para el dispatch\n                const dispatchOptions = {\n                    scaleMode: scaleMode,\n                    position: position\n                };\n                // Despachar la acción para añadir la imagen\n                (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_IMAGE, {\n                    payload: imagePayload,\n                    options: dispatchOptions\n                });\n                // Log de éxito\n                if (shouldTreatAsAnimated) {\n                    console.log(\"✅ Imagen animada a\\xf1adida desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\"));\n                } else {\n                    console.log(\"✅ Imagen est\\xe1tica a\\xf1adida desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\"));\n                }\n            } catch (error) {\n                console.error(\"❌ ERROR CR\\xcdTICO al a\\xf1adir imagen:\", error);\n                console.error(\"Detalles completos:\", error.message);\n                console.error(\"Traza:\", error.stack);\n                throw error; // Propagar el error para manejo superior\n            }\n        },\n        addVideo: (url, options)=>{\n            try {\n                console.log(\"=== INICIANDO PROCESO DE A\\xd1ADIR VIDEO ===\");\n                console.log(\"URL:\", url);\n                console.log(\"Opciones:\", JSON.stringify(options, null, 2));\n                // Validación de URL\n                if (!url) {\n                    console.error(\"❌ URL de video no v\\xe1lida o vac\\xeda\");\n                    throw new Error(\"URL de video no proporcionada\");\n                }\n                const width = (options === null || options === void 0 ? void 0 : options.width) || 640;\n                const height = (options === null || options === void 0 ? void 0 : options.height) || 360;\n                const startTime = (options === null || options === void 0 ? void 0 : options.startTime) || 0; // Por defecto al inicio\n                const endTime = (options === null || options === void 0 ? void 0 : options.endTime) || 10; // Por defecto 10 segundos de duración\n                // Detectar si es un archivo AVI o APNG para tratamiento especial\n                const isAVI = url.toLowerCase().endsWith(\".avi\");\n                const isAPNG = url.toLowerCase().endsWith(\".apng\");\n                // Marcador pasado explícitamente - mayor prioridad que la extensión\n                const isExplicitAPNG = (options === null || options === void 0 ? void 0 : options.isAPNG) === true;\n                console.log(\"Formato detectado:\", isAVI ? \"AVI\" : isAPNG ? \"APNG\" : isExplicitAPNG ? \"Expl\\xedcitamente marcado como APNG\" : \"Formato est\\xe1ndar\");\n                // Si es APNG según algún criterio\n                const treatAsAPNG = isAPNG || isExplicitAPNG;\n                const useFullScreen = isAVI || treatAsAPNG || (options === null || options === void 0 ? void 0 : options.scaleMode) === \"cover\";\n                // Para archivos AVI y APNG, respectar duración natural si no se especifica\n                const respectNativeDuration = (isAVI || treatAsAPNG) && !(options === null || options === void 0 ? void 0 : options.endTime);\n                const finalEndTime = respectNativeDuration ? undefined : endTime;\n                // Log para depurar\n                if (treatAsAPNG) {\n                    console.log(\"\\uD83D\\uDD37 A\\xf1adiendo APNG como VIDEO sincronizado desde \".concat(startTime, \"s con duraci\\xf3n \").concat(respectNativeDuration ? \"natural\" : finalEndTime + \"s\"));\n                    console.log(\"\\uD83D\\uDD37 Configuraciones especiales de APNG - useFullScreen: \".concat(useFullScreen, \", syncWithTimeline: \").concat((options === null || options === void 0 ? void 0 : options.syncWithTimeline) || true));\n                } else if (isAVI) {\n                    console.log(\"\\uD83C\\uDFAC A\\xf1adiendo AVI con duraci\\xf3n \".concat(respectNativeDuration ? \"natural\" : \"especificada: \" + finalEndTime, \"s\"));\n                }\n                // Manejar APNG usando un enfoque especial - intentar con un método alternativo si es posible\n                if (treatAsAPNG) {\n                    try {\n                        // Intentar crear un payload especial para APNG que funcione como animación\n                        console.log(\"Probando con una configuraci\\xf3n especial para APNG...\");\n                        // Configuración de opciones importante para archivos APNG\n                        const apngVideoPayload = {\n                            id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                            display: {\n                                from: startTime * 1000,\n                                to: finalEndTime ? finalEndTime * 1000 : (startTime + 3) * 1000 // 3 segundos por defecto si no hay duración\n                            },\n                            // Probamos una nueva estrategia: tratarlo como imagen en lugar de video\n                            type: \"image\",\n                            details: {\n                                src: url,\n                                width: 1920,\n                                height: 1080,\n                                opacity: 100,\n                                scaleMode: \"cover\",\n                                left: 0.5,\n                                top: 0.5,\n                                originX: \"center\",\n                                originY: \"center\",\n                                // Propiedades para animar\n                                isAnimated: true\n                            }\n                        };\n                        console.log(\"Payload para APNG como imagen animada:\", JSON.stringify(apngVideoPayload, null, 2));\n                        // Usar ADD_IMAGE en lugar de ADD_VIDEO\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_IMAGE, {\n                            payload: apngVideoPayload,\n                            options: {\n                                scaleMode: \"cover\",\n                                position: {\n                                    x: 0.5,\n                                    y: 0.5\n                                }\n                            }\n                        });\n                        console.log(\"✅ APNG a\\xf1adido como imagen animada con \\xe9xito\");\n                        return;\n                    } catch (apngError) {\n                        console.error(\"❌ Error al a\\xf1adir APNG como imagen animada:\", apngError);\n                        console.error(\"Detalles:\", apngError.message);\n                        console.error(\"Traza:\", apngError.stack);\n                        console.log(\"\\uD83D\\uDD04 Continuando con el m\\xe9todo est\\xe1ndar como respaldo...\");\n                    // Continuar con el método estándar como respaldo\n                    }\n                }\n                // Crear payload para el video\n                const videoPayload = {\n                    id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                    display: {\n                        from: startTime * 1000,\n                        to: finalEndTime ? finalEndTime * 1000 : undefined // Usar undefined si queremos respetar la duración natural\n                    },\n                    type: \"video\",\n                    details: {\n                        src: url,\n                        width: width,\n                        height: height,\n                        opacity: 100,\n                        // Para archivos APNG y AVI, configurar propiedades específicas para pantalla completa\n                        ...useFullScreen && {\n                            scaleMode: \"cover\",\n                            left: 0.5,\n                            top: 0.5,\n                            originX: \"center\",\n                            originY: \"center\"\n                        },\n                        // Propiedades especiales para APNG\n                        ...treatAsAPNG && {\n                            isAPNG: true,\n                            autoPlay: true,\n                            loop: false,\n                            syncWithTimeline: (options === null || options === void 0 ? void 0 : options.syncWithTimeline) || true\n                        }\n                    }\n                };\n                console.log(\"Payload de video est\\xe1ndar:\", JSON.stringify(videoPayload, null, 2));\n                // Configuraciones adicionales para el dispatch\n                const dispatchOptions = {\n                    resourceId: \"main\",\n                    scaleMode: useFullScreen ? \"cover\" : \"fit\",\n                    ...useFullScreen && {\n                        position: {\n                            x: 0.5,\n                            y: 0.5\n                        } // Centrar para videos a pantalla completa\n                    },\n                    respectNativeDuration: respectNativeDuration,\n                    // Propiedades específicas para sincronización de APNG\n                    ...treatAsAPNG && {\n                        isAPNG: true,\n                        syncWithTimeline: (options === null || options === void 0 ? void 0 : options.syncWithTimeline) || true,\n                        playbackBehavior: (options === null || options === void 0 ? void 0 : options.playbackBehavior) || \"sync\"\n                    }\n                };\n                console.log(\"Opciones de dispatch:\", JSON.stringify(dispatchOptions, null, 2));\n                // Agregar video al timeline\n                (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_VIDEO, {\n                    payload: videoPayload,\n                    options: dispatchOptions\n                });\n                // Mensaje de log adaptado al tipo de archivo\n                if (treatAsAPNG) {\n                    console.log(\"✅ Transici\\xf3n APNG a\\xf1adida como VIDEO SINCRONIZADO al timeline desde \".concat(startTime, \"s \").concat(finalEndTime ? \"hasta \".concat(finalEndTime, \"s\") : \"con duraci\\xf3n natural\", \". Dimensiones: \").concat(width, \"x\").concat(height));\n                } else {\n                    console.log(\"✅ Video \".concat(isAVI ? \"AVI\" : \"\", \" a\\xf1adido al timeline desde \").concat(startTime, \"s\").concat(finalEndTime ? \" hasta \".concat(finalEndTime, \"s\") : \" con duraci\\xf3n natural\", \". Dimensiones: \").concat(width, \"x\").concat(height));\n                }\n            } catch (error) {\n                console.error(\"❌ ERROR CR\\xcdTICO al a\\xf1adir video:\", error);\n                console.error(\"Detalles completos:\", error.message);\n                console.error(\"Traza:\", error.stack);\n                throw error; // Propagar el error para manejo superior\n            }\n        },\n        changeDuration: (elementId, duration)=>{\n            // Simulación de cambio de duración (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando duraci\\xf3n del elemento \".concat(elementId, \" a \").concat(duration, \"s\"));\n        // Aquí iría la lógica real para cambiar la duración de un elemento\n        },\n        changeTransition: (elementId, transition)=>{\n            // Simulación de cambio de transición (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando transici\\xf3n del elemento \".concat(elementId, \" a \").concat(transition));\n        // Aquí iría la lógica real para cambiar la transición de un elemento\n        },\n        addSubtitles: async (options)=>{\n            try {\n                console.log(\"A\\xf1adiendo subt\\xedtulos directamente sin depender del bot\\xf3n\");\n                // Función para parsear el tiempo de formato SRT a milisegundos\n                const parseTimeToMs = (timeString)=>{\n                    const [hours, minutes, secondsAndMs] = timeString.split(\":\");\n                    const [seconds, ms] = secondsAndMs.split(\",\");\n                    return parseInt(hours) * 3600000 + parseInt(minutes) * 60000 + parseInt(seconds) * 1000 + parseInt(ms);\n                };\n                // Función para parsear el archivo SRT\n                const parseSRT = (srtContent)=>{\n                    const segments = [];\n                    const blocks = srtContent.trim().split(\"\\n\\n\");\n                    blocks.forEach((block)=>{\n                        const lines = block.split(\"\\n\");\n                        if (lines.length >= 3) {\n                            const id = parseInt(lines[0]);\n                            const timeRange = lines[1].split(\" --> \");\n                            const startTime = parseTimeToMs(timeRange[0]);\n                            const endTime = parseTimeToMs(timeRange[1]);\n                            const text = lines.slice(2).join(\"\\n\"); // Unir todas las líneas de texto\n                            segments.push({\n                                id,\n                                startTime,\n                                endTime,\n                                text\n                            });\n                        }\n                    });\n                    return segments;\n                };\n                // Función para dividir un texto en grupos de aproximadamente 3 palabras\n                const splitTextIntoGroups = function(text) {\n                    let wordsPerGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n                    const words = text.split(/\\s+/);\n                    const groups = [];\n                    for(let i = 0; i < words.length; i += wordsPerGroup){\n                        const group = words.slice(i, i + wordsPerGroup).join(\" \");\n                        groups.push(group);\n                    }\n                    return groups;\n                };\n                // Función para procesar un segmento y dividirlo en múltiples segmentos si es necesario\n                const processSegment = (segment)=>{\n                    const textGroups = splitTextIntoGroups(segment.text);\n                    // Si solo hay un grupo, devolver el segmento original\n                    if (textGroups.length <= 1) {\n                        return [\n                            segment\n                        ];\n                    }\n                    // Calcular la duración de cada grupo\n                    const totalDuration = segment.endTime - segment.startTime;\n                    const groupDuration = totalDuration / textGroups.length;\n                    // Crear un nuevo segmento para cada grupo\n                    return textGroups.map((groupText, index)=>{\n                        const startTime = segment.startTime + index * groupDuration;\n                        const endTime = startTime + groupDuration;\n                        return {\n                            id: segment.id * 1000 + index,\n                            startTime,\n                            endTime,\n                            text: groupText\n                        };\n                    });\n                };\n                // Función para crear el payload de texto para subtítulos\n                const createSubtitlePayload = (text, startTime, endTime)=>({\n                        id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                        display: {\n                            from: startTime,\n                            to: endTime\n                        },\n                        type: \"text\",\n                        details: {\n                            text: text.toUpperCase(),\n                            fontSize: 80,\n                            width: 900,\n                            fontUrl: \"/fonts/mrbeast.ttf\",\n                            fontFamily: \"MrBeast\",\n                            color: \"#FFFF00\",\n                            wordWrap: \"break-word\",\n                            textAlign: \"center\",\n                            borderWidth: 20,\n                            borderColor: \"#000000\",\n                            boxShadow: {\n                                color: \"#000000\",\n                                x: 3,\n                                y: 3,\n                                blur: 0\n                            },\n                            backgroundColor: \"transparent\",\n                            padding: 10,\n                            borderRadius: 0\n                        }\n                    });\n                // Cargar el archivo SRT\n                console.log(\"Cargando archivo SRT...\");\n                const response = await fetch(\"/transcriptions/transcription1.srt\");\n                if (!response.ok) {\n                    throw new Error(\"Error al cargar el archivo SRT: \".concat(response.status));\n                }\n                const srtContent = await response.text();\n                console.log(\"Archivo SRT cargado correctamente\");\n                // Parsear el archivo SRT\n                let segments = parseSRT(srtContent);\n                console.log(\"Se encontraron \".concat(segments.length, \" segmentos de subt\\xedtulos\"));\n                // Siempre usar el modo agrupado (dividir en grupos de 3 palabras)\n                segments = segments.flatMap(processSegment);\n                console.log(\"Despu\\xe9s de procesar, hay \".concat(segments.length, \" segmentos de subt\\xedtulos\"));\n                // Filtrar por tiempo si es necesario\n                if ((options === null || options === void 0 ? void 0 : options.startTime) !== undefined || (options === null || options === void 0 ? void 0 : options.endTime) !== undefined) {\n                    const originalLength = segments.length;\n                    segments = segments.filter((segment)=>{\n                        const passesStartFilter = options.startTime === undefined || segment.startTime >= options.startTime * 1000;\n                        const passesEndFilter = options.endTime === undefined || segment.endTime <= options.endTime * 1000;\n                        return passesStartFilter && passesEndFilter;\n                    });\n                    console.log(\"Filtrado por tiempo: de \".concat(originalLength, \" a \").concat(segments.length, \" segmentos\"));\n                }\n                // Obtener el trackId: primero intentamos si es proporcionado por las opciones\n                let subtitleTrackId = null;\n                if (options === null || options === void 0 ? void 0 : options.trackId) {\n                    subtitleTrackId = options.trackId;\n                    console.log(\"Usando track ID especificado por el usuario: \".concat(subtitleTrackId));\n                } else {\n                    // NUEVO: Intentar obtener el track ID de un elemento seleccionado\n                    console.log(\"Track ID no proporcionado. Intentando seleccionar un elemento existente...\");\n                    // Obtener elementos del timeline\n                    const state = stateManager.getState();\n                    console.log(\"Estado actual:\", state.tracks ? \"\".concat(state.tracks.length, \" tracks disponibles\") : \"No hay tracks disponibles\");\n                    // Buscar un elemento para seleccionar\n                    let firstItemId = null;\n                    // Buscar en el mapa de elementos\n                    if (state.trackItemsMap && Object.keys(state.trackItemsMap).length > 0) {\n                        const items = Object.keys(state.trackItemsMap);\n                        firstItemId = items[0];\n                        console.log(\"Encontrado elemento para seleccionar: \".concat(firstItemId));\n                    }\n                    // Si encontramos un elemento, intentar seleccionarlo\n                    if (firstItemId) {\n                        console.log(\"Seleccionando elemento con ID: \".concat(firstItemId));\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                            payload: {\n                                ids: [\n                                    firstItemId\n                                ]\n                            }\n                        });\n                        // Esperar un momento para la selección\n                        console.log(\"Esperando a que se aplique la selecci\\xf3n...\");\n                        await new Promise((resolve)=>setTimeout(resolve, 300));\n                        // Obtener el estado actualizado\n                        const stateAfterSelection = stateManager.getState();\n                        console.log(\"Estado despu\\xe9s de selecci\\xf3n:\", stateAfterSelection.activeIds ? \"Elementos activos: \".concat(stateAfterSelection.activeIds.join(\", \")) : \"No hay elementos activos\");\n                        // Comprobar si hay un elemento seleccionado y obtener su track\n                        if (stateAfterSelection.activeIds && stateAfterSelection.activeIds.length > 0) {\n                            const selectedItemId = stateAfterSelection.activeIds[0];\n                            const selectedItem = stateAfterSelection.trackItemsMap[selectedItemId];\n                            if (selectedItem && selectedItem.trackId) {\n                                subtitleTrackId = selectedItem.trackId;\n                                console.log(\"✅ EXITOSO: Obtenido track ID del elemento seleccionado: \".concat(subtitleTrackId));\n                            } else {\n                                console.log(\"❌ ERROR: El elemento seleccionado no tiene un trackId v\\xe1lido\");\n                            }\n                        } else {\n                            console.log(\"❌ ERROR: No se pudo seleccionar ning\\xfan elemento\");\n                        }\n                    } else {\n                        console.log(\"No se encontraron elementos para seleccionar\");\n                    }\n                    // Si aún no tenemos un trackId, intentamos buscar uno compatible\n                    if (!subtitleTrackId) {\n                        console.log(\"Buscando un track compatible para usar como fallback...\");\n                        if (state.tracks && state.tracks.length > 0) {\n                            // Buscar un track de tipo \"text\"\n                            const textTrack = state.tracks.find((track)=>track.type === \"text\" && track.accepts && track.accepts.includes(\"text\"));\n                            if (textTrack) {\n                                subtitleTrackId = textTrack.id;\n                                console.log(\"Usando track de texto existente como fallback: \".concat(subtitleTrackId));\n                            } else if (state.tracks.length > 0) {\n                                // Último recurso: usar el primer track\n                                subtitleTrackId = state.tracks[0].id;\n                                console.log(\"Usando primer track disponible como \\xfaltimo recurso: \".concat(subtitleTrackId));\n                            }\n                        }\n                    }\n                }\n                // Mostrar mensaje informativo final sobre el track ID\n                if (subtitleTrackId) {\n                    console.log(\"\\uD83C\\uDFAF Track ID usado para a\\xf1adir subt\\xedtulos: \".concat(subtitleTrackId));\n                } else {\n                    console.log(\"⚠️ No se pudo obtener un track ID. Los subt\\xedtulos se a\\xf1adir\\xe1n en tracks individuales\");\n                }\n                // Función para verificar superposición de tiempos con subtítulos ya agregados\n                const hasOverlap = (startTime, endTime, existingSubtitles)=>{\n                    return existingSubtitles.some((sub)=>startTime >= sub.from && startTime <= sub.to || // El inicio está dentro de otro subtítulo\n                        endTime >= sub.from && endTime <= sub.to || // El final está dentro de otro subtítulo\n                        startTime <= sub.from && endTime >= sub.to // El subtítulo actual engloba a otro\n                    );\n                };\n                // Array para almacenar información de los subtítulos agregados\n                const addedSubtitles = [];\n                // Añadir los subtítulos con 1500ms de retraso entre cada uno\n                console.log(\"A\\xf1adiendo \".concat(segments.length, \" segmentos de subt\\xedtulos al timeline...\"));\n                // Agregar subtítulos de forma secuencial con await\n                for(let index = 0; index < segments.length; index++){\n                    const segment = segments[index];\n                    // Para el primer subtítulo o si hay superposición, buscar un track disponible\n                    if (index === 0 || subtitleTrackId && hasOverlap(segment.startTime, segment.endTime, addedSubtitles)) {\n                        // Si es el primer subtítulo, usar el track seleccionado/obtenido anteriormente\n                        if (index === 0) {\n                            console.log(\"A\\xf1adiendo primer subt\\xedtulo con track ID: \".concat(subtitleTrackId || \"none\"));\n                        } else {\n                            console.log(\"Detectada superposici\\xf3n en el subt\\xedtulo \".concat(index + 1, \" - buscando otro track\"));\n                        // Aquí podríamos buscar otro track si quisiéramos manejar superposiciones en tracks diferentes\n                        // Por ahora, mantendremos el comportamiento de usar el mismo track y dejar que el sistema maneje la superposición\n                        }\n                    }\n                    // Añadir el subtítulo\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_TEXT, {\n                        payload: createSubtitlePayload(segment.text, segment.startTime, segment.endTime),\n                        options: subtitleTrackId ? {\n                            trackId: subtitleTrackId\n                        } : {}\n                    });\n                    // Registrar el subtítulo añadido\n                    if (subtitleTrackId) {\n                        addedSubtitles.push({\n                            from: segment.startTime,\n                            to: segment.endTime,\n                            trackId: subtitleTrackId\n                        });\n                    }\n                    if ((index + 1) % 10 === 0 || index === segments.length - 1) {\n                        console.log(\"Progreso: \".concat(index + 1, \"/\").concat(segments.length, \" subt\\xedtulos a\\xf1adidos\"));\n                    }\n                    // Esperar 1500ms antes de añadir el siguiente subtítulo\n                    await new Promise((resolve)=>setTimeout(resolve, 11500));\n                }\n                return true;\n            } catch (error) {\n                console.error(\"Error al a\\xf1adir subt\\xedtulos:\", error);\n                return false;\n            }\n        },\n        getActiveElements: async ()=>{\n            try {\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Verificar si hay IDs activos\n                if (!state.activeIds || state.activeIds.length === 0) {\n                    console.log(\"No hay elementos activos seleccionados\");\n                    return [];\n                }\n                // Verificar si hay elementos en el trackItemsMap\n                if (!state.trackItemsMap) {\n                    console.log(\"No hay trackItemsMap disponible\");\n                    return [];\n                }\n                // Obtener información de los elementos activos\n                const activeElements = state.activeIds.filter((id)=>state.trackItemsMap[id]).map((id)=>{\n                    var _item_display, _item_display1;\n                    const item = state.trackItemsMap[id];\n                    return {\n                        id,\n                        trackId: item.trackId,\n                        type: item.type,\n                        from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                        to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                        duration: item.display ? item.display.to - item.display.from : 0,\n                        details: item.details\n                    };\n                });\n                console.log(\"Se encontraron \".concat(activeElements.length, \" elementos activos\"));\n                return activeElements;\n            } catch (error) {\n                console.error(\"Error al obtener elementos activos:\", error);\n                return [];\n            }\n        },\n        getAllTimelineElements: async ()=>{\n            try {\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Verificar si hay elementos en el trackItemsMap\n                if (!state.trackItemsMap || Object.keys(state.trackItemsMap).length === 0) {\n                    console.log(\"No hay elementos en el trackItemsMap\");\n                    // Buscar elementos en otras propiedades del estado\n                    for (const key of Object.keys(state)){\n                        if (typeof state[key] === \"object\" && state[key] !== null) {\n                            const objValue = state[key];\n                            console.log(\"Explorando propiedad alternativa: \".concat(key));\n                            // Verificar si parece ser un mapa de elementos\n                            if (Object.keys(objValue).length > 0) {\n                                const sample = objValue[Object.keys(objValue)[0]];\n                                if (sample && sample.display && sample.type) {\n                                    console.log(\"Encontrada posible fuente alternativa de elementos en propiedad \".concat(key));\n                                    // Procesar elementos de esta propiedad alternativa\n                                    return Object.entries(objValue).filter((param)=>{\n                                        let [_, item] = param;\n                                        return item && item.display;\n                                    }).map((param)=>{\n                                        let [id, item] = param;\n                                        var _item_display, _item_display1;\n                                        return {\n                                            id,\n                                            trackId: item.trackId,\n                                            type: item.type,\n                                            from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                                            to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                                            duration: item.display ? item.display.to - item.display.from : 0,\n                                            details: item.details\n                                        };\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    return [];\n                }\n                // Obtener todos los elementos\n                const allElements = Object.entries(state.trackItemsMap).filter((param)=>{\n                    let [_, item] = param;\n                    return item && item.display;\n                }).map((param)=>{\n                    let [id, item] = param;\n                    var _item_display, _item_display1;\n                    return {\n                        id,\n                        trackId: item.trackId,\n                        type: item.type,\n                        from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                        to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                        duration: item.display ? item.display.to - item.display.from : 0,\n                        details: item.details\n                    };\n                }).sort((a, b)=>(a.from || 0) - (b.from || 0));\n                console.log(\"Se encontraron \".concat(allElements.length, \" elementos en el timeline\"));\n                return allElements;\n            } catch (error) {\n                console.error(\"Error al obtener todos los elementos del timeline:\", error);\n                return [];\n            }\n        },\n        removeSegments: async (segments)=>{\n            try {\n                console.log(\"Iniciando eliminaci\\xf3n de segmentos m\\xfaltiples\");\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Validar que haya elementos en la timeline\n                if (!state.activeIds || state.activeIds.length === 0) {\n                    console.error(\"No hay elementos seleccionados en la timeline\");\n                    // Buscar el primer elemento disponible en la timeline\n                    const trackItemsMap = state.trackItemsMap || {};\n                    const trackItems = Object.keys(trackItemsMap);\n                    if (trackItems.length === 0) {\n                        console.error(\"No hay elementos en la timeline para eliminar segmentos\");\n                        throw new Error(\"No hay elementos en la timeline\");\n                    }\n                    // Seleccionar el primer elemento disponible\n                    const firstItemId = trackItems[0];\n                    console.log(\"Seleccionando autom\\xe1ticamente el elemento con ID: \".concat(firstItemId));\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                        payload: {\n                            ids: [\n                                firstItemId\n                            ]\n                        }\n                    });\n                    // Esperar a que se aplique la selección\n                    await new Promise((resolve)=>setTimeout(resolve, 300));\n                }\n                // Almacenamos información del elemento seleccionado\n                const currentState = stateManager.getState();\n                if (!currentState.activeIds || currentState.activeIds.length === 0) {\n                    throw new Error(\"No se pudo seleccionar ning\\xfan elemento en la timeline\");\n                }\n                const originalItemId = currentState.activeIds[0];\n                const originalItem = currentState.trackItemsMap[originalItemId];\n                const trackType = originalItem.type;\n                const trackId = originalItem.trackId;\n                console.log(\"Elemento seleccionado: ID=\".concat(originalItemId, \", tipo=\").concat(trackType, \", trackId=\").concat(trackId));\n                // Procesar cada segmento en orden (de final a principio para evitar afectar posiciones)\n                for(let i = segments.length - 1; i >= 0; i--){\n                    const segment = segments[i];\n                    console.log(\"Procesando segmento \".concat(i + 1, \"/\").concat(segments.length, \": \").concat(segment.startTime, \"s - \").concat(segment.endTime, \"s\"));\n                    try {\n                        // PASO 1: Hacer un corte en el tiempo final\n                        const endMs = segment.endTime * 1000;\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_SPLIT, {\n                            payload: {},\n                            options: {\n                                time: endMs\n                            }\n                        });\n                        console.log(\"Paso 1: Corte aplicado en tiempo final \".concat(segment.endTime, \"s\"));\n                        // Esperar a que se procese el primer corte\n                        await new Promise((resolve)=>setTimeout(resolve, 1500));\n                        // Obtenemos el estado después del primer corte\n                        const stateAfterFirstCut = stateManager.getState();\n                        const elementsAfterFirstCut = Object.entries(stateAfterFirstCut.trackItemsMap).filter((param)=>{\n                            let [_, item] = param;\n                            return item.type === trackType && item.trackId === trackId && item.display && !isNaN(item.display.from) && !isNaN(item.display.to);\n                        }).map((param)=>{\n                            let [id, item] = param;\n                            return {\n                                id,\n                                from: item.display.from,\n                                to: item.display.to,\n                                duración: item.display.to - item.display.from\n                            };\n                        }).sort((a, b)=>a.from - b.from);\n                        console.log(\"Elementos despu\\xe9s del primer corte:\", elementsAfterFirstCut);\n                        // PASO 2: Identificar el elemento izquierdo que contiene el tiempo inicial\n                        const startMs = segment.startTime * 1000;\n                        const leftElement = elementsAfterFirstCut.find((elem)=>elem.from <= startMs && elem.to >= startMs);\n                        if (!leftElement) {\n                            console.error(\"No se pudo identificar el elemento izquierdo para el segmento \".concat(i + 1));\n                            continue;\n                        }\n                        console.log(\"Paso 2: Elemento izquierdo identificado (ID: \".concat(leftElement.id, \")\"));\n                        // PASO 3: Seleccionar el elemento izquierdo y hacer corte en tiempo inicial\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                            payload: {\n                                ids: [\n                                    leftElement.id\n                                ]\n                            }\n                        });\n                        // Esperar a que se aplique la selección\n                        await new Promise((resolve)=>setTimeout(resolve, 300));\n                        // Aplicar el corte en el tiempo inicial\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_SPLIT, {\n                            payload: {},\n                            options: {\n                                time: startMs\n                            }\n                        });\n                        console.log(\"Paso 3: Segundo corte aplicado en tiempo inicial \".concat(segment.startTime, \"s\"));\n                        // Esperar a que se procese el segundo corte\n                        await new Promise((resolve)=>setTimeout(resolve, 1500));\n                        // Obtenemos el estado después del segundo corte\n                        const stateAfterSecondCut = stateManager.getState();\n                        const elementsAfterSecondCut = Object.entries(stateAfterSecondCut.trackItemsMap).filter((param)=>{\n                            let [_, item] = param;\n                            return item.type === trackType && item.trackId === trackId && item.display && !isNaN(item.display.from) && !isNaN(item.display.to);\n                        }).map((param)=>{\n                            let [id, item] = param;\n                            return {\n                                id,\n                                from: item.display.from,\n                                to: item.display.to,\n                                duración: item.display.to - item.display.from\n                            };\n                        }).sort((a, b)=>a.from - b.from);\n                        console.log(\"Elementos despu\\xe9s del segundo corte:\", elementsAfterSecondCut);\n                        // PASO 4: Identificar el elemento del medio usando criterios más precisos\n                        const middleElements = elementsAfterSecondCut.filter((elem)=>Math.abs(elem.from - startMs) < 50 && Math.abs(elem.to - endMs) < 50);\n                        console.log(\"Elementos que coinciden con los criterios del medio:\", middleElements);\n                        if (middleElements.length === 0) {\n                            console.error(\"No se pudo identificar el elemento del medio para el segmento \".concat(i + 1));\n                            continue;\n                        }\n                        // Si hay más de un elemento que coincide, tomamos el primero\n                        const middleElement = middleElements[0];\n                        console.log(\"Paso 4: Elemento del medio identificado (ID: \".concat(middleElement.id, \")\"));\n                        // PASO 5: Seleccionar y eliminar el elemento del medio\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                            payload: {\n                                ids: [\n                                    middleElement.id\n                                ]\n                            }\n                        });\n                        // Esperar a que se aplique la selección\n                        await new Promise((resolve)=>setTimeout(resolve, 300));\n                        // Verificar que el elemento está seleccionado antes de eliminarlo\n                        const currentState = stateManager.getState();\n                        if (currentState.activeIds && currentState.activeIds.includes(middleElement.id)) {\n                            console.log(\"Elemento del medio correctamente seleccionado, procediendo con eliminaci\\xf3n\");\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_DELETE);\n                            console.log(\"Elemento eliminado correctamente: \".concat(middleElement.id));\n                        } else {\n                            console.log(\"No se pudo seleccionar normalmente, intentando m\\xe9todo alternativo\");\n                            // Enfoque alternativo: Usar el EDIT_OBJECT para \"ocultar\" el segmento\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                                payload: {\n                                    [middleElement.id]: {\n                                        display: {\n                                            from: -99999,\n                                            to: -99990\n                                        },\n                                        visible: false // Adicionalmente marcarlo como no visible\n                                    }\n                                }\n                            });\n                            console.log(\"Aplicado m\\xe9todo alternativo para ocultar el segmento\");\n                        }\n                        // Esperar a que se procese la eliminación\n                        await new Promise((resolve)=>setTimeout(resolve, 1500));\n                    } catch (error) {\n                        console.error(\"Error al procesar el segmento \".concat(i + 1, \":\"), error);\n                    }\n                    // Pausa entre segmentos\n                    await new Promise((resolve)=>setTimeout(resolve, 1500));\n                }\n                // Actualizar la escala para refrescar la vista\n                const { scale } = stateManager.getState();\n                if (scale) {\n                    console.log(\"Actualizando escala para refrescar la vista\");\n                    // Guardar el valor actual de scale.unit\n                    const originalUnit = scale.unit;\n                    // Incrementar el valor\n                    scale.unit += 1;\n                    console.log(\"Scale cambiada: \".concat(originalUnit, \" -> \").concat(scale.unit));\n                    // Asegurar que el cambio sea notado por el sistema\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                        payload: {\n                            scale: {\n                                ...scale,\n                                unit: scale.unit // Explícitamente establecer el nuevo valor\n                            }\n                        }\n                    });\n                    // Forzar una actualización adicional volviendo al valor original después de un momento\n                    setTimeout(()=>{\n                        const currentState = stateManager.getState();\n                        if (currentState.scale) {\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                payload: {\n                                    scale: {\n                                        ...currentState.scale,\n                                        unit: originalUnit // Volver al valor original\n                                    }\n                                }\n                            });\n                            console.log(\"Restaurado scale a valor original: \".concat(originalUnit));\n                        }\n                    }, 300);\n                }\n                console.log(\"Eliminaci\\xf3n de segmentos completada\");\n                return true;\n            } catch (error) {\n                console.error(\"Error al eliminar segmentos:\", error);\n                return false;\n            }\n        },\n        compactTimeline: async ()=>{\n            try {\n                console.log(\"=== INICIANDO COMPACTACI\\xd3N DE L\\xcdNEA DE TIEMPO DESDE IA ===\");\n                // Obtener el estado actual\n                const estado = stateManager.getState();\n                console.log(\"Estado para compactaci\\xf3n:\", Object.keys(estado));\n                // Añadir un tiempo de espera inicial para asegurar que el estado está actualizado\n                console.log(\"Esperando 1 segundo para asegurar consistencia del estado...\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // Verificación adicional para asegurarnos que los cambios en la timeline ya se aplicaron\n                console.log(\"Verificando que los elementos en la timeline reflejen los cambios m\\xe1s recientes...\");\n                // Pequeña pausa adicional para asegurar consistencia del estado\n                await new Promise((resolve)=>setTimeout(resolve, 1500));\n                // Buscar los elementos del timeline - usando la referencia al método dentro del mismo objeto\n                const todosElementos = await executor.getAllTimelineElements();\n                console.log(\"Encontrados \".concat(todosElementos.length, \" elementos en la timeline\"));\n                // Logging de elementos para diagnóstico\n                todosElementos.forEach((elem, index)=>{\n                    console.log(\"Elemento \".concat(index + 1, \": ID=\").concat(elem.id, \", Tipo=\").concat(elem.type, \", Track=\").concat(elem.trackId, \", Tiempo=\").concat(elem.from, \"ms-\").concat(elem.to, \"ms (duraci\\xf3n=\").concat(elem.to - elem.from, \"ms)\"));\n                });\n                // Si no hay elementos, no podemos compactar\n                if (todosElementos.length === 0) {\n                    console.log(\"No hay elementos en el timeline para compactar\");\n                    return false;\n                }\n                // Agrupar elementos por track para análisis\n                const elementosPorTrack = {};\n                todosElementos.forEach((elem)=>{\n                    if (elem.trackId) {\n                        if (!elementosPorTrack[elem.trackId]) {\n                            elementosPorTrack[elem.trackId] = [];\n                        }\n                        elementosPorTrack[elem.trackId].push(elem);\n                    }\n                });\n                // Ordenar elementos en cada track por tiempo\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    elementosPorTrack[trackId].sort((a, b)=>a.from - b.from);\n                });\n                console.log(\"Elementos agrupados por track:\", Object.keys(elementosPorTrack).length);\n                // Logging de tracks para diagnóstico\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    console.log(\"Track \".concat(trackId, \": \").concat(elementosPorTrack[trackId].length, \" elementos\"));\n                    // Mostrar los elementos en este track ordenados\n                    elementosPorTrack[trackId].forEach((elem, idx)=>{\n                        console.log(\"  \".concat(idx + 1, \". ID=\").concat(elem.id.substring(0, 8), \"... Tiempo=\").concat(elem.from, \"ms-\").concat(elem.to, \"ms (duraci\\xf3n: \").concat(elem.to - elem.from, \"ms)\"));\n                    });\n                });\n                // Buscar espacios vacíos en cada track\n                const espaciosVacios = [];\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    const elementos = elementosPorTrack[trackId];\n                    // Si hay al menos 2 elementos, podemos buscar espacios\n                    if (elementos.length >= 2) {\n                        for(let i = 0; i < elementos.length - 1; i++){\n                            const elementoActual = elementos[i];\n                            const elementoSiguiente = elementos[i + 1];\n                            // Verificar si hay un espacio entre el fin del elemento actual y el inicio del siguiente\n                            const espacio = elementoSiguiente.from - elementoActual.to;\n                            // Si el espacio es significativo (más de 100ms)\n                            if (espacio > 100) {\n                                espaciosVacios.push({\n                                    trackId,\n                                    start: elementoActual.to,\n                                    end: elementoSiguiente.from,\n                                    size: espacio,\n                                    elementoAntes: elementoActual.id,\n                                    elementoDespues: elementoSiguiente.id\n                                });\n                                console.log(\"Encontrado espacio de \".concat(espacio, \"ms (\").concat(espacio / 1000, \"s) en track \").concat(trackId, \" entre elementos \").concat(elementoActual.id.substring(0, 8), \"... y \").concat(elementoSiguiente.id.substring(0, 8), \"...\"));\n                            }\n                        }\n                    }\n                });\n                console.log(\"Se encontraron \".concat(espaciosVacios.length, \" espacios vac\\xedos\"));\n                // Si no hay espacios, no necesitamos compactar\n                if (espaciosVacios.length === 0) {\n                    console.log(\"No hay espacios significativos para compactar\");\n                    return true; // Devolvemos true porque técnicamente está compactado\n                }\n                // Ordenar espacios por posición (de izquierda a derecha)\n                espaciosVacios.sort((a, b)=>a.start - b.start);\n                // Calcular el espacio total a compactar\n                let espacioTotal = 0;\n                espaciosVacios.forEach((espacio)=>{\n                    espacioTotal += espacio.size;\n                });\n                console.log(\"Espacio total a compactar: \".concat(espacioTotal, \"ms (\").concat(espacioTotal / 1000, \"s)\"));\n                console.log(\"Preparando actualizaciones para \".concat(todosElementos.length, \" elementos...\"));\n                // Preparar actualizaciones para cada elemento\n                const actualizaciones = {};\n                let elementosAMover = 0;\n                // Para cada elemento, calculamos el desplazamiento basado en los espacios anteriores\n                todosElementos.forEach((elemento)=>{\n                    let desplazamiento = 0;\n                    // Calcular cuánto debe moverse basado en los espacios vacíos anteriores\n                    for (const espacio of espaciosVacios){\n                        // Si el elemento está después del espacio vacío, debe moverse\n                        if (elemento.from > espacio.end) {\n                            desplazamiento += espacio.size;\n                        }\n                    }\n                    // Si hay desplazamiento, añadir a las actualizaciones\n                    if (desplazamiento > 0) {\n                        const nuevoFrom = elemento.from - desplazamiento;\n                        const nuevoTo = elemento.to - desplazamiento;\n                        console.log(\"Elemento \".concat(elemento.id.substring(0, 8), \"... se mover\\xe1: \").concat(elemento.from, \"ms -> \").concat(nuevoFrom, \"ms (desplazamiento: \").concat(desplazamiento, \"ms)\"));\n                        actualizaciones[elemento.id] = {\n                            display: {\n                                from: nuevoFrom,\n                                to: nuevoTo\n                            }\n                        };\n                        elementosAMover++;\n                    }\n                });\n                console.log(\"Elementos a mover: \".concat(elementosAMover, \" de \").concat(todosElementos.length, \" total\"));\n                // Aplicar las actualizaciones\n                if (elementosAMover > 0) {\n                    console.log(\"Aplicando actualizaciones para compactar timeline...\");\n                    try {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                            payload: actualizaciones\n                        });\n                        console.log(\"Actualizaciones aplicadas con \\xe9xito\");\n                    } catch (error) {\n                        console.error(\"Error al aplicar actualizaciones:\", error);\n                        return false;\n                    }\n                    // Refrescar la vista\n                    setTimeout(()=>{\n                        try {\n                            const { scale } = stateManager.getState();\n                            if (scale) {\n                                // Hacer un pequeño cambio en la escala para forzar la actualización\n                                const updatedScale = {\n                                    ...scale\n                                };\n                                if (typeof updatedScale.unit === \"number\") {\n                                    updatedScale.unit = (updatedScale.unit || 0) + 1;\n                                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                        payload: {\n                                            scale: updatedScale\n                                        }\n                                    });\n                                    // Volver a la escala original\n                                    setTimeout(()=>{\n                                        const currentScale = {\n                                            ...stateManager.getState().scale\n                                        };\n                                        currentScale.unit = (currentScale.unit || 1) - 1;\n                                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                            payload: {\n                                                scale: currentScale\n                                            }\n                                        });\n                                    }, 300);\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Error al refrescar la vista:\", error);\n                        }\n                    }, 1500);\n                    console.log(\"Compactaci\\xf3n completada con \\xe9xito\");\n                    return true;\n                } else {\n                    console.log(\"No hay elementos que necesiten moverse\");\n                    return true;\n                }\n            } catch (error) {\n                console.error(\"Error al compactar la l\\xednea de tiempo:\", error);\n                return false;\n            }\n        },\n        smartTrim: async ()=>{\n            try {\n                console.log(\"=== INICIANDO PROCESO DE RECORTE INTELIGENTE DESDE IA ===\");\n                // 1. Realizar la llamada al API para analizar la transcripción\n                console.log(\"Solicitando an\\xe1lisis de transcripci\\xf3n...\");\n                const response = await fetch(\"/api/smart-trim\");\n                if (!response.ok) {\n                    throw new Error(\"Error al analizar la transcripci\\xf3n: \".concat(response.status));\n                }\n                const data = await response.json();\n                console.log(\"An\\xe1lisis de transcripci\\xf3n completado:\", data);\n                if (!data.removeSegments || !Array.isArray(data.removeSegments) || data.removeSegments.length === 0) {\n                    console.log(\"No se encontraron segmentos para eliminar\");\n                    return false;\n                }\n                // 2. Convertir los segmentos al formato que espera removeSegments\n                const segments = data.removeSegments.map((segment)=>({\n                        startTime: segment.startTime,\n                        endTime: segment.endTime // Ya está en segundos\n                    }));\n                console.log(\"Se eliminar\\xe1n \".concat(segments.length, \" segmentos:\"), segments.map((s)=>\"\".concat(s.startTime, \"s-\").concat(s.endTime, \"s\")).join(\", \"));\n                // Almacenar información del estado previo para identificar tracks y elementos\n                console.log(\"Obteniendo informaci\\xf3n del estado antes de eliminar segmentos...\");\n                const estadoPrevio = stateManager.getState();\n                const elementosPrevios = await executor.getAllTimelineElements();\n                // Determinar el trackId principal basado en los elementos\n                const contadorTracks = {};\n                elementosPrevios.forEach((elem)=>{\n                    if (elem.trackId) {\n                        contadorTracks[elem.trackId] = (contadorTracks[elem.trackId] || 0) + 1;\n                    }\n                });\n                // Encontrar el track con más elementos\n                let trackIdPrincipal = \"\";\n                if (Object.keys(contadorTracks).length > 0) {\n                    const tracksPorUso = Object.entries(contadorTracks).sort((a, b)=>b[1] - a[1]);\n                    if (tracksPorUso.length > 0) {\n                        trackIdPrincipal = tracksPorUso[0][0];\n                        console.log(\"Usando trackId principal: \".concat(trackIdPrincipal));\n                    }\n                }\n                // 3. Eliminar los segmentos\n                console.log(\"Ejecutando eliminaci\\xf3n de segmentos...\");\n                const result = await executor.removeSegments(segments);\n                if (!result) {\n                    console.log(\"Error al eliminar los segmentos\");\n                    return false;\n                }\n                console.log(\"Segmentos eliminados correctamente\");\n                // 4. Crear registro de los segmentos eliminados para compactación\n                const segmentosEliminados = segments.map((segment)=>({\n                        start: segment.startTime * 1000,\n                        end: segment.endTime * 1000,\n                        trackId: trackIdPrincipal,\n                        size: (segment.endTime - segment.startTime) * 1000\n                    }));\n                console.log(\"Segmentos registrados para compactaci\\xf3n:\", segmentosEliminados);\n                // 5. Esperar un momento para que se completen las actualizaciones del DOM y el estado\n                console.log(\"Esperando 5 segundos para asegurar que los cambios en la timeline est\\xe9n completos antes de compactar...\");\n                await new Promise((resolve)=>setTimeout(resolve, 15000));\n                // 6. Compactar el timeline usando el enfoque de segmentos registrados\n                console.log(\"Compactando timeline basado en segmentos eliminados...\");\n                // Obtener elementos actuales después de la eliminación\n                const elementosActuales = await executor.getAllTimelineElements();\n                console.log(\"Se encontraron \".concat(elementosActuales.length, \" elementos en la timeline despu\\xe9s de eliminar segmentos\"));\n                // Calcular el espacio total a compactar\n                let espacioTotal = 0;\n                segmentosEliminados.forEach((segmento)=>{\n                    espacioTotal += segmento.size;\n                });\n                console.log(\"Espacio total a compactar: \".concat(espacioTotal, \"ms (\").concat(espacioTotal / 1000, \"s)\"));\n                // Preparar actualizaciones para cada elemento\n                const actualizaciones = {};\n                let elementosAMover = 0;\n                // Ordenar segmentos por posición de inicio\n                const segmentosOrdenados = [\n                    ...segmentosEliminados\n                ].sort((a, b)=>a.start - b.start);\n                // Para cada elemento, calcular el desplazamiento basado en los segmentos eliminados\n                elementosActuales.forEach((elemento)=>{\n                    let desplazamiento = 0;\n                    // Calcular cuánto debe moverse basado en los segmentos eliminados anteriores\n                    for (const segmento of segmentosOrdenados){\n                        if (elemento.from > segmento.start) {\n                            desplazamiento += segmento.size;\n                        }\n                    }\n                    // Si hay desplazamiento, añadir a las actualizaciones\n                    if (desplazamiento > 0) {\n                        const nuevoFrom = elemento.from - desplazamiento;\n                        const nuevoTo = elemento.to - desplazamiento;\n                        console.log(\"Elemento \".concat(elemento.id.substring(0, 8), \"... se mover\\xe1: \").concat(elemento.from, \"ms -> \").concat(nuevoFrom, \"ms (desplazamiento: \").concat(desplazamiento, \"ms)\"));\n                        actualizaciones[elemento.id] = {\n                            display: {\n                                from: nuevoFrom,\n                                to: nuevoTo\n                            }\n                        };\n                        elementosAMover++;\n                    }\n                });\n                console.log(\"Elementos a mover: \".concat(elementosAMover, \" de \").concat(elementosActuales.length, \" total\"));\n                // Aplicar las actualizaciones\n                if (elementosAMover > 0) {\n                    console.log(\"Aplicando actualizaciones para compactar timeline...\");\n                    try {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                            payload: actualizaciones\n                        });\n                        console.log(\"Actualizaciones aplicadas con \\xe9xito\");\n                        // Refrescar la vista\n                        setTimeout(()=>{\n                            try {\n                                const { scale } = stateManager.getState();\n                                if (scale) {\n                                    const updatedScale = {\n                                        ...scale\n                                    };\n                                    if (typeof updatedScale.unit === \"number\") {\n                                        updatedScale.unit = (updatedScale.unit || 0) + 1;\n                                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                            payload: {\n                                                scale: updatedScale\n                                            }\n                                        });\n                                        // Volver a la escala original\n                                        setTimeout(()=>{\n                                            const currentScale = {\n                                                ...stateManager.getState().scale\n                                            };\n                                            currentScale.unit = (currentScale.unit || 1) - 1;\n                                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                                payload: {\n                                                    scale: currentScale\n                                                }\n                                            });\n                                        }, 300);\n                                    }\n                                }\n                            } catch (error) {\n                                console.error(\"Error al refrescar la vista:\", error);\n                            }\n                        }, 1500);\n                    } catch (error) {\n                        console.error(\"Error al aplicar actualizaciones:\", error);\n                        return false;\n                    }\n                } else {\n                    console.log(\"No se encontraron elementos que necesiten moverse\");\n                }\n                console.log(\"Timeline compactado correctamente\");\n                return true;\n            } catch (error) {\n                console.error(\"Error al realizar el recorte inteligente:\", error);\n                return false;\n            }\n        },\n        addMusic: (musicPath, options)=>{\n            try {\n                // Valores predeterminados\n                const startTime = (options === null || options === void 0 ? void 0 : options.startTime) !== undefined ? options.startTime : 0;\n                const endTime = (options === null || options === void 0 ? void 0 : options.endTime) !== undefined ? options.endTime : startTime + 30; // Duración predeterminada más larga para música\n                const volume = (options === null || options === void 0 ? void 0 : options.volume) !== undefined ? options.volume : 80; // Volumen predeterminado al 80%\n                const respectNativeDuration = (options === null || options === void 0 ? void 0 : options.respectNativeDuration) !== undefined ? options.respectNativeDuration : true; // Por defecto, respetar duración nativa\n                console.log(\"A\\xf1adiendo m\\xfasica desde \".concat(musicPath));\n                console.log(\"Tiempos: \".concat(startTime, \"s a \").concat(endTime, \"s, volumen: \").concat(volume, \", respectNativeDuration: \").concat(respectNativeDuration));\n                // Crear payload para la música\n                const audioPayload = {\n                    id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                    display: {\n                        from: startTime * 1000,\n                        to: endTime * 1000 // Convertir a milisegundos\n                    },\n                    type: \"audio\",\n                    details: {\n                        src: musicPath,\n                        volume: volume,\n                        fadeIn: (options === null || options === void 0 ? void 0 : options.fadeIn) === true,\n                        fadeOut: (options === null || options === void 0 ? void 0 : options.fadeOut) === true\n                    }\n                };\n                // Agregar audio al timeline usando ADD_AUDIO\n                (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_AUDIO, {\n                    payload: audioPayload,\n                    options: {\n                        respectNativeDuration: respectNativeDuration\n                    }\n                });\n                console.log(\"M\\xfasica agregada exitosamente con ID: \".concat(audioPayload.id));\n                return audioPayload.id;\n            } catch (error) {\n                console.error(\"Error al agregar m\\xfasica:\", error);\n                throw error;\n            }\n        }\n    };\n    return executor;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ai-chat/ai-video-commands.ts\n"));

/***/ })

});