"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/ai-chat/ai-video-commands.ts":
/*!*************************************************!*\
  !*** ./components/ai-chat/ai-video-commands.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createVideoCommandExecutor: function() { return /* binding */ createVideoCommandExecutor; }\n/* harmony export */ });\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/events */ \"(app-pages-browser)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* harmony import */ var _designcombo_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @designcombo/state */ \"(app-pages-browser)/./node_modules/@designcombo/state/dist/index.es.js\");\n/* harmony import */ var _designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @designcombo/timeline */ \"(app-pages-browser)/./node_modules/@designcombo/timeline/dist/index.es.js\");\n\n\n\nfunction createVideoCommandExecutor(stateManager) {\n    // Crear el objeto executor con todos los métodos\n    const executor = {\n        addText: (text, options)=>{\n            const position = (options === null || options === void 0 ? void 0 : options.position) || {\n                x: 0.5,\n                y: 0.5\n            }; // Centrado por defecto\n            const fontSize = (options === null || options === void 0 ? void 0 : options.fontSize) || 48;\n            const fontFamily = (options === null || options === void 0 ? void 0 : options.fontFamily) || \"Roboto-Bold\";\n            const color = (options === null || options === void 0 ? void 0 : options.color) || \"#FFFFFF\";\n            const startTime = (options === null || options === void 0 ? void 0 : options.startTime) || 0; // Por defecto al inicio\n            const endTime = (options === null || options === void 0 ? void 0 : options.endTime) || 5; // Por defecto 5 segundos de duración\n            // Crear payload para el texto\n            const textPayload = {\n                id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                display: {\n                    from: startTime * 1000,\n                    to: endTime * 1000 // Convertir a milisegundos\n                },\n                type: \"text\",\n                details: {\n                    text: text,\n                    fontSize: fontSize,\n                    width: 600,\n                    fontFamily: fontFamily,\n                    color: color,\n                    wordWrap: \"break-word\",\n                    textAlign: \"center\",\n                    borderWidth: 0,\n                    borderColor: \"#000000\",\n                    boxShadow: {\n                        color: \"#ffffff\",\n                        x: 0,\n                        y: 0,\n                        blur: 0\n                    }\n                }\n            };\n            // Agregar texto al timeline\n            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_TEXT, {\n                payload: textPayload,\n                options: {}\n            });\n        },\n        changeColor: (elementId, color)=>{\n            // Simulación de cambio de color (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando color del elemento \".concat(elementId, \" a \").concat(color));\n        // Aquí iría la lógica real para cambiar el color de un elemento\n        },\n        addImage: (url, options)=>{\n            // Asegurar que tenemos una URL válida\n            if (!url) {\n                console.error(\"URL de imagen no v\\xe1lida\");\n                return;\n            }\n            // Verificar si es una URL genérica de referencia, que no debe usarse directamente\n            if (url === \"imagen_adjunta_por_el_usuario.jpg\" || url.includes(\"/url_de_la_imagen\")) {\n                console.error(\"Error: URL de imagen gen\\xe9rica inv\\xe1lida detectada\", url);\n                throw new Error(\"La URL de imagen no es v\\xe1lida. Se intent\\xf3 usar un marcador gen\\xe9rico directamente.\");\n            }\n            const width = (options === null || options === void 0 ? void 0 : options.width) || 480;\n            const height = (options === null || options === void 0 ? void 0 : options.height) || 270;\n            const startTime = (options === null || options === void 0 ? void 0 : options.startTime) !== undefined ? options.startTime : 0;\n            const endTime = (options === null || options === void 0 ? void 0 : options.endTime) !== undefined ? options.endTime : startTime + 5;\n            // Para depuración, mostrar parte de la URL (truncada si es data:URL)\n            const logUrl = url.startsWith(\"data:\") ? \"\".concat(url.substring(0, 30), \"... (data URL)\") : url;\n            console.log(\"A\\xf1adiendo imagen desde \".concat(logUrl, \" desde segundo \").concat(startTime, \" hasta \").concat(endTime));\n            // Pre-cargar la imagen para obtener sus dimensiones reales\n            const preloadImage = (imageUrl)=>{\n                return new Promise((resolve)=>{\n                    if (imageUrl.startsWith(\"data:\")) {\n                        // Para data URLs, creamos una imagen temporal\n                        const img = new Image();\n                        img.onload = ()=>{\n                            resolve({\n                                width: img.width,\n                                height: img.height\n                            });\n                        };\n                        img.onerror = ()=>{\n                            console.warn(\"Error al cargar la imagen para dimensiones, usando valores por defecto\");\n                            resolve({\n                                width: 480,\n                                height: 270\n                            });\n                        };\n                        img.src = imageUrl;\n                    } else {\n                        // Para URLs normales, usamos dimensiones predeterminadas\n                        resolve({\n                            width: 480,\n                            height: 270\n                        });\n                    }\n                });\n            };\n            // Función para crear el payload después de pre-cargar la imagen\n            const createAndDispatchPayload = async ()=>{\n                try {\n                    // Obtener dimensiones reales si es una data URL\n                    let finalWidth = width;\n                    let finalHeight = height;\n                    if (url.startsWith(\"data:\")) {\n                        const dimensions = await preloadImage(url);\n                        // Calcular proporciones para mantener relación de aspecto\n                        const aspectRatio = dimensions.width / dimensions.height;\n                        // Ajustar dimensiones manteniendo proporción\n                        if (aspectRatio > 1) {\n                            finalWidth = Math.min(640, dimensions.width);\n                            finalHeight = finalWidth / aspectRatio;\n                        } else {\n                            finalHeight = Math.min(480, dimensions.height);\n                            finalWidth = finalHeight * aspectRatio;\n                        }\n                        console.log(\"Dimensiones originales: \".concat(dimensions.width, \"x\").concat(dimensions.height, \", Ajustadas: \").concat(finalWidth, \"x\").concat(finalHeight));\n                    }\n                    // Obtener posición (centrada por defecto)\n                    const position = (options === null || options === void 0 ? void 0 : options.position) || {\n                        x: 0.5,\n                        y: 0.5\n                    };\n                    // Crear payload para la imagen con dimensiones ajustadas\n                    const imagePayload = {\n                        id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                        display: {\n                            from: startTime * 1000,\n                            to: endTime * 1000 // Convertir a milisegundos\n                        },\n                        type: \"image\",\n                        details: {\n                            src: url,\n                            width: finalWidth,\n                            height: finalHeight,\n                            opacity: 100,\n                            scaleMode: \"fit\",\n                            left: position.x,\n                            top: position.y,\n                            originX: \"center\",\n                            originY: \"center\"\n                        }\n                    };\n                    // Agregar imagen al timeline\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_IMAGE, {\n                        payload: imagePayload,\n                        options: {\n                            scaleMode: \"fit\",\n                            position: position\n                        }\n                    });\n                    console.log(\"Imagen agregada correctamente al timeline en posici\\xf3n (\".concat(position.x, \", \").concat(position.y, \")\"));\n                } catch (error) {\n                    console.error(\"Error al agregar imagen al timeline:\", error);\n                    throw new Error(\"Error al agregar imagen: \".concat(error instanceof Error ? error.message : \"Error desconocido\"));\n                }\n            };\n            // Iniciar el proceso\n            createAndDispatchPayload();\n        },\n        addVideo: (url, options)=>{\n            const width = (options === null || options === void 0 ? void 0 : options.width) || 640;\n            const height = (options === null || options === void 0 ? void 0 : options.height) || 360;\n            const startTime = (options === null || options === void 0 ? void 0 : options.startTime) || 0; // Por defecto al inicio\n            const endTime = (options === null || options === void 0 ? void 0 : options.endTime) || 10; // Por defecto 10 segundos de duración\n            // Detectar si es un archivo APNG para tratamiento especial\n            const isAPNG = url.toLowerCase().endsWith(\".apng\");\n            // Crear payload para el video\n            const videoPayload = {\n                id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                display: {\n                    from: startTime * 1000,\n                    to: endTime * 1000 // Convertir a milisegundos\n                },\n                type: \"video\",\n                details: {\n                    src: url,\n                    width: width,\n                    height: height,\n                    opacity: 100,\n                    // Para APNG, añadir propiedades adicionales para posicionamiento a pantalla completa\n                    ...isAPNG && {\n                        scaleMode: \"cover\",\n                        left: 0.5,\n                        top: 0.5,\n                        originX: \"center\",\n                        originY: \"center\"\n                    }\n                }\n            };\n            // Agregar video al timeline\n            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_VIDEO, {\n                payload: videoPayload,\n                options: {\n                    resourceId: \"main\",\n                    scaleMode: isAPNG ? \"cover\" : \"fit\",\n                    ...isAPNG && {\n                        position: {\n                            x: 0.5,\n                            y: 0.5\n                        } // Centrar para APNG\n                    }\n                }\n            });\n            console.log(\"Video \".concat(isAPNG ? \"APNG\" : \"\", \" a\\xf1adido al timeline desde \").concat(startTime, \"s hasta \").concat(endTime, \"s. Dimensiones: \").concat(width, \"x\").concat(height));\n        },\n        changeDuration: (elementId, duration)=>{\n            // Simulación de cambio de duración (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando duraci\\xf3n del elemento \".concat(elementId, \" a \").concat(duration, \"s\"));\n        // Aquí iría la lógica real para cambiar la duración de un elemento\n        },\n        changeTransition: (elementId, transition)=>{\n            // Simulación de cambio de transición (la implementación real dependerá de la estructura del proyecto)\n            console.log(\"Cambiando transici\\xf3n del elemento \".concat(elementId, \" a \").concat(transition));\n        // Aquí iría la lógica real para cambiar la transición de un elemento\n        },\n        addSubtitles: async (options)=>{\n            try {\n                console.log(\"A\\xf1adiendo subt\\xedtulos directamente sin depender del bot\\xf3n\");\n                // Función para parsear el tiempo de formato SRT a milisegundos\n                const parseTimeToMs = (timeString)=>{\n                    const [hours, minutes, secondsAndMs] = timeString.split(\":\");\n                    const [seconds, ms] = secondsAndMs.split(\",\");\n                    return parseInt(hours) * 3600000 + parseInt(minutes) * 60000 + parseInt(seconds) * 1000 + parseInt(ms);\n                };\n                // Función para parsear el archivo SRT\n                const parseSRT = (srtContent)=>{\n                    const segments = [];\n                    const blocks = srtContent.trim().split(\"\\n\\n\");\n                    blocks.forEach((block)=>{\n                        const lines = block.split(\"\\n\");\n                        if (lines.length >= 3) {\n                            const id = parseInt(lines[0]);\n                            const timeRange = lines[1].split(\" --> \");\n                            const startTime = parseTimeToMs(timeRange[0]);\n                            const endTime = parseTimeToMs(timeRange[1]);\n                            const text = lines.slice(2).join(\"\\n\"); // Unir todas las líneas de texto\n                            segments.push({\n                                id,\n                                startTime,\n                                endTime,\n                                text\n                            });\n                        }\n                    });\n                    return segments;\n                };\n                // Función para dividir un texto en grupos de aproximadamente 3 palabras\n                const splitTextIntoGroups = function(text) {\n                    let wordsPerGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3;\n                    const words = text.split(/\\s+/);\n                    const groups = [];\n                    for(let i = 0; i < words.length; i += wordsPerGroup){\n                        const group = words.slice(i, i + wordsPerGroup).join(\" \");\n                        groups.push(group);\n                    }\n                    return groups;\n                };\n                // Función para procesar un segmento y dividirlo en múltiples segmentos si es necesario\n                const processSegment = (segment)=>{\n                    const textGroups = splitTextIntoGroups(segment.text);\n                    // Si solo hay un grupo, devolver el segmento original\n                    if (textGroups.length <= 1) {\n                        return [\n                            segment\n                        ];\n                    }\n                    // Calcular la duración de cada grupo\n                    const totalDuration = segment.endTime - segment.startTime;\n                    const groupDuration = totalDuration / textGroups.length;\n                    // Crear un nuevo segmento para cada grupo\n                    return textGroups.map((groupText, index)=>{\n                        const startTime = segment.startTime + index * groupDuration;\n                        const endTime = startTime + groupDuration;\n                        return {\n                            id: segment.id * 1000 + index,\n                            startTime,\n                            endTime,\n                            text: groupText\n                        };\n                    });\n                };\n                // Función para crear el payload de texto para subtítulos\n                const createSubtitlePayload = (text, startTime, endTime)=>({\n                        id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_2__.generateId)(),\n                        display: {\n                            from: startTime,\n                            to: endTime\n                        },\n                        type: \"text\",\n                        details: {\n                            text: text.toUpperCase(),\n                            fontSize: 80,\n                            width: 900,\n                            fontUrl: \"/fonts/mrbeast.ttf\",\n                            fontFamily: \"MrBeast\",\n                            color: \"#FFFF00\",\n                            wordWrap: \"break-word\",\n                            textAlign: \"center\",\n                            borderWidth: 20,\n                            borderColor: \"#000000\",\n                            boxShadow: {\n                                color: \"#000000\",\n                                x: 3,\n                                y: 3,\n                                blur: 0\n                            },\n                            backgroundColor: \"transparent\",\n                            padding: 10,\n                            borderRadius: 0\n                        }\n                    });\n                // Cargar el archivo SRT\n                console.log(\"Cargando archivo SRT...\");\n                const response = await fetch(\"/transcriptions/transcription1.srt\");\n                if (!response.ok) {\n                    throw new Error(\"Error al cargar el archivo SRT: \".concat(response.status));\n                }\n                const srtContent = await response.text();\n                console.log(\"Archivo SRT cargado correctamente\");\n                // Parsear el archivo SRT\n                let segments = parseSRT(srtContent);\n                console.log(\"Se encontraron \".concat(segments.length, \" segmentos de subt\\xedtulos\"));\n                // Siempre usar el modo agrupado (dividir en grupos de 3 palabras)\n                segments = segments.flatMap(processSegment);\n                console.log(\"Despu\\xe9s de procesar, hay \".concat(segments.length, \" segmentos de subt\\xedtulos\"));\n                // Filtrar por tiempo si es necesario\n                if ((options === null || options === void 0 ? void 0 : options.startTime) !== undefined || (options === null || options === void 0 ? void 0 : options.endTime) !== undefined) {\n                    const originalLength = segments.length;\n                    segments = segments.filter((segment)=>{\n                        const passesStartFilter = options.startTime === undefined || segment.startTime >= options.startTime * 1000;\n                        const passesEndFilter = options.endTime === undefined || segment.endTime <= options.endTime * 1000;\n                        return passesStartFilter && passesEndFilter;\n                    });\n                    console.log(\"Filtrado por tiempo: de \".concat(originalLength, \" a \").concat(segments.length, \" segmentos\"));\n                }\n                // Añadir los subtítulos con un retraso entre cada uno\n                console.log(\"A\\xf1adiendo \".concat(segments.length, \" segmentos de subt\\xedtulos al timeline...\"));\n                segments.forEach((segment, index)=>{\n                    setTimeout(()=>{\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ADD_TEXT, {\n                            payload: createSubtitlePayload(segment.text, segment.startTime, segment.endTime),\n                            options: {}\n                        });\n                        if ((index + 1) % 10 === 0 || index === segments.length - 1) {\n                            console.log(\"Progreso: \".concat(index + 1, \"/\").concat(segments.length, \" subt\\xedtulos a\\xf1adidos\"));\n                        }\n                    }, index * 200); // 200ms de retraso entre cada subtítulo\n                });\n                return true;\n            } catch (error) {\n                console.error(\"Error al a\\xf1adir subt\\xedtulos:\", error);\n                return false;\n            }\n        },\n        getActiveElements: async ()=>{\n            try {\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Verificar si hay IDs activos\n                if (!state.activeIds || state.activeIds.length === 0) {\n                    console.log(\"No hay elementos activos seleccionados\");\n                    return [];\n                }\n                // Verificar si hay elementos en el trackItemsMap\n                if (!state.trackItemsMap) {\n                    console.log(\"No hay trackItemsMap disponible\");\n                    return [];\n                }\n                // Obtener información de los elementos activos\n                const activeElements = state.activeIds.filter((id)=>state.trackItemsMap[id]).map((id)=>{\n                    var _item_display, _item_display1;\n                    const item = state.trackItemsMap[id];\n                    return {\n                        id,\n                        trackId: item.trackId,\n                        type: item.type,\n                        from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                        to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                        duration: item.display ? item.display.to - item.display.from : 0,\n                        details: item.details\n                    };\n                });\n                console.log(\"Se encontraron \".concat(activeElements.length, \" elementos activos\"));\n                return activeElements;\n            } catch (error) {\n                console.error(\"Error al obtener elementos activos:\", error);\n                return [];\n            }\n        },\n        getAllTimelineElements: async ()=>{\n            try {\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Verificar si hay elementos en el trackItemsMap\n                if (!state.trackItemsMap || Object.keys(state.trackItemsMap).length === 0) {\n                    console.log(\"No hay elementos en el trackItemsMap\");\n                    // Buscar elementos en otras propiedades del estado\n                    for (const key of Object.keys(state)){\n                        if (typeof state[key] === \"object\" && state[key] !== null) {\n                            const objValue = state[key];\n                            console.log(\"Explorando propiedad alternativa: \".concat(key));\n                            // Verificar si parece ser un mapa de elementos\n                            if (Object.keys(objValue).length > 0) {\n                                const sample = objValue[Object.keys(objValue)[0]];\n                                if (sample && sample.display && sample.type) {\n                                    console.log(\"Encontrada posible fuente alternativa de elementos en propiedad \".concat(key));\n                                    // Procesar elementos de esta propiedad alternativa\n                                    return Object.entries(objValue).filter((param)=>{\n                                        let [_, item] = param;\n                                        return item && item.display;\n                                    }).map((param)=>{\n                                        let [id, item] = param;\n                                        var _item_display, _item_display1;\n                                        return {\n                                            id,\n                                            trackId: item.trackId,\n                                            type: item.type,\n                                            from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                                            to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                                            duration: item.display ? item.display.to - item.display.from : 0,\n                                            details: item.details\n                                        };\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    return [];\n                }\n                // Obtener todos los elementos\n                const allElements = Object.entries(state.trackItemsMap).filter((param)=>{\n                    let [_, item] = param;\n                    return item && item.display;\n                }).map((param)=>{\n                    let [id, item] = param;\n                    var _item_display, _item_display1;\n                    return {\n                        id,\n                        trackId: item.trackId,\n                        type: item.type,\n                        from: (_item_display = item.display) === null || _item_display === void 0 ? void 0 : _item_display.from,\n                        to: (_item_display1 = item.display) === null || _item_display1 === void 0 ? void 0 : _item_display1.to,\n                        duration: item.display ? item.display.to - item.display.from : 0,\n                        details: item.details\n                    };\n                }).sort((a, b)=>(a.from || 0) - (b.from || 0));\n                console.log(\"Se encontraron \".concat(allElements.length, \" elementos en el timeline\"));\n                return allElements;\n            } catch (error) {\n                console.error(\"Error al obtener todos los elementos del timeline:\", error);\n                return [];\n            }\n        },\n        removeSegments: async (segments)=>{\n            try {\n                console.log(\"Iniciando eliminaci\\xf3n de segmentos m\\xfaltiples\");\n                // Obtener el estado actual\n                const state = stateManager.getState();\n                // Validar que haya elementos en la timeline\n                if (!state.activeIds || state.activeIds.length === 0) {\n                    console.error(\"No hay elementos seleccionados en la timeline\");\n                    // Buscar el primer elemento disponible en la timeline\n                    const trackItemsMap = state.trackItemsMap || {};\n                    const trackItems = Object.keys(trackItemsMap);\n                    if (trackItems.length === 0) {\n                        console.error(\"No hay elementos en la timeline para eliminar segmentos\");\n                        throw new Error(\"No hay elementos en la timeline\");\n                    }\n                    // Seleccionar el primer elemento disponible\n                    const firstItemId = trackItems[0];\n                    console.log(\"Seleccionando autom\\xe1ticamente el elemento con ID: \".concat(firstItemId));\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                        payload: {\n                            ids: [\n                                firstItemId\n                            ]\n                        }\n                    });\n                    // Esperar a que se aplique la selección\n                    await new Promise((resolve)=>setTimeout(resolve, 300));\n                }\n                // Almacenamos información del elemento seleccionado\n                const currentState = stateManager.getState();\n                if (!currentState.activeIds || currentState.activeIds.length === 0) {\n                    throw new Error(\"No se pudo seleccionar ning\\xfan elemento en la timeline\");\n                }\n                const originalItemId = currentState.activeIds[0];\n                const originalItem = currentState.trackItemsMap[originalItemId];\n                const trackType = originalItem.type;\n                const trackId = originalItem.trackId;\n                console.log(\"Elemento seleccionado: ID=\".concat(originalItemId, \", tipo=\").concat(trackType, \", trackId=\").concat(trackId));\n                // Procesar cada segmento en orden (de final a principio para evitar afectar posiciones)\n                for(let i = segments.length - 1; i >= 0; i--){\n                    const segment = segments[i];\n                    console.log(\"Procesando segmento \".concat(i + 1, \"/\").concat(segments.length, \": \").concat(segment.startTime, \"s - \").concat(segment.endTime, \"s\"));\n                    try {\n                        // PASO 1: Hacer un corte en el tiempo final\n                        const endMs = segment.endTime * 1000;\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_SPLIT, {\n                            payload: {},\n                            options: {\n                                time: endMs\n                            }\n                        });\n                        console.log(\"Paso 1: Corte aplicado en tiempo final \".concat(segment.endTime, \"s\"));\n                        // Esperar a que se procese el primer corte\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                        // Obtenemos el estado después del primer corte\n                        const stateAfterFirstCut = stateManager.getState();\n                        const elementsAfterFirstCut = Object.entries(stateAfterFirstCut.trackItemsMap).filter((param)=>{\n                            let [_, item] = param;\n                            return item.type === trackType && item.trackId === trackId && item.display && !isNaN(item.display.from) && !isNaN(item.display.to);\n                        }).map((param)=>{\n                            let [id, item] = param;\n                            return {\n                                id,\n                                from: item.display.from,\n                                to: item.display.to,\n                                duración: item.display.to - item.display.from\n                            };\n                        }).sort((a, b)=>a.from - b.from);\n                        console.log(\"Elementos despu\\xe9s del primer corte:\", elementsAfterFirstCut);\n                        // PASO 2: Identificar el elemento izquierdo que contiene el tiempo inicial\n                        const startMs = segment.startTime * 1000;\n                        const leftElement = elementsAfterFirstCut.find((elem)=>elem.from <= startMs && elem.to >= startMs);\n                        if (!leftElement) {\n                            console.error(\"No se pudo identificar el elemento izquierdo para el segmento \".concat(i + 1));\n                            continue;\n                        }\n                        console.log(\"Paso 2: Elemento izquierdo identificado (ID: \".concat(leftElement.id, \")\"));\n                        // PASO 3: Seleccionar el elemento izquierdo y hacer corte en tiempo inicial\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                            payload: {\n                                ids: [\n                                    leftElement.id\n                                ]\n                            }\n                        });\n                        // Esperar a que se aplique la selección\n                        await new Promise((resolve)=>setTimeout(resolve, 300));\n                        // Aplicar el corte en el tiempo inicial\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.ACTIVE_SPLIT, {\n                            payload: {},\n                            options: {\n                                time: startMs\n                            }\n                        });\n                        console.log(\"Paso 3: Segundo corte aplicado en tiempo inicial \".concat(segment.startTime, \"s\"));\n                        // Esperar a que se procese el segundo corte\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                        // Obtenemos el estado después del segundo corte\n                        const stateAfterSecondCut = stateManager.getState();\n                        const elementsAfterSecondCut = Object.entries(stateAfterSecondCut.trackItemsMap).filter((param)=>{\n                            let [_, item] = param;\n                            return item.type === trackType && item.trackId === trackId && item.display && !isNaN(item.display.from) && !isNaN(item.display.to);\n                        }).map((param)=>{\n                            let [id, item] = param;\n                            return {\n                                id,\n                                from: item.display.from,\n                                to: item.display.to,\n                                duración: item.display.to - item.display.from\n                            };\n                        }).sort((a, b)=>a.from - b.from);\n                        console.log(\"Elementos despu\\xe9s del segundo corte:\", elementsAfterSecondCut);\n                        // PASO 4: Identificar el elemento del medio usando criterios más precisos\n                        const middleElements = elementsAfterSecondCut.filter((elem)=>Math.abs(elem.from - startMs) < 50 && Math.abs(elem.to - endMs) < 50);\n                        console.log(\"Elementos que coinciden con los criterios del medio:\", middleElements);\n                        if (middleElements.length === 0) {\n                            console.error(\"No se pudo identificar el elemento del medio para el segmento \".concat(i + 1));\n                            continue;\n                        }\n                        // Si hay más de un elemento que coincide, tomamos el primero\n                        const middleElement = middleElements[0];\n                        console.log(\"Paso 4: Elemento del medio identificado (ID: \".concat(middleElement.id, \")\"));\n                        // PASO 5: Seleccionar y eliminar el elemento del medio\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_SELECT, {\n                            payload: {\n                                ids: [\n                                    middleElement.id\n                                ]\n                            }\n                        });\n                        // Esperar a que se aplique la selección\n                        await new Promise((resolve)=>setTimeout(resolve, 300));\n                        // Verificar que el elemento está seleccionado antes de eliminarlo\n                        const currentState = stateManager.getState();\n                        if (currentState.activeIds && currentState.activeIds.includes(middleElement.id)) {\n                            console.log(\"Elemento del medio correctamente seleccionado, procediendo con eliminaci\\xf3n\");\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.LAYER_DELETE);\n                            console.log(\"Elemento eliminado correctamente: \".concat(middleElement.id));\n                        } else {\n                            console.log(\"No se pudo seleccionar normalmente, intentando m\\xe9todo alternativo\");\n                            // Enfoque alternativo: Usar el EDIT_OBJECT para \"ocultar\" el segmento\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                                payload: {\n                                    [middleElement.id]: {\n                                        display: {\n                                            from: -99999,\n                                            to: -99990\n                                        },\n                                        visible: false // Adicionalmente marcarlo como no visible\n                                    }\n                                }\n                            });\n                            console.log(\"Aplicado m\\xe9todo alternativo para ocultar el segmento\");\n                        }\n                        // Esperar a que se procese la eliminación\n                        await new Promise((resolve)=>setTimeout(resolve, 500));\n                    } catch (error) {\n                        console.error(\"Error al procesar el segmento \".concat(i + 1, \":\"), error);\n                    }\n                    // Pausa entre segmentos\n                    await new Promise((resolve)=>setTimeout(resolve, 500));\n                }\n                // Actualizar la escala para refrescar la vista\n                const { scale } = stateManager.getState();\n                if (scale) {\n                    console.log(\"Actualizando escala para refrescar la vista\");\n                    // Guardar el valor actual de scale.unit\n                    const originalUnit = scale.unit;\n                    // Incrementar el valor\n                    scale.unit += 1;\n                    console.log(\"Scale cambiada: \".concat(originalUnit, \" -> \").concat(scale.unit));\n                    // Asegurar que el cambio sea notado por el sistema\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                        payload: {\n                            scale: {\n                                ...scale,\n                                unit: scale.unit // Explícitamente establecer el nuevo valor\n                            }\n                        }\n                    });\n                    // Forzar una actualización adicional volviendo al valor original después de un momento\n                    setTimeout(()=>{\n                        const currentState = stateManager.getState();\n                        if (currentState.scale) {\n                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                payload: {\n                                    scale: {\n                                        ...currentState.scale,\n                                        unit: originalUnit // Volver al valor original\n                                    }\n                                }\n                            });\n                            console.log(\"Restaurado scale a valor original: \".concat(originalUnit));\n                        }\n                    }, 300);\n                }\n                console.log(\"Eliminaci\\xf3n de segmentos completada\");\n                return true;\n            } catch (error) {\n                console.error(\"Error al eliminar segmentos:\", error);\n                return false;\n            }\n        },\n        compactTimeline: async ()=>{\n            try {\n                console.log(\"=== INICIANDO COMPACTACI\\xd3N DE L\\xcdNEA DE TIEMPO DESDE IA ===\");\n                // Obtener el estado actual\n                const estado = stateManager.getState();\n                console.log(\"Estado para compactaci\\xf3n:\", Object.keys(estado));\n                // Añadir un tiempo de espera inicial para asegurar que el estado está actualizado\n                console.log(\"Esperando 1 segundo para asegurar consistencia del estado...\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // Verificación adicional para asegurarnos que los cambios en la timeline ya se aplicaron\n                console.log(\"Verificando que los elementos en la timeline reflejen los cambios m\\xe1s recientes...\");\n                // Pequeña pausa adicional para asegurar consistencia del estado\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                // Buscar los elementos del timeline - usando la referencia al método dentro del mismo objeto\n                const todosElementos = await executor.getAllTimelineElements();\n                console.log(\"Encontrados \".concat(todosElementos.length, \" elementos en la timeline\"));\n                // Logging de elementos para diagnóstico\n                todosElementos.forEach((elem, index)=>{\n                    console.log(\"Elemento \".concat(index + 1, \": ID=\").concat(elem.id, \", Tipo=\").concat(elem.type, \", Track=\").concat(elem.trackId, \", Tiempo=\").concat(elem.from, \"ms-\").concat(elem.to, \"ms (duraci\\xf3n=\").concat(elem.to - elem.from, \"ms)\"));\n                });\n                // Si no hay elementos, no podemos compactar\n                if (todosElementos.length === 0) {\n                    console.log(\"No hay elementos en el timeline para compactar\");\n                    return false;\n                }\n                // Agrupar elementos por track para análisis\n                const elementosPorTrack = {};\n                todosElementos.forEach((elem)=>{\n                    if (elem.trackId) {\n                        if (!elementosPorTrack[elem.trackId]) {\n                            elementosPorTrack[elem.trackId] = [];\n                        }\n                        elementosPorTrack[elem.trackId].push(elem);\n                    }\n                });\n                // Ordenar elementos en cada track por tiempo\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    elementosPorTrack[trackId].sort((a, b)=>a.from - b.from);\n                });\n                console.log(\"Elementos agrupados por track:\", Object.keys(elementosPorTrack).length);\n                // Logging de tracks para diagnóstico\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    console.log(\"Track \".concat(trackId, \": \").concat(elementosPorTrack[trackId].length, \" elementos\"));\n                    // Mostrar los elementos en este track ordenados\n                    elementosPorTrack[trackId].forEach((elem, idx)=>{\n                        console.log(\"  \".concat(idx + 1, \". ID=\").concat(elem.id.substring(0, 8), \"... Tiempo=\").concat(elem.from, \"ms-\").concat(elem.to, \"ms (duraci\\xf3n: \").concat(elem.to - elem.from, \"ms)\"));\n                    });\n                });\n                // Buscar espacios vacíos en cada track\n                const espaciosVacios = [];\n                Object.keys(elementosPorTrack).forEach((trackId)=>{\n                    const elementos = elementosPorTrack[trackId];\n                    // Si hay al menos 2 elementos, podemos buscar espacios\n                    if (elementos.length >= 2) {\n                        for(let i = 0; i < elementos.length - 1; i++){\n                            const elementoActual = elementos[i];\n                            const elementoSiguiente = elementos[i + 1];\n                            // Verificar si hay un espacio entre el fin del elemento actual y el inicio del siguiente\n                            const espacio = elementoSiguiente.from - elementoActual.to;\n                            // Si el espacio es significativo (más de 100ms)\n                            if (espacio > 100) {\n                                espaciosVacios.push({\n                                    trackId,\n                                    start: elementoActual.to,\n                                    end: elementoSiguiente.from,\n                                    size: espacio,\n                                    elementoAntes: elementoActual.id,\n                                    elementoDespues: elementoSiguiente.id\n                                });\n                                console.log(\"Encontrado espacio de \".concat(espacio, \"ms (\").concat(espacio / 1000, \"s) en track \").concat(trackId, \" entre elementos \").concat(elementoActual.id.substring(0, 8), \"... y \").concat(elementoSiguiente.id.substring(0, 8), \"...\"));\n                            }\n                        }\n                    }\n                });\n                console.log(\"Se encontraron \".concat(espaciosVacios.length, \" espacios vac\\xedos\"));\n                // Si no hay espacios, no necesitamos compactar\n                if (espaciosVacios.length === 0) {\n                    console.log(\"No hay espacios significativos para compactar\");\n                    return true; // Devolvemos true porque técnicamente está compactado\n                }\n                // Ordenar espacios por posición (de izquierda a derecha)\n                espaciosVacios.sort((a, b)=>a.start - b.start);\n                // Calcular el espacio total a compactar\n                let espacioTotal = 0;\n                espaciosVacios.forEach((espacio)=>{\n                    espacioTotal += espacio.size;\n                });\n                console.log(\"Espacio total a compactar: \".concat(espacioTotal, \"ms (\").concat(espacioTotal / 1000, \"s)\"));\n                console.log(\"Preparando actualizaciones para \".concat(todosElementos.length, \" elementos...\"));\n                // Preparar actualizaciones para cada elemento\n                const actualizaciones = {};\n                let elementosAMover = 0;\n                // Para cada elemento, calculamos el desplazamiento basado en los espacios anteriores\n                todosElementos.forEach((elemento)=>{\n                    let desplazamiento = 0;\n                    // Calcular cuánto debe moverse basado en los espacios vacíos anteriores\n                    for (const espacio of espaciosVacios){\n                        // Si el elemento está después del espacio vacío, debe moverse\n                        if (elemento.from > espacio.end) {\n                            desplazamiento += espacio.size;\n                        }\n                    }\n                    // Si hay desplazamiento, añadir a las actualizaciones\n                    if (desplazamiento > 0) {\n                        const nuevoFrom = elemento.from - desplazamiento;\n                        const nuevoTo = elemento.to - desplazamiento;\n                        console.log(\"Elemento \".concat(elemento.id.substring(0, 8), \"... se mover\\xe1: \").concat(elemento.from, \"ms -> \").concat(nuevoFrom, \"ms (desplazamiento: \").concat(desplazamiento, \"ms)\"));\n                        actualizaciones[elemento.id] = {\n                            display: {\n                                from: nuevoFrom,\n                                to: nuevoTo\n                            }\n                        };\n                        elementosAMover++;\n                    }\n                });\n                console.log(\"Elementos a mover: \".concat(elementosAMover, \" de \").concat(todosElementos.length, \" total\"));\n                // Aplicar las actualizaciones\n                if (elementosAMover > 0) {\n                    console.log(\"Aplicando actualizaciones para compactar timeline...\");\n                    try {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                            payload: actualizaciones\n                        });\n                        console.log(\"Actualizaciones aplicadas con \\xe9xito\");\n                    } catch (error) {\n                        console.error(\"Error al aplicar actualizaciones:\", error);\n                        return false;\n                    }\n                    // Refrescar la vista\n                    setTimeout(()=>{\n                        try {\n                            const { scale } = stateManager.getState();\n                            if (scale) {\n                                // Hacer un pequeño cambio en la escala para forzar la actualización\n                                const updatedScale = {\n                                    ...scale\n                                };\n                                if (typeof updatedScale.unit === \"number\") {\n                                    updatedScale.unit = (updatedScale.unit || 0) + 1;\n                                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                        payload: {\n                                            scale: updatedScale\n                                        }\n                                    });\n                                    // Volver a la escala original\n                                    setTimeout(()=>{\n                                        const currentScale = {\n                                            ...stateManager.getState().scale\n                                        };\n                                        currentScale.unit = (currentScale.unit || 1) - 1;\n                                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                            payload: {\n                                                scale: currentScale\n                                            }\n                                        });\n                                    }, 300);\n                                }\n                            }\n                        } catch (error) {\n                            console.error(\"Error al refrescar la vista:\", error);\n                        }\n                    }, 500);\n                    console.log(\"Compactaci\\xf3n completada con \\xe9xito\");\n                    return true;\n                } else {\n                    console.log(\"No hay elementos que necesiten moverse\");\n                    return true;\n                }\n            } catch (error) {\n                console.error(\"Error al compactar la l\\xednea de tiempo:\", error);\n                return false;\n            }\n        },\n        smartTrim: async ()=>{\n            try {\n                console.log(\"=== INICIANDO PROCESO DE RECORTE INTELIGENTE DESDE IA ===\");\n                // 1. Realizar la llamada al API para analizar la transcripción\n                console.log(\"Solicitando an\\xe1lisis de transcripci\\xf3n...\");\n                const response = await fetch(\"/api/smart-trim\");\n                if (!response.ok) {\n                    throw new Error(\"Error al analizar la transcripci\\xf3n: \".concat(response.status));\n                }\n                const data = await response.json();\n                console.log(\"An\\xe1lisis de transcripci\\xf3n completado:\", data);\n                if (!data.removeSegments || !Array.isArray(data.removeSegments) || data.removeSegments.length === 0) {\n                    console.log(\"No se encontraron segmentos para eliminar\");\n                    return false;\n                }\n                // 2. Convertir los segmentos al formato que espera removeSegments\n                const segments = data.removeSegments.map((segment)=>({\n                        startTime: segment.startTime,\n                        endTime: segment.endTime // Ya está en segundos\n                    }));\n                console.log(\"Se eliminar\\xe1n \".concat(segments.length, \" segmentos:\"), segments.map((s)=>\"\".concat(s.startTime, \"s-\").concat(s.endTime, \"s\")).join(\", \"));\n                // Almacenar información del estado previo para identificar tracks y elementos\n                console.log(\"Obteniendo informaci\\xf3n del estado antes de eliminar segmentos...\");\n                const estadoPrevio = stateManager.getState();\n                const elementosPrevios = await executor.getAllTimelineElements();\n                // Determinar el trackId principal basado en los elementos\n                const contadorTracks = {};\n                elementosPrevios.forEach((elem)=>{\n                    if (elem.trackId) {\n                        contadorTracks[elem.trackId] = (contadorTracks[elem.trackId] || 0) + 1;\n                    }\n                });\n                // Encontrar el track con más elementos\n                let trackIdPrincipal = \"\";\n                if (Object.keys(contadorTracks).length > 0) {\n                    const tracksPorUso = Object.entries(contadorTracks).sort((a, b)=>b[1] - a[1]);\n                    if (tracksPorUso.length > 0) {\n                        trackIdPrincipal = tracksPorUso[0][0];\n                        console.log(\"Usando trackId principal: \".concat(trackIdPrincipal));\n                    }\n                }\n                // 3. Eliminar los segmentos\n                console.log(\"Ejecutando eliminaci\\xf3n de segmentos...\");\n                const result = await executor.removeSegments(segments);\n                if (!result) {\n                    console.log(\"Error al eliminar los segmentos\");\n                    return false;\n                }\n                console.log(\"Segmentos eliminados correctamente\");\n                // 4. Crear registro de los segmentos eliminados para compactación\n                const segmentosEliminados = segments.map((segment)=>({\n                        start: segment.startTime * 1000,\n                        end: segment.endTime * 1000,\n                        trackId: trackIdPrincipal,\n                        size: (segment.endTime - segment.startTime) * 1000\n                    }));\n                console.log(\"Segmentos registrados para compactaci\\xf3n:\", segmentosEliminados);\n                // 5. Esperar un momento para que se completen las actualizaciones del DOM y el estado\n                console.log(\"Esperando 5 segundos para asegurar que los cambios en la timeline est\\xe9n completos antes de compactar...\");\n                await new Promise((resolve)=>setTimeout(resolve, 5000));\n                // 6. Compactar el timeline usando el enfoque de segmentos registrados\n                console.log(\"Compactando timeline basado en segmentos eliminados...\");\n                // Obtener elementos actuales después de la eliminación\n                const elementosActuales = await executor.getAllTimelineElements();\n                console.log(\"Se encontraron \".concat(elementosActuales.length, \" elementos en la timeline despu\\xe9s de eliminar segmentos\"));\n                // Calcular el espacio total a compactar\n                let espacioTotal = 0;\n                segmentosEliminados.forEach((segmento)=>{\n                    espacioTotal += segmento.size;\n                });\n                console.log(\"Espacio total a compactar: \".concat(espacioTotal, \"ms (\").concat(espacioTotal / 1000, \"s)\"));\n                // Preparar actualizaciones para cada elemento\n                const actualizaciones = {};\n                let elementosAMover = 0;\n                // Ordenar segmentos por posición de inicio\n                const segmentosOrdenados = [\n                    ...segmentosEliminados\n                ].sort((a, b)=>a.start - b.start);\n                // Para cada elemento, calcular el desplazamiento basado en los segmentos eliminados\n                elementosActuales.forEach((elemento)=>{\n                    let desplazamiento = 0;\n                    // Calcular cuánto debe moverse basado en los segmentos eliminados anteriores\n                    for (const segmento of segmentosOrdenados){\n                        if (elemento.from > segmento.start) {\n                            desplazamiento += segmento.size;\n                        }\n                    }\n                    // Si hay desplazamiento, añadir a las actualizaciones\n                    if (desplazamiento > 0) {\n                        const nuevoFrom = elemento.from - desplazamiento;\n                        const nuevoTo = elemento.to - desplazamiento;\n                        console.log(\"Elemento \".concat(elemento.id.substring(0, 8), \"... se mover\\xe1: \").concat(elemento.from, \"ms -> \").concat(nuevoFrom, \"ms (desplazamiento: \").concat(desplazamiento, \"ms)\"));\n                        actualizaciones[elemento.id] = {\n                            display: {\n                                from: nuevoFrom,\n                                to: nuevoTo\n                            }\n                        };\n                        elementosAMover++;\n                    }\n                });\n                console.log(\"Elementos a mover: \".concat(elementosAMover, \" de \").concat(elementosActuales.length, \" total\"));\n                // Aplicar las actualizaciones\n                if (elementosAMover > 0) {\n                    console.log(\"Aplicando actualizaciones para compactar timeline...\");\n                    try {\n                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.EDIT_OBJECT, {\n                            payload: actualizaciones\n                        });\n                        console.log(\"Actualizaciones aplicadas con \\xe9xito\");\n                        // Refrescar la vista\n                        setTimeout(()=>{\n                            try {\n                                const { scale } = stateManager.getState();\n                                if (scale) {\n                                    const updatedScale = {\n                                        ...scale\n                                    };\n                                    if (typeof updatedScale.unit === \"number\") {\n                                        updatedScale.unit = (updatedScale.unit || 0) + 1;\n                                        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                            payload: {\n                                                scale: updatedScale\n                                            }\n                                        });\n                                        // Volver a la escala original\n                                        setTimeout(()=>{\n                                            const currentScale = {\n                                                ...stateManager.getState().scale\n                                            };\n                                            currentScale.unit = (currentScale.unit || 1) - 1;\n                                            (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_1__.TIMELINE_SCALE_CHANGED, {\n                                                payload: {\n                                                    scale: currentScale\n                                                }\n                                            });\n                                        }, 300);\n                                    }\n                                }\n                            } catch (error) {\n                                console.error(\"Error al refrescar la vista:\", error);\n                            }\n                        }, 500);\n                    } catch (error) {\n                        console.error(\"Error al aplicar actualizaciones:\", error);\n                        return false;\n                    }\n                } else {\n                    console.log(\"No se encontraron elementos que necesiten moverse\");\n                }\n                console.log(\"Timeline compactado correctamente\");\n                return true;\n            } catch (error) {\n                console.error(\"Error al realizar el recorte inteligente:\", error);\n                return false;\n            }\n        }\n    };\n    return executor;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ai-chat/ai-video-commands.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/index.ts":
/*!*****************************************!*\
  !*** ./features/editor/player/index.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: function() { return /* reexport safe */ _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"(app-pages-browser)/./features/editor/player/player.tsx\");\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2ZlYXR1cmVzL2VkaXRvci9wbGF5ZXIvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmVhdHVyZXMvZWRpdG9yL3BsYXllci9pbmRleC50cz8xNDFhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG4iXSwibmFtZXMiOlsiZGVmYXVsdCIsIlBsYXllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/player/sequence-item.tsx":
/*!**************************************************!*\
  !*** ./features/editor/player/sequence-item.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequenceItem: function() { return /* binding */ SequenceItem; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! remotion */ \"(app-pages-browser)/./node_modules/remotion/dist/esm/index.mjs\");\n/* harmony import */ var _editable_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editable-text */ \"(app-pages-browser)/./features/editor/player/editable-text.tsx\");\n/* harmony import */ var _utils_frames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/frames */ \"(app-pages-browser)/./features/editor/utils/frames.ts\");\n/* harmony import */ var _animated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./animated */ \"(app-pages-browser)/./features/editor/player/animated/index.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles */ \"(app-pages-browser)/./features/editor/player/styles.ts\");\n/* harmony import */ var _utils_get_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/get-animations */ \"(app-pages-browser)/./features/editor/utils/get-animations.tsx\");\n\n\n\n\n\n\n\nconst SequenceItem = {\n    text: (item, options)=>{\n        const { handleTextChange, onTextBlur, fps, editableTextId, zIndex } = options;\n        const { id, details, animations } = item;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)(item.display, fps);\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details),\n                    animationIn: editableTextId === id ? null : animationIn,\n                    animationOut: editableTextId === id ? null : animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_editable_text__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        id: id,\n                        content: details.text,\n                        editable: editableTextId === id,\n                        onChange: handleTextChange,\n                        onBlur: onTextBlur,\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateTextStyles)(details)\n                    }, id, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 54,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 47,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 41,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 34,\n            columnNumber: 7\n        }, undefined);\n    },\n    image: (item, options)=>{\n        const { fps, zIndex } = options;\n        const { details, animations } = item;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)(item.display, fps);\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        const crop = details.crop || {\n            x: 0,\n            y: 0,\n            width: item.details.width,\n            height: item.details.height\n        };\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop, {\n                        overflow: \"hidden\"\n                    }),\n                    animationIn: animationIn,\n                    animationOut: animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateMediaStyles)(details, crop),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Img, {\n                            \"data-id\": item.id,\n                            src: details.src\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                            lineNumber: 103,\n                            columnNumber: 15\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 102,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 94,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 88,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 81,\n            columnNumber: 7\n        }, undefined);\n    },\n    video: (item, options)=>{\n        var _item_trim, _item_trim1;\n        const { fps, zIndex } = options;\n        const { details, animations } = item;\n        const { animationIn, animationOut } = (0,_utils_get_animations__WEBPACK_IMPORTED_MODULE_6__.getAnimations)(animations, item);\n        const playbackRate = item.playbackRate || 1;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)({\n            from: item.display.from / playbackRate,\n            to: item.display.to / playbackRate\n        }, fps);\n        const crop = details.crop || {\n            x: 0,\n            y: 0,\n            width: item.details.width,\n            height: item.details.height\n        };\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                \"data-track-item\": \"transition-element\",\n                className: \"designcombo-scene-item id-\".concat(item.id, \" designcombo-scene-item-type-\").concat(item.type),\n                style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_animated__WEBPACK_IMPORTED_MODULE_4__.Animated, {\n                    style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateContainerStyles)(details, crop, {\n                        overflow: \"hidden\"\n                    }),\n                    animationIn: animationIn,\n                    animationOut: animationOut,\n                    durationInFrames: durationInFrames,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: (0,_styles__WEBPACK_IMPORTED_MODULE_5__.calculateMediaStyles)(details, crop),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.OffthreadVideo, {\n                            startFrom: ((_item_trim = item.trim) === null || _item_trim === void 0 ? void 0 : _item_trim.from) / 1000 * fps,\n                            endAt: ((_item_trim1 = item.trim) === null || _item_trim1 === void 0 ? void 0 : _item_trim1.to) / 1000 * fps,\n                            playbackRate: playbackRate,\n                            src: details.src,\n                            volume: details.volume || 0 / 100\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                            lineNumber: 151,\n                            columnNumber: 15\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                        lineNumber: 150,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 142,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 136,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 130,\n            columnNumber: 7\n        }, undefined);\n    },\n    audio: (item, options)=>{\n        var _item_trim, _item_trim1;\n        const { fps, zIndex } = options;\n        const { details } = item;\n        const playbackRate = item.playbackRate || 1;\n        const { from, durationInFrames } = (0,_utils_frames__WEBPACK_IMPORTED_MODULE_3__.calculateFrames)({\n            from: item.display.from / playbackRate,\n            to: item.display.to / playbackRate\n        }, fps);\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Sequence, {\n            from: from,\n            durationInFrames: durationInFrames,\n            style: {\n                userSelect: \"none\",\n                pointerEvents: \"none\",\n                zIndex\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.AbsoluteFill, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(remotion__WEBPACK_IMPORTED_MODULE_1__.Audio, {\n                    startFrom: ((_item_trim = item.trim) === null || _item_trim === void 0 ? void 0 : _item_trim.from) / 1000 * fps,\n                    endAt: ((_item_trim1 = item.trim) === null || _item_trim1 === void 0 ? void 0 : _item_trim1.to) / 1000 * fps,\n                    playbackRate: playbackRate,\n                    src: details.src,\n                    volume: details.volume / 100\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                    lineNumber: 187,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n                lineNumber: 186,\n                columnNumber: 9\n            }, undefined)\n        }, item.id, false, {\n            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\player\\\\sequence-item.tsx\",\n            lineNumber: 176,\n            columnNumber: 7\n        }, undefined);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/player/sequence-item.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/services/ai-service.ts":
/*!************************************************!*\
  !*** ./features/editor/services/ai-service.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIService: function() { return /* binding */ AIService; }\n/* harmony export */ });\n/**\n * Servicio para manejar la comunicación con la IA.\n * Esta es una implementación base que simula respuestas.\n * En el futuro, se conectará con una API real.\n */ class AIService {\n    /**\n   * Analiza los elementos seleccionados para buscar URLs\n   */ static async analyzeItems(request) {\n        try {\n            // Simulamos un tiempo de respuesta de la API\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            console.log(\"AI Service - Request:\", request);\n            // Extraer el texto relevante de los elementos seleccionados\n            const elementsText = this.extractTextFromElements(request.items);\n            // Mensaje explícito o texto extraído de los elementos\n            const textToAnalyze = request.message || elementsText;\n            // Analizar si el texto contiene URLs\n            const urlAnalysis = this.detectURLs(textToAnalyze);\n            // Si hay URLs, generar información de screenshots\n            if (urlAnalysis.containsURLs) {\n                urlAnalysis.screenshots = this.getScreenshotsForUrls(urlAnalysis.urls);\n            }\n            // Simulación de respuesta de la IA\n            // En un entorno real, esto enviaría la solicitud a un endpoint de API\n            return {\n                success: true,\n                message: \"An\\xe1lisis completado con \\xe9xito\",\n                analysis: {\n                    summary: this.generateURLAnalysisSummary(urlAnalysis, request.items.length),\n                    urlAnalysis: urlAnalysis,\n                    itemsAnalyzed: request.items.length,\n                    analyzedText: textToAnalyze,\n                    recommendations: this.generateRecommendations(urlAnalysis),\n                    confidence: 0.95\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in AI service:\", error);\n            return {\n                success: false,\n                message: \"Error al procesar la solicitud\",\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n    /**\n   * Obtiene las capturas de pantalla para las URLs detectadas\n   * (Como es un demo, utilizamos la misma imagen para todas las URLs)\n   */ static getScreenshotsForUrls(urls) {\n        // En un entorno real, esta función realizaría una llamada a un servicio\n        // que generaría capturas de pantalla para cada URL\n        // Por ahora, usamos una imagen de demostración para todas las URLs\n        return urls.map((url)=>({\n                url,\n                screenshotPath: \"/screenshots/screenshot1.png\"\n            }));\n    }\n    /**\n   * Extrae texto de los elementos seleccionados\n   */ static extractTextFromElements(items) {\n        // Aquí extraemos el texto de los elementos seleccionados\n        // En un caso real, esto dependería de la estructura de tus elementos\n        let extractedText = \"\";\n        for (const item of items){\n            var _item_details, _item_details1, _item_details2;\n            // Intentar extraer texto de diferentes propiedades comunes\n            // Esto es un ejemplo y debería adaptarse a tu estructura de datos real\n            if (item.text) {\n                extractedText += \" \" + item.text;\n            } else if ((_item_details = item.details) === null || _item_details === void 0 ? void 0 : _item_details.text) {\n                extractedText += \" \" + item.details.text;\n            } else if (item.name) {\n                extractedText += \" \" + item.name;\n            } else if (item.title) {\n                extractedText += \" \" + item.title;\n            } else if (item.description) {\n                extractedText += \" \" + item.description;\n            } else if ((_item_details1 = item.details) === null || _item_details1 === void 0 ? void 0 : _item_details1.description) {\n                extractedText += \" \" + item.details.description;\n            } else if ((_item_details2 = item.details) === null || _item_details2 === void 0 ? void 0 : _item_details2.src) {\n                extractedText += \" \" + item.details.src;\n            } else if (item.src) {\n                extractedText += \" \" + item.src;\n            } else if (item.content) {\n                extractedText += \" \" + item.content;\n            } else if (item.label) {\n                extractedText += \" \" + item.label;\n            } else if (item.value) {\n                extractedText += \" \" + item.value;\n            } else if (typeof item === \"string\") {\n                extractedText += \" \" + item;\n            }\n            // También podemos buscar en atributos anidados\n            if (item.props && typeof item.props === \"object\") {\n                for(const key in item.props){\n                    if (typeof item.props[key] === \"string\") {\n                        extractedText += \" \" + item.props[key];\n                    }\n                }\n            }\n            // Si todavía no hemos encontrado texto, intentamos convertir el objeto a string\n            if (extractedText.trim() === \"\" && item.toString) {\n                const str = item.toString();\n                if (str !== \"[object Object]\") {\n                    extractedText += \" \" + str;\n                }\n            }\n        }\n        return extractedText.trim();\n    }\n    /**\n   * Detecta URLs en un texto\n   */ static detectURLs(text) {\n        // Expresión regular mejorada para capturar una variedad más amplia de URLs\n        // Esta regex busca URLs con diversos dominios de nivel superior (.com, .org, .ai, etc.)\n        const urlRegex = /(?:https?:\\/\\/)?(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi;\n        const matches = text.match(urlRegex) || [];\n        // Filtrar posibles falsos positivos (como números de versión: 1.0, etc.)\n        const validUrls = matches.filter((url)=>{\n            // Verificar que el dominio tenga al menos un punto y caracteres alfanuméricos\n            const domainParts = url.split(\".\");\n            // Debe tener al menos un punto y el TLD debe tener al menos 2 caracteres\n            return domainParts.length >= 2 && domainParts[domainParts.length - 1].length >= 2;\n        });\n        return {\n            containsURLs: validUrls.length > 0,\n            urls: validUrls\n        };\n    }\n    /**\n   * Genera un resumen basado en el análisis de URLs\n   */ static generateURLAnalysisSummary(analysis, itemCount) {\n        if (analysis.containsURLs) {\n            const urlCount = analysis.urls.length;\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y encontrado \").concat(urlCount, \" URL\").concat(urlCount !== 1 ? \"s\" : \"\", \".\");\n        } else {\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y no he encontrado ninguna URL.\");\n        }\n    }\n    /**\n   * Genera recomendaciones basadas en el análisis de URLs\n   */ static generateRecommendations(analysis) {\n        if (analysis.containsURLs) {\n            return [\n                \"Considere verificar si las URLs son seguras antes de utilizarlas.\",\n                \"Aseg\\xfarese de que las URLs est\\xe9n activas y funcionen correctamente.\",\n                \"Considere revisar si los enlaces apuntan a los recursos deseados.\"\n            ];\n        } else {\n            return [\n                \"El contenido no contiene URLs. Si necesita incluir referencias web, considere a\\xf1adirlas.\",\n                \"Puede a\\xf1adir enlaces a recursos adicionales para enriquecer el contenido.\"\n            ];\n        }\n    }\n    /**\n   * Detecta si el mensaje del usuario tiene intención de aplicar una transición\n   * @returns Objeto con la detección, nivel de confianza y el motivo\n   */ static detectApplyTransitionIntention(message) {\n        if (!message) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Mensaje vac\\xedo\"\n            };\n        }\n        // Si hay mención explícita a capturas, evitar detección de transición\n        // para evitar falsos positivos cuando se combinen ambos términos\n        if (/(?:captura|screenshot|imagen)\\s+(?:de)?\\s+pantalla/i.test(message) || /mostrar\\s+(?:captura|screenshot|imagen)/i.test(message)) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Se detect\\xf3 intenci\\xf3n de captura de pantalla en su lugar\"\n            };\n        }\n        // Patrones para detectar solicitudes de aplicar transiciones\n        const transitionPatterns = [\n            // Patrones de alta confianza - solicitudes muy específicas\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|mete|inserta)(?:r)?\\s+(?:una|la)?\\s+transici[óo]n(?:\\s+(?:smooth|suave|elegante|de video|entre|visual))?/i,\n                confidence: 0.98,\n                description: \"Solicitud directa de aplicar transici\\xf3n\"\n            },\n            {\n                pattern: /transici[óo]n(?:\\s+(?:smooth|suave|elegante))?(?:\\s+(?:entre|para|en(?:tre)?)\\s+(?:el|los)\\s+(?:video|clip|elemento|segmento))?/i,\n                confidence: 0.95,\n                description: \"Menci\\xf3n a transici\\xf3n con calificadores\"\n            },\n            {\n                pattern: /efecto\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.90,\n                description: \"Menci\\xf3n a efecto de transici\\xf3n\"\n            },\n            // Patrones de media confianza\n            {\n                pattern: /a[ñn]adir\\s+(?:una|la)?\\s+transici[óo]n/i,\n                confidence: 0.88,\n                description: \"Solicitud de a\\xf1adir transici\\xf3n\"\n            },\n            {\n                pattern: /a[ñn]adir\\s+efecto\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.85,\n                description: \"Solicitud de a\\xf1adir efecto de transici\\xf3n\"\n            },\n            {\n                pattern: /efecto\\s+visual\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.83,\n                description: \"Menci\\xf3n a efecto visual de transici\\xf3n\"\n            },\n            // Patrones de baja confianza\n            {\n                pattern: /transici[óo]n\\s+de\\s+video/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n de video\"\n            },\n            {\n                pattern: /transici[óo]n\\s+smooth/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n smooth\"\n            },\n            {\n                pattern: /transici[óo]n\\s+suave/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n suave\"\n            },\n            {\n                pattern: /implementa\\s+transici[óo]n/i,\n                confidence: 0.78,\n                description: \"Instrucci\\xf3n de implementar transici\\xf3n\"\n            },\n            {\n                pattern: /smooth\\s+transition/i,\n                confidence: 0.78,\n                description: \"Menci\\xf3n a smooth transition (ingl\\xe9s)\"\n            },\n            {\n                pattern: /transici[óo]n/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n general a transici\\xf3n\"\n            }\n        ];\n        // Buscar el patrón con mayor confianza que coincida\n        for (const item of transitionPatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description,\n                    transitionPath: \"/transitions/transition1.apng\" // Path predeterminado para la transición\n                };\n            }\n        }\n        // No se detectó ninguna intención de aplicar transición\n        return {\n            detected: false,\n            confidence: 0,\n            reason: \"No se detect\\xf3 intenci\\xf3n de aplicar transici\\xf3n\"\n        };\n    }\n    /**\n   * Detecta si el mensaje del usuario tiene intención de mostrar capturas de pantalla\n   * @returns Objeto con la detección, nivel de confianza y el motivo\n   */ static detectShowScreenshotIntention(message) {\n        if (!message) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Mensaje vac\\xedo\"\n            };\n        }\n        // Si hay mención explícita a transiciones, evitar detección de capturas\n        if (/transici[óo]n/i.test(message) || /smooth\\s+transition/i.test(message)) {\n            // Verificar si hay mención explícita y fuerte a capturas que supere la mención a transiciones\n            const hasExplicitScreenshotMention = /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo|r)?\\s+(?:captura|screenshot|imagen)/i.test(message);\n            if (!hasExplicitScreenshotMention) {\n                return {\n                    detected: false,\n                    confidence: 0,\n                    reason: \"Se detect\\xf3 intenci\\xf3n de transici\\xf3n en su lugar\"\n                };\n            }\n        }\n        // Patrones específicos para aplicar a la timeline\n        const timelinePatterns = [\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo|r)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.98,\n                description: \"Solicitud directa de aplicar captura a la timeline\"\n            },\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo)?\\s+(?:a la|al|en la|en el)?\\s+(?:timeline|línea de tiempo)/i,\n                confidence: 0.95,\n                description: \"Solicitud directa de a\\xf1adir a la timeline\"\n            },\n            {\n                pattern: /(?:usa|usar|utiliza|utilizar)(?:la|lo)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.93,\n                description: \"Solicitud de usar captura\"\n            }\n        ];\n        // Patrones muy específicos con alta confianza\n        const highConfidencePatterns = [\n            {\n                pattern: /muestra(?:me)?\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud directa de mostrar captura\"\n            },\n            {\n                pattern: /ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud de ver captura\"\n            },\n            {\n                pattern: /enseña(?:me)?\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud de ense\\xf1ar captura\"\n            }\n        ];\n        // Patrones menos específicos pero igualmente válidos\n        const mediumConfidencePatterns = [\n            {\n                pattern: /(?:quiero|necesito|me gustaría)\\s+ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.88,\n                description: \"Expresi\\xf3n de deseo de ver captura espec\\xedfica\"\n            },\n            {\n                pattern: /(?:puedes|podrías|puedo)\\s+ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.88,\n                description: \"Pregunta sobre posibilidad de ver captura espec\\xedfica\"\n            },\n            {\n                pattern: /mostrar\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.85,\n                description: \"Menci\\xf3n a mostrar captura espec\\xedfica\"\n            },\n            {\n                pattern: /visualizar\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.85,\n                description: \"Menci\\xf3n a visualizar captura espec\\xedfica\"\n            },\n            {\n                pattern: /(?:quiero|necesito|me gustaría)\\s+ver/i,\n                confidence: 0.70,\n                description: \"Expresi\\xf3n de deseo de ver\"\n            },\n            {\n                pattern: /(?:puedes|podrías|puedo)\\s+ver/i,\n                confidence: 0.70,\n                description: \"Pregunta sobre posibilidad de ver\"\n            }\n        ];\n        // Patrones muy generales pero que podrían indicar intención\n        const lowConfidencePatterns = [\n            {\n                pattern: /captura\\s+(?:de)?\\s+pantalla/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n espec\\xedfica a captura de pantalla\"\n            },\n            {\n                pattern: /screenshot/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n a screenshot\"\n            },\n            {\n                pattern: /ver\\s+imagen/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n a ver imagen\"\n            },\n            {\n                pattern: /captura/i,\n                confidence: 0.65,\n                description: \"Menci\\xf3n a captura\"\n            },\n            {\n                pattern: /imagen/i,\n                confidence: 0.60,\n                description: \"Menci\\xf3n a imagen\"\n            },\n            {\n                pattern: /ver/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a ver\"\n            },\n            {\n                pattern: /pantalla/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a pantalla\"\n            },\n            {\n                pattern: /url/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a URL\"\n            },\n            {\n                pattern: /link/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a link\"\n            },\n            {\n                pattern: /enlace/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a enlace\"\n            }\n        ];\n        // Primero comprobar patrones específicos de timeline\n        for (const item of timelinePatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description\n                };\n            }\n        }\n        // Luego buscar en el resto de patrones\n        // Combinar todos los patrones\n        const allPatterns = [\n            ...highConfidencePatterns,\n            ...mediumConfidencePatterns,\n            ...lowConfidencePatterns\n        ];\n        // Buscar el patrón con mayor confianza que coincida\n        for (const item of allPatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description\n                };\n            }\n        }\n        // Si hay alguna referencia a URLs en general - REDUCIR CONFIANZA\n        if (message.toLowerCase().includes(\"url\") || message.toLowerCase().includes(\"web\") || message.toLowerCase().includes(\"link\") || message.toLowerCase().includes(\"enlace\")) {\n            return {\n                detected: true,\n                confidence: 0.5,\n                reason: \"Posible inter\\xe9s en contenido web\"\n            };\n        }\n        // Detectar preguntas generales - REDUCIR CONFIANZA\n        if (message.toLowerCase().includes(\"?\") || message.toLowerCase().includes(\"\\xbf\") || /(?:puedes|podrías|me puedes)/i.test(message)) {\n            return {\n                detected: true,\n                confidence: 0.3,\n                reason: \"Pregunta que podr\\xeda implicar intenci\\xf3n visual\"\n            };\n        }\n        // Detección por defecto - REDUCIR CONFIANZA AÚN MÁS\n        if (message.length >= 5) {\n            return {\n                detected: true,\n                confidence: 0.2,\n                reason: \"Detecci\\xf3n por defecto\"\n            };\n        }\n        // Si no coincide ningún patrón y es muy corto\n        return {\n            detected: false,\n            confidence: 0,\n            reason: \"No se detect\\xf3 intenci\\xf3n de mostrar captura\"\n        };\n    }\n    /**\n   * Envía un mensaje al chat de la IA y devuelve la respuesta\n   */ static async sendChatMessage(request) {\n        try {\n            // Primero, analizar el texto del mensaje para detectar URLs\n            const selectedText = this.extractTextFromElements(request.selectedItems);\n            const urlAnalysis = this.detectURLs(selectedText);\n            // Si hay URLs, generar capturas de pantalla\n            if (urlAnalysis.containsURLs) {\n                urlAnalysis.screenshots = this.getScreenshotsForUrls(urlAnalysis.urls);\n            }\n            // Determinar si debemos mostrar la captura de pantalla\n            const showScreenshotDetection = this.detectShowScreenshotIntention(request.message);\n            // Determinar si debemos aplicar una transición\n            const applyTransitionDetection = this.detectApplyTransitionIntention(request.message);\n            // Asegurarse de que solo una de las detecciones sea positiva con alta confianza\n            let finalShowScreenshot = {\n                ...showScreenshotDetection\n            };\n            let finalApplyTransition = {\n                ...applyTransitionDetection\n            };\n            // Si ambas son detectadas, priorizar la que tenga mayor confianza\n            if (showScreenshotDetection.detected && applyTransitionDetection.detected) {\n                // Añadir un margen de seguridad para la transición (priorizar la transición ligeramente)\n                const transitionConfidence = applyTransitionDetection.confidence;\n                const screenshotConfidence = showScreenshotDetection.confidence * 0.95; // 5% de penalización\n                console.log(\"Detecci\\xf3n doble: Transici\\xf3n (\".concat(transitionConfidence, \") vs Screenshot (\").concat(screenshotConfidence, \")\"));\n                if (screenshotConfidence > transitionConfidence) {\n                    // Priorizar screenshot, desactivar transición\n                    finalApplyTransition.detected = false;\n                    finalApplyTransition.confidence = 0;\n                    finalApplyTransition.reason = \"Priorizada la detecci\\xf3n de captura de pantalla\";\n                    console.log(\"Priorizada captura de pantalla sobre transici\\xf3n\");\n                } else {\n                    // Priorizar transición, desactivar screenshot\n                    finalShowScreenshot.detected = false;\n                    finalShowScreenshot.confidence = 0;\n                    finalShowScreenshot.reason = \"Priorizada la detecci\\xf3n de transici\\xf3n\";\n                    console.log(\"Priorizada transici\\xf3n sobre captura de pantalla\");\n                }\n            }\n            // Enviar todo a la API junto con el mensaje del usuario\n            const response = await fetch(\"/api/ai\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    type: \"timeline_chat\",\n                    message: request.message,\n                    selectedItems: request.selectedItems,\n                    selectedText: selectedText,\n                    urlAnalysis: urlAnalysis,\n                    showScreenshotDetection: finalShowScreenshot,\n                    applyTransitionDetection: finalApplyTransition\n                })\n            });\n            const data = await response.json();\n            if (data.success) {\n                return {\n                    success: true,\n                    response: data.response,\n                    urlAnalysis: urlAnalysis,\n                    showScreenshotDetection: finalShowScreenshot,\n                    applyTransitionDetection: finalApplyTransition\n                };\n            } else {\n                return {\n                    success: false,\n                    error: data.error || \"Error desconocido al procesar la solicitud\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Error en chat de timeline:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AIService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/services/ai-service.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./features/editor/timeline/selection-modal.tsx":
/*!******************************************************!*\
  !*** ./features/editor/timeline/selection-modal.tsx ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @designcombo/events */ \"(app-pages-browser)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* harmony import */ var _items_timeline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./items/timeline */ \"(app-pages-browser)/./features/editor/timeline/items/timeline.ts\");\n/* harmony import */ var _services_ai_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/ai-service */ \"(app-pages-browser)/./features/editor/services/ai-service.ts\");\n/* harmony import */ var _services_command_executor_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/command-executor-service */ \"(app-pages-browser)/./features/editor/services/command-executor-service.ts\");\n/* harmony import */ var _designcombo_timeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @designcombo/timeline */ \"(app-pages-browser)/./node_modules/@designcombo/timeline/dist/index.es.js\");\n/* harmony import */ var _designcombo_state__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @designcombo/state */ \"(app-pages-browser)/./node_modules/@designcombo/state/dist/index.es.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n/**\n * Modal que se muestra cuando se seleccionan elementos por arrastre en la timeline\n * Proporciona una interfaz simple para enviar comandos mediante texto\n */ const SelectionModal = ()=>{\n    _s();\n    const [visible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [position, setPosition] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [selectedItems, setSelectedItems] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isSending, setIsSending] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [lastActionInfo, setLastActionInfo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showActionInfo, setShowActionInfo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [actionSuccess, setActionSuccess] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const modalRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const textareaRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Estado para el chat\n    const [chatMessages, setChatMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [chatInput, setChatInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    // Estado para rastrear imágenes añadidas a la timeline\n    const [addedScreenshots, setAddedScreenshots] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Estado para rastrear transiciones añadidas a la timeline\n    const [addedTransitions, setAddedTransitions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Suscribirse al evento de selección por arrastre\n        const selectionEvents = _designcombo_events__WEBPACK_IMPORTED_MODULE_2__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_2__.filter)((param)=>{\n            let { key } = param;\n            return key === _items_timeline__WEBPACK_IMPORTED_MODULE_3__.TIMELINE_SELECTION_MODAL;\n        }));\n        const subscription = selectionEvents.subscribe((event)=>{\n            var _event_value;\n            const payload = (_event_value = event.value) === null || _event_value === void 0 ? void 0 : _event_value.payload;\n            console.log(\"Selection modal event received:\", payload);\n            if (payload && payload.selectedItems && payload.selectedItems.length > 0) {\n                setSelectedItems(payload.selectedItems);\n                // Ajustar la posición para que el modal sea visible\n                setPosition({\n                    x: Math.min(payload.position.x, window.innerWidth - 350),\n                    y: Math.min(payload.position.y, window.innerHeight - 350)\n                });\n                // Resetear estados\n                setChatMessages([]);\n                setChatInput(\"\");\n                setLastActionInfo(null);\n                setActionSuccess(null);\n                setVisible(true);\n                // Enfocar el textarea cuando el modal se abre\n                setTimeout(()=>{\n                    if (textareaRef.current) {\n                        textareaRef.current.focus();\n                    }\n                }, 100);\n            }\n        });\n        // Manejar clic fuera del modal para cerrarlo\n        const handleClickOutside = (event)=>{\n            if (modalRef.current && !modalRef.current.contains(event.target)) {\n                setVisible(false);\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>{\n            subscription.unsubscribe();\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, []);\n    const handleClose = ()=>{\n        setVisible(false);\n    };\n    // Función para agregar una transición al video\n    const applyTransition = async (transitionPath)=>{\n        try {\n            // Calcular tiempos para la transición\n            // Por defecto, usar la duración del elemento seleccionado\n            let startTime = 0;\n            let endTime = 5;\n            // Obtener el CommandExecutor\n            const commandExecutor = _services_command_executor_service__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getExecutor();\n            if (!commandExecutor) {\n                console.error(\"CommandExecutor no disponible\");\n                return {\n                    success: false,\n                    details: \"CommandExecutor no disponible\"\n                };\n            }\n            // Si hay elementos seleccionados, usar sus tiempos\n            if (selectedItems && selectedItems.length > 0) {\n                // Obtener el primer elemento seleccionado\n                const firstItem = selectedItems[0];\n                // Intentar obtener los tiempos del elemento\n                if (firstItem.display) {\n                    startTime = (firstItem.display.from || 0) / 1000; // convertir de ms a segundos\n                    endTime = (firstItem.display.to || startTime * 1000 + 5000) / 1000; // convertir de ms a segundos\n                }\n            }\n            // Para los archivos APNG, tratarlos como videos en vez de imágenes animadas\n            const isAPNG = transitionPath.toLowerCase().endsWith(\".apng\");\n            const isGIF = transitionPath.toLowerCase().endsWith(\".gif\");\n            if (isAPNG) {\n                // Tratar APNG como video para mantener su duración y comportamiento\n                await commandExecutor.addVideo(transitionPath, {\n                    startTime,\n                    endTime,\n                    width: 1920,\n                    height: 1080,\n                    position: {\n                        x: 0.5,\n                        y: 0.5\n                    } // Centrado en pantalla\n                });\n                console.log(\"Transici\\xf3n APNG a\\xf1adida como video a pantalla completa desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\"));\n            } else if (isGIF) {\n                try {\n                    // Necesitamos personalizar la implementación para asegurar que la imagen animada cubra todo el canvas\n                    // Usando una forma alternativa para añadir la imagen que especifica directamente el modo \"cover\"\n                    // Crear payload para la imagen de transición\n                    const transitionPayload = {\n                        id: (0,_designcombo_timeline__WEBPACK_IMPORTED_MODULE_6__.generateId)(),\n                        display: {\n                            from: startTime * 1000,\n                            to: endTime * 1000 // Convertir a milisegundos\n                        },\n                        type: \"image\",\n                        details: {\n                            src: transitionPath,\n                            width: 1920,\n                            height: 1080,\n                            opacity: 100,\n                            scaleMode: \"cover\",\n                            left: 0.5,\n                            top: 0.5,\n                            originX: \"center\",\n                            originY: \"center\"\n                        }\n                    };\n                    // Usar dispatch directamente para tener más control sobre las opciones\n                    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_2__.dispatch)(_designcombo_state__WEBPACK_IMPORTED_MODULE_7__.ADD_IMAGE, {\n                        payload: transitionPayload,\n                        options: {\n                            scaleMode: \"cover\",\n                            position: {\n                                x: 0.5,\n                                y: 0.5\n                            }\n                        }\n                    });\n                    console.log(\"Transici\\xf3n GIF a\\xf1adida a pantalla completa con modo 'cover' desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\"));\n                } catch (error) {\n                    console.error(\"Error al aplicar transici\\xf3n animada:\", error);\n                    throw error;\n                }\n            } else {\n                // Para videos (MP4, etc.), seguimos usando addVideo\n                await commandExecutor.addVideo(transitionPath, {\n                    startTime,\n                    endTime\n                });\n                console.log(\"Transici\\xf3n de video a\\xf1adida desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\"));\n            }\n            // Registrar la transición añadida\n            setAddedTransitions((prev)=>[\n                    ...prev,\n                    transitionPath\n                ]);\n            return {\n                success: true,\n                details: \"Transici\\xf3n aplicada desde \".concat(startTime.toFixed(1), \"s hasta \").concat(endTime.toFixed(1), \"s\")\n            };\n        } catch (error) {\n            console.error(\"Error al a\\xf1adir transici\\xf3n:\", error);\n            return {\n                success: false,\n                details: \"Error al a\\xf1adir transici\\xf3n: \".concat(error instanceof Error ? error.message : String(error))\n            };\n        }\n    };\n    // Función para enviar un mensaje y procesarlo sin mostrar chat\n    const sendCommand = async ()=>{\n        if (!chatInput.trim()) return;\n        const userMessage = {\n            role: \"user\",\n            content: chatInput,\n            timestamp: new Date()\n        };\n        // Añadir el mensaje del usuario al chat interno (para lógica, no se muestra)\n        setChatMessages([\n            ...chatMessages,\n            userMessage\n        ]);\n        setChatInput(\"\");\n        setIsSending(true);\n        setLastActionInfo(null);\n        setShowActionInfo(false);\n        setActionSuccess(null);\n        try {\n            // Enviar el mensaje a la API\n            const response = await _services_ai_service__WEBPACK_IMPORTED_MODULE_4__[\"default\"].sendChatMessage({\n                message: chatInput,\n                selectedItems: selectedItems\n            });\n            if (response.success && response.response) {\n                var _response_applyTransitionDetection, _response_urlAnalysis;\n                let actionSuccessful = true; // Por defecto asumimos éxito\n                let operationDetails = \"\";\n                let screenshotToAdd = null;\n                let detectionInfo = null;\n                let startTime = 0;\n                let endTime = 5;\n                let actionDetected = false;\n                // Verificar si debemos aplicar una transición\n                if (((_response_applyTransitionDetection = response.applyTransitionDetection) === null || _response_applyTransitionDetection === void 0 ? void 0 : _response_applyTransitionDetection.detected) && response.applyTransitionDetection.confidence > 0.2 && response.applyTransitionDetection.transitionPath) {\n                    actionDetected = true;\n                    // Aplicar la transición\n                    const transitionResult = await applyTransition(response.applyTransitionDetection.transitionPath);\n                    actionSuccessful = transitionResult.success;\n                    operationDetails = transitionResult.details;\n                    // Detalles de la detección para referenciar\n                    detectionInfo = {\n                        detected: response.applyTransitionDetection.detected,\n                        confidence: response.applyTransitionDetection.confidence,\n                        reason: response.applyTransitionDetection.reason\n                    };\n                } else if (response.showScreenshotDetection && ((_response_urlAnalysis = response.urlAnalysis) === null || _response_urlAnalysis === void 0 ? void 0 : _response_urlAnalysis.containsURLs) && response.urlAnalysis.screenshots && response.urlAnalysis.screenshots.length > 0) {\n                    // Comprobar si la detección es positiva con confianza suficiente\n                    if (response.showScreenshotDetection.detected && response.showScreenshotDetection.confidence > 0.2) {\n                        actionDetected = true;\n                        // Seleccionar la primera captura disponible\n                        const firstScreenshot = response.urlAnalysis.screenshots[0];\n                        screenshotToAdd = firstScreenshot;\n                        // Guardar información de detección\n                        detectionInfo = {\n                            detected: response.showScreenshotDetection.detected,\n                            confidence: response.showScreenshotDetection.confidence,\n                            reason: response.showScreenshotDetection.reason\n                        };\n                        // Calcular tiempos para la imagen\n                        // Por defecto, usar la duración del elemento seleccionado\n                        startTime = 0;\n                        endTime = 5;\n                        // Añadir la captura a la timeline utilizando el CommandExecutorService\n                        const commandExecutor = _services_command_executor_service__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getExecutor();\n                        if (commandExecutor) {\n                            try {\n                                // Si hay elementos seleccionados, usar sus tiempos\n                                if (selectedItems && selectedItems.length > 0) {\n                                    // Obtener el primer elemento seleccionado\n                                    const firstItem = selectedItems[0];\n                                    // Intentar obtener los tiempos del elemento\n                                    if (firstItem.display) {\n                                        startTime = (firstItem.display.from || 0) / 1000; // convertir de ms a segundos\n                                        endTime = (firstItem.display.to || startTime * 1000 + 5000) / 1000; // convertir de ms a segundos\n                                    }\n                                }\n                                // Añadir la imagen a la timeline\n                                await commandExecutor.addImage(firstScreenshot.screenshotPath, {\n                                    startTime,\n                                    endTime\n                                });\n                                // Registrar la captura añadida\n                                setAddedScreenshots((prev)=>[\n                                        ...prev,\n                                        firstScreenshot\n                                    ]);\n                                // Detalles de la operación\n                                operationDetails = \"Captura aplicada a la timeline desde \".concat(startTime.toFixed(1), \"s hasta \").concat(endTime.toFixed(1), \"s\");\n                                console.log(\"Imagen a\\xf1adida a la timeline desde \".concat(startTime, \"s hasta \").concat(endTime, \"s: \").concat(firstScreenshot.screenshotPath));\n                            } catch (error) {\n                                console.error(\"Error al a\\xf1adir imagen a la timeline:\", error);\n                                actionSuccessful = false;\n                                operationDetails = \"Error al a\\xf1adir imagen: \".concat(error instanceof Error ? error.message : String(error));\n                            }\n                        } else {\n                            console.error(\"CommandExecutor no disponible\");\n                            actionSuccessful = false;\n                            operationDetails = \"CommandExecutor no disponible\";\n                        }\n                    }\n                }\n                // Establecer estado final según el resultado\n                setActionSuccess(actionSuccessful);\n                // Componer el mensaje informativo\n                let actionMessage;\n                if (actionDetected) {\n                    // Si se detectó una acción específica (como agregar captura o transición)\n                    actionMessage = actionSuccessful ? screenshotToAdd ? \"✨ \".concat(operationDetails || \"Captura aplicada correctamente\") : \"✨ \".concat(operationDetails || \"Transici\\xf3n aplicada correctamente\") : \"❌ Error: \".concat(operationDetails || \"No se pudo completar la operaci\\xf3n.\");\n                } else {\n                    // Si no se detectó ninguna acción específica, mostrar un mensaje predeterminado\n                    actionMessage = \"ℹ️ Esta \\xe1rea es para ejecutar acciones espec\\xedficas en la timeline. Si deseas conversar, por favor utiliza el chat.\";\n                    setActionSuccess(null); // Neutro, ni éxito ni error\n                }\n                setLastActionInfo(actionMessage);\n                setShowActionInfo(true);\n                // Añadir la respuesta del asistente al chat interno (no se muestra)\n                const assistantMessage = {\n                    role: \"assistant\",\n                    content: response.response + (actionDetected && actionSuccessful ? screenshotToAdd ? \"\\n\\n✅ **Captura de pantalla aplicada a la timeline**\\n- URL: \".concat(screenshotToAdd.url, \"\\n- Tiempo: desde \").concat(startTime, \"s hasta \").concat(endTime, \"s\\n- Confianza: \").concat(Math.round((detectionInfo === null || detectionInfo === void 0 ? void 0 : detectionInfo.confidence) * 100), \"%\") : \"\\n\\n✅ **Transici\\xf3n aplicada a la timeline**\\n- Tiempo: desde \".concat(startTime, \"s hasta \").concat(endTime, \"s\\n- Confianza: \").concat(Math.round((detectionInfo === null || detectionInfo === void 0 ? void 0 : detectionInfo.confidence) * 100), \"%\") : \"\"),\n                    timestamp: new Date(),\n                    detectionInfo: detectionInfo\n                };\n                setChatMessages((prevMessages)=>[\n                        ...prevMessages,\n                        assistantMessage\n                    ]);\n                // Ocultar la información de acción después de 4 segundos\n                setTimeout(()=>{\n                    setShowActionInfo(false);\n                }, 4000);\n            } else {\n                // Mostrar mensaje de error brevemente\n                setActionSuccess(false);\n                setLastActionInfo(\"❌ Error: \".concat(response.error || \"No se pudo procesar tu mensaje.\"));\n                setShowActionInfo(true);\n                setTimeout(()=>{\n                    setShowActionInfo(false);\n                }, 3000);\n            }\n        } catch (error) {\n            console.error(\"Error al enviar mensaje:\", error);\n            // Mostrar mensaje de error brevemente\n            setActionSuccess(false);\n            setLastActionInfo(\"❌ Error: \".concat(error instanceof Error ? error.message : \"Error de comunicaci\\xf3n con el servicio de IA.\"));\n            setShowActionInfo(true);\n            setTimeout(()=>{\n                setShowActionInfo(false);\n            }, 3000);\n        } finally{\n            setIsSending(false);\n        }\n    };\n    // Función para manejar el envío del mensaje con Enter\n    const handleKeyPress = (e)=>{\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            sendCommand();\n        }\n    };\n    if (!visible) return null;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: modalRef,\n        style: {\n            position: \"fixed\",\n            left: position.x,\n            top: position.y,\n            zIndex: 9999,\n            background: \"linear-gradient(135deg, rgba(35, 20, 60, 0.95) 0%, rgba(45, 25, 85, 0.95) 100%)\",\n            borderRadius: \"12px\",\n            boxShadow: \"0 8px 32px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(156, 90, 250, 0.3)\",\n            padding: \"20px\",\n            width: \"380px\",\n            color: \"white\",\n            fontFamily: \"Inter, system-ui, sans-serif\",\n            border: \"1px solid rgba(156, 90, 250, 0.6)\",\n            backdropFilter: \"blur(10px)\",\n            animation: \"fadeIn 0.3s ease\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"style\", {\n                children: \"\\n          @keyframes fadeIn {\\n            from { opacity: 0; transform: scale(0.95); }\\n            to { opacity: 1; transform: scale(1); }\\n          }\\n          @keyframes pulse {\\n            0% { box-shadow: 0 0 0 0 rgba(156, 90, 250, 0.5); }\\n            70% { box-shadow: 0 0 0 10px rgba(156, 90, 250, 0); }\\n            100% { box-shadow: 0 0 0 0 rgba(156, 90, 250, 0); }\\n          }\\n          @keyframes glow {\\n            0% { border-color: rgba(156, 90, 250, 0.6); }\\n            50% { border-color: rgba(156, 90, 250, 0.9); }\\n            100% { border-color: rgba(156, 90, 250, 0.6); }\\n          }\\n          @keyframes spin {\\n            0% { transform: rotate(0deg); }\\n            100% { transform: rotate(360deg); }\\n          }\\n        \"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                lineNumber: 458,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    marginBottom: \"16px\",\n                    borderBottom: \"1px solid rgba(156, 90, 250, 0.4)\",\n                    paddingBottom: \"12px\",\n                    position: \"relative\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            position: \"absolute\",\n                            bottom: \"-1px\",\n                            left: \"0\",\n                            width: \"60%\",\n                            height: \"1px\",\n                            background: \"linear-gradient(90deg, rgba(156, 90, 250, 0.8) 0%, rgba(156, 90, 250, 0) 100%)\",\n                            animation: \"glow 1.5s infinite alternate\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                        lineNumber: 490,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        style: {\n                            margin: 0,\n                            fontSize: \"18px\",\n                            fontWeight: \"600\",\n                            color: \"rgba(156, 90, 250, 1.0)\",\n                            textShadow: \"0 2px 4px rgba(0,0,0,0.3)\"\n                        },\n                        children: selectedItems.length > 1 ? \"\".concat(selectedItems.length, \" elementos seleccionados\") : \"Elemento seleccionado\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                        lineNumber: 500,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            display: \"flex\",\n                            gap: \"8px\"\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: handleClose,\n                            style: {\n                                background: \"rgba(156, 90, 250, 0.2)\",\n                                border: \"none\",\n                                borderRadius: \"50%\",\n                                color: \"rgba(255, 255, 255, 0.9)\",\n                                cursor: \"pointer\",\n                                fontSize: \"16px\",\n                                padding: \"5px\",\n                                width: \"24px\",\n                                height: \"24px\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                                lineHeight: \"1\",\n                                transition: \"all 0.2s ease\"\n                            },\n                            onMouseOver: (e)=>{\n                                e.currentTarget.style.background = \"rgba(156, 90, 250, 0.4)\";\n                                e.currentTarget.style.transform = \"scale(1.1)\";\n                            },\n                            onMouseOut: (e)=>{\n                                e.currentTarget.style.background = \"rgba(156, 90, 250, 0.2)\";\n                                e.currentTarget.style.transform = \"scale(1)\";\n                            },\n                            children: \"\\xd7\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                            lineNumber: 510,\n                            columnNumber: 9\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                        lineNumber: 509,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                lineNumber: 481,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    marginTop: \"12px\",\n                    marginBottom: \"16px\"\n                },\n                children: [\n                    showActionInfo && lastActionInfo && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            padding: \"12px\",\n                            marginBottom: \"16px\",\n                            background: actionSuccess === false ? \"linear-gradient(to right, rgba(220, 50, 50, 0.15), rgba(220, 50, 50, 0.05))\" : actionSuccess === true ? \"linear-gradient(to right, rgba(70, 200, 120, 0.15), rgba(70, 200, 120, 0.05))\" : \"linear-gradient(to right, rgba(156, 90, 250, 0.15), rgba(156, 90, 250, 0.05))\",\n                            borderRadius: \"8px\",\n                            fontSize: \"14px\",\n                            border: \"1px solid \".concat(actionSuccess === false ? \"rgba(220, 50, 50, 0.3)\" : actionSuccess === true ? \"rgba(70, 200, 120, 0.3)\" : \"rgba(156, 90, 250, 0.3)\"),\n                            boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.1)\",\n                            transition: \"all 0.3s ease\",\n                            animation: actionSuccess ? \"pulse 2s infinite\" : \"\",\n                            color: actionSuccess === false ? \"rgba(255, 220, 220, 0.9)\" : actionSuccess === true ? \"rgba(220, 255, 230, 0.9)\" : \"rgba(240, 230, 255, 0.9)\"\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                display: \"flex\",\n                                alignItems: \"flex-start\",\n                                gap: \"8px\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        flexShrink: 0,\n                                        marginTop: \"2px\"\n                                    },\n                                    children: actionSuccess === false ? \"❌\" : actionSuccess === true ? \"✨\" : \"ℹ️\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                    lineNumber: 574,\n                                    columnNumber: 15\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    children: lastActionInfo\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                    lineNumber: 584,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                            lineNumber: 569,\n                            columnNumber: 13\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                        lineNumber: 545,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            gap: \"12px\",\n                            borderTop: \"1px solid rgba(156, 90, 250, 0.2)\",\n                            paddingTop: \"16px\",\n                            position: \"relative\"\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                                ref: textareaRef,\n                                value: chatInput,\n                                onChange: (e)=>setChatInput(e.target.value),\n                                onKeyDown: handleKeyPress,\n                                disabled: isSending,\n                                placeholder: \"Escribe un comando... (ej: 'aplica captura a la timeline' o 'a\\xf1ade transici\\xf3n')\",\n                                style: {\n                                    width: \"100%\",\n                                    height: \"80px\",\n                                    background: \"rgba(30, 15, 50, 0.5)\",\n                                    border: \"1px solid rgba(156, 90, 250, 0.4)\",\n                                    borderRadius: \"8px\",\n                                    padding: \"12px 14px\",\n                                    color: \"white\",\n                                    fontSize: \"14px\",\n                                    outline: \"none\",\n                                    resize: \"none\",\n                                    transition: \"border-color 0.3s ease, box-shadow 0.3s ease\",\n                                    boxShadow: \"0 2px 8px rgba(0, 0, 0, 0.2) inset\",\n                                    fontFamily: \"Inter, system-ui, sans-serif\",\n                                    lineHeight: \"1.5\"\n                                },\n                                onFocus: (e)=>{\n                                    e.target.style.borderColor = \"rgba(156, 90, 250, 0.8)\";\n                                    e.target.style.boxShadow = \"0 2px 8px rgba(0, 0, 0, 0.2) inset, 0 0 0 2px rgba(156, 90, 250, 0.1)\";\n                                },\n                                onBlur: (e)=>{\n                                    e.target.style.borderColor = \"rgba(156, 90, 250, 0.4)\";\n                                    e.target.style.boxShadow = \"0 2px 8px rgba(0, 0, 0, 0.2) inset\";\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                lineNumber: 597,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: sendCommand,\n                                disabled: isSending || !chatInput.trim(),\n                                style: {\n                                    background: isSending || !chatInput.trim() ? \"rgba(156, 90, 250, 0.3)\" : \"linear-gradient(135deg, rgba(156, 90, 250, 0.8) 0%, rgba(120, 60, 220, 0.9) 100%)\",\n                                    border: \"none\",\n                                    borderRadius: \"8px\",\n                                    color: \"white\",\n                                    cursor: isSending || !chatInput.trim() ? \"not-allowed\" : \"pointer\",\n                                    padding: \"12px 16px\",\n                                    fontSize: \"14px\",\n                                    fontWeight: \"500\",\n                                    transition: \"all 0.2s ease\",\n                                    boxShadow: isSending || !chatInput.trim() ? \"none\" : \"0 4px 12px rgba(156, 90, 250, 0.3)\",\n                                    textShadow: \"0 1px 2px rgba(0,0,0,0.2)\"\n                                },\n                                onMouseOver: (e)=>{\n                                    if (!isSending && chatInput.trim()) {\n                                        e.currentTarget.style.transform = \"translateY(-2px)\";\n                                        e.currentTarget.style.boxShadow = \"0 6px 16px rgba(156, 90, 250, 0.4)\";\n                                    }\n                                },\n                                onMouseOut: (e)=>{\n                                    if (!isSending && chatInput.trim()) {\n                                        e.currentTarget.style.transform = \"translateY(0)\";\n                                        e.currentTarget.style.boxShadow = \"0 4px 12px rgba(156, 90, 250, 0.3)\";\n                                    }\n                                },\n                                children: isSending ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    style: {\n                                        display: \"flex\",\n                                        alignItems: \"center\",\n                                        justifyContent: \"center\",\n                                        gap: \"8px\"\n                                    },\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            style: {\n                                                width: \"14px\",\n                                                height: \"14px\",\n                                                borderRadius: \"50%\",\n                                                border: \"2px solid rgba(255,255,255,0.3)\",\n                                                borderTopColor: \"white\",\n                                                animation: \"spin 1s linear infinite\"\n                                            }\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                            lineNumber: 664,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            children: \"Procesando...\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                            lineNumber: 672,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                    lineNumber: 663,\n                                    columnNumber: 15\n                                }, undefined) : \"Ejecutar\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                                lineNumber: 629,\n                                columnNumber: 9\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                        lineNumber: 589,\n                        columnNumber: 19\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n                lineNumber: 543,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\features\\\\editor\\\\timeline\\\\selection-modal.tsx\",\n        lineNumber: 439,\n        columnNumber: 5\n    }, undefined);\n};\n_s(SelectionModal, \"oQ1cOUXGdA9wm6cej/uyO/5xVYM=\");\n_c = SelectionModal;\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectionModal);\nvar _c;\n$RefreshReg$(_c, \"SelectionModal\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/timeline/selection-modal.tsx\n"));

/***/ })

});