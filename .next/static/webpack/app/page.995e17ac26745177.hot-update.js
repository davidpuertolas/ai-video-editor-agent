"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./features/editor/services/ai-service.ts":
/*!************************************************!*\
  !*** ./features/editor/services/ai-service.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIService: function() { return /* binding */ AIService; }\n/* harmony export */ });\n/**\n * Servicio para manejar la comunicación con la IA.\n * Esta es una implementación base que simula respuestas.\n * En el futuro, se conectará con una API real.\n */ class AIService {\n    /**\n   * Analiza los elementos seleccionados para buscar URLs\n   */ static async analyzeItems(request) {\n        try {\n            // Simulamos un tiempo de respuesta de la API\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            console.log(\"AI Service - Request:\", request);\n            // Extraer el texto relevante de los elementos seleccionados\n            const elementsText = this.extractTextFromElements(request.items);\n            // Mensaje explícito o texto extraído de los elementos\n            const textToAnalyze = request.message || elementsText;\n            // Analizar si el texto contiene URLs\n            const urlAnalysis = this.detectURLs(textToAnalyze);\n            // Si hay URLs, generar información de screenshots\n            if (urlAnalysis.containsURLs) {\n                urlAnalysis.screenshots = this.getScreenshotsForUrls(urlAnalysis.urls);\n            }\n            // Simulación de respuesta de la IA\n            // En un entorno real, esto enviaría la solicitud a un endpoint de API\n            return {\n                success: true,\n                message: \"An\\xe1lisis completado con \\xe9xito\",\n                analysis: {\n                    summary: this.generateURLAnalysisSummary(urlAnalysis, request.items.length),\n                    urlAnalysis: urlAnalysis,\n                    itemsAnalyzed: request.items.length,\n                    analyzedText: textToAnalyze,\n                    recommendations: this.generateRecommendations(urlAnalysis),\n                    confidence: 0.95\n                }\n            };\n        } catch (error) {\n            console.error(\"Error in AI service:\", error);\n            return {\n                success: false,\n                message: \"Error al procesar la solicitud\",\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n    /**\n   * Obtiene las capturas de pantalla para las URLs detectadas\n   * (Como es un demo, utilizamos la misma imagen para todas las URLs)\n   */ static getScreenshotsForUrls(urls) {\n        // En un entorno real, esta función realizaría una llamada a un servicio\n        // que generaría capturas de pantalla para cada URL\n        // Por ahora, usamos una imagen de demostración para todas las URLs\n        return urls.map((url)=>({\n                url,\n                screenshotPath: \"/screenshots/screenshot1.png\"\n            }));\n    }\n    /**\n   * Extrae texto de los elementos seleccionados\n   */ static extractTextFromElements(items) {\n        // Aquí extraemos el texto de los elementos seleccionados\n        // En un caso real, esto dependería de la estructura de tus elementos\n        let extractedText = \"\";\n        for (const item of items){\n            var _item_details, _item_details1, _item_details2;\n            // Intentar extraer texto de diferentes propiedades comunes\n            // Esto es un ejemplo y debería adaptarse a tu estructura de datos real\n            if (item.text) {\n                extractedText += \" \" + item.text;\n            } else if ((_item_details = item.details) === null || _item_details === void 0 ? void 0 : _item_details.text) {\n                extractedText += \" \" + item.details.text;\n            } else if (item.name) {\n                extractedText += \" \" + item.name;\n            } else if (item.title) {\n                extractedText += \" \" + item.title;\n            } else if (item.description) {\n                extractedText += \" \" + item.description;\n            } else if ((_item_details1 = item.details) === null || _item_details1 === void 0 ? void 0 : _item_details1.description) {\n                extractedText += \" \" + item.details.description;\n            } else if ((_item_details2 = item.details) === null || _item_details2 === void 0 ? void 0 : _item_details2.src) {\n                extractedText += \" \" + item.details.src;\n            } else if (item.src) {\n                extractedText += \" \" + item.src;\n            } else if (item.content) {\n                extractedText += \" \" + item.content;\n            } else if (item.label) {\n                extractedText += \" \" + item.label;\n            } else if (item.value) {\n                extractedText += \" \" + item.value;\n            } else if (typeof item === \"string\") {\n                extractedText += \" \" + item;\n            }\n            // También podemos buscar en atributos anidados\n            if (item.props && typeof item.props === \"object\") {\n                for(const key in item.props){\n                    if (typeof item.props[key] === \"string\") {\n                        extractedText += \" \" + item.props[key];\n                    }\n                }\n            }\n            // Si todavía no hemos encontrado texto, intentamos convertir el objeto a string\n            if (extractedText.trim() === \"\" && item.toString) {\n                const str = item.toString();\n                if (str !== \"[object Object]\") {\n                    extractedText += \" \" + str;\n                }\n            }\n        }\n        return extractedText.trim();\n    }\n    /**\n   * Detecta URLs en un texto\n   */ static detectURLs(text) {\n        // Expresión regular mejorada para capturar una variedad más amplia de URLs\n        // Esta regex busca URLs con diversos dominios de nivel superior (.com, .org, .ai, etc.)\n        const urlRegex = /(?:https?:\\/\\/)?(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi;\n        const matches = text.match(urlRegex) || [];\n        // Filtrar posibles falsos positivos (como números de versión: 1.0, etc.)\n        const validUrls = matches.filter((url)=>{\n            // Verificar que el dominio tenga al menos un punto y caracteres alfanuméricos\n            const domainParts = url.split(\".\");\n            // Debe tener al menos un punto y el TLD debe tener al menos 2 caracteres\n            return domainParts.length >= 2 && domainParts[domainParts.length - 1].length >= 2;\n        });\n        return {\n            containsURLs: validUrls.length > 0,\n            urls: validUrls\n        };\n    }\n    /**\n   * Genera un resumen basado en el análisis de URLs\n   */ static generateURLAnalysisSummary(analysis, itemCount) {\n        if (analysis.containsURLs) {\n            const urlCount = analysis.urls.length;\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y encontrado \").concat(urlCount, \" URL\").concat(urlCount !== 1 ? \"s\" : \"\", \".\");\n        } else {\n            return \"He analizado el contenido de \".concat(itemCount, \" elemento\").concat(itemCount !== 1 ? \"s\" : \"\", \" y no he encontrado ninguna URL.\");\n        }\n    }\n    /**\n   * Genera recomendaciones basadas en el análisis de URLs\n   */ static generateRecommendations(analysis) {\n        if (analysis.containsURLs) {\n            return [\n                \"Considere verificar si las URLs son seguras antes de utilizarlas.\",\n                \"Aseg\\xfarese de que las URLs est\\xe9n activas y funcionen correctamente.\",\n                \"Considere revisar si los enlaces apuntan a los recursos deseados.\"\n            ];\n        } else {\n            return [\n                \"El contenido no contiene URLs. Si necesita incluir referencias web, considere a\\xf1adirlas.\",\n                \"Puede a\\xf1adir enlaces a recursos adicionales para enriquecer el contenido.\"\n            ];\n        }\n    }\n    /**\n   * Detecta si el mensaje del usuario tiene intención de aplicar una transición\n   * @returns Objeto con la detección, nivel de confianza y el motivo\n   */ static detectApplyTransitionIntention(message) {\n        if (!message) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Mensaje vac\\xedo\"\n            };\n        }\n        // Si hay mención explícita a capturas, evitar detección de transición\n        // para evitar falsos positivos cuando se combinen ambos términos\n        if (/(?:captura|screenshot|imagen)\\s+(?:de)?\\s+pantalla/i.test(message) || /mostrar\\s+(?:captura|screenshot|imagen)/i.test(message)) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Se detect\\xf3 intenci\\xf3n de captura de pantalla en su lugar\"\n            };\n        }\n        // Patrones para detectar solicitudes de aplicar transiciones\n        const transitionPatterns = [\n            // Patrones de alta confianza - solicitudes muy específicas\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|mete|inserta)(?:r)?\\s+(?:una|la)?\\s+transici[óo]n(?:\\s+(?:smooth|suave|elegante|de video|entre|visual))?/i,\n                confidence: 0.98,\n                description: \"Solicitud directa de aplicar transici\\xf3n\"\n            },\n            {\n                pattern: /transici[óo]n(?:\\s+(?:smooth|suave|elegante))?(?:\\s+(?:entre|para|en(?:tre)?)\\s+(?:el|los)\\s+(?:video|clip|elemento|segmento))?/i,\n                confidence: 0.95,\n                description: \"Menci\\xf3n a transici\\xf3n con calificadores\"\n            },\n            {\n                pattern: /efecto\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.90,\n                description: \"Menci\\xf3n a efecto de transici\\xf3n\"\n            },\n            // Patrones de media confianza\n            {\n                pattern: /a[ñn]adir\\s+(?:una|la)?\\s+transici[óo]n/i,\n                confidence: 0.88,\n                description: \"Solicitud de a\\xf1adir transici\\xf3n\"\n            },\n            {\n                pattern: /a[ñn]adir\\s+efecto\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.85,\n                description: \"Solicitud de a\\xf1adir efecto de transici\\xf3n\"\n            },\n            {\n                pattern: /efecto\\s+visual\\s+(?:de)?\\s+transici[óo]n/i,\n                confidence: 0.83,\n                description: \"Menci\\xf3n a efecto visual de transici\\xf3n\"\n            },\n            // Patrones de baja confianza\n            {\n                pattern: /transici[óo]n\\s+de\\s+video/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n de video\"\n            },\n            {\n                pattern: /transici[óo]n\\s+smooth/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n smooth\"\n            },\n            {\n                pattern: /transici[óo]n\\s+suave/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n a transici\\xf3n suave\"\n            },\n            {\n                pattern: /implementa\\s+transici[óo]n/i,\n                confidence: 0.78,\n                description: \"Instrucci\\xf3n de implementar transici\\xf3n\"\n            },\n            {\n                pattern: /smooth\\s+transition/i,\n                confidence: 0.78,\n                description: \"Menci\\xf3n a smooth transition (ingl\\xe9s)\"\n            },\n            {\n                pattern: /transici[óo]n/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n general a transici\\xf3n\"\n            }\n        ];\n        // Buscar el patrón con mayor confianza que coincida\n        for (const item of transitionPatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description,\n                    transitionPath: \"/transitions/fade-out.apng\" // Path actualizado para la transición\n                };\n            }\n        }\n        // No se detectó ninguna intención de aplicar transición\n        return {\n            detected: false,\n            confidence: 0,\n            reason: \"No se detect\\xf3 intenci\\xf3n de aplicar transici\\xf3n\"\n        };\n    }\n    /**\n   * Detecta si el mensaje del usuario tiene intención de mostrar capturas de pantalla\n   * @returns Objeto con la detección, nivel de confianza y el motivo\n   */ static detectShowScreenshotIntention(message) {\n        if (!message) {\n            return {\n                detected: false,\n                confidence: 0,\n                reason: \"Mensaje vac\\xedo\"\n            };\n        }\n        // Si hay mención explícita a transiciones, evitar detección de capturas\n        if (/transici[óo]n/i.test(message) || /smooth\\s+transition/i.test(message)) {\n            // Verificar si hay mención explícita y fuerte a capturas que supere la mención a transiciones\n            const hasExplicitScreenshotMention = /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo|r)?\\s+(?:captura|screenshot|imagen)/i.test(message);\n            if (!hasExplicitScreenshotMention) {\n                return {\n                    detected: false,\n                    confidence: 0,\n                    reason: \"Se detect\\xf3 intenci\\xf3n de transici\\xf3n en su lugar\"\n                };\n            }\n        }\n        // Patrones específicos para aplicar a la timeline\n        const timelinePatterns = [\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo|r)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.98,\n                description: \"Solicitud directa de aplicar captura a la timeline\"\n            },\n            {\n                pattern: /(?:aplica|agrega|añade|pon|coloca|inserta|incorpora)(?:la|lo)?\\s+(?:a la|al|en la|en el)?\\s+(?:timeline|línea de tiempo)/i,\n                confidence: 0.95,\n                description: \"Solicitud directa de a\\xf1adir a la timeline\"\n            },\n            {\n                pattern: /(?:usa|usar|utiliza|utilizar)(?:la|lo)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.93,\n                description: \"Solicitud de usar captura\"\n            }\n        ];\n        // Patrones muy específicos con alta confianza\n        const highConfidencePatterns = [\n            {\n                pattern: /muestra(?:me)?\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud directa de mostrar captura\"\n            },\n            {\n                pattern: /ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud de ver captura\"\n            },\n            {\n                pattern: /enseña(?:me)?\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen|vista|preview)/i,\n                confidence: 0.95,\n                description: \"Solicitud de ense\\xf1ar captura\"\n            }\n        ];\n        // Patrones menos específicos pero igualmente válidos\n        const mediumConfidencePatterns = [\n            {\n                pattern: /(?:quiero|necesito|me gustaría)\\s+ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.88,\n                description: \"Expresi\\xf3n de deseo de ver captura espec\\xedfica\"\n            },\n            {\n                pattern: /(?:puedes|podrías|puedo)\\s+ver\\s+(?:la|el|una|un)?\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.88,\n                description: \"Pregunta sobre posibilidad de ver captura espec\\xedfica\"\n            },\n            {\n                pattern: /mostrar\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.85,\n                description: \"Menci\\xf3n a mostrar captura espec\\xedfica\"\n            },\n            {\n                pattern: /visualizar\\s+(?:captura|screenshot|imagen)/i,\n                confidence: 0.85,\n                description: \"Menci\\xf3n a visualizar captura espec\\xedfica\"\n            },\n            {\n                pattern: /(?:quiero|necesito|me gustaría)\\s+ver/i,\n                confidence: 0.70,\n                description: \"Expresi\\xf3n de deseo de ver\"\n            },\n            {\n                pattern: /(?:puedes|podrías|puedo)\\s+ver/i,\n                confidence: 0.70,\n                description: \"Pregunta sobre posibilidad de ver\"\n            }\n        ];\n        // Patrones muy generales pero que podrían indicar intención\n        const lowConfidencePatterns = [\n            {\n                pattern: /captura\\s+(?:de)?\\s+pantalla/i,\n                confidence: 0.80,\n                description: \"Menci\\xf3n espec\\xedfica a captura de pantalla\"\n            },\n            {\n                pattern: /screenshot/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n a screenshot\"\n            },\n            {\n                pattern: /ver\\s+imagen/i,\n                confidence: 0.75,\n                description: \"Menci\\xf3n a ver imagen\"\n            },\n            {\n                pattern: /captura/i,\n                confidence: 0.65,\n                description: \"Menci\\xf3n a captura\"\n            },\n            {\n                pattern: /imagen/i,\n                confidence: 0.60,\n                description: \"Menci\\xf3n a imagen\"\n            },\n            {\n                pattern: /ver/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a ver\"\n            },\n            {\n                pattern: /pantalla/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a pantalla\"\n            },\n            {\n                pattern: /url/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a URL\"\n            },\n            {\n                pattern: /link/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a link\"\n            },\n            {\n                pattern: /enlace/i,\n                confidence: 0.40,\n                description: \"Menci\\xf3n a enlace\"\n            }\n        ];\n        // Primero comprobar patrones específicos de timeline\n        for (const item of timelinePatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description\n                };\n            }\n        }\n        // Luego buscar en el resto de patrones\n        // Combinar todos los patrones\n        const allPatterns = [\n            ...highConfidencePatterns,\n            ...mediumConfidencePatterns,\n            ...lowConfidencePatterns\n        ];\n        // Buscar el patrón con mayor confianza que coincida\n        for (const item of allPatterns){\n            if (item.pattern.test(message)) {\n                return {\n                    detected: true,\n                    confidence: item.confidence,\n                    reason: item.description\n                };\n            }\n        }\n        // Si hay alguna referencia a URLs en general - REDUCIR CONFIANZA\n        if (message.toLowerCase().includes(\"url\") || message.toLowerCase().includes(\"web\") || message.toLowerCase().includes(\"link\") || message.toLowerCase().includes(\"enlace\")) {\n            return {\n                detected: true,\n                confidence: 0.5,\n                reason: \"Posible inter\\xe9s en contenido web\"\n            };\n        }\n        // Detectar preguntas generales - REDUCIR CONFIANZA\n        if (message.toLowerCase().includes(\"?\") || message.toLowerCase().includes(\"\\xbf\") || /(?:puedes|podrías|me puedes)/i.test(message)) {\n            return {\n                detected: true,\n                confidence: 0.3,\n                reason: \"Pregunta que podr\\xeda implicar intenci\\xf3n visual\"\n            };\n        }\n        // Detección por defecto - REDUCIR CONFIANZA AÚN MÁS\n        if (message.length >= 5) {\n            return {\n                detected: true,\n                confidence: 0.2,\n                reason: \"Detecci\\xf3n por defecto\"\n            };\n        }\n        // Si no coincide ningún patrón y es muy corto\n        return {\n            detected: false,\n            confidence: 0,\n            reason: \"No se detect\\xf3 intenci\\xf3n de mostrar captura\"\n        };\n    }\n    /**\n   * Envía un mensaje al chat de la IA y devuelve la respuesta\n   */ static async sendChatMessage(request) {\n        try {\n            // Primero, analizar el texto del mensaje para detectar URLs\n            const selectedText = this.extractTextFromElements(request.selectedItems);\n            const urlAnalysis = this.detectURLs(selectedText);\n            // Si hay URLs, generar capturas de pantalla\n            if (urlAnalysis.containsURLs) {\n                urlAnalysis.screenshots = this.getScreenshotsForUrls(urlAnalysis.urls);\n            }\n            // Determinar si debemos mostrar la captura de pantalla\n            const showScreenshotDetection = this.detectShowScreenshotIntention(request.message);\n            // Determinar si debemos aplicar una transición\n            const applyTransitionDetection = this.detectApplyTransitionIntention(request.message);\n            // Asegurarse de que solo una de las detecciones sea positiva con alta confianza\n            let finalShowScreenshot = {\n                ...showScreenshotDetection\n            };\n            let finalApplyTransition = {\n                ...applyTransitionDetection\n            };\n            // Si ambas son detectadas, priorizar la que tenga mayor confianza\n            if (showScreenshotDetection.detected && applyTransitionDetection.detected) {\n                // Añadir un margen de seguridad para la transición (priorizar la transición ligeramente)\n                const transitionConfidence = applyTransitionDetection.confidence;\n                const screenshotConfidence = showScreenshotDetection.confidence * 0.95; // 5% de penalización\n                console.log(\"Detecci\\xf3n doble: Transici\\xf3n (\".concat(transitionConfidence, \") vs Screenshot (\").concat(screenshotConfidence, \")\"));\n                if (screenshotConfidence > transitionConfidence) {\n                    // Priorizar screenshot, desactivar transición\n                    finalApplyTransition.detected = false;\n                    finalApplyTransition.confidence = 0;\n                    finalApplyTransition.reason = \"Priorizada la detecci\\xf3n de captura de pantalla\";\n                    console.log(\"Priorizada captura de pantalla sobre transici\\xf3n\");\n                } else {\n                    // Priorizar transición, desactivar screenshot\n                    finalShowScreenshot.detected = false;\n                    finalShowScreenshot.confidence = 0;\n                    finalShowScreenshot.reason = \"Priorizada la detecci\\xf3n de transici\\xf3n\";\n                    console.log(\"Priorizada transici\\xf3n sobre captura de pantalla\");\n                }\n            }\n            // Enviar todo a la API junto con el mensaje del usuario\n            const response = await fetch(\"/api/ai-timeline\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    message: request.message,\n                    selectedItems: request.selectedItems,\n                    selectedText: selectedText,\n                    urlAnalysis: urlAnalysis,\n                    showScreenshotDetection: finalShowScreenshot,\n                    applyTransitionDetection: finalApplyTransition\n                })\n            });\n            const data = await response.json();\n            if (data.success) {\n                return {\n                    success: true,\n                    response: data.response,\n                    urlAnalysis: urlAnalysis,\n                    showScreenshotDetection: finalShowScreenshot,\n                    applyTransitionDetection: finalApplyTransition\n                };\n            } else {\n                return {\n                    success: false,\n                    error: data.error || \"Error desconocido al procesar la solicitud\"\n                };\n            }\n        } catch (error) {\n            console.error(\"Error en chat de timeline:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AIService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./features/editor/services/ai-service.ts\n"));

/***/ })

});