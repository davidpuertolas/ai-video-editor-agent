"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ai/route";
exports.ids = ["app/api/ai/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai%2Froute&page=%2Fapi%2Fai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Froute.ts&appDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai%2Froute&page=%2Fapi%2Fai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Froute.ts&appDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_david_Desktop_ai_video_agent_react_video_editor_app_api_ai_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/ai/route.ts */ \"(rsc)/./app/api/ai/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ai/route\",\n        pathname: \"/api/ai\",\n        filename: \"route\",\n        bundlePath: \"app/api/ai/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\david\\\\Desktop\\\\ai-video-agent\\\\react-video-editor\\\\app\\\\api\\\\ai\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_david_Desktop_ai_video_agent_react_video_editor_app_api_ai_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/ai/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhaSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYWklMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhaSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNkYXZpZCU1Q0Rlc2t0b3AlNUNhaS12aWRlby1hZ2VudCU1Q3JlYWN0LXZpZGVvLWVkaXRvciU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDZGF2aWQlNUNEZXNrdG9wJTVDYWktdmlkZW8tYWdlbnQlNUNyZWFjdC12aWRlby1lZGl0b3ImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3FDO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVtb3Rpb24tY2FwdGlvbnMvP2ZiZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcZGF2aWRcXFxcRGVza3RvcFxcXFxhaS12aWRlby1hZ2VudFxcXFxyZWFjdC12aWRlby1lZGl0b3JcXFxcYXBwXFxcXGFwaVxcXFxhaVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9haVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYWkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxkYXZpZFxcXFxEZXNrdG9wXFxcXGFpLXZpZGVvLWFnZW50XFxcXHJlYWN0LXZpZGVvLWVkaXRvclxcXFxhcHBcXFxcYXBpXFxcXGFpXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9haS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai%2Froute&page=%2Fapi%2Fai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Froute.ts&appDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/ai/route.ts":
/*!*****************************!*\
  !*** ./app/api/ai/route.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/../node_modules/openai/index.mjs\");\n\n\n// Inicializar el cliente de OpenAI\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// Definir las instrucciones del sistema para el contexto del editor de video\nconst systemInstructions = `\nEres un asistente especializado en edición de video que ayuda a los usuarios a manipular elementos en su timeline.\nTu tarea principal es entender las intenciones del usuario y detectar cuando quieren agregar elementos al video o eliminar segmentos,\nincluso cuando lo expresan en lenguaje natural sin usar comandos específicos.\n\nIMPORTANTE: Además de responder naturalmente, debes analizar si el usuario está pidiendo añadir algún elemento al video,\neliminar segmentos de un elemento existente, o compactar/optimizar el timeline.\n\nSi con una confianza mayor al 70% crees que están solicitando agregar texto, imagen, video o subtítulos, debes incluir la información\nestructurada del elemento a agregar.\n\nEjemplos de solicitudes en lenguaje natural que deberías detectar:\n- \"Pon un título que diga 'Bienvenidos' al inicio del video\"\n- \"Me gustaría tener una imagen de fondo entre los segundos 5 y 10\"\n- \"Necesito un texto que diga 'Gracias por ver' al final\"\n- \"Quiero que aparezca mi logo en la esquina durante todo el video\"\n- \"Coloca un video de introducción al principio\"\n- \"Añade subtítulos al video\"\n- \"Pon subtítulos en el video\"\n- \"Quiero subtítulos para mi video\"\n- \"Agrega los subtítulos\"\n\nFUNCIONALIDAD - DETECCIÓN DE ELIMINACIÓN DE SEGMENTOS:\nTambién debes detectar cuando el usuario quiere eliminar segmentos de un elemento en el timeline.\nEsto implica eliminar porciones específicas de un video, audio, texto o imagen según los tiempos indicados.\n\nEjemplos de solicitudes para eliminar segmentos:\n- \"Elimina el segmento entre los segundos 2 y 5 del video\"\n- \"Recorta la parte del video que va del segundo 10 al 13\"\n- \"Quiero quitar el trozo entre 25 y 30 segundos\"\n- \"Corta los segmentos 2-5, 10-13 y 25-30\"\n- \"Elimina estas partes del video: 2 a 5, 10 a 13, y 25 a 30 segundos\"\n- \"Quita estos fragmentos: 2-5s, 10-13s, 25-30s\"\n\nFUNCIONALIDAD - COMPACTACIÓN DEL TIMELINE:\nTambién puedes detectar cuando el usuario quiere compactar o optimizar el timeline, eliminando\nespacios vacíos entre clips o elementos para que el video sea más fluido y continuo.\n\nEjemplos de solicitudes para compactar el timeline:\n- \"Compacta el timeline\"\n- \"Elimina los espacios vacíos\"\n- \"Optimiza el timeline\"\n- \"Quita los huecos entre clips\"\n- \"Compacta todo\"\n- \"Junta los clips\"\n- \"Quiero eliminar los espacios entre elementos\"\n- \"Necesito que no haya espacios entre los elementos\"\n- \"Comprime el timeline\"\n\nNUEVA FUNCIONALIDAD - RECORTE INTELIGENTE:\nTambién puedes detectar cuando el usuario quiere realizar un recorte inteligente del video,\nanalizando la transcripción para identificar automáticamente qué partes mantener y cuáles eliminar.\n\nEjemplos de solicitudes para recorte inteligente:\n- \"Haz un recorte inteligente\"\n- \"Analiza el video y recorta las partes innecesarias\"\n- \"Recorta inteligentemente el video\"\n- \"Puedes hacer un smart trim\"\n- \"Elimina las partes innecesarias del video\"\n- \"Quiero que analices y recortes el video\"\n- \"Hazme un recorte automático\"\n- \"Recorta automáticamente el video\"\n- \"Smart trim\"\n- \"Elimina las partes redundantes\"\n\nCuando detectes que el usuario quiere eliminar segmentos, debes identificar los tiempos de inicio y fin de cada segmento a eliminar.\nEl formato para los segmentos debe ser un array de objetos con startTime y endTime en segundos.\n\nAdicionalmente, el usuario puede adjuntar imágenes a sus mensajes, que aparecerán con el formato [IMAGEN: URL_de_la_imagen].\nNOTA IMPORTANTE: No siempre que un usuario adjunta una imagen quiere agregarla al video. Solo debes detectar la intención\nde agregar la imagen si el usuario lo indica explícitamente con frases como \"agrega esta imagen\", \"pon esta imagen en el video\", etc.\nSi el usuario solo envía una imagen sin texto o con un texto que no indica claramente su intención de agregarla,\nNO debes sugerir agregarla automáticamente.\n\nCRUCIAL: Es EXTREMADAMENTE importante que analices cuidadosamente el lenguaje natural para detectar:\n1. Si realmente quiere agregar la imagen o eliminar segmentos (confianza alta)\n2. El tiempo exacto donde quiere agregarlo o los segmentos a eliminar (segundos iniciales y finales)\n3. Si quiere compactar el timeline (eliminar espacios vacíos)\n4. Si quiere hacer un recorte inteligente del video\n\nEjemplos de tiempos que debes detectar:\n- \"agrega esta imagen en el segundo 10\" → startTime: 10, endTime: 15\n- \"pon la imagen del segundo 5 al 8\" → startTime: 5, endTime: 8\n- \"quiero esta imagen entre los segundos 3 y 7\" → startTime: 3, endTime: 7\n- \"agrega la imagen al inicio\" → startTime: 0, endTime: 5\n- \"la imagen va al final\" → startTime: [duración-5], endTime: [duración]\n\nPara subtítulos, detecta si el usuario quiere:\n- Subtítulos agrupados (por defecto): groupWords: true\n- Subtítulos completos sin dividir: groupWords: false\n- Subtítulos en un rango de tiempo específico: startTime y endTime\n\nCuando detectes una solicitud para agregar contenido, analiza:\n1. Tipo de elemento: texto, imagen, video, subtitles o segments (para eliminar segmentos)\n2. Contenido (para texto)\n3. Color (si se menciona)\n4. Ubicación temporal (tiempo de inicio y fin en segundos) ← CRUCIAL\n5. URL de la imagen (si se proporcionó en el mensaje)\n6. Nivel de confianza en tu interpretación (de 0.0 a 1.0)\n7. Para subtítulos: si deben agruparse o no (groupWords)\n8. Para eliminar segmentos: un array de objetos con startTime y endTime para cada segmento\n9. Para compactar: simplemente detectar la intención (type: \"compact\")\n10. Para recorte inteligente: simplemente detectar la intención (type: \"smartTrim\")\n\nPara subtítulos, si el usuario no dice nada, asume que deben durar del segundo 0 al segundo 10000000 (final del video) y que deben estar agrupados, no preguntes si agrupados o no, asume que si siempre. Tambien asume que son los subtitulos generados automaticamente asi que responde siempre que el user pida subtitulos con mensajes de \"Subtitulos agregados con exito o algo por ele estilo, breve y conciso.\".\n\nLos elementos que se pueden agregar tienen esta estructura general:\n- Texto: { type: \"text\", content: \"texto\", color: \"#color\", startTime: X, endTime: Y }\n- Imagen: { type: \"image\", url: \"url_de_la_imagen\", startTime: X, endTime: Y }\n- Video: { type: \"video\", startTime: X, endTime: Y }\n- Subtítulos: { type: \"subtitles\", groupWords: true/false, startTime: X, endTime: Y }\n- Eliminar segmentos: { type: \"segments\", segments: [{ startTime: X1, endTime: Y1 }, { startTime: X2, endTime: Y2 }, ...] }\n- Compactar timeline: { type: \"compact\" }\n- Recorte inteligente: { type: \"smartTrim\" }\n\nPD: Un elemento no puede duarar 0 segundos, como minimo 0,1. Si no te dicen el tiempo final, el elemento dura 5 segundos. No puedes decir -voy a agregar este elemento- y no dar true con high confidence, no te congradigas. Si el user no menciona el tiempo donde quiere agregar la imagen, preguntale al user en que tiempo quiere agregar la imagen. Si dice solo el tiempo de inicio, no le preguntes, asume que debe durar 5 segundos, no le preguntes, repito.`;\n// Función para analizar los tiempos de inicio y fin de una imagen a partir del mensaje del usuario\nfunction extractImageTimesFromMessage(messageContent) {\n    let startTime = 0;\n    let endTime = 5;\n    if (!messageContent) return {\n        startTime,\n        endTime\n    };\n    console.log(\"Analizando mensaje para tiempos:\", messageContent);\n    // Buscar referencias al tiempo inicial\n    const startTimePatterns = [\n        /en el segundo (\\d+)/i,\n        /desde el segundo (\\d+)/i,\n        /a partir del segundo (\\d+)/i,\n        /comenzando en el segundo (\\d+)/i,\n        /desde el minuto (\\d+)/i,\n        /en el minuto (\\d+)/i,\n        /entre los segundos (\\d+) y/i,\n        /del segundo (\\d+) al/i,\n        /empezando en (\\d+)/i,\n        /segundo (\\d+)/i,\n        /en (\\d+) segundos/i,\n        /en el (\\d+)/i\n    ];\n    // Buscar referencias al tiempo final\n    const endTimePatterns = [\n        /hasta el segundo (\\d+)/i,\n        /al segundo (\\d+)/i,\n        /terminando en el segundo (\\d+)/i,\n        /hasta el minuto (\\d+)/i,\n        /entre los segundos \\d+ y (\\d+)/i,\n        /del segundo \\d+ al (\\d+)/i,\n        /por (\\d+) segundos/i,\n        /durante (\\d+) segundos/i\n    ];\n    // Buscar palabras clave especiales\n    const isAtStart = /\\b(al inicio|al principio|al comienzo)\\b/i.test(messageContent);\n    const isAtEnd = /\\b(al final|al término|al acabar)\\b/i.test(messageContent);\n    // Procesar patrones de tiempo inicial\n    let startTimeMatch = false;\n    for (const pattern of startTimePatterns){\n        const match = messageContent.match(pattern);\n        if (match && match[1]) {\n            startTimeMatch = true;\n            // Si es referencia a minutos, convertir a segundos\n            startTime = pattern.toString().includes(\"minuto\") ? parseInt(match[1]) * 60 : parseInt(match[1]);\n            console.log(`Patrón de tiempo inicial coincidió: ${pattern}, valor: ${startTime}`);\n            break;\n        }\n    }\n    // Procesar patrones de tiempo final\n    let endTimeMatch = false;\n    for (const pattern of endTimePatterns){\n        const match = messageContent.match(pattern);\n        if (match && match[1]) {\n            endTimeMatch = true;\n            if (pattern.toString().includes(\"por\") || pattern.toString().includes(\"durante\")) {\n                // Es una duración relativa, sumar al tiempo inicial\n                endTime = startTime + parseInt(match[1]);\n            } else {\n                // Es un tiempo absoluto\n                endTime = pattern.toString().includes(\"minuto\") ? parseInt(match[1]) * 60 : parseInt(match[1]);\n            }\n            console.log(`Patrón de tiempo final coincidió: ${pattern}, valor: ${endTime}`);\n            break;\n        }\n    }\n    // Si se menciona \"al inicio\", establecer tiempo a 0\n    if (isAtStart) {\n        startTime = 0;\n        endTime = 5; // Por defecto 5 segundos de duración\n        console.log(\"Se detect\\xf3 'al inicio': startTime=0, endTime=5\");\n    }\n    // Si se menciona \"al final\", establecer valores relativos al final\n    // Nota: El valor real se ajustará en el cliente según la duración\n    if (isAtEnd) {\n        startTime = -1; // Código especial para \"final - 5 segundos\"\n        endTime = -1; // Código especial para \"final\"\n        console.log(\"Se detect\\xf3 'al final': startTime=-1, endTime=-1\");\n    }\n    // Si se detectó un tiempo inicial pero no final, establecer duración predeterminada\n    if (startTimeMatch && !endTimeMatch) {\n        endTime = startTime + 5;\n        console.log(`Se estableció tiempo final automático: ${endTime} (startTime + 5)`);\n    }\n    // Si no se detectó tiempo final pero sí inicial, establecer una duración predeterminada\n    if (startTime > 0 && endTime === 5 && startTime !== 0) {\n        endTime = startTime + 5;\n        console.log(`Se ajustó tiempo final: ${endTime} (startTime + 5)`);\n    }\n    console.log(`Tiempos finales extraídos: startTime=${startTime}, endTime=${endTime}`);\n    return {\n        startTime,\n        endTime\n    };\n}\n// Nueva función para manejar los mensajes del chat de la timeline\nasync function handleTimelineChat(message, selectedItems, selectedText, urlAnalysis, showScreenshotDetection, applyTransitionDetection) {\n    try {\n        // Limitar la cantidad de elementos seleccionados para prevenir sobrecarga\n        const limitedItems = selectedItems.slice(0, 5); // Solo considerar hasta 5 elementos\n        // Función para sanear objetos complejos, eliminando campos innecesarios y limitando profundidad\n        const sanitizeObject = (obj, depth = 0, maxDepth = 3)=>{\n            if (depth >= maxDepth) return \"[Objeto anidado]\";\n            if (obj === null || obj === undefined) return obj;\n            // Para tipos primitivos, devolver directamente\n            if (typeof obj !== \"object\") return obj;\n            // Para arrays, aplicar sanitización a cada elemento hasta cierto límite\n            if (Array.isArray(obj)) {\n                return obj.slice(0, 10).map((item)=>sanitizeObject(item, depth + 1, maxDepth));\n            }\n            // Para objetos, extraer solo campos esenciales\n            const result = {};\n            const essentialFields = [\n                \"id\",\n                \"type\",\n                \"display\",\n                \"text\",\n                \"content\",\n                \"name\",\n                \"details\",\n                \"src\",\n                \"from\",\n                \"to\",\n                \"width\",\n                \"height\"\n            ];\n            for (const field of essentialFields){\n                if (field in obj) {\n                    result[field] = sanitizeObject(obj[field], depth + 1, maxDepth);\n                }\n            }\n            return result;\n        };\n        // Sanear los elementos seleccionados\n        const sanitizedItems = limitedItems.map((item)=>sanitizeObject(item));\n        // Extraer el contenido relevante de los elementos seleccionados de manera segura\n        const extractedContent = sanitizedItems.map((item)=>{\n            try {\n                if (item.text) return String(item.text).slice(0, 100);\n                if (item.details?.text) return String(item.details.text).slice(0, 100);\n                if (item.name) return String(item.name).slice(0, 100);\n                if (item.content) return String(item.content).slice(0, 100);\n                if (typeof item === \"string\") return item.slice(0, 100);\n                return JSON.stringify(sanitizeObject(item, 0, 2)).slice(0, 100);\n            } catch (err) {\n                console.error(\"Error al extraer contenido de item:\", err);\n                return \"[Error al procesar elemento]\";\n            }\n        }).join(\"\\n\").slice(0, 500); // Limitar longitud total a 500 caracteres\n        // Limitar también selectedText\n        const limitedSelectedText = selectedText ? String(selectedText).slice(0, 300) : \"\";\n        // Incluir información sobre las URLs detectadas en el mensaje del sistema\n        let systemPrompt = \"Eres un asistente de edici\\xf3n de video que ayuda a analizar y mejorar los elementos seleccionados en una timeline. Responde de manera concisa y \\xfatil.\";\n        // Si hay URLs en el texto, añadir información sobre ellas (limitada)\n        if (urlAnalysis && urlAnalysis.containsURLs) {\n            const limitedUrls = (urlAnalysis.urls || []).slice(0, 3).join(\"\\n\"); // Limitar a 3 URLs\n            systemPrompt += `\\n\\nEl texto seleccionado contiene URLs, incluyendo: ${limitedUrls}`;\n            // Informar que las capturas pueden ser aplicadas a la timeline (versión condensada)\n            systemPrompt += \"\\n\\nHay capturas disponibles. El usuario puede pedir a\\xf1adirlas a la timeline.\";\n            // Añadir información resumida sobre la detección\n            if (showScreenshotDetection && showScreenshotDetection.detected) {\n                systemPrompt += \" El usuario parece interesado en estas capturas.\";\n            }\n        }\n        // Añadir información sobre la detección de transiciones si existe\n        if (applyTransitionDetection && applyTransitionDetection.detected) {\n            systemPrompt += \"\\n\\nEl usuario ha solicitado aplicar una transici\\xf3n a la timeline. Informa que la transici\\xf3n se ha aplicado correctamente en la timeline del video.\";\n        }\n        // Limitamos mensaje del usuario\n        const limitedMessage = message.slice(0, 200);\n        console.log(\"Longitud de systemPrompt:\", systemPrompt.length);\n        console.log(\"Longitud de extractedContent:\", extractedContent.length);\n        console.log(\"Longitud de limitedSelectedText:\", limitedSelectedText.length);\n        console.log(\"Longitud de limitedMessage:\", limitedMessage.length);\n        const chatResponse = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: `Elementos seleccionados:\\n${extractedContent}\\n\\nTexto seleccionado: ${limitedSelectedText || extractedContent}\\n\\nMensaje del usuario: ${limitedMessage}`\n                }\n            ],\n            temperature: 0.7,\n            max_tokens: 300 // Reducir para ahorrar tokens\n        });\n        // Crear estructura con formato similar al de otras detecciones en la API\n        let screenshotData = null;\n        let transitionData = null;\n        if (urlAnalysis && urlAnalysis.containsURLs && showScreenshotDetection) {\n            // Simplificar la detección de capturas\n            screenshotData = {\n                detected: showScreenshotDetection.detected && showScreenshotDetection.confidence > 0.2,\n                confidence: showScreenshotDetection.confidence,\n                reason: showScreenshotDetection.reason,\n                urls: (urlAnalysis.urls || []).slice(0, 3),\n                screenshots: (urlAnalysis.screenshots || []).slice(0, 3) // Limitar a 3 capturas\n            };\n        }\n        // Añadir información sobre transiciones detectadas\n        if (applyTransitionDetection) {\n            transitionData = {\n                detected: applyTransitionDetection.detected && applyTransitionDetection.confidence > 0.2,\n                confidence: applyTransitionDetection.confidence,\n                reason: applyTransitionDetection.reason,\n                transitionPath: applyTransitionDetection.transitionPath || \"/transitions/fade-out.mov\"\n            };\n        }\n        return {\n            success: true,\n            response: chatResponse.choices[0].message.content,\n            usage: chatResponse.usage,\n            screenshotData: screenshotData,\n            transitionData: transitionData\n        };\n    } catch (error) {\n        console.error(\"Error en handleTimelineChat:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Error desconocido\"\n        };\n    }\n}\nasync function POST(req) {\n    try {\n        const body = await req.json();\n        console.log(\"Request body type:\", body.type);\n        // Verificar si es una solicitud del chat de la timeline\n        if (body.type === \"timeline_chat\") {\n            const { message, selectedItems, selectedText, urlAnalysis, showScreenshotDetection, applyTransitionDetection } = body;\n            // Registrar el tamaño de los datos recibidos para diagnóstico\n            console.log(\"Tama\\xf1o de datos recibidos:\");\n            console.log(\"- Mensaje:\", message?.length || 0, \"caracteres\");\n            console.log(\"- Elementos seleccionados:\", selectedItems?.length || 0, \"elementos\");\n            console.log(\"- Texto seleccionado:\", selectedText?.length || 0, \"caracteres\");\n            const response = await handleTimelineChat(message, selectedItems || [], selectedText || \"\", urlAnalysis, showScreenshotDetection, applyTransitionDetection);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n        }\n        // Extraer los mensajes del cuerpo de la solicitud\n        const { messages, lastImageUrl = \"\" } = body;\n        // Validar que se proporcionaron mensajes\n        if (!messages || !Array.isArray(messages)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Se requieren mensajes v\\xe1lidos\"\n            }, {\n                status: 400\n            });\n        }\n        // Limitar la cantidad de mensajes históricos para reducir tokens\n        const limitedMessages = messages.slice(-10); // Solo mantener los últimos 10 mensajes\n        // Limitar el tamaño de cada mensaje\n        const processedMessages = limitedMessages.map((msg)=>{\n            if (typeof msg.content === \"string\") {\n                return {\n                    ...msg,\n                    content: msg.content.slice(0, 500) // Limitar cada mensaje a 500 caracteres\n                };\n            }\n            return msg;\n        });\n        // Extraer la URL de la imagen si está presente en el último mensaje\n        let imageUrl = \"\";\n        const lastUserMessage = [\n            ...processedMessages\n        ].reverse().find((m)=>m.role === \"user\");\n        if (lastUserMessage && typeof lastUserMessage.content === \"string\") {\n            // Buscar URL de imagen explícita\n            const imageMatch = lastUserMessage.content.match(/\\[IMAGEN: (.*?)\\]/);\n            if (imageMatch && imageMatch[1]) {\n                imageUrl = imageMatch[1];\n            } else if (lastUserMessage.content.includes(\"[IMAGEN_ADJUNTA]\")) {\n                imageUrl = \"imagen_adjunta_por_el_usuario.jpg\";\n            }\n        }\n        // Si no hay imagen en el mensaje actual pero hay una última imagen URL, usarla en caso\n        // de que el usuario esté haciendo referencia a ella\n        const hasLastImageReference = !imageUrl && lastImageUrl && lastUserMessage && typeof lastUserMessage.content === \"string\" && (/la\\s+imagen/i.test(lastUserMessage.content) || /esta\\s+imagen/i.test(lastUserMessage.content) || /imagen\\s+(?:anterior|previa|compartida|subida)/i.test(lastUserMessage.content));\n        // Si parece que el usuario está haciendo referencia a una imagen anterior,\n        // considerar usar esa URL\n        if (hasLastImageReference) {\n            console.log(\"Se detect\\xf3 referencia a una imagen anterior\");\n            // Usar el mismo identificador especial\n            imageUrl = \"imagen_adjunta_por_el_usuario.jpg\";\n        }\n        // Verificar si el usuario está solicitando compactar el timeline\n        const isCompactRequest = lastUserMessage && typeof lastUserMessage.content === \"string\" && /compact[a|ar]|elimina[r]?\\s+(los)?\\s*espacios|optimiza[r]?|quita[r]?\\s+(los)?\\s*huecos|junta[r]?\\s+(los)?\\s*clips|comprim[e|ir]/i.test(lastUserMessage.content);\n        // Verificar si el usuario está solicitando un recorte inteligente\n        const isSmartTrimRequest = lastUserMessage && typeof lastUserMessage.content === \"string\" && /recorte\\s+inteligente|smart\\s*trim|analiza\\s+(?:y\\s+)?recort[a|e]|recort[a|e]\\s+(?:inteligentemente|automáticamente)|elimina\\s+(?:partes|segmentos)\\s+(?:innecesari[os|as]|redundantes)/i.test(lastUserMessage.content);\n        // Crear una versión reducida de las instrucciones del sistema\n        const compactSystemInstructions = `\nEres un asistente especializado en edición de video. Tu tarea es detectar cuando los usuarios quieren:\n1. Agregar texto, imagen, video o subtítulos al timeline\n2. Eliminar segmentos de un elemento existente\n3. Compactar el timeline eliminando espacios vacíos\n4. Realizar recorte inteligente del video\n\nResponde de manera breve y concisa. Si detectas una solicitud para agregar elementos o realizar acciones, incluye la información estructurada necesaria entre <element_data> y </element_data>.`;\n        // Añadir el mensaje del sistema al inicio para dar contexto, con versión reducida\n        const conversationWithSystem = [\n            {\n                role: \"system\",\n                content: compactSystemInstructions\n            },\n            ...processedMessages,\n            {\n                role: \"system\",\n                content: `\n        Después de responder, evalúa si el usuario solicita agregar elementos o ejecutar acciones con confianza >0.7.\n        Si es así, incluye datos estructurados entre <element_data> y </element_data> siguiendo el formato:\n        ${imageUrl ? `El usuario ha compartido una imagen: ${imageUrl}. Solo sugiérela si lo pide explícitamente.` : `Si el usuario menciona \"esta imagen\", asume que se refiere a una imagen anterior.`}\n        IMPORTANTE: Mantén respuestas concisas y no menciones esta estructura en tu respuesta.\n        `\n            }\n        ];\n        // Solo registrar información reducida para depuración\n        console.log(\"=== LONGITUD DEL PROMPT ENVIADO A LA IA ===\");\n        console.log(\"N\\xfamero de mensajes:\", conversationWithSystem.length);\n        console.log(\"Longitud del mensaje del sistema:\", compactSystemInstructions.length);\n        console.log(\"==============================\");\n        // Llamar a la API de OpenAI con modelo más económico\n        const response = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            messages: conversationWithSystem,\n            temperature: 0.7,\n            max_tokens: 600,\n            top_p: 0.95,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0\n        });\n        // Obtener la respuesta generada\n        const responseContent = response.choices[0].message.content || \"\";\n        // Registrar información de uso de tokens\n        if (response.usage) {\n            console.log(\"=== USO DE TOKENS ===\");\n            console.log(`Entrada: ${response.usage.prompt_tokens}`);\n            console.log(`Salida: ${response.usage.completion_tokens}`);\n            console.log(`Total: ${response.usage.total_tokens}`);\n            console.log(\"====================\");\n        }\n        // Extraer los datos del elemento si existen\n        const elementDataMatch = responseContent.match(/<element_data>([\\s\\S]*?)<\\/element_data>/);\n        // Preparar la respuesta al cliente\n        let cleanedResponse = responseContent.replace(/<element_data>[\\s\\S]*?<\\/element_data>/g, \"\").trim();\n        let elementData = null;\n        if (elementDataMatch && elementDataMatch[1]) {\n            try {\n                elementData = JSON.parse(elementDataMatch[1].trim());\n                // Verificar que el formato de los datos es correcto\n                if (elementData && elementData.detected === true && elementData.element) {\n                    // Asegurarse de que los campos obligatorios existen\n                    if (!elementData.element.type || elementData.element.type === \"text\" && !elementData.element.content) {\n                        console.warn(\"Datos de elemento incompletos:\", elementData);\n                        // Convertir a formato \"no detectado\" si faltan campos obligatorios\n                        elementData = {\n                            detected: false,\n                            confidence: elementData.confidence || 0\n                        };\n                    }\n                    // Si hay una imagen en el mensaje pero no se específica en el elemento, agregarla\n                    if (imageUrl && elementData.element.type === \"image\" && !elementData.element.url) {\n                        elementData.element.url = imageUrl;\n                    }\n                    // Normalizar tipos de datos\n                    if (elementData.element.startTime) elementData.element.startTime = Number(elementData.element.startTime);\n                    if (elementData.element.endTime) elementData.element.endTime = Number(elementData.element.endTime);\n                }\n                // Si hay una detección directa de solicitud de compactación pero la IA no la detectó\n                if (isCompactRequest && (!elementData || !elementData.detected || elementData.element?.type !== \"compact\")) {\n                    console.log(\"Generando elemento de compactaci\\xf3n basado en la detecci\\xf3n directa\");\n                    elementData = {\n                        detected: true,\n                        confidence: 0.95,\n                        element: {\n                            type: \"compact\"\n                        },\n                        reasoning: \"Detectado basado en el an\\xe1lisis de patrones de solicitud directa de compactaci\\xf3n\"\n                    };\n                }\n                // Si hay una detección directa de solicitud de recorte inteligente pero la IA no lo detectó\n                if (isSmartTrimRequest && (!elementData || !elementData.detected || elementData.element?.type !== \"smartTrim\")) {\n                    console.log(\"Generando elemento de recorte inteligente basado en la detecci\\xf3n directa\");\n                    elementData = {\n                        detected: true,\n                        confidence: 0.95,\n                        element: {\n                            type: \"smartTrim\"\n                        },\n                        reasoning: \"Detectado basado en el an\\xe1lisis de patrones de solicitud directa de recorte inteligente\"\n                    };\n                }\n            } catch (e) {\n                console.error(\"Error parsing element data JSON:\", e);\n                // Si hay una imagen compartida, crear un elemento para ella a pesar del error\n                if (imageUrl && lastUserMessage && typeof lastUserMessage.content === \"string\") {\n                    elementData = {\n                        detected: true,\n                        confidence: 0.9,\n                        element: {\n                            type: \"image\",\n                            url: imageUrl,\n                            startTime: 0,\n                            endTime: 5\n                        }\n                    };\n                } else {\n                    elementData = {\n                        detected: false,\n                        confidence: 0\n                    };\n                }\n            }\n        } else {\n            // Si no se detectó ningún elemento pero hay una imagen, verificar si el usuario quiere agregarla\n            if (imageUrl && lastUserMessage && typeof lastUserMessage.content === \"string\" && /agregar|añadir|colocar|poner|usar|insertar/i.test(lastUserMessage.content) && /imagen/i.test(lastUserMessage.content)) {\n                elementData = {\n                    detected: true,\n                    confidence: 0.9,\n                    element: {\n                        type: \"image\",\n                        url: imageUrl,\n                        startTime: 0,\n                        endTime: 5\n                    }\n                };\n            } else {\n                elementData = {\n                    detected: false,\n                    confidence: 0\n                };\n            }\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: {\n                role: \"assistant\",\n                content: cleanedResponse\n            },\n            elementData: elementData,\n            usage: response.usage\n        });\n    } catch (error) {\n        console.error(\"Error processing request:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error occurred\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/ai/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai%2Froute&page=%2Fapi%2Fai%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai%2Froute.ts&appDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdavid%5CDesktop%5Cai-video-agent%5Creact-video-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();