"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@designcombo";
exports.ids = ["vendor-chunks/@designcombo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@designcombo/events/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@designcombo/events/dist/index.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dispatch: () => (/* binding */ sr),\n/* harmony export */   filter: () => (/* binding */ or),\n/* harmony export */   subject: () => (/* binding */ ir)\n/* harmony export */ });\nvar E = function(e, t) {\n    return E = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(r, n) {\n        r.__proto__ = n;\n    } || function(r, n) {\n        for(var o in n)Object.prototype.hasOwnProperty.call(n, o) && (r[o] = n[o]);\n    }, E(e, t);\n};\nfunction b(e, t) {\n    if (typeof t != \"function\" && t !== null) throw new TypeError(\"Class extends value \" + String(t) + \" is not a constructor or null\");\n    E(e, t);\n    function r() {\n        this.constructor = e;\n    }\n    e.prototype = t === null ? Object.create(t) : (r.prototype = t.prototype, new r());\n}\nfunction g(e) {\n    var t = typeof Symbol == \"function\" && Symbol.iterator, r = t && e[t], n = 0;\n    if (r) return r.call(e);\n    if (e && typeof e.length == \"number\") return {\n        next: function() {\n            return e && n >= e.length && (e = void 0), {\n                value: e && e[n++],\n                done: !e\n            };\n        }\n    };\n    throw new TypeError(t ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction O(e, t) {\n    var r = typeof Symbol == \"function\" && e[Symbol.iterator];\n    if (!r) return e;\n    var n = r.call(e), o, i = [], s;\n    try {\n        for(; (t === void 0 || t-- > 0) && !(o = n.next()).done;)i.push(o.value);\n    } catch (u) {\n        s = {\n            error: u\n        };\n    } finally{\n        try {\n            o && !o.done && (r = n.return) && r.call(n);\n        } finally{\n            if (s) throw s.error;\n        }\n    }\n    return i;\n}\nfunction x(e, t, r) {\n    if (r || arguments.length === 2) for(var n = 0, o = t.length, i; n < o; n++)(i || !(n in t)) && (i || (i = Array.prototype.slice.call(t, 0, n)), i[n] = t[n]);\n    return e.concat(i || Array.prototype.slice.call(t));\n}\nfunction l(e) {\n    return typeof e == \"function\";\n}\nfunction D(e) {\n    var t = function(n) {\n        Error.call(n), n.stack = new Error().stack;\n    }, r = e(t);\n    return r.prototype = Object.create(Error.prototype), r.prototype.constructor = r, r;\n}\nvar m = D(function(e) {\n    return function(r) {\n        e(this), this.message = r ? r.length + ` errors occurred during unsubscription:\n` + r.map(function(n, o) {\n            return o + 1 + \") \" + n.toString();\n        }).join(`\n  `) : \"\", this.name = \"UnsubscriptionError\", this.errors = r;\n    };\n});\nfunction P(e, t) {\n    if (e) {\n        var r = e.indexOf(t);\n        0 <= r && e.splice(r, 1);\n    }\n}\nvar S = function() {\n    function e(t) {\n        this.initialTeardown = t, this.closed = !1, this._parentage = null, this._finalizers = null;\n    }\n    return e.prototype.unsubscribe = function() {\n        var t, r, n, o, i;\n        if (!this.closed) {\n            this.closed = !0;\n            var s = this._parentage;\n            if (s) if (this._parentage = null, Array.isArray(s)) try {\n                for(var u = g(s), c = u.next(); !c.done; c = u.next()){\n                    var f = c.value;\n                    f.remove(this);\n                }\n            } catch (a) {\n                t = {\n                    error: a\n                };\n            } finally{\n                try {\n                    c && !c.done && (r = u.return) && r.call(u);\n                } finally{\n                    if (t) throw t.error;\n                }\n            }\n            else s.remove(this);\n            var p = this.initialTeardown;\n            if (l(p)) try {\n                p();\n            } catch (a) {\n                i = a instanceof m ? a.errors : [\n                    a\n                ];\n            }\n            var T = this._finalizers;\n            if (T) {\n                this._finalizers = null;\n                try {\n                    for(var d = g(T), h = d.next(); !h.done; h = d.next()){\n                        var z = h.value;\n                        try {\n                            U(z);\n                        } catch (a) {\n                            i = i ?? [], a instanceof m ? i = x(x([], O(i)), O(a.errors)) : i.push(a);\n                        }\n                    }\n                } catch (a) {\n                    n = {\n                        error: a\n                    };\n                } finally{\n                    try {\n                        h && !h.done && (o = d.return) && o.call(d);\n                    } finally{\n                        if (n) throw n.error;\n                    }\n                }\n            }\n            if (i) throw new m(i);\n        }\n    }, e.prototype.add = function(t) {\n        var r;\n        if (t && t !== this) if (this.closed) U(t);\n        else {\n            if (t instanceof e) {\n                if (t.closed || t._hasParent(this)) return;\n                t._addParent(this);\n            }\n            (this._finalizers = (r = this._finalizers) !== null && r !== void 0 ? r : []).push(t);\n        }\n    }, e.prototype._hasParent = function(t) {\n        var r = this._parentage;\n        return r === t || Array.isArray(r) && r.includes(t);\n    }, e.prototype._addParent = function(t) {\n        var r = this._parentage;\n        this._parentage = Array.isArray(r) ? (r.push(t), r) : r ? [\n            r,\n            t\n        ] : t;\n    }, e.prototype._removeParent = function(t) {\n        var r = this._parentage;\n        r === t ? this._parentage = null : Array.isArray(r) && P(r, t);\n    }, e.prototype.remove = function(t) {\n        var r = this._finalizers;\n        r && P(r, t), t instanceof e && t._removeParent(this);\n    }, e.EMPTY = function() {\n        var t = new e();\n        return t.closed = !0, t;\n    }(), e;\n}(), M = S.EMPTY;\nfunction R(e) {\n    return e instanceof S || e && \"closed\" in e && l(e.remove) && l(e.add) && l(e.unsubscribe);\n}\nfunction U(e) {\n    l(e) ? e() : e.unsubscribe();\n}\nvar Y = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: void 0,\n    useDeprecatedSynchronousErrorHandling: !1,\n    useDeprecatedNextContext: !1\n}, B = {\n    setTimeout: function(e, t) {\n        for(var r = [], n = 2; n < arguments.length; n++)r[n - 2] = arguments[n];\n        return setTimeout.apply(void 0, x([\n            e,\n            t\n        ], O(r)));\n    },\n    clearTimeout: function(e) {\n        var t = B.delegate;\n        return ((t == null ? void 0 : t.clearTimeout) || clearTimeout)(e);\n    },\n    delegate: void 0\n};\nfunction L(e) {\n    B.setTimeout(function() {\n        throw e;\n    });\n}\nfunction I() {}\nfunction y(e) {\n    e();\n}\nvar A = function(e) {\n    b(t, e);\n    function t(r) {\n        var n = e.call(this) || this;\n        return n.isStopped = !1, r ? (n.destination = r, R(r) && r.add(n)) : n.destination = J, n;\n    }\n    return t.create = function(r, n, o) {\n        return new j(r, n, o);\n    }, t.prototype.next = function(r) {\n        this.isStopped || this._next(r);\n    }, t.prototype.error = function(r) {\n        this.isStopped || (this.isStopped = !0, this._error(r));\n    }, t.prototype.complete = function() {\n        this.isStopped || (this.isStopped = !0, this._complete());\n    }, t.prototype.unsubscribe = function() {\n        this.closed || (this.isStopped = !0, e.prototype.unsubscribe.call(this), this.destination = null);\n    }, t.prototype._next = function(r) {\n        this.destination.next(r);\n    }, t.prototype._error = function(r) {\n        try {\n            this.destination.error(r);\n        } finally{\n            this.unsubscribe();\n        }\n    }, t.prototype._complete = function() {\n        try {\n            this.destination.complete();\n        } finally{\n            this.unsubscribe();\n        }\n    }, t;\n}(S), V = Function.prototype.bind;\nfunction _(e, t) {\n    return V.call(e, t);\n}\nvar q = function() {\n    function e(t) {\n        this.partialObserver = t;\n    }\n    return e.prototype.next = function(t) {\n        var r = this.partialObserver;\n        if (r.next) try {\n            r.next(t);\n        } catch (n) {\n            v(n);\n        }\n    }, e.prototype.error = function(t) {\n        var r = this.partialObserver;\n        if (r.error) try {\n            r.error(t);\n        } catch (n) {\n            v(n);\n        }\n        else v(t);\n    }, e.prototype.complete = function() {\n        var t = this.partialObserver;\n        if (t.complete) try {\n            t.complete();\n        } catch (r) {\n            v(r);\n        }\n    }, e;\n}(), j = function(e) {\n    b(t, e);\n    function t(r, n, o) {\n        var i = e.call(this) || this, s;\n        if (l(r) || !r) s = {\n            next: r ?? void 0,\n            error: n ?? void 0,\n            complete: o ?? void 0\n        };\n        else {\n            var u;\n            i && Y.useDeprecatedNextContext ? (u = Object.create(r), u.unsubscribe = function() {\n                return i.unsubscribe();\n            }, s = {\n                next: r.next && _(r.next, u),\n                error: r.error && _(r.error, u),\n                complete: r.complete && _(r.complete, u)\n            }) : s = r;\n        }\n        return i.destination = new q(s), i;\n    }\n    return t;\n}(A);\nfunction v(e) {\n    L(e);\n}\nfunction G(e) {\n    throw e;\n}\nvar J = {\n    closed: !0,\n    next: I,\n    error: G,\n    complete: I\n}, K = function() {\n    return typeof Symbol == \"function\" && Symbol.observable || \"@@observable\";\n}();\nfunction Q(e) {\n    return e;\n}\nfunction W(e) {\n    return e.length === 0 ? Q : e.length === 1 ? e[0] : function(r) {\n        return e.reduce(function(n, o) {\n            return o(n);\n        }, r);\n    };\n}\nvar C = function() {\n    function e(t) {\n        t && (this._subscribe = t);\n    }\n    return e.prototype.lift = function(t) {\n        var r = new e();\n        return r.source = this, r.operator = t, r;\n    }, e.prototype.subscribe = function(t, r, n) {\n        var o = this, i = Z(t) ? t : new j(t, r, n);\n        return y(function() {\n            var s = o, u = s.operator, c = s.source;\n            i.add(u ? u.call(i, c) : c ? o._subscribe(i) : o._trySubscribe(i));\n        }), i;\n    }, e.prototype._trySubscribe = function(t) {\n        try {\n            return this._subscribe(t);\n        } catch (r) {\n            t.error(r);\n        }\n    }, e.prototype.forEach = function(t, r) {\n        var n = this;\n        return r = F(r), new r(function(o, i) {\n            var s = new j({\n                next: function(u) {\n                    try {\n                        t(u);\n                    } catch (c) {\n                        i(c), s.unsubscribe();\n                    }\n                },\n                error: i,\n                complete: o\n            });\n            n.subscribe(s);\n        });\n    }, e.prototype._subscribe = function(t) {\n        var r;\n        return (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(t);\n    }, e.prototype[K] = function() {\n        return this;\n    }, e.prototype.pipe = function() {\n        for(var t = [], r = 0; r < arguments.length; r++)t[r] = arguments[r];\n        return W(t)(this);\n    }, e.prototype.toPromise = function(t) {\n        var r = this;\n        return t = F(t), new t(function(n, o) {\n            var i;\n            r.subscribe(function(s) {\n                return i = s;\n            }, function(s) {\n                return o(s);\n            }, function() {\n                return n(i);\n            });\n        });\n    }, e.create = function(t) {\n        return new e(t);\n    }, e;\n}();\nfunction F(e) {\n    var t;\n    return (t = e ?? Y.Promise) !== null && t !== void 0 ? t : Promise;\n}\nfunction X(e) {\n    return e && l(e.next) && l(e.error) && l(e.complete);\n}\nfunction Z(e) {\n    return e && e instanceof A || X(e) && R(e);\n}\nfunction $(e) {\n    return l(e == null ? void 0 : e.lift);\n}\nfunction N(e) {\n    return function(t) {\n        if ($(t)) return t.lift(function(r) {\n            try {\n                return e(r, this);\n            } catch (n) {\n                this.error(n);\n            }\n        });\n        throw new TypeError(\"Unable to lift unknown Observable type\");\n    };\n}\nfunction rr(e, t, r, n, o) {\n    return new tr(e, t, r, n, o);\n}\nvar tr = function(e) {\n    b(t, e);\n    function t(r, n, o, i, s, u) {\n        var c = e.call(this, r) || this;\n        return c.onFinalize = s, c.shouldUnsubscribe = u, c._next = n ? function(f) {\n            try {\n                n(f);\n            } catch (p) {\n                r.error(p);\n            }\n        } : e.prototype._next, c._error = i ? function(f) {\n            try {\n                i(f);\n            } catch (p) {\n                r.error(p);\n            } finally{\n                this.unsubscribe();\n            }\n        } : e.prototype._error, c._complete = o ? function() {\n            try {\n                o();\n            } catch (f) {\n                r.error(f);\n            } finally{\n                this.unsubscribe();\n            }\n        } : e.prototype._complete, c;\n    }\n    return t.prototype.unsubscribe = function() {\n        var r;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var n = this.closed;\n            e.prototype.unsubscribe.call(this), !n && ((r = this.onFinalize) === null || r === void 0 || r.call(this));\n        }\n    }, t;\n}(A), er = D(function(e) {\n    return function() {\n        e(this), this.name = \"ObjectUnsubscribedError\", this.message = \"object unsubscribed\";\n    };\n}), H = function(e) {\n    b(t, e);\n    function t() {\n        var r = e.call(this) || this;\n        return r.closed = !1, r.currentObservers = null, r.observers = [], r.isStopped = !1, r.hasError = !1, r.thrownError = null, r;\n    }\n    return t.prototype.lift = function(r) {\n        var n = new k(this, this);\n        return n.operator = r, n;\n    }, t.prototype._throwIfClosed = function() {\n        if (this.closed) throw new er();\n    }, t.prototype.next = function(r) {\n        var n = this;\n        y(function() {\n            var o, i;\n            if (n._throwIfClosed(), !n.isStopped) {\n                n.currentObservers || (n.currentObservers = Array.from(n.observers));\n                try {\n                    for(var s = g(n.currentObservers), u = s.next(); !u.done; u = s.next()){\n                        var c = u.value;\n                        c.next(r);\n                    }\n                } catch (f) {\n                    o = {\n                        error: f\n                    };\n                } finally{\n                    try {\n                        u && !u.done && (i = s.return) && i.call(s);\n                    } finally{\n                        if (o) throw o.error;\n                    }\n                }\n            }\n        });\n    }, t.prototype.error = function(r) {\n        var n = this;\n        y(function() {\n            if (n._throwIfClosed(), !n.isStopped) {\n                n.hasError = n.isStopped = !0, n.thrownError = r;\n                for(var o = n.observers; o.length;)o.shift().error(r);\n            }\n        });\n    }, t.prototype.complete = function() {\n        var r = this;\n        y(function() {\n            if (r._throwIfClosed(), !r.isStopped) {\n                r.isStopped = !0;\n                for(var n = r.observers; n.length;)n.shift().complete();\n            }\n        });\n    }, t.prototype.unsubscribe = function() {\n        this.isStopped = this.closed = !0, this.observers = this.currentObservers = null;\n    }, Object.defineProperty(t.prototype, \"observed\", {\n        get: function() {\n            var r;\n            return ((r = this.observers) === null || r === void 0 ? void 0 : r.length) > 0;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), t.prototype._trySubscribe = function(r) {\n        return this._throwIfClosed(), e.prototype._trySubscribe.call(this, r);\n    }, t.prototype._subscribe = function(r) {\n        return this._throwIfClosed(), this._checkFinalizedStatuses(r), this._innerSubscribe(r);\n    }, t.prototype._innerSubscribe = function(r) {\n        var n = this, o = this, i = o.hasError, s = o.isStopped, u = o.observers;\n        return i || s ? M : (this.currentObservers = null, u.push(r), new S(function() {\n            n.currentObservers = null, P(u, r);\n        }));\n    }, t.prototype._checkFinalizedStatuses = function(r) {\n        var n = this, o = n.hasError, i = n.thrownError, s = n.isStopped;\n        o ? r.error(i) : s && r.complete();\n    }, t.prototype.asObservable = function() {\n        var r = new C();\n        return r.source = this, r;\n    }, t.create = function(r, n) {\n        return new k(r, n);\n    }, t;\n}(C), k = function(e) {\n    b(t, e);\n    function t(r, n) {\n        var o = e.call(this) || this;\n        return o.destination = r, o.source = n, o;\n    }\n    return t.prototype.next = function(r) {\n        var n, o;\n        (o = (n = this.destination) === null || n === void 0 ? void 0 : n.next) === null || o === void 0 || o.call(n, r);\n    }, t.prototype.error = function(r) {\n        var n, o;\n        (o = (n = this.destination) === null || n === void 0 ? void 0 : n.error) === null || o === void 0 || o.call(n, r);\n    }, t.prototype.complete = function() {\n        var r, n;\n        (n = (r = this.destination) === null || r === void 0 ? void 0 : r.complete) === null || n === void 0 || n.call(r);\n    }, t.prototype._subscribe = function(r) {\n        var n, o;\n        return (o = (n = this.source) === null || n === void 0 ? void 0 : n.subscribe(r)) !== null && o !== void 0 ? o : M;\n    }, t;\n}(H);\nfunction or(e, t) {\n    return N(function(r, n) {\n        var o = 0;\n        r.subscribe(rr(n, function(i) {\n            return e.call(t, i, o++) && n.next(i);\n        }));\n    });\n}\nlet w = null;\nfunction nr() {\n    if (!w) {\n        const e = new H();\n        w = {\n            subject: e,\n            dispatch: (r, n)=>e.next({\n                    key: r,\n                    value: n\n                })\n        };\n    }\n    return w;\n}\nconst { subject: ir, dispatch: sr } = nr();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRlc2lnbmNvbWJvL2V2ZW50cy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUlBLElBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ25CLE9BQU9GLElBQUlHLE9BQU9DLGNBQWMsSUFBSTtRQUFFQyxXQUFXLEVBQUU7SUFBQyxjQUFhQyxTQUFTLFNBQVNDLENBQUMsRUFBRUMsQ0FBQztRQUNyRkQsRUFBRUYsU0FBUyxHQUFHRztJQUNoQixLQUFLLFNBQVNELENBQUMsRUFBRUMsQ0FBQztRQUNoQixJQUFLLElBQUlDLEtBQUtELEVBQUdMLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEdBQUdDLE1BQU9GLENBQUFBLENBQUMsQ0FBQ0UsRUFBRSxHQUFHRCxDQUFDLENBQUNDLEVBQUU7SUFDN0UsR0FBR1QsRUFBRUMsR0FBR0M7QUFDVjtBQUNBLFNBQVNXLEVBQUVaLENBQUMsRUFBRUMsQ0FBQztJQUNiLElBQUksT0FBT0EsS0FBSyxjQUFjQSxNQUFNLE1BQ2xDLE1BQU0sSUFBSVksVUFBVSx5QkFBeUJDLE9BQU9iLEtBQUs7SUFDM0RGLEVBQUVDLEdBQUdDO0lBQ0wsU0FBU0s7UUFDUCxJQUFJLENBQUNTLFdBQVcsR0FBR2Y7SUFDckI7SUFDQUEsRUFBRVMsU0FBUyxHQUFHUixNQUFNLE9BQU9DLE9BQU9jLE1BQU0sQ0FBQ2YsS0FBTUssQ0FBQUEsRUFBRUcsU0FBUyxHQUFHUixFQUFFUSxTQUFTLEVBQUUsSUFBSUgsR0FBRTtBQUNsRjtBQUNBLFNBQVNXLEVBQUVqQixDQUFDO0lBQ1YsSUFBSUMsSUFBSSxPQUFPaUIsVUFBVSxjQUFjQSxPQUFPQyxRQUFRLEVBQUViLElBQUlMLEtBQUtELENBQUMsQ0FBQ0MsRUFBRSxFQUFFTSxJQUFJO0lBQzNFLElBQUlELEdBQUcsT0FBT0EsRUFBRUssSUFBSSxDQUFDWDtJQUNyQixJQUFJQSxLQUFLLE9BQU9BLEVBQUVvQixNQUFNLElBQUksVUFBVSxPQUFPO1FBQzNDQyxNQUFNO1lBQ0osT0FBT3JCLEtBQUtPLEtBQUtQLEVBQUVvQixNQUFNLElBQUtwQixDQUFBQSxJQUFJLEtBQUssSUFBSTtnQkFBRXNCLE9BQU90QixLQUFLQSxDQUFDLENBQUNPLElBQUk7Z0JBQUVnQixNQUFNLENBQUN2QjtZQUFFO1FBQzVFO0lBQ0Y7SUFDQSxNQUFNLElBQUlhLFVBQVVaLElBQUksNEJBQTRCO0FBQ3REO0FBQ0EsU0FBU3VCLEVBQUV4QixDQUFDLEVBQUVDLENBQUM7SUFDYixJQUFJSyxJQUFJLE9BQU9ZLFVBQVUsY0FBY2xCLENBQUMsQ0FBQ2tCLE9BQU9DLFFBQVEsQ0FBQztJQUN6RCxJQUFJLENBQUNiLEdBQUcsT0FBT047SUFDZixJQUFJTyxJQUFJRCxFQUFFSyxJQUFJLENBQUNYLElBQUlRLEdBQUdpQixJQUFJLEVBQUUsRUFBRUM7SUFDOUIsSUFBSTtRQUNGLE1BQU8sQ0FBQ3pCLE1BQU0sS0FBSyxLQUFLQSxNQUFNLE1BQU0sQ0FBQyxDQUFDTyxJQUFJRCxFQUFFYyxJQUFJLEVBQUMsRUFBR0UsSUFBSSxFQUFJRSxFQUFFRSxJQUFJLENBQUNuQixFQUFFYyxLQUFLO0lBQzVFLEVBQUUsT0FBT00sR0FBRztRQUNWRixJQUFJO1lBQUVHLE9BQU9EO1FBQUU7SUFDakIsU0FBVTtRQUNSLElBQUk7WUFDRnBCLEtBQUssQ0FBQ0EsRUFBRWUsSUFBSSxJQUFLakIsQ0FBQUEsSUFBSUMsRUFBRXVCLE1BQU0sS0FBS3hCLEVBQUVLLElBQUksQ0FBQ0o7UUFDM0MsU0FBVTtZQUNSLElBQUltQixHQUFHLE1BQU1BLEVBQUVHLEtBQUs7UUFDdEI7SUFDRjtJQUNBLE9BQU9KO0FBQ1Q7QUFDQSxTQUFTTSxFQUFFL0IsQ0FBQyxFQUFFQyxDQUFDLEVBQUVLLENBQUM7SUFDaEIsSUFBSUEsS0FBSzBCLFVBQVVaLE1BQU0sS0FBSyxHQUFHLElBQUssSUFBSWIsSUFBSSxHQUFHQyxJQUFJUCxFQUFFbUIsTUFBTSxFQUFFSyxHQUFHbEIsSUFBSUMsR0FBR0QsSUFDdkUsQ0FBQ2tCLEtBQUssQ0FBRWxCLENBQUFBLEtBQUtOLENBQUFBLENBQUMsS0FBT3dCLENBQUFBLEtBQU1BLENBQUFBLElBQUlwQixNQUFNSSxTQUFTLENBQUN3QixLQUFLLENBQUN0QixJQUFJLENBQUNWLEdBQUcsR0FBR00sRUFBQyxHQUFJa0IsQ0FBQyxDQUFDbEIsRUFBRSxHQUFHTixDQUFDLENBQUNNLEVBQUU7SUFDbEYsT0FBT1AsRUFBRWtDLE1BQU0sQ0FBQ1QsS0FBS3BCLE1BQU1JLFNBQVMsQ0FBQ3dCLEtBQUssQ0FBQ3RCLElBQUksQ0FBQ1Y7QUFDbEQ7QUFDQSxTQUFTa0MsRUFBRW5DLENBQUM7SUFDVixPQUFPLE9BQU9BLEtBQUs7QUFDckI7QUFDQSxTQUFTb0MsRUFBRXBDLENBQUM7SUFDVixJQUFJQyxJQUFJLFNBQVNNLENBQUM7UUFDaEI4QixNQUFNMUIsSUFBSSxDQUFDSixJQUFJQSxFQUFFK0IsS0FBSyxHQUFHLElBQUlELFFBQVFDLEtBQUs7SUFDNUMsR0FBR2hDLElBQUlOLEVBQUVDO0lBQ1QsT0FBT0ssRUFBRUcsU0FBUyxHQUFHUCxPQUFPYyxNQUFNLENBQUNxQixNQUFNNUIsU0FBUyxHQUFHSCxFQUFFRyxTQUFTLENBQUNNLFdBQVcsR0FBR1QsR0FBR0E7QUFDcEY7QUFDQSxJQUFJaUMsSUFBSUgsRUFBRSxTQUFTcEMsQ0FBQztJQUNsQixPQUFPLFNBQVNNLENBQUM7UUFDZk4sRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDd0MsT0FBTyxHQUFHbEMsSUFBSUEsRUFBRWMsTUFBTSxHQUFHLENBQUM7QUFDNUMsQ0FBQyxHQUFHZCxFQUFFbUMsR0FBRyxDQUFDLFNBQVNsQyxDQUFDLEVBQUVDLENBQUM7WUFDakIsT0FBT0EsSUFBSSxJQUFJLE9BQU9ELEVBQUVtQyxRQUFRO1FBQ2xDLEdBQUdDLElBQUksQ0FBQyxDQUFDO0VBQ1gsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDQyxJQUFJLEdBQUcsdUJBQXVCLElBQUksQ0FBQ0MsTUFBTSxHQUFHdkM7SUFDMUQ7QUFDRjtBQUNBLFNBQVN3QyxFQUFFOUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ2IsSUFBSUQsR0FBRztRQUNMLElBQUlNLElBQUlOLEVBQUUrQyxPQUFPLENBQUM5QztRQUNsQixLQUFLSyxLQUFLTixFQUFFZ0QsTUFBTSxDQUFDMUMsR0FBRztJQUN4QjtBQUNGO0FBQ0EsSUFBSTJDLElBQUk7SUFDTixTQUFTakQsRUFBRUMsQ0FBQztRQUNWLElBQUksQ0FBQ2lELGVBQWUsR0FBR2pELEdBQUcsSUFBSSxDQUFDa0QsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNDLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0lBQ3pGO0lBQ0EsT0FBT3JELEVBQUVTLFNBQVMsQ0FBQzZDLFdBQVcsR0FBRztRQUMvQixJQUFJckQsR0FBR0ssR0FBR0MsR0FBR0MsR0FBR2lCO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMwQixNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDQSxNQUFNLEdBQUcsQ0FBQztZQUNmLElBQUl6QixJQUFJLElBQUksQ0FBQzBCLFVBQVU7WUFDdkIsSUFBSTFCLEdBQ0YsSUFBSSxJQUFJLENBQUMwQixVQUFVLEdBQUcsTUFBTS9DLE1BQU1rRCxPQUFPLENBQUM3QixJQUN4QyxJQUFJO2dCQUNGLElBQUssSUFBSUUsSUFBSVgsRUFBRVMsSUFBSThCLElBQUk1QixFQUFFUCxJQUFJLElBQUksQ0FBQ21DLEVBQUVqQyxJQUFJLEVBQUVpQyxJQUFJNUIsRUFBRVAsSUFBSSxHQUFJO29CQUN0RCxJQUFJb0MsSUFBSUQsRUFBRWxDLEtBQUs7b0JBQ2ZtQyxFQUFFQyxNQUFNLENBQUMsSUFBSTtnQkFDZjtZQUNGLEVBQUUsT0FBT0MsR0FBRztnQkFDVjFELElBQUk7b0JBQUU0QixPQUFPOEI7Z0JBQUU7WUFDakIsU0FBVTtnQkFDUixJQUFJO29CQUNGSCxLQUFLLENBQUNBLEVBQUVqQyxJQUFJLElBQUtqQixDQUFBQSxJQUFJc0IsRUFBRUUsTUFBTSxLQUFLeEIsRUFBRUssSUFBSSxDQUFDaUI7Z0JBQzNDLFNBQVU7b0JBQ1IsSUFBSTNCLEdBQUcsTUFBTUEsRUFBRTRCLEtBQUs7Z0JBQ3RCO1lBQ0Y7aUJBRUFILEVBQUVnQyxNQUFNLENBQUMsSUFBSTtZQUNqQixJQUFJRSxJQUFJLElBQUksQ0FBQ1YsZUFBZTtZQUM1QixJQUFJZixFQUFFeUIsSUFDSixJQUFJO2dCQUNGQTtZQUNGLEVBQUUsT0FBT0QsR0FBRztnQkFDVmxDLElBQUlrQyxhQUFhcEIsSUFBSW9CLEVBQUVkLE1BQU0sR0FBRztvQkFBQ2M7aUJBQUU7WUFDckM7WUFDRixJQUFJRSxJQUFJLElBQUksQ0FBQ1IsV0FBVztZQUN4QixJQUFJUSxHQUFHO2dCQUNMLElBQUksQ0FBQ1IsV0FBVyxHQUFHO2dCQUNuQixJQUFJO29CQUNGLElBQUssSUFBSVMsSUFBSTdDLEVBQUU0QyxJQUFJRSxJQUFJRCxFQUFFekMsSUFBSSxJQUFJLENBQUMwQyxFQUFFeEMsSUFBSSxFQUFFd0MsSUFBSUQsRUFBRXpDLElBQUksR0FBSTt3QkFDdEQsSUFBSTJDLElBQUlELEVBQUV6QyxLQUFLO3dCQUNmLElBQUk7NEJBQ0YyQyxFQUFFRDt3QkFDSixFQUFFLE9BQU9MLEdBQUc7NEJBQ1ZsQyxJQUFJQSxLQUFLLEVBQUUsRUFBRWtDLGFBQWFwQixJQUFJZCxJQUFJTSxFQUFFQSxFQUFFLEVBQUUsRUFBRVAsRUFBRUMsS0FBS0QsRUFBRW1DLEVBQUVkLE1BQU0sS0FBS3BCLEVBQUVFLElBQUksQ0FBQ2dDO3dCQUN6RTtvQkFDRjtnQkFDRixFQUFFLE9BQU9BLEdBQUc7b0JBQ1ZwRCxJQUFJO3dCQUFFc0IsT0FBTzhCO29CQUFFO2dCQUNqQixTQUFVO29CQUNSLElBQUk7d0JBQ0ZJLEtBQUssQ0FBQ0EsRUFBRXhDLElBQUksSUFBS2YsQ0FBQUEsSUFBSXNELEVBQUVoQyxNQUFNLEtBQUt0QixFQUFFRyxJQUFJLENBQUNtRDtvQkFDM0MsU0FBVTt3QkFDUixJQUFJdkQsR0FBRyxNQUFNQSxFQUFFc0IsS0FBSztvQkFDdEI7Z0JBQ0Y7WUFDRjtZQUNBLElBQUlKLEdBQ0YsTUFBTSxJQUFJYyxFQUFFZDtRQUNoQjtJQUNGLEdBQUd6QixFQUFFUyxTQUFTLENBQUN5RCxHQUFHLEdBQUcsU0FBU2pFLENBQUM7UUFDN0IsSUFBSUs7UUFDSixJQUFJTCxLQUFLQSxNQUFNLElBQUksRUFDakIsSUFBSSxJQUFJLENBQUNrRCxNQUFNLEVBQ2JjLEVBQUVoRTthQUNDO1lBQ0gsSUFBSUEsYUFBYUQsR0FBRztnQkFDbEIsSUFBSUMsRUFBRWtELE1BQU0sSUFBSWxELEVBQUVrRSxVQUFVLENBQUMsSUFBSSxHQUMvQjtnQkFDRmxFLEVBQUVtRSxVQUFVLENBQUMsSUFBSTtZQUNuQjtZQUNDLEtBQUksQ0FBQ2YsV0FBVyxHQUFHLENBQUMvQyxJQUFJLElBQUksQ0FBQytDLFdBQVcsTUFBTSxRQUFRL0MsTUFBTSxLQUFLLElBQUlBLElBQUksRUFBRSxFQUFFcUIsSUFBSSxDQUFDMUI7UUFDckY7SUFDSixHQUFHRCxFQUFFUyxTQUFTLENBQUMwRCxVQUFVLEdBQUcsU0FBU2xFLENBQUM7UUFDcEMsSUFBSUssSUFBSSxJQUFJLENBQUM4QyxVQUFVO1FBQ3ZCLE9BQU85QyxNQUFNTCxLQUFLSSxNQUFNa0QsT0FBTyxDQUFDakQsTUFBTUEsRUFBRStELFFBQVEsQ0FBQ3BFO0lBQ25ELEdBQUdELEVBQUVTLFNBQVMsQ0FBQzJELFVBQVUsR0FBRyxTQUFTbkUsQ0FBQztRQUNwQyxJQUFJSyxJQUFJLElBQUksQ0FBQzhDLFVBQVU7UUFDdkIsSUFBSSxDQUFDQSxVQUFVLEdBQUcvQyxNQUFNa0QsT0FBTyxDQUFDakQsS0FBTUEsQ0FBQUEsRUFBRXFCLElBQUksQ0FBQzFCLElBQUlLLENBQUFBLElBQUtBLElBQUk7WUFBQ0E7WUFBR0w7U0FBRSxHQUFHQTtJQUNyRSxHQUFHRCxFQUFFUyxTQUFTLENBQUM2RCxhQUFhLEdBQUcsU0FBU3JFLENBQUM7UUFDdkMsSUFBSUssSUFBSSxJQUFJLENBQUM4QyxVQUFVO1FBQ3ZCOUMsTUFBTUwsSUFBSSxJQUFJLENBQUNtRCxVQUFVLEdBQUcsT0FBTy9DLE1BQU1rRCxPQUFPLENBQUNqRCxNQUFNd0MsRUFBRXhDLEdBQUdMO0lBQzlELEdBQUdELEVBQUVTLFNBQVMsQ0FBQ2lELE1BQU0sR0FBRyxTQUFTekQsQ0FBQztRQUNoQyxJQUFJSyxJQUFJLElBQUksQ0FBQytDLFdBQVc7UUFDeEIvQyxLQUFLd0MsRUFBRXhDLEdBQUdMLElBQUlBLGFBQWFELEtBQUtDLEVBQUVxRSxhQUFhLENBQUMsSUFBSTtJQUN0RCxHQUFHdEUsRUFBRXVFLEtBQUssR0FBRztRQUNYLElBQUl0RSxJQUFJLElBQUlEO1FBQ1osT0FBT0MsRUFBRWtELE1BQU0sR0FBRyxDQUFDLEdBQUdsRDtJQUN4QixLQUFLRDtBQUNQLEtBQUt3RSxJQUFJdkIsRUFBRXNCLEtBQUs7QUFDaEIsU0FBU0UsRUFBRXpFLENBQUM7SUFDVixPQUFPQSxhQUFhaUQsS0FBS2pELEtBQUssWUFBWUEsS0FBS21DLEVBQUVuQyxFQUFFMEQsTUFBTSxLQUFLdkIsRUFBRW5DLEVBQUVrRSxHQUFHLEtBQUsvQixFQUFFbkMsRUFBRXNELFdBQVc7QUFDM0Y7QUFDQSxTQUFTVyxFQUFFakUsQ0FBQztJQUNWbUMsRUFBRW5DLEtBQUtBLE1BQU1BLEVBQUVzRCxXQUFXO0FBQzVCO0FBQ0EsSUFBSW9CLElBQUk7SUFDTkMsa0JBQWtCO0lBQ2xCQyx1QkFBdUI7SUFDdkJDLFNBQVMsS0FBSztJQUNkQyx1Q0FBdUMsQ0FBQztJQUN4Q0MsMEJBQTBCLENBQUM7QUFDN0IsR0FBR0MsSUFBSTtJQUNMQyxZQUFZLFNBQVNqRixDQUFDLEVBQUVDLENBQUM7UUFDdkIsSUFBSyxJQUFJSyxJQUFJLEVBQUUsRUFBRUMsSUFBSSxHQUFHQSxJQUFJeUIsVUFBVVosTUFBTSxFQUFFYixJQUM1Q0QsQ0FBQyxDQUFDQyxJQUFJLEVBQUUsR0FBR3lCLFNBQVMsQ0FBQ3pCLEVBQUU7UUFDekIsT0FBTzBFLFdBQVdDLEtBQUssQ0FBQyxLQUFLLEdBQUduRCxFQUFFO1lBQUMvQjtZQUFHQztTQUFFLEVBQUV1QixFQUFFbEI7SUFDOUM7SUFDQTZFLGNBQWMsU0FBU25GLENBQUM7UUFDdEIsSUFBSUMsSUFBSStFLEVBQUVJLFFBQVE7UUFDbEIsT0FBTyxDQUFDLENBQUNuRixLQUFLLE9BQU8sS0FBSyxJQUFJQSxFQUFFa0YsWUFBWSxLQUFLQSxZQUFXLEVBQUduRjtJQUNqRTtJQUNBb0YsVUFBVSxLQUFLO0FBQ2pCO0FBQ0EsU0FBU0MsRUFBRXJGLENBQUM7SUFDVmdGLEVBQUVDLFVBQVUsQ0FBQztRQUNYLE1BQU1qRjtJQUNSO0FBQ0Y7QUFDQSxTQUFTc0YsS0FDVDtBQUNBLFNBQVNDLEVBQUV2RixDQUFDO0lBQ1ZBO0FBQ0Y7QUFDQSxJQUFJd0YsSUFBSSxTQUFTeEYsQ0FBQztJQUNoQlksRUFBRVgsR0FBR0Q7SUFDTCxTQUFTQyxFQUFFSyxDQUFDO1FBQ1YsSUFBSUMsSUFBSVAsRUFBRVcsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJO1FBQzVCLE9BQU9KLEVBQUVrRixTQUFTLEdBQUcsQ0FBQyxHQUFHbkYsSUFBS0MsQ0FBQUEsRUFBRW1GLFdBQVcsR0FBR3BGLEdBQUdtRSxFQUFFbkUsTUFBTUEsRUFBRTRELEdBQUcsQ0FBQzNELEVBQUMsSUFBS0EsRUFBRW1GLFdBQVcsR0FBR0MsR0FBR3BGO0lBQzFGO0lBQ0EsT0FBT04sRUFBRWUsTUFBTSxHQUFHLFNBQVNWLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSW9GLEVBQUV0RixHQUFHQyxHQUFHQztJQUNyQixHQUFHUCxFQUFFUSxTQUFTLENBQUNZLElBQUksR0FBRyxTQUFTZixDQUFDO1FBQzlCLElBQUksQ0FBQ21GLFNBQVMsSUFBSSxJQUFJLENBQUNJLEtBQUssQ0FBQ3ZGO0lBQy9CLEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ29CLEtBQUssR0FBRyxTQUFTdkIsQ0FBQztRQUMvQixJQUFJLENBQUNtRixTQUFTLElBQUssS0FBSSxDQUFDQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ0ssTUFBTSxDQUFDeEYsRUFBQztJQUN2RCxHQUFHTCxFQUFFUSxTQUFTLENBQUNzRixRQUFRLEdBQUc7UUFDeEIsSUFBSSxDQUFDTixTQUFTLElBQUssS0FBSSxDQUFDQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ08sU0FBUyxFQUFDO0lBQ3pELEdBQUcvRixFQUFFUSxTQUFTLENBQUM2QyxXQUFXLEdBQUc7UUFDM0IsSUFBSSxDQUFDSCxNQUFNLElBQUssS0FBSSxDQUFDc0MsU0FBUyxHQUFHLENBQUMsR0FBR3pGLEVBQUVTLFNBQVMsQ0FBQzZDLFdBQVcsQ0FBQzNDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDK0UsV0FBVyxHQUFHLElBQUc7SUFDakcsR0FBR3pGLEVBQUVRLFNBQVMsQ0FBQ29GLEtBQUssR0FBRyxTQUFTdkYsQ0FBQztRQUMvQixJQUFJLENBQUNvRixXQUFXLENBQUNyRSxJQUFJLENBQUNmO0lBQ3hCLEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ3FGLE1BQU0sR0FBRyxTQUFTeEYsQ0FBQztRQUNoQyxJQUFJO1lBQ0YsSUFBSSxDQUFDb0YsV0FBVyxDQUFDN0QsS0FBSyxDQUFDdkI7UUFDekIsU0FBVTtZQUNSLElBQUksQ0FBQ2dELFdBQVc7UUFDbEI7SUFDRixHQUFHckQsRUFBRVEsU0FBUyxDQUFDdUYsU0FBUyxHQUFHO1FBQ3pCLElBQUk7WUFDRixJQUFJLENBQUNOLFdBQVcsQ0FBQ0ssUUFBUTtRQUMzQixTQUFVO1lBQ1IsSUFBSSxDQUFDekMsV0FBVztRQUNsQjtJQUNGLEdBQUdyRDtBQUNMLEVBQUVnRCxJQUFJZ0QsSUFBSUMsU0FBU3pGLFNBQVMsQ0FBQzBGLElBQUk7QUFDakMsU0FBU0MsRUFBRXBHLENBQUMsRUFBRUMsQ0FBQztJQUNiLE9BQU9nRyxFQUFFdEYsSUFBSSxDQUFDWCxHQUFHQztBQUNuQjtBQUNBLElBQUlvRyxJQUFJO0lBQ04sU0FBU3JHLEVBQUVDLENBQUM7UUFDVixJQUFJLENBQUNxRyxlQUFlLEdBQUdyRztJQUN6QjtJQUNBLE9BQU9ELEVBQUVTLFNBQVMsQ0FBQ1ksSUFBSSxHQUFHLFNBQVNwQixDQUFDO1FBQ2xDLElBQUlLLElBQUksSUFBSSxDQUFDZ0csZUFBZTtRQUM1QixJQUFJaEcsRUFBRWUsSUFBSSxFQUNSLElBQUk7WUFDRmYsRUFBRWUsSUFBSSxDQUFDcEI7UUFDVCxFQUFFLE9BQU9NLEdBQUc7WUFDVmdHLEVBQUVoRztRQUNKO0lBQ0osR0FBR1AsRUFBRVMsU0FBUyxDQUFDb0IsS0FBSyxHQUFHLFNBQVM1QixDQUFDO1FBQy9CLElBQUlLLElBQUksSUFBSSxDQUFDZ0csZUFBZTtRQUM1QixJQUFJaEcsRUFBRXVCLEtBQUssRUFDVCxJQUFJO1lBQ0Z2QixFQUFFdUIsS0FBSyxDQUFDNUI7UUFDVixFQUFFLE9BQU9NLEdBQUc7WUFDVmdHLEVBQUVoRztRQUNKO2FBRUFnRyxFQUFFdEc7SUFDTixHQUFHRCxFQUFFUyxTQUFTLENBQUNzRixRQUFRLEdBQUc7UUFDeEIsSUFBSTlGLElBQUksSUFBSSxDQUFDcUcsZUFBZTtRQUM1QixJQUFJckcsRUFBRThGLFFBQVEsRUFDWixJQUFJO1lBQ0Y5RixFQUFFOEYsUUFBUTtRQUNaLEVBQUUsT0FBT3pGLEdBQUc7WUFDVmlHLEVBQUVqRztRQUNKO0lBQ0osR0FBR047QUFDTCxLQUFLNEYsSUFBSSxTQUFTNUYsQ0FBQztJQUNqQlksRUFBRVgsR0FBR0Q7SUFDTCxTQUFTQyxFQUFFSyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztRQUNoQixJQUFJaUIsSUFBSXpCLEVBQUVXLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFZTtRQUM5QixJQUFJUyxFQUFFN0IsTUFBTSxDQUFDQSxHQUNYb0IsSUFBSTtZQUNGTCxNQUFNZixLQUFLLEtBQUs7WUFDaEJ1QixPQUFPdEIsS0FBSyxLQUFLO1lBQ2pCd0YsVUFBVXZGLEtBQUssS0FBSztRQUN0QjthQUNHO1lBQ0gsSUFBSW9CO1lBQ0pILEtBQUtpRCxFQUFFSyx3QkFBd0IsR0FBSW5ELENBQUFBLElBQUkxQixPQUFPYyxNQUFNLENBQUNWLElBQUlzQixFQUFFMEIsV0FBVyxHQUFHO2dCQUN2RSxPQUFPN0IsRUFBRTZCLFdBQVc7WUFDdEIsR0FBRzVCLElBQUk7Z0JBQ0xMLE1BQU1mLEVBQUVlLElBQUksSUFBSStFLEVBQUU5RixFQUFFZSxJQUFJLEVBQUVPO2dCQUMxQkMsT0FBT3ZCLEVBQUV1QixLQUFLLElBQUl1RSxFQUFFOUYsRUFBRXVCLEtBQUssRUFBRUQ7Z0JBQzdCbUUsVUFBVXpGLEVBQUV5RixRQUFRLElBQUlLLEVBQUU5RixFQUFFeUYsUUFBUSxFQUFFbkU7WUFDeEMsS0FBS0YsSUFBSXBCO1FBQ1g7UUFDQSxPQUFPbUIsRUFBRWlFLFdBQVcsR0FBRyxJQUFJVyxFQUFFM0UsSUFBSUQ7SUFDbkM7SUFDQSxPQUFPeEI7QUFDVCxFQUFFdUY7QUFDRixTQUFTZSxFQUFFdkcsQ0FBQztJQUNWcUYsRUFBRXJGO0FBQ0o7QUFDQSxTQUFTd0csRUFBRXhHLENBQUM7SUFDVixNQUFNQTtBQUNSO0FBQ0EsSUFBSTJGLElBQUk7SUFDTnhDLFFBQVEsQ0FBQztJQUNUOUIsTUFBTWlFO0lBQ056RCxPQUFPMkU7SUFDUFQsVUFBVVQ7QUFDWixHQUFHbUIsSUFBSTtJQUNMLE9BQU8sT0FBT3ZGLFVBQVUsY0FBY0EsT0FBT3dGLFVBQVUsSUFBSTtBQUM3RDtBQUNBLFNBQVNDLEVBQUUzRyxDQUFDO0lBQ1YsT0FBT0E7QUFDVDtBQUNBLFNBQVM0RyxFQUFFNUcsQ0FBQztJQUNWLE9BQU9BLEVBQUVvQixNQUFNLEtBQUssSUFBSXVGLElBQUkzRyxFQUFFb0IsTUFBTSxLQUFLLElBQUlwQixDQUFDLENBQUMsRUFBRSxHQUFHLFNBQVNNLENBQUM7UUFDNUQsT0FBT04sRUFBRTZHLE1BQU0sQ0FBQyxTQUFTdEcsQ0FBQyxFQUFFQyxDQUFDO1lBQzNCLE9BQU9BLEVBQUVEO1FBQ1gsR0FBR0Q7SUFDTDtBQUNGO0FBQ0EsSUFBSXdHLElBQUk7SUFDTixTQUFTOUcsRUFBRUMsQ0FBQztRQUNWQSxLQUFNLEtBQUksQ0FBQzhHLFVBQVUsR0FBRzlHLENBQUFBO0lBQzFCO0lBQ0EsT0FBT0QsRUFBRVMsU0FBUyxDQUFDdUcsSUFBSSxHQUFHLFNBQVMvRyxDQUFDO1FBQ2xDLElBQUlLLElBQUksSUFBSU47UUFDWixPQUFPTSxFQUFFMkcsTUFBTSxHQUFHLElBQUksRUFBRTNHLEVBQUU0RyxRQUFRLEdBQUdqSCxHQUFHSztJQUMxQyxHQUFHTixFQUFFUyxTQUFTLENBQUMwRyxTQUFTLEdBQUcsU0FBU2xILENBQUMsRUFBRUssQ0FBQyxFQUFFQyxDQUFDO1FBQ3pDLElBQUlDLElBQUksSUFBSSxFQUFFaUIsSUFBSTJGLEVBQUVuSCxLQUFLQSxJQUFJLElBQUkyRixFQUFFM0YsR0FBR0ssR0FBR0M7UUFDekMsT0FBT2dGLEVBQUU7WUFDUCxJQUFJN0QsSUFBSWxCLEdBQUdvQixJQUFJRixFQUFFd0YsUUFBUSxFQUFFMUQsSUFBSTlCLEVBQUV1RixNQUFNO1lBQ3ZDeEYsRUFBRXlDLEdBQUcsQ0FBQ3RDLElBQUlBLEVBQUVqQixJQUFJLENBQUNjLEdBQUcrQixLQUFLQSxJQUFJaEQsRUFBRXVHLFVBQVUsQ0FBQ3RGLEtBQUtqQixFQUFFNkcsYUFBYSxDQUFDNUY7UUFDakUsSUFBSUE7SUFDTixHQUFHekIsRUFBRVMsU0FBUyxDQUFDNEcsYUFBYSxHQUFHLFNBQVNwSCxDQUFDO1FBQ3ZDLElBQUk7WUFDRixPQUFPLElBQUksQ0FBQzhHLFVBQVUsQ0FBQzlHO1FBQ3pCLEVBQUUsT0FBT0ssR0FBRztZQUNWTCxFQUFFNEIsS0FBSyxDQUFDdkI7UUFDVjtJQUNGLEdBQUdOLEVBQUVTLFNBQVMsQ0FBQzZHLE9BQU8sR0FBRyxTQUFTckgsQ0FBQyxFQUFFSyxDQUFDO1FBQ3BDLElBQUlDLElBQUksSUFBSTtRQUNaLE9BQU9ELElBQUlpSCxFQUFFakgsSUFBSSxJQUFJQSxFQUFFLFNBQVNFLENBQUMsRUFBRWlCLENBQUM7WUFDbEMsSUFBSUMsSUFBSSxJQUFJa0UsRUFBRTtnQkFDWnZFLE1BQU0sU0FBU08sQ0FBQztvQkFDZCxJQUFJO3dCQUNGM0IsRUFBRTJCO29CQUNKLEVBQUUsT0FBTzRCLEdBQUc7d0JBQ1YvQixFQUFFK0IsSUFBSTlCLEVBQUU0QixXQUFXO29CQUNyQjtnQkFDRjtnQkFDQXpCLE9BQU9KO2dCQUNQc0UsVUFBVXZGO1lBQ1o7WUFDQUQsRUFBRTRHLFNBQVMsQ0FBQ3pGO1FBQ2Q7SUFDRixHQUFHMUIsRUFBRVMsU0FBUyxDQUFDc0csVUFBVSxHQUFHLFNBQVM5RyxDQUFDO1FBQ3BDLElBQUlLO1FBQ0osT0FBTyxDQUFDQSxJQUFJLElBQUksQ0FBQzJHLE1BQU0sTUFBTSxRQUFRM0csTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFNkcsU0FBUyxDQUFDbEg7SUFDM0UsR0FBR0QsRUFBRVMsU0FBUyxDQUFDZ0csRUFBRSxHQUFHO1FBQ2xCLE9BQU8sSUFBSTtJQUNiLEdBQUd6RyxFQUFFUyxTQUFTLENBQUMrRyxJQUFJLEdBQUc7UUFDcEIsSUFBSyxJQUFJdkgsSUFBSSxFQUFFLEVBQUVLLElBQUksR0FBR0EsSUFBSTBCLFVBQVVaLE1BQU0sRUFBRWQsSUFDNUNMLENBQUMsQ0FBQ0ssRUFBRSxHQUFHMEIsU0FBUyxDQUFDMUIsRUFBRTtRQUNyQixPQUFPc0csRUFBRTNHLEdBQUcsSUFBSTtJQUNsQixHQUFHRCxFQUFFUyxTQUFTLENBQUNnSCxTQUFTLEdBQUcsU0FBU3hILENBQUM7UUFDbkMsSUFBSUssSUFBSSxJQUFJO1FBQ1osT0FBT0wsSUFBSXNILEVBQUV0SCxJQUFJLElBQUlBLEVBQUUsU0FBU00sQ0FBQyxFQUFFQyxDQUFDO1lBQ2xDLElBQUlpQjtZQUNKbkIsRUFBRTZHLFNBQVMsQ0FBQyxTQUFTekYsQ0FBQztnQkFDcEIsT0FBT0QsSUFBSUM7WUFDYixHQUFHLFNBQVNBLENBQUM7Z0JBQ1gsT0FBT2xCLEVBQUVrQjtZQUNYLEdBQUc7Z0JBQ0QsT0FBT25CLEVBQUVrQjtZQUNYO1FBQ0Y7SUFDRixHQUFHekIsRUFBRWdCLE1BQU0sR0FBRyxTQUFTZixDQUFDO1FBQ3RCLE9BQU8sSUFBSUQsRUFBRUM7SUFDZixHQUFHRDtBQUNMO0FBQ0EsU0FBU3VILEVBQUV2SCxDQUFDO0lBQ1YsSUFBSUM7SUFDSixPQUFPLENBQUNBLElBQUlELEtBQUswRSxFQUFFRyxPQUFPLE1BQU0sUUFBUTVFLE1BQU0sS0FBSyxJQUFJQSxJQUFJNEU7QUFDN0Q7QUFDQSxTQUFTNkMsRUFBRTFILENBQUM7SUFDVixPQUFPQSxLQUFLbUMsRUFBRW5DLEVBQUVxQixJQUFJLEtBQUtjLEVBQUVuQyxFQUFFNkIsS0FBSyxLQUFLTSxFQUFFbkMsRUFBRStGLFFBQVE7QUFDckQ7QUFDQSxTQUFTcUIsRUFBRXBILENBQUM7SUFDVixPQUFPQSxLQUFLQSxhQUFhd0YsS0FBS2tDLEVBQUUxSCxNQUFNeUUsRUFBRXpFO0FBQzFDO0FBQ0EsU0FBUzJILEVBQUUzSCxDQUFDO0lBQ1YsT0FBT21DLEVBQUVuQyxLQUFLLE9BQU8sS0FBSyxJQUFJQSxFQUFFZ0gsSUFBSTtBQUN0QztBQUNBLFNBQVNZLEVBQUU1SCxDQUFDO0lBQ1YsT0FBTyxTQUFTQyxDQUFDO1FBQ2YsSUFBSTBILEVBQUUxSCxJQUNKLE9BQU9BLEVBQUUrRyxJQUFJLENBQUMsU0FBUzFHLENBQUM7WUFDdEIsSUFBSTtnQkFDRixPQUFPTixFQUFFTSxHQUFHLElBQUk7WUFDbEIsRUFBRSxPQUFPQyxHQUFHO2dCQUNWLElBQUksQ0FBQ3NCLEtBQUssQ0FBQ3RCO1lBQ2I7UUFDRjtRQUNGLE1BQU0sSUFBSU0sVUFBVTtJQUN0QjtBQUNGO0FBQ0EsU0FBU2dILEdBQUc3SCxDQUFDLEVBQUVDLENBQUMsRUFBRUssQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDdkIsT0FBTyxJQUFJc0gsR0FBRzlILEdBQUdDLEdBQUdLLEdBQUdDLEdBQUdDO0FBQzVCO0FBQ0EsSUFBSXNILEtBQUssU0FBUzlILENBQUM7SUFDakJZLEVBQUVYLEdBQUdEO0lBQ0wsU0FBU0MsRUFBRUssQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRWlCLENBQUMsRUFBRUMsQ0FBQyxFQUFFRSxDQUFDO1FBQ3pCLElBQUk0QixJQUFJeEQsRUFBRVcsSUFBSSxDQUFDLElBQUksRUFBRUwsTUFBTSxJQUFJO1FBQy9CLE9BQU9rRCxFQUFFdUUsVUFBVSxHQUFHckcsR0FBRzhCLEVBQUV3RSxpQkFBaUIsR0FBR3BHLEdBQUc0QixFQUFFcUMsS0FBSyxHQUFHdEYsSUFBSSxTQUFTa0QsQ0FBQztZQUN4RSxJQUFJO2dCQUNGbEQsRUFBRWtEO1lBQ0osRUFBRSxPQUFPRyxHQUFHO2dCQUNWdEQsRUFBRXVCLEtBQUssQ0FBQytCO1lBQ1Y7UUFDRixJQUFJNUQsRUFBRVMsU0FBUyxDQUFDb0YsS0FBSyxFQUFFckMsRUFBRXNDLE1BQU0sR0FBR3JFLElBQUksU0FBU2dDLENBQUM7WUFDOUMsSUFBSTtnQkFDRmhDLEVBQUVnQztZQUNKLEVBQUUsT0FBT0csR0FBRztnQkFDVnRELEVBQUV1QixLQUFLLENBQUMrQjtZQUNWLFNBQVU7Z0JBQ1IsSUFBSSxDQUFDTixXQUFXO1lBQ2xCO1FBQ0YsSUFBSXRELEVBQUVTLFNBQVMsQ0FBQ3FGLE1BQU0sRUFBRXRDLEVBQUV3QyxTQUFTLEdBQUd4RixJQUFJO1lBQ3hDLElBQUk7Z0JBQ0ZBO1lBQ0YsRUFBRSxPQUFPaUQsR0FBRztnQkFDVm5ELEVBQUV1QixLQUFLLENBQUM0QjtZQUNWLFNBQVU7Z0JBQ1IsSUFBSSxDQUFDSCxXQUFXO1lBQ2xCO1FBQ0YsSUFBSXRELEVBQUVTLFNBQVMsQ0FBQ3VGLFNBQVMsRUFBRXhDO0lBQzdCO0lBQ0EsT0FBT3ZELEVBQUVRLFNBQVMsQ0FBQzZDLFdBQVcsR0FBRztRQUMvQixJQUFJaEQ7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDMEgsaUJBQWlCLElBQUksSUFBSSxDQUFDQSxpQkFBaUIsSUFBSTtZQUN2RCxJQUFJekgsSUFBSSxJQUFJLENBQUM0QyxNQUFNO1lBQ25CbkQsRUFBRVMsU0FBUyxDQUFDNkMsV0FBVyxDQUFDM0MsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDSixLQUFNLEVBQUNELElBQUksSUFBSSxDQUFDeUgsVUFBVSxNQUFNLFFBQVF6SCxNQUFNLEtBQUssS0FBS0EsRUFBRUssSUFBSSxDQUFDLElBQUk7UUFDMUc7SUFDRixHQUFHVjtBQUNMLEVBQUV1RixJQUFJeUMsS0FBSzdGLEVBQUUsU0FBU3BDLENBQUM7SUFDckIsT0FBTztRQUNMQSxFQUFFLElBQUksR0FBRyxJQUFJLENBQUM0QyxJQUFJLEdBQUcsMkJBQTJCLElBQUksQ0FBQ0osT0FBTyxHQUFHO0lBQ2pFO0FBQ0YsSUFBSTBGLElBQUksU0FBU2xJLENBQUM7SUFDaEJZLEVBQUVYLEdBQUdEO0lBQ0wsU0FBU0M7UUFDUCxJQUFJSyxJQUFJTixFQUFFVyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUk7UUFDNUIsT0FBT0wsRUFBRTZDLE1BQU0sR0FBRyxDQUFDLEdBQUc3QyxFQUFFNkgsZ0JBQWdCLEdBQUcsTUFBTTdILEVBQUU4SCxTQUFTLEdBQUcsRUFBRSxFQUFFOUgsRUFBRW1GLFNBQVMsR0FBRyxDQUFDLEdBQUduRixFQUFFK0gsUUFBUSxHQUFHLENBQUMsR0FBRy9ILEVBQUVnSSxXQUFXLEdBQUcsTUFBTWhJO0lBQzlIO0lBQ0EsT0FBT0wsRUFBRVEsU0FBUyxDQUFDdUcsSUFBSSxHQUFHLFNBQVMxRyxDQUFDO1FBQ2xDLElBQUlDLElBQUksSUFBSWdJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDeEIsT0FBT2hJLEVBQUUyRyxRQUFRLEdBQUc1RyxHQUFHQztJQUN6QixHQUFHTixFQUFFUSxTQUFTLENBQUMrSCxjQUFjLEdBQUc7UUFDOUIsSUFBSSxJQUFJLENBQUNyRixNQUFNLEVBQ2IsTUFBTSxJQUFJOEU7SUFDZCxHQUFHaEksRUFBRVEsU0FBUyxDQUFDWSxJQUFJLEdBQUcsU0FBU2YsQ0FBQztRQUM5QixJQUFJQyxJQUFJLElBQUk7UUFDWmdGLEVBQUU7WUFDQSxJQUFJL0UsR0FBR2lCO1lBQ1AsSUFBSWxCLEVBQUVpSSxjQUFjLElBQUksQ0FBQ2pJLEVBQUVrRixTQUFTLEVBQUU7Z0JBQ3BDbEYsRUFBRTRILGdCQUFnQixJQUFLNUgsQ0FBQUEsRUFBRTRILGdCQUFnQixHQUFHOUgsTUFBTW9JLElBQUksQ0FBQ2xJLEVBQUU2SCxTQUFTO2dCQUNsRSxJQUFJO29CQUNGLElBQUssSUFBSTFHLElBQUlULEVBQUVWLEVBQUU0SCxnQkFBZ0IsR0FBR3ZHLElBQUlGLEVBQUVMLElBQUksSUFBSSxDQUFDTyxFQUFFTCxJQUFJLEVBQUVLLElBQUlGLEVBQUVMLElBQUksR0FBSTt3QkFDdkUsSUFBSW1DLElBQUk1QixFQUFFTixLQUFLO3dCQUNma0MsRUFBRW5DLElBQUksQ0FBQ2Y7b0JBQ1Q7Z0JBQ0YsRUFBRSxPQUFPbUQsR0FBRztvQkFDVmpELElBQUk7d0JBQUVxQixPQUFPNEI7b0JBQUU7Z0JBQ2pCLFNBQVU7b0JBQ1IsSUFBSTt3QkFDRjdCLEtBQUssQ0FBQ0EsRUFBRUwsSUFBSSxJQUFLRSxDQUFBQSxJQUFJQyxFQUFFSSxNQUFNLEtBQUtMLEVBQUVkLElBQUksQ0FBQ2U7b0JBQzNDLFNBQVU7d0JBQ1IsSUFBSWxCLEdBQUcsTUFBTUEsRUFBRXFCLEtBQUs7b0JBQ3RCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGLEdBQUc1QixFQUFFUSxTQUFTLENBQUNvQixLQUFLLEdBQUcsU0FBU3ZCLENBQUM7UUFDL0IsSUFBSUMsSUFBSSxJQUFJO1FBQ1pnRixFQUFFO1lBQ0EsSUFBSWhGLEVBQUVpSSxjQUFjLElBQUksQ0FBQ2pJLEVBQUVrRixTQUFTLEVBQUU7Z0JBQ3BDbEYsRUFBRThILFFBQVEsR0FBRzlILEVBQUVrRixTQUFTLEdBQUcsQ0FBQyxHQUFHbEYsRUFBRStILFdBQVcsR0FBR2hJO2dCQUMvQyxJQUFLLElBQUlFLElBQUlELEVBQUU2SCxTQUFTLEVBQUU1SCxFQUFFWSxNQUFNLEVBQ2hDWixFQUFFa0ksS0FBSyxHQUFHN0csS0FBSyxDQUFDdkI7WUFDcEI7UUFDRjtJQUNGLEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ3NGLFFBQVEsR0FBRztRQUN4QixJQUFJekYsSUFBSSxJQUFJO1FBQ1ppRixFQUFFO1lBQ0EsSUFBSWpGLEVBQUVrSSxjQUFjLElBQUksQ0FBQ2xJLEVBQUVtRixTQUFTLEVBQUU7Z0JBQ3BDbkYsRUFBRW1GLFNBQVMsR0FBRyxDQUFDO2dCQUNmLElBQUssSUFBSWxGLElBQUlELEVBQUU4SCxTQUFTLEVBQUU3SCxFQUFFYSxNQUFNLEVBQ2hDYixFQUFFbUksS0FBSyxHQUFHM0MsUUFBUTtZQUN0QjtRQUNGO0lBQ0YsR0FBRzlGLEVBQUVRLFNBQVMsQ0FBQzZDLFdBQVcsR0FBRztRQUMzQixJQUFJLENBQUNtQyxTQUFTLEdBQUcsSUFBSSxDQUFDdEMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUNpRixTQUFTLEdBQUcsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRztJQUM5RSxHQUFHakksT0FBT3lJLGNBQWMsQ0FBQzFJLEVBQUVRLFNBQVMsRUFBRSxZQUFZO1FBQ2hEbUksS0FBSztZQUNILElBQUl0STtZQUNKLE9BQU8sQ0FBQyxDQUFDQSxJQUFJLElBQUksQ0FBQzhILFNBQVMsTUFBTSxRQUFROUgsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFYyxNQUFNLElBQUk7UUFDL0U7UUFDQXlILFlBQVksQ0FBQztRQUNiQyxjQUFjLENBQUM7SUFDakIsSUFBSTdJLEVBQUVRLFNBQVMsQ0FBQzRHLGFBQWEsR0FBRyxTQUFTL0csQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQ2tJLGNBQWMsSUFBSXhJLEVBQUVTLFNBQVMsQ0FBQzRHLGFBQWEsQ0FBQzFHLElBQUksQ0FBQyxJQUFJLEVBQUVMO0lBQ3JFLEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ3NHLFVBQVUsR0FBRyxTQUFTekcsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQ2tJLGNBQWMsSUFBSSxJQUFJLENBQUNPLHVCQUF1QixDQUFDekksSUFBSSxJQUFJLENBQUMwSSxlQUFlLENBQUMxSTtJQUN0RixHQUFHTCxFQUFFUSxTQUFTLENBQUN1SSxlQUFlLEdBQUcsU0FBUzFJLENBQUM7UUFDekMsSUFBSUMsSUFBSSxJQUFJLEVBQUVDLElBQUksSUFBSSxFQUFFaUIsSUFBSWpCLEVBQUU2SCxRQUFRLEVBQUUzRyxJQUFJbEIsRUFBRWlGLFNBQVMsRUFBRTdELElBQUlwQixFQUFFNEgsU0FBUztRQUN4RSxPQUFPM0csS0FBS0MsSUFBSThDLElBQUssS0FBSSxDQUFDMkQsZ0JBQWdCLEdBQUcsTUFBTXZHLEVBQUVELElBQUksQ0FBQ3JCLElBQUksSUFBSTJDLEVBQUU7WUFDbEUxQyxFQUFFNEgsZ0JBQWdCLEdBQUcsTUFBTXJGLEVBQUVsQixHQUFHdEI7UUFDbEMsRUFBQztJQUNILEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ3NJLHVCQUF1QixHQUFHLFNBQVN6SSxDQUFDO1FBQ2pELElBQUlDLElBQUksSUFBSSxFQUFFQyxJQUFJRCxFQUFFOEgsUUFBUSxFQUFFNUcsSUFBSWxCLEVBQUUrSCxXQUFXLEVBQUU1RyxJQUFJbkIsRUFBRWtGLFNBQVM7UUFDaEVqRixJQUFJRixFQUFFdUIsS0FBSyxDQUFDSixLQUFLQyxLQUFLcEIsRUFBRXlGLFFBQVE7SUFDbEMsR0FBRzlGLEVBQUVRLFNBQVMsQ0FBQ3dJLFlBQVksR0FBRztRQUM1QixJQUFJM0ksSUFBSSxJQUFJd0c7UUFDWixPQUFPeEcsRUFBRTJHLE1BQU0sR0FBRyxJQUFJLEVBQUUzRztJQUMxQixHQUFHTCxFQUFFZSxNQUFNLEdBQUcsU0FBU1YsQ0FBQyxFQUFFQyxDQUFDO1FBQ3pCLE9BQU8sSUFBSWdJLEVBQUVqSSxHQUFHQztJQUNsQixHQUFHTjtBQUNMLEVBQUU2RyxJQUFJeUIsSUFBSSxTQUFTdkksQ0FBQztJQUNsQlksRUFBRVgsR0FBR0Q7SUFDTCxTQUFTQyxFQUFFSyxDQUFDLEVBQUVDLENBQUM7UUFDYixJQUFJQyxJQUFJUixFQUFFVyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUk7UUFDNUIsT0FBT0gsRUFBRWtGLFdBQVcsR0FBR3BGLEdBQUdFLEVBQUV5RyxNQUFNLEdBQUcxRyxHQUFHQztJQUMxQztJQUNBLE9BQU9QLEVBQUVRLFNBQVMsQ0FBQ1ksSUFBSSxHQUFHLFNBQVNmLENBQUM7UUFDbEMsSUFBSUMsR0FBR0M7UUFDTkEsQ0FBQUEsSUFBSSxDQUFDRCxJQUFJLElBQUksQ0FBQ21GLFdBQVcsTUFBTSxRQUFRbkYsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFYyxJQUFJLE1BQU0sUUFBUWIsTUFBTSxLQUFLLEtBQUtBLEVBQUVHLElBQUksQ0FBQ0osR0FBR0Q7SUFDaEgsR0FBR0wsRUFBRVEsU0FBUyxDQUFDb0IsS0FBSyxHQUFHLFNBQVN2QixDQUFDO1FBQy9CLElBQUlDLEdBQUdDO1FBQ05BLENBQUFBLElBQUksQ0FBQ0QsSUFBSSxJQUFJLENBQUNtRixXQUFXLE1BQU0sUUFBUW5GLE1BQU0sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRXNCLEtBQUssTUFBTSxRQUFRckIsTUFBTSxLQUFLLEtBQUtBLEVBQUVHLElBQUksQ0FBQ0osR0FBR0Q7SUFDakgsR0FBR0wsRUFBRVEsU0FBUyxDQUFDc0YsUUFBUSxHQUFHO1FBQ3hCLElBQUl6RixHQUFHQztRQUNOQSxDQUFBQSxJQUFJLENBQUNELElBQUksSUFBSSxDQUFDb0YsV0FBVyxNQUFNLFFBQVFwRixNQUFNLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUV5RixRQUFRLE1BQU0sUUFBUXhGLE1BQU0sS0FBSyxLQUFLQSxFQUFFSSxJQUFJLENBQUNMO0lBQ2pILEdBQUdMLEVBQUVRLFNBQVMsQ0FBQ3NHLFVBQVUsR0FBRyxTQUFTekcsQ0FBQztRQUNwQyxJQUFJQyxHQUFHQztRQUNQLE9BQU8sQ0FBQ0EsSUFBSSxDQUFDRCxJQUFJLElBQUksQ0FBQzBHLE1BQU0sTUFBTSxRQUFRMUcsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFNEcsU0FBUyxDQUFDN0csRUFBQyxNQUFPLFFBQVFFLE1BQU0sS0FBSyxJQUFJQSxJQUFJZ0U7SUFDbkgsR0FBR3ZFO0FBQ0wsRUFBRWlJO0FBQ0YsU0FBU2dCLEdBQUdsSixDQUFDLEVBQUVDLENBQUM7SUFDZCxPQUFPMkgsRUFBRSxTQUFTdEgsQ0FBQyxFQUFFQyxDQUFDO1FBQ3BCLElBQUlDLElBQUk7UUFDUkYsRUFBRTZHLFNBQVMsQ0FBQ1UsR0FBR3RILEdBQUcsU0FBU2tCLENBQUM7WUFDMUIsT0FBT3pCLEVBQUVXLElBQUksQ0FBQ1YsR0FBR3dCLEdBQUdqQixRQUFRRCxFQUFFYyxJQUFJLENBQUNJO1FBQ3JDO0lBQ0Y7QUFDRjtBQUNBLElBQUkwSCxJQUFJO0FBQ1IsU0FBU0M7SUFDUCxJQUFJLENBQUNELEdBQUc7UUFDTixNQUFNbkosSUFBSSxJQUFJa0k7UUFDZGlCLElBQUk7WUFBRUUsU0FBU3JKO1lBQUdzSixVQUFVLENBQUNoSixHQUFHQyxJQUFNUCxFQUFFcUIsSUFBSSxDQUFDO29CQUFFa0ksS0FBS2pKO29CQUFHZ0IsT0FBT2Y7Z0JBQUU7UUFBRztJQUNyRTtJQUNBLE9BQU80STtBQUNUO0FBQ0EsTUFBTSxFQUFFRSxTQUFTRyxFQUFFLEVBQUVGLFVBQVVHLEVBQUUsRUFBRSxHQUFHTDtBQUtwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbW90aW9uLWNhcHRpb25zLy4vbm9kZV9tb2R1bGVzL0BkZXNpZ25jb21iby9ldmVudHMvZGlzdC9pbmRleC5lcy5qcz81NDllIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBFID0gZnVuY3Rpb24oZSwgdCkge1xuICByZXR1cm4gRSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uKHIsIG4pIHtcbiAgICByLl9fcHJvdG9fXyA9IG47XG4gIH0gfHwgZnVuY3Rpb24ociwgbikge1xuICAgIGZvciAodmFyIG8gaW4gbikgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIG8pICYmIChyW29dID0gbltvXSk7XG4gIH0sIEUoZSwgdCk7XG59O1xuZnVuY3Rpb24gYihlLCB0KSB7XG4gIGlmICh0eXBlb2YgdCAhPSBcImZ1bmN0aW9uXCIgJiYgdCAhPT0gbnVsbClcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyh0KSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIEUoZSwgdCk7XG4gIGZ1bmN0aW9uIHIoKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciA9IGU7XG4gIH1cbiAgZS5wcm90b3R5cGUgPSB0ID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZSh0KSA6IChyLnByb3RvdHlwZSA9IHQucHJvdG90eXBlLCBuZXcgcigpKTtcbn1cbmZ1bmN0aW9uIGcoZSkge1xuICB2YXIgdCA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgciA9IHQgJiYgZVt0XSwgbiA9IDA7XG4gIGlmIChyKSByZXR1cm4gci5jYWxsKGUpO1xuICBpZiAoZSAmJiB0eXBlb2YgZS5sZW5ndGggPT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlICYmIG4gPj0gZS5sZW5ndGggJiYgKGUgPSB2b2lkIDApLCB7IHZhbHVlOiBlICYmIGVbbisrXSwgZG9uZTogIWUgfTtcbiAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IodCA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cbmZ1bmN0aW9uIE8oZSwgdCkge1xuICB2YXIgciA9IHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIGVbU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFyKSByZXR1cm4gZTtcbiAgdmFyIG4gPSByLmNhbGwoZSksIG8sIGkgPSBbXSwgcztcbiAgdHJ5IHtcbiAgICBmb3IgKDsgKHQgPT09IHZvaWQgMCB8fCB0LS0gPiAwKSAmJiAhKG8gPSBuLm5leHQoKSkuZG9uZTsgKSBpLnB1c2goby52YWx1ZSk7XG4gIH0gY2F0Y2ggKHUpIHtcbiAgICBzID0geyBlcnJvcjogdSB9O1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBvICYmICFvLmRvbmUgJiYgKHIgPSBuLnJldHVybikgJiYgci5jYWxsKG4pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAocykgdGhyb3cgcy5lcnJvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiB4KGUsIHQsIHIpIHtcbiAgaWYgKHIgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgbiA9IDAsIG8gPSB0Lmxlbmd0aCwgaTsgbiA8IG87IG4rKylcbiAgICAoaSB8fCAhKG4gaW4gdCkpICYmIChpIHx8IChpID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwgMCwgbikpLCBpW25dID0gdFtuXSk7XG4gIHJldHVybiBlLmNvbmNhdChpIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpKTtcbn1cbmZ1bmN0aW9uIGwoZSkge1xuICByZXR1cm4gdHlwZW9mIGUgPT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gRChlKSB7XG4gIHZhciB0ID0gZnVuY3Rpb24obikge1xuICAgIEVycm9yLmNhbGwobiksIG4uc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfSwgciA9IGUodCk7XG4gIHJldHVybiByLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKSwgci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSByLCByO1xufVxudmFyIG0gPSBEKGZ1bmN0aW9uKGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHIpIHtcbiAgICBlKHRoaXMpLCB0aGlzLm1lc3NhZ2UgPSByID8gci5sZW5ndGggKyBgIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XG5gICsgci5tYXAoZnVuY3Rpb24obiwgbykge1xuICAgICAgcmV0dXJuIG8gKyAxICsgXCIpIFwiICsgbi50b1N0cmluZygpO1xuICAgIH0pLmpvaW4oYFxuICBgKSA6IFwiXCIsIHRoaXMubmFtZSA9IFwiVW5zdWJzY3JpcHRpb25FcnJvclwiLCB0aGlzLmVycm9ycyA9IHI7XG4gIH07XG59KTtcbmZ1bmN0aW9uIFAoZSwgdCkge1xuICBpZiAoZSkge1xuICAgIHZhciByID0gZS5pbmRleE9mKHQpO1xuICAgIDAgPD0gciAmJiBlLnNwbGljZShyLCAxKTtcbiAgfVxufVxudmFyIFMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gZSh0KSB7XG4gICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSB0LCB0aGlzLmNsb3NlZCA9ICExLCB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsLCB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCwgciwgbiwgbywgaTtcbiAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICB0aGlzLmNsb3NlZCA9ICEwO1xuICAgICAgdmFyIHMgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICBpZiAocylcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudGFnZSA9IG51bGwsIEFycmF5LmlzQXJyYXkocykpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIHUgPSBnKHMpLCBjID0gdS5uZXh0KCk7ICFjLmRvbmU7IGMgPSB1Lm5leHQoKSkge1xuICAgICAgICAgICAgICB2YXIgZiA9IGMudmFsdWU7XG4gICAgICAgICAgICAgIGYucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGEpIHtcbiAgICAgICAgICAgIHQgPSB7IGVycm9yOiBhIH07XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGMgJiYgIWMuZG9uZSAmJiAociA9IHUucmV0dXJuKSAmJiByLmNhbGwodSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBpZiAodCkgdGhyb3cgdC5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzLnJlbW92ZSh0aGlzKTtcbiAgICAgIHZhciBwID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICBpZiAobChwKSlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwKCk7XG4gICAgICAgIH0gY2F0Y2ggKGEpIHtcbiAgICAgICAgICBpID0gYSBpbnN0YW5jZW9mIG0gPyBhLmVycm9ycyA6IFthXTtcbiAgICAgICAgfVxuICAgICAgdmFyIFQgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgaWYgKFQpIHtcbiAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgZCA9IGcoVCksIGggPSBkLm5leHQoKTsgIWguZG9uZTsgaCA9IGQubmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgeiA9IGgudmFsdWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBVKHopO1xuICAgICAgICAgICAgfSBjYXRjaCAoYSkge1xuICAgICAgICAgICAgICBpID0gaSA/PyBbXSwgYSBpbnN0YW5jZW9mIG0gPyBpID0geCh4KFtdLCBPKGkpKSwgTyhhLmVycm9ycykpIDogaS5wdXNoKGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoYSkge1xuICAgICAgICAgIG4gPSB7IGVycm9yOiBhIH07XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGggJiYgIWguZG9uZSAmJiAobyA9IGQucmV0dXJuKSAmJiBvLmNhbGwoZCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChuKSB0aHJvdyBuLmVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkpXG4gICAgICAgIHRocm93IG5ldyBtKGkpO1xuICAgIH1cbiAgfSwgZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odCkge1xuICAgIHZhciByO1xuICAgIGlmICh0ICYmIHQgIT09IHRoaXMpXG4gICAgICBpZiAodGhpcy5jbG9zZWQpXG4gICAgICAgIFUodCk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBlKSB7XG4gICAgICAgICAgaWYgKHQuY2xvc2VkIHx8IHQuX2hhc1BhcmVudCh0aGlzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB0Ll9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAociA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIHIgIT09IHZvaWQgMCA/IHIgOiBbXSkucHVzaCh0KTtcbiAgICAgIH1cbiAgfSwgZS5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgciA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICByZXR1cm4gciA9PT0gdCB8fCBBcnJheS5pc0FycmF5KHIpICYmIHIuaW5jbHVkZXModCk7XG4gIH0sIGUucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHIgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShyKSA/IChyLnB1c2godCksIHIpIDogciA/IFtyLCB0XSA6IHQ7XG4gIH0sIGUucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHIgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgciA9PT0gdCA/IHRoaXMuX3BhcmVudGFnZSA9IG51bGwgOiBBcnJheS5pc0FycmF5KHIpICYmIFAociwgdCk7XG4gIH0sIGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgciA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgciAmJiBQKHIsIHQpLCB0IGluc3RhbmNlb2YgZSAmJiB0Ll9yZW1vdmVQYXJlbnQodGhpcyk7XG4gIH0sIGUuRU1QVFkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IG5ldyBlKCk7XG4gICAgcmV0dXJuIHQuY2xvc2VkID0gITAsIHQ7XG4gIH0oKSwgZTtcbn0oKSwgTSA9IFMuRU1QVFk7XG5mdW5jdGlvbiBSKGUpIHtcbiAgcmV0dXJuIGUgaW5zdGFuY2VvZiBTIHx8IGUgJiYgXCJjbG9zZWRcIiBpbiBlICYmIGwoZS5yZW1vdmUpICYmIGwoZS5hZGQpICYmIGwoZS51bnN1YnNjcmliZSk7XG59XG5mdW5jdGlvbiBVKGUpIHtcbiAgbChlKSA/IGUoKSA6IGUudW5zdWJzY3JpYmUoKTtcbn1cbnZhciBZID0ge1xuICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gIFByb21pc2U6IHZvaWQgMCxcbiAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogITEsXG4gIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogITFcbn0sIEIgPSB7XG4gIHNldFRpbWVvdXQ6IGZ1bmN0aW9uKGUsIHQpIHtcbiAgICBmb3IgKHZhciByID0gW10sIG4gPSAyOyBuIDwgYXJndW1lbnRzLmxlbmd0aDsgbisrKVxuICAgICAgcltuIC0gMl0gPSBhcmd1bWVudHNbbl07XG4gICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCB4KFtlLCB0XSwgTyhyKSkpO1xuICB9LFxuICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgdCA9IEIuZGVsZWdhdGU7XG4gICAgcmV0dXJuICgodCA9PSBudWxsID8gdm9pZCAwIDogdC5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoZSk7XG4gIH0sXG4gIGRlbGVnYXRlOiB2b2lkIDBcbn07XG5mdW5jdGlvbiBMKGUpIHtcbiAgQi5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHRocm93IGU7XG4gIH0pO1xufVxuZnVuY3Rpb24gSSgpIHtcbn1cbmZ1bmN0aW9uIHkoZSkge1xuICBlKCk7XG59XG52YXIgQSA9IGZ1bmN0aW9uKGUpIHtcbiAgYih0LCBlKTtcbiAgZnVuY3Rpb24gdChyKSB7XG4gICAgdmFyIG4gPSBlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICByZXR1cm4gbi5pc1N0b3BwZWQgPSAhMSwgciA/IChuLmRlc3RpbmF0aW9uID0gciwgUihyKSAmJiByLmFkZChuKSkgOiBuLmRlc3RpbmF0aW9uID0gSiwgbjtcbiAgfVxuICByZXR1cm4gdC5jcmVhdGUgPSBmdW5jdGlvbihyLCBuLCBvKSB7XG4gICAgcmV0dXJuIG5ldyBqKHIsIG4sIG8pO1xuICB9LCB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24ocikge1xuICAgIHRoaXMuaXNTdG9wcGVkIHx8IHRoaXMuX25leHQocik7XG4gIH0sIHQucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24ocikge1xuICAgIHRoaXMuaXNTdG9wcGVkIHx8ICh0aGlzLmlzU3RvcHBlZCA9ICEwLCB0aGlzLl9lcnJvcihyKSk7XG4gIH0sIHQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1N0b3BwZWQgfHwgKHRoaXMuaXNTdG9wcGVkID0gITAsIHRoaXMuX2NvbXBsZXRlKCkpO1xuICB9LCB0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xvc2VkIHx8ICh0aGlzLmlzU3RvcHBlZCA9ICEwLCBlLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpLCB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbCk7XG4gIH0sIHQucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24ocikge1xuICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dChyKTtcbiAgfSwgdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24ocikge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKHIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9LCB0LnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9LCB0O1xufShTKSwgViA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gXyhlLCB0KSB7XG4gIHJldHVybiBWLmNhbGwoZSwgdCk7XG59XG52YXIgcSA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBlKHQpIHtcbiAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHQ7XG4gIH1cbiAgcmV0dXJuIGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICBpZiAoci5uZXh0KVxuICAgICAgdHJ5IHtcbiAgICAgICAgci5uZXh0KHQpO1xuICAgICAgfSBjYXRjaCAobikge1xuICAgICAgICB2KG4pO1xuICAgICAgfVxuICB9LCBlLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgIGlmIChyLmVycm9yKVxuICAgICAgdHJ5IHtcbiAgICAgICAgci5lcnJvcih0KTtcbiAgICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgdihuKTtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICB2KHQpO1xuICB9LCBlLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgaWYgKHQuY29tcGxldGUpXG4gICAgICB0cnkge1xuICAgICAgICB0LmNvbXBsZXRlKCk7XG4gICAgICB9IGNhdGNoIChyKSB7XG4gICAgICAgIHYocik7XG4gICAgICB9XG4gIH0sIGU7XG59KCksIGogPSBmdW5jdGlvbihlKSB7XG4gIGIodCwgZSk7XG4gIGZ1bmN0aW9uIHQociwgbiwgbykge1xuICAgIHZhciBpID0gZS5jYWxsKHRoaXMpIHx8IHRoaXMsIHM7XG4gICAgaWYgKGwocikgfHwgIXIpXG4gICAgICBzID0ge1xuICAgICAgICBuZXh0OiByID8/IHZvaWQgMCxcbiAgICAgICAgZXJyb3I6IG4gPz8gdm9pZCAwLFxuICAgICAgICBjb21wbGV0ZTogbyA/PyB2b2lkIDBcbiAgICAgIH07XG4gICAgZWxzZSB7XG4gICAgICB2YXIgdTtcbiAgICAgIGkgJiYgWS51c2VEZXByZWNhdGVkTmV4dENvbnRleHQgPyAodSA9IE9iamVjdC5jcmVhdGUociksIHUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGkudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0sIHMgPSB7XG4gICAgICAgIG5leHQ6IHIubmV4dCAmJiBfKHIubmV4dCwgdSksXG4gICAgICAgIGVycm9yOiByLmVycm9yICYmIF8oci5lcnJvciwgdSksXG4gICAgICAgIGNvbXBsZXRlOiByLmNvbXBsZXRlICYmIF8oci5jb21wbGV0ZSwgdSlcbiAgICAgIH0pIDogcyA9IHI7XG4gICAgfVxuICAgIHJldHVybiBpLmRlc3RpbmF0aW9uID0gbmV3IHEocyksIGk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59KEEpO1xuZnVuY3Rpb24gdihlKSB7XG4gIEwoZSk7XG59XG5mdW5jdGlvbiBHKGUpIHtcbiAgdGhyb3cgZTtcbn1cbnZhciBKID0ge1xuICBjbG9zZWQ6ICEwLFxuICBuZXh0OiBJLFxuICBlcnJvcjogRyxcbiAgY29tcGxldGU6IElcbn0sIEsgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8IFwiQEBvYnNlcnZhYmxlXCI7XG59KCk7XG5mdW5jdGlvbiBRKGUpIHtcbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBXKGUpIHtcbiAgcmV0dXJuIGUubGVuZ3RoID09PSAwID8gUSA6IGUubGVuZ3RoID09PSAxID8gZVswXSA6IGZ1bmN0aW9uKHIpIHtcbiAgICByZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24obiwgbykge1xuICAgICAgcmV0dXJuIG8obik7XG4gICAgfSwgcik7XG4gIH07XG59XG52YXIgQyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBlKHQpIHtcbiAgICB0ICYmICh0aGlzLl9zdWJzY3JpYmUgPSB0KTtcbiAgfVxuICByZXR1cm4gZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgciA9IG5ldyBlKCk7XG4gICAgcmV0dXJuIHIuc291cmNlID0gdGhpcywgci5vcGVyYXRvciA9IHQsIHI7XG4gIH0sIGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKHQsIHIsIG4pIHtcbiAgICB2YXIgbyA9IHRoaXMsIGkgPSBaKHQpID8gdCA6IG5ldyBqKHQsIHIsIG4pO1xuICAgIHJldHVybiB5KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHMgPSBvLCB1ID0gcy5vcGVyYXRvciwgYyA9IHMuc291cmNlO1xuICAgICAgaS5hZGQodSA/IHUuY2FsbChpLCBjKSA6IGMgPyBvLl9zdWJzY3JpYmUoaSkgOiBvLl90cnlTdWJzY3JpYmUoaSkpO1xuICAgIH0pLCBpO1xuICB9LCBlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24odCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHQpO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIHQuZXJyb3Iocik7XG4gICAgfVxuICB9LCBlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCwgcikge1xuICAgIHZhciBuID0gdGhpcztcbiAgICByZXR1cm4gciA9IEYociksIG5ldyByKGZ1bmN0aW9uKG8sIGkpIHtcbiAgICAgIHZhciBzID0gbmV3IGooe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbih1KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHQodSk7XG4gICAgICAgICAgfSBjYXRjaCAoYykge1xuICAgICAgICAgICAgaShjKSwgcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGksXG4gICAgICAgIGNvbXBsZXRlOiBvXG4gICAgICB9KTtcbiAgICAgIG4uc3Vic2NyaWJlKHMpO1xuICAgIH0pO1xuICB9LCBlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24odCkge1xuICAgIHZhciByO1xuICAgIHJldHVybiAociA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCByID09PSB2b2lkIDAgPyB2b2lkIDAgOiByLnN1YnNjcmliZSh0KTtcbiAgfSwgZS5wcm90b3R5cGVbS10gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHQgPSBbXSwgciA9IDA7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspXG4gICAgICB0W3JdID0gYXJndW1lbnRzW3JdO1xuICAgIHJldHVybiBXKHQpKHRoaXMpO1xuICB9LCBlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIHJldHVybiB0ID0gRih0KSwgbmV3IHQoZnVuY3Rpb24obiwgbykge1xuICAgICAgdmFyIGk7XG4gICAgICByLnN1YnNjcmliZShmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiBpID0gcztcbiAgICAgIH0sIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIG8ocyk7XG4gICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG4oaSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgZS5jcmVhdGUgPSBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIG5ldyBlKHQpO1xuICB9LCBlO1xufSgpO1xuZnVuY3Rpb24gRihlKSB7XG4gIHZhciB0O1xuICByZXR1cm4gKHQgPSBlID8/IFkuUHJvbWlzZSkgIT09IG51bGwgJiYgdCAhPT0gdm9pZCAwID8gdCA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBYKGUpIHtcbiAgcmV0dXJuIGUgJiYgbChlLm5leHQpICYmIGwoZS5lcnJvcikgJiYgbChlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIFooZSkge1xuICByZXR1cm4gZSAmJiBlIGluc3RhbmNlb2YgQSB8fCBYKGUpICYmIFIoZSk7XG59XG5mdW5jdGlvbiAkKGUpIHtcbiAgcmV0dXJuIGwoZSA9PSBudWxsID8gdm9pZCAwIDogZS5saWZ0KTtcbn1cbmZ1bmN0aW9uIE4oZSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGlmICgkKHQpKVxuICAgICAgcmV0dXJuIHQubGlmdChmdW5jdGlvbihyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGUociwgdGhpcyk7XG4gICAgICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgICB0aGlzLmVycm9yKG4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGVcIik7XG4gIH07XG59XG5mdW5jdGlvbiBycihlLCB0LCByLCBuLCBvKSB7XG4gIHJldHVybiBuZXcgdHIoZSwgdCwgciwgbiwgbyk7XG59XG52YXIgdHIgPSBmdW5jdGlvbihlKSB7XG4gIGIodCwgZSk7XG4gIGZ1bmN0aW9uIHQociwgbiwgbywgaSwgcywgdSkge1xuICAgIHZhciBjID0gZS5jYWxsKHRoaXMsIHIpIHx8IHRoaXM7XG4gICAgcmV0dXJuIGMub25GaW5hbGl6ZSA9IHMsIGMuc2hvdWxkVW5zdWJzY3JpYmUgPSB1LCBjLl9uZXh0ID0gbiA/IGZ1bmN0aW9uKGYpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG4oZik7XG4gICAgICB9IGNhdGNoIChwKSB7XG4gICAgICAgIHIuZXJyb3IocCk7XG4gICAgICB9XG4gICAgfSA6IGUucHJvdG90eXBlLl9uZXh0LCBjLl9lcnJvciA9IGkgPyBmdW5jdGlvbihmKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpKGYpO1xuICAgICAgfSBjYXRjaCAocCkge1xuICAgICAgICByLmVycm9yKHApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH0gOiBlLnByb3RvdHlwZS5fZXJyb3IsIGMuX2NvbXBsZXRlID0gbyA/IGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbygpO1xuICAgICAgfSBjYXRjaCAoZikge1xuICAgICAgICByLmVycm9yKGYpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH0gOiBlLnByb3RvdHlwZS5fY29tcGxldGUsIGM7XG4gIH1cbiAgcmV0dXJuIHQucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHI7XG4gICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgdmFyIG4gPSB0aGlzLmNsb3NlZDtcbiAgICAgIGUucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyksICFuICYmICgociA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgciA9PT0gdm9pZCAwIHx8IHIuY2FsbCh0aGlzKSk7XG4gICAgfVxuICB9LCB0O1xufShBKSwgZXIgPSBEKGZ1bmN0aW9uKGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGUodGhpcyksIHRoaXMubmFtZSA9IFwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JcIiwgdGhpcy5tZXNzYWdlID0gXCJvYmplY3QgdW5zdWJzY3JpYmVkXCI7XG4gIH07XG59KSwgSCA9IGZ1bmN0aW9uKGUpIHtcbiAgYih0LCBlKTtcbiAgZnVuY3Rpb24gdCgpIHtcbiAgICB2YXIgciA9IGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIHJldHVybiByLmNsb3NlZCA9ICExLCByLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsLCByLm9ic2VydmVycyA9IFtdLCByLmlzU3RvcHBlZCA9ICExLCByLmhhc0Vycm9yID0gITEsIHIudGhyb3duRXJyb3IgPSBudWxsLCByO1xuICB9XG4gIHJldHVybiB0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24ocikge1xuICAgIHZhciBuID0gbmV3IGsodGhpcywgdGhpcyk7XG4gICAgcmV0dXJuIG4ub3BlcmF0b3IgPSByLCBuO1xuICB9LCB0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmNsb3NlZClcbiAgICAgIHRocm93IG5ldyBlcigpO1xuICB9LCB0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24ocikge1xuICAgIHZhciBuID0gdGhpcztcbiAgICB5KGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG8sIGk7XG4gICAgICBpZiAobi5fdGhyb3dJZkNsb3NlZCgpLCAhbi5pc1N0b3BwZWQpIHtcbiAgICAgICAgbi5jdXJyZW50T2JzZXJ2ZXJzIHx8IChuLmN1cnJlbnRPYnNlcnZlcnMgPSBBcnJheS5mcm9tKG4ub2JzZXJ2ZXJzKSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgcyA9IGcobi5jdXJyZW50T2JzZXJ2ZXJzKSwgdSA9IHMubmV4dCgpOyAhdS5kb25lOyB1ID0gcy5uZXh0KCkpIHtcbiAgICAgICAgICAgIHZhciBjID0gdS52YWx1ZTtcbiAgICAgICAgICAgIGMubmV4dChyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGYpIHtcbiAgICAgICAgICBvID0geyBlcnJvcjogZiB9O1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1ICYmICF1LmRvbmUgJiYgKGkgPSBzLnJldHVybikgJiYgaS5jYWxsKHMpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAobykgdGhyb3cgby5lcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihyKSB7XG4gICAgdmFyIG4gPSB0aGlzO1xuICAgIHkoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobi5fdGhyb3dJZkNsb3NlZCgpLCAhbi5pc1N0b3BwZWQpIHtcbiAgICAgICAgbi5oYXNFcnJvciA9IG4uaXNTdG9wcGVkID0gITAsIG4udGhyb3duRXJyb3IgPSByO1xuICAgICAgICBmb3IgKHZhciBvID0gbi5vYnNlcnZlcnM7IG8ubGVuZ3RoOyApXG4gICAgICAgICAgby5zaGlmdCgpLmVycm9yKHIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCB0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0gdGhpcztcbiAgICB5KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHIuX3Rocm93SWZDbG9zZWQoKSwgIXIuaXNTdG9wcGVkKSB7XG4gICAgICAgIHIuaXNTdG9wcGVkID0gITA7XG4gICAgICAgIGZvciAodmFyIG4gPSByLm9ic2VydmVyczsgbi5sZW5ndGg7IClcbiAgICAgICAgICBuLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gITAsIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHI7XG4gICAgICByZXR1cm4gKChyID0gdGhpcy5vYnNlcnZlcnMpID09PSBudWxsIHx8IHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHIubGVuZ3RoKSA+IDA7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCB0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24ocikge1xuICAgIHJldHVybiB0aGlzLl90aHJvd0lmQ2xvc2VkKCksIGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCByKTtcbiAgfSwgdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uKHIpIHtcbiAgICByZXR1cm4gdGhpcy5fdGhyb3dJZkNsb3NlZCgpLCB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHIpLCB0aGlzLl9pbm5lclN1YnNjcmliZShyKTtcbiAgfSwgdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24ocikge1xuICAgIHZhciBuID0gdGhpcywgbyA9IHRoaXMsIGkgPSBvLmhhc0Vycm9yLCBzID0gby5pc1N0b3BwZWQsIHUgPSBvLm9ic2VydmVycztcbiAgICByZXR1cm4gaSB8fCBzID8gTSA6ICh0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsLCB1LnB1c2gociksIG5ldyBTKGZ1bmN0aW9uKCkge1xuICAgICAgbi5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbCwgUCh1LCByKTtcbiAgICB9KSk7XG4gIH0sIHQucHJvdG90eXBlLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzID0gZnVuY3Rpb24ocikge1xuICAgIHZhciBuID0gdGhpcywgbyA9IG4uaGFzRXJyb3IsIGkgPSBuLnRocm93bkVycm9yLCBzID0gbi5pc1N0b3BwZWQ7XG4gICAgbyA/IHIuZXJyb3IoaSkgOiBzICYmIHIuY29tcGxldGUoKTtcbiAgfSwgdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIgPSBuZXcgQygpO1xuICAgIHJldHVybiByLnNvdXJjZSA9IHRoaXMsIHI7XG4gIH0sIHQuY3JlYXRlID0gZnVuY3Rpb24ociwgbikge1xuICAgIHJldHVybiBuZXcgayhyLCBuKTtcbiAgfSwgdDtcbn0oQyksIGsgPSBmdW5jdGlvbihlKSB7XG4gIGIodCwgZSk7XG4gIGZ1bmN0aW9uIHQociwgbikge1xuICAgIHZhciBvID0gZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgcmV0dXJuIG8uZGVzdGluYXRpb24gPSByLCBvLnNvdXJjZSA9IG4sIG87XG4gIH1cbiAgcmV0dXJuIHQucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihyKSB7XG4gICAgdmFyIG4sIG87XG4gICAgKG8gPSAobiA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG4ubmV4dCkgPT09IG51bGwgfHwgbyA9PT0gdm9pZCAwIHx8IG8uY2FsbChuLCByKTtcbiAgfSwgdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihyKSB7XG4gICAgdmFyIG4sIG87XG4gICAgKG8gPSAobiA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG4uZXJyb3IpID09PSBudWxsIHx8IG8gPT09IHZvaWQgMCB8fCBvLmNhbGwobiwgcik7XG4gIH0sIHQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHIsIG47XG4gICAgKG4gPSAociA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHIuY29tcGxldGUpID09PSBudWxsIHx8IG4gPT09IHZvaWQgMCB8fCBuLmNhbGwocik7XG4gIH0sIHQucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbihyKSB7XG4gICAgdmFyIG4sIG87XG4gICAgcmV0dXJuIChvID0gKG4gPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogbi5zdWJzY3JpYmUocikpICE9PSBudWxsICYmIG8gIT09IHZvaWQgMCA/IG8gOiBNO1xuICB9LCB0O1xufShIKTtcbmZ1bmN0aW9uIG9yKGUsIHQpIHtcbiAgcmV0dXJuIE4oZnVuY3Rpb24ociwgbikge1xuICAgIHZhciBvID0gMDtcbiAgICByLnN1YnNjcmliZShycihuLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gZS5jYWxsKHQsIGksIG8rKykgJiYgbi5uZXh0KGkpO1xuICAgIH0pKTtcbiAgfSk7XG59XG5sZXQgdyA9IG51bGw7XG5mdW5jdGlvbiBucigpIHtcbiAgaWYgKCF3KSB7XG4gICAgY29uc3QgZSA9IG5ldyBIKCk7XG4gICAgdyA9IHsgc3ViamVjdDogZSwgZGlzcGF0Y2g6IChyLCBuKSA9PiBlLm5leHQoeyBrZXk6IHIsIHZhbHVlOiBuIH0pIH07XG4gIH1cbiAgcmV0dXJuIHc7XG59XG5jb25zdCB7IHN1YmplY3Q6IGlyLCBkaXNwYXRjaDogc3IgfSA9IG5yKCk7XG5leHBvcnQge1xuICBzciBhcyBkaXNwYXRjaCxcbiAgb3IgYXMgZmlsdGVyLFxuICBpciBhcyBzdWJqZWN0XG59O1xuIl0sIm5hbWVzIjpbIkUiLCJlIiwidCIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJyIiwibiIsIm8iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJiIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJnIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJsZW5ndGgiLCJuZXh0IiwidmFsdWUiLCJkb25lIiwiTyIsImkiLCJzIiwicHVzaCIsInUiLCJlcnJvciIsInJldHVybiIsIngiLCJhcmd1bWVudHMiLCJzbGljZSIsImNvbmNhdCIsImwiLCJEIiwiRXJyb3IiLCJzdGFjayIsIm0iLCJtZXNzYWdlIiwibWFwIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImVycm9ycyIsIlAiLCJpbmRleE9mIiwic3BsaWNlIiwiUyIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfZmluYWxpemVycyIsInVuc3Vic2NyaWJlIiwiaXNBcnJheSIsImMiLCJmIiwicmVtb3ZlIiwiYSIsInAiLCJUIiwiZCIsImgiLCJ6IiwiVSIsImFkZCIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJNIiwiUiIsIlkiLCJvblVuaGFuZGxlZEVycm9yIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwiUHJvbWlzZSIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJCIiwic2V0VGltZW91dCIsImFwcGx5IiwiY2xlYXJUaW1lb3V0IiwiZGVsZWdhdGUiLCJMIiwiSSIsInkiLCJBIiwiaXNTdG9wcGVkIiwiZGVzdGluYXRpb24iLCJKIiwiaiIsIl9uZXh0IiwiX2Vycm9yIiwiY29tcGxldGUiLCJfY29tcGxldGUiLCJWIiwiRnVuY3Rpb24iLCJiaW5kIiwiXyIsInEiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJ2IiwiRyIsIksiLCJvYnNlcnZhYmxlIiwiUSIsIlciLCJyZWR1Y2UiLCJDIiwiX3N1YnNjcmliZSIsImxpZnQiLCJzb3VyY2UiLCJvcGVyYXRvciIsInN1YnNjcmliZSIsIloiLCJfdHJ5U3Vic2NyaWJlIiwiZm9yRWFjaCIsIkYiLCJwaXBlIiwidG9Qcm9taXNlIiwiWCIsIiQiLCJOIiwicnIiLCJ0ciIsIm9uRmluYWxpemUiLCJzaG91bGRVbnN1YnNjcmliZSIsImVyIiwiSCIsImN1cnJlbnRPYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwiayIsIl90aHJvd0lmQ2xvc2VkIiwiZnJvbSIsInNoaWZ0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX2NoZWNrRmluYWxpemVkU3RhdHVzZXMiLCJfaW5uZXJTdWJzY3JpYmUiLCJhc09ic2VydmFibGUiLCJvciIsInciLCJuciIsInN1YmplY3QiLCJkaXNwYXRjaCIsImtleSIsImlyIiwic3IiLCJmaWx0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@designcombo/events/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@designcombo/state/dist/index.es.js":
/*!**********************************************************!*\
  !*** ./node_modules/@designcombo/state/dist/index.es.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTIVE_CLONE: () => (/* binding */ ui),\n/* harmony export */   ACTIVE_DELETE: () => (/* binding */ La),\n/* harmony export */   ACTIVE_PASTE: () => (/* binding */ ci),\n/* harmony export */   ACTIVE_PREFIX: () => (/* binding */ Ce),\n/* harmony export */   ACTIVE_SET: () => (/* binding */ Ha),\n/* harmony export */   ACTIVE_SPLIT: () => (/* binding */ li),\n/* harmony export */   ADD_ANIMATION: () => (/* binding */ ei),\n/* harmony export */   ADD_AUDIO: () => (/* binding */ Js),\n/* harmony export */   ADD_CAPTIONS: () => (/* binding */ ri),\n/* harmony export */   ADD_COMPOSITION: () => (/* binding */ ii),\n/* harmony export */   ADD_ILLUSTRATION: () => (/* binding */ Qs),\n/* harmony export */   ADD_IMAGE: () => (/* binding */ Zs),\n/* harmony export */   ADD_ITEMS: () => (/* binding */ si),\n/* harmony export */   ADD_MASK: () => (/* binding */ Pa),\n/* harmony export */   ADD_PLACEHOLDER: () => (/* binding */ Ca),\n/* harmony export */   ADD_PREFIX: () => (/* binding */ gt),\n/* harmony export */   ADD_SHAPE: () => (/* binding */ ti),\n/* harmony export */   ADD_SUFFIX: () => (/* binding */ Aa),\n/* harmony export */   ADD_TEMPLATE: () => (/* binding */ ni),\n/* harmony export */   ADD_TEXT: () => (/* binding */ Vs),\n/* harmony export */   ADD_TRANSITION: () => (/* binding */ Ra),\n/* harmony export */   ADD_VIDEO: () => (/* binding */ qs),\n/* harmony export */   DELETE_TEMPLATE_ITEM: () => (/* binding */ Na),\n/* harmony export */   DESIGN_LOAD: () => (/* binding */ Xs),\n/* harmony export */   DESIGN_PREFIX: () => (/* binding */ Dn),\n/* harmony export */   DESIGN_RESIZE: () => (/* binding */ Ks),\n/* harmony export */   EDIT_OBJECT: () => (/* binding */ ai),\n/* harmony export */   EDIT_PREFIX: () => (/* binding */ be),\n/* harmony export */   EDIT_SHAPE: () => (/* binding */ Fa),\n/* harmony export */   EDIT_TEMPLATE_ITEM: () => (/* binding */ $a),\n/* harmony export */   EDIT_TEXT: () => (/* binding */ za),\n/* harmony export */   ENTER_EDIT_MODE: () => (/* binding */ ja),\n/* harmony export */   HISTORY_PREFIX: () => (/* binding */ Sr),\n/* harmony export */   HISTORY_REDO: () => (/* binding */ mi),\n/* harmony export */   HISTORY_RESET: () => (/* binding */ to),\n/* harmony export */   HISTORY_UNDO: () => (/* binding */ hi),\n/* harmony export */   LAYER_CLONE: () => (/* binding */ di),\n/* harmony export */   LAYER_COPY: () => (/* binding */ qa),\n/* harmony export */   LAYER_CUT: () => (/* binding */ Qa),\n/* harmony export */   LAYER_DELETE: () => (/* binding */ fi),\n/* harmony export */   LAYER_EDITING_NAME: () => (/* binding */ Va),\n/* harmony export */   LAYER_HIDDEN: () => (/* binding */ Wa),\n/* harmony export */   LAYER_LOCKED: () => (/* binding */ Ua),\n/* harmony export */   LAYER_MOVE: () => (/* binding */ Ga),\n/* harmony export */   LAYER_PASTE: () => (/* binding */ Ja),\n/* harmony export */   LAYER_PREFIX: () => (/* binding */ pt),\n/* harmony export */   LAYER_RENAME: () => (/* binding */ Ka),\n/* harmony export */   LAYER_REPLACE: () => (/* binding */ pi),\n/* harmony export */   LAYER_SELECT: () => (/* binding */ Ya),\n/* harmony export */   LAYER_SELECTION: () => (/* binding */ Ba),\n/* harmony export */   LAYER_SEND_TO: () => (/* binding */ Xa),\n/* harmony export */   LAYER_SPLIT: () => (/* binding */ Za),\n/* harmony export */   REPLACE_MEDIA: () => (/* binding */ oi),\n/* harmony export */   STATE_CHANGED: () => (/* binding */ Oa),\n/* harmony export */   STATE_PREFIX: () => (/* binding */ Bs),\n/* harmony export */   TIMELINE_SCALE_CHANGED: () => (/* binding */ yi),\n/* harmony export */   TIMELINE_SCALE_PREFIX: () => (/* binding */ us),\n/* harmony export */   TRACKS_CHANGED: () => (/* binding */ xa),\n/* harmony export */   TRACK_ITEMS_CHANGED: () => (/* binding */ Da),\n/* harmony export */   TRACK_ITEMS_PREFIX: () => (/* binding */ Ys),\n/* harmony export */   TRACK_PREFIX: () => (/* binding */ Gs),\n/* harmony export */   \"default\": () => (/* binding */ eo)\n/* harmony export */ });\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/events */ \"(ssr)/./node_modules/@designcombo/events/dist/index.es.js\");\nvar xs = Object.defineProperty;\nvar Ds = (t, e, r)=>e in t ? xs(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : t[e] = r;\nvar le = (t, e, r)=>Ds(t, typeof e != \"symbol\" ? e + \"\" : e, r);\n\nvar mn = function(t, e) {\n    return mn = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(r, s) {\n        r.__proto__ = s;\n    } || function(r, s) {\n        for(var a in s)Object.prototype.hasOwnProperty.call(s, a) && (r[a] = s[a]);\n    }, mn(t, e);\n};\nfunction Qe(t, e) {\n    if (typeof e != \"function\" && e !== null) throw new TypeError(\"Class extends value \" + String(e) + \" is not a constructor or null\");\n    mn(t, e);\n    function r() {\n        this.constructor = t;\n    }\n    t.prototype = e === null ? Object.create(e) : (r.prototype = e.prototype, new r());\n}\nfunction yn(t) {\n    var e = typeof Symbol == \"function\" && Symbol.iterator, r = e && t[e], s = 0;\n    if (r) return r.call(t);\n    if (t && typeof t.length == \"number\") return {\n        next: function() {\n            return t && s >= t.length && (t = void 0), {\n                value: t && t[s++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction gn(t, e) {\n    var r = typeof Symbol == \"function\" && t[Symbol.iterator];\n    if (!r) return t;\n    var s = r.call(t), a, c = [], d;\n    try {\n        for(; (e === void 0 || e-- > 0) && !(a = s.next()).done;)c.push(a.value);\n    } catch (f) {\n        d = {\n            error: f\n        };\n    } finally{\n        try {\n            a && !a.done && (r = s.return) && r.call(s);\n        } finally{\n            if (d) throw d.error;\n        }\n    }\n    return c;\n}\nfunction In(t, e, r) {\n    if (r || arguments.length === 2) for(var s = 0, a = e.length, c; s < a; s++)(c || !(s in e)) && (c || (c = Array.prototype.slice.call(e, 0, s)), c[s] = e[s]);\n    return t.concat(c || Array.prototype.slice.call(e));\n}\nfunction Wt(t) {\n    return typeof t == \"function\";\n}\nfunction ss(t) {\n    var e = function(s) {\n        Error.call(s), s.stack = new Error().stack;\n    }, r = t(e);\n    return r.prototype = Object.create(Error.prototype), r.prototype.constructor = r, r;\n}\nvar ln = ss(function(t) {\n    return function(r) {\n        t(this), this.message = r ? r.length + ` errors occurred during unsubscription:\n` + r.map(function(s, a) {\n            return a + 1 + \") \" + s.toString();\n        }).join(`\n  `) : \"\", this.name = \"UnsubscriptionError\", this.errors = r;\n    };\n});\nfunction bn(t, e) {\n    if (t) {\n        var r = t.indexOf(e);\n        0 <= r && t.splice(r, 1);\n    }\n}\nvar kr = function() {\n    function t(e) {\n        this.initialTeardown = e, this.closed = !1, this._parentage = null, this._finalizers = null;\n    }\n    return t.prototype.unsubscribe = function() {\n        var e, r, s, a, c;\n        if (!this.closed) {\n            this.closed = !0;\n            var d = this._parentage;\n            if (d) if (this._parentage = null, Array.isArray(d)) try {\n                for(var f = yn(d), b = f.next(); !b.done; b = f.next()){\n                    var _ = b.value;\n                    _.remove(this);\n                }\n            } catch (u) {\n                e = {\n                    error: u\n                };\n            } finally{\n                try {\n                    b && !b.done && (r = f.return) && r.call(f);\n                } finally{\n                    if (e) throw e.error;\n                }\n            }\n            else d.remove(this);\n            var M = this.initialTeardown;\n            if (Wt(M)) try {\n                M();\n            } catch (u) {\n                c = u instanceof ln ? u.errors : [\n                    u\n                ];\n            }\n            var E = this._finalizers;\n            if (E) {\n                this._finalizers = null;\n                try {\n                    for(var m = yn(E), T = m.next(); !T.done; T = m.next()){\n                        var C = T.value;\n                        try {\n                            $n(C);\n                        } catch (u) {\n                            c = c ?? [], u instanceof ln ? c = In(In([], gn(c)), gn(u.errors)) : c.push(u);\n                        }\n                    }\n                } catch (u) {\n                    s = {\n                        error: u\n                    };\n                } finally{\n                    try {\n                        T && !T.done && (a = m.return) && a.call(m);\n                    } finally{\n                        if (s) throw s.error;\n                    }\n                }\n            }\n            if (c) throw new ln(c);\n        }\n    }, t.prototype.add = function(e) {\n        var r;\n        if (e && e !== this) if (this.closed) $n(e);\n        else {\n            if (e instanceof t) {\n                if (e.closed || e._hasParent(this)) return;\n                e._addParent(this);\n            }\n            (this._finalizers = (r = this._finalizers) !== null && r !== void 0 ? r : []).push(e);\n        }\n    }, t.prototype._hasParent = function(e) {\n        var r = this._parentage;\n        return r === e || Array.isArray(r) && r.includes(e);\n    }, t.prototype._addParent = function(e) {\n        var r = this._parentage;\n        this._parentage = Array.isArray(r) ? (r.push(e), r) : r ? [\n            r,\n            e\n        ] : e;\n    }, t.prototype._removeParent = function(e) {\n        var r = this._parentage;\n        r === e ? this._parentage = null : Array.isArray(r) && bn(r, e);\n    }, t.prototype.remove = function(e) {\n        var r = this._finalizers;\n        r && bn(r, e), e instanceof t && e._removeParent(this);\n    }, t.EMPTY = function() {\n        var e = new t();\n        return e.closed = !0, e;\n    }(), t;\n}(), is = kr.EMPTY;\nfunction as(t) {\n    return t instanceof kr || t && \"closed\" in t && Wt(t.remove) && Wt(t.add) && Wt(t.unsubscribe);\n}\nfunction $n(t) {\n    Wt(t) ? t() : t.unsubscribe();\n}\nvar Os = {\n    Promise: void 0\n}, Cs = {\n    setTimeout: function(t, e) {\n        for(var r = [], s = 2; s < arguments.length; s++)r[s - 2] = arguments[s];\n        return setTimeout.apply(void 0, In([\n            t,\n            e\n        ], gn(r)));\n    },\n    clearTimeout: function(t) {\n        return clearTimeout(t);\n    },\n    delegate: void 0\n};\nfunction Ps(t) {\n    Cs.setTimeout(function() {\n        throw t;\n    });\n}\nfunction Nn() {}\nfunction yr(t) {\n    t();\n}\nvar os = function(t) {\n    Qe(e, t);\n    function e(r) {\n        var s = t.call(this) || this;\n        return s.isStopped = !1, r ? (s.destination = r, as(r) && r.add(s)) : s.destination = Fs, s;\n    }\n    return e.create = function(r, s, a) {\n        return new vn(r, s, a);\n    }, e.prototype.next = function(r) {\n        this.isStopped || this._next(r);\n    }, e.prototype.error = function(r) {\n        this.isStopped || (this.isStopped = !0, this._error(r));\n    }, e.prototype.complete = function() {\n        this.isStopped || (this.isStopped = !0, this._complete());\n    }, e.prototype.unsubscribe = function() {\n        this.closed || (this.isStopped = !0, t.prototype.unsubscribe.call(this), this.destination = null);\n    }, e.prototype._next = function(r) {\n        this.destination.next(r);\n    }, e.prototype._error = function(r) {\n        try {\n            this.destination.error(r);\n        } finally{\n            this.unsubscribe();\n        }\n    }, e.prototype._complete = function() {\n        try {\n            this.destination.complete();\n        } finally{\n            this.unsubscribe();\n        }\n    }, e;\n}(kr), Rs = function() {\n    function t(e) {\n        this.partialObserver = e;\n    }\n    return t.prototype.next = function(e) {\n        var r = this.partialObserver;\n        if (r.next) try {\n            r.next(e);\n        } catch (s) {\n            mr(s);\n        }\n    }, t.prototype.error = function(e) {\n        var r = this.partialObserver;\n        if (r.error) try {\n            r.error(e);\n        } catch (s) {\n            mr(s);\n        }\n        else mr(e);\n    }, t.prototype.complete = function() {\n        var e = this.partialObserver;\n        if (e.complete) try {\n            e.complete();\n        } catch (r) {\n            mr(r);\n        }\n    }, t;\n}(), vn = function(t) {\n    Qe(e, t);\n    function e(r, s, a) {\n        var c = t.call(this) || this, d;\n        return Wt(r) || !r ? d = {\n            next: r ?? void 0,\n            error: s ?? void 0,\n            complete: a ?? void 0\n        } : d = r, c.destination = new Rs(d), c;\n    }\n    return e;\n}(os);\nfunction mr(t) {\n    Ps(t);\n}\nfunction zs(t) {\n    throw t;\n}\nvar Fs = {\n    closed: !0,\n    next: Nn,\n    error: zs,\n    complete: Nn\n}, $s = function() {\n    return typeof Symbol == \"function\" && Symbol.observable || \"@@observable\";\n}();\nfunction Ns(t) {\n    return t;\n}\nfunction js(t) {\n    return t.length === 0 ? Ns : t.length === 1 ? t[0] : function(r) {\n        return t.reduce(function(s, a) {\n            return a(s);\n        }, r);\n    };\n}\nvar jn = function() {\n    function t(e) {\n        e && (this._subscribe = e);\n    }\n    return t.prototype.lift = function(e) {\n        var r = new t();\n        return r.source = this, r.operator = e, r;\n    }, t.prototype.subscribe = function(e, r, s) {\n        var a = this, c = Ls(e) ? e : new vn(e, r, s);\n        return yr(function() {\n            var d = a, f = d.operator, b = d.source;\n            c.add(f ? f.call(c, b) : b ? a._subscribe(c) : a._trySubscribe(c));\n        }), c;\n    }, t.prototype._trySubscribe = function(e) {\n        try {\n            return this._subscribe(e);\n        } catch (r) {\n            e.error(r);\n        }\n    }, t.prototype.forEach = function(e, r) {\n        var s = this;\n        return r = Hn(r), new r(function(a, c) {\n            var d = new vn({\n                next: function(f) {\n                    try {\n                        e(f);\n                    } catch (b) {\n                        c(b), d.unsubscribe();\n                    }\n                },\n                error: c,\n                complete: a\n            });\n            s.subscribe(d);\n        });\n    }, t.prototype._subscribe = function(e) {\n        var r;\n        return (r = this.source) === null || r === void 0 ? void 0 : r.subscribe(e);\n    }, t.prototype[$s] = function() {\n        return this;\n    }, t.prototype.pipe = function() {\n        for(var e = [], r = 0; r < arguments.length; r++)e[r] = arguments[r];\n        return js(e)(this);\n    }, t.prototype.toPromise = function(e) {\n        var r = this;\n        return e = Hn(e), new e(function(s, a) {\n            var c;\n            r.subscribe(function(d) {\n                return c = d;\n            }, function(d) {\n                return a(d);\n            }, function() {\n                return s(c);\n            });\n        });\n    }, t.create = function(e) {\n        return new t(e);\n    }, t;\n}();\nfunction Hn(t) {\n    var e;\n    return (e = t ?? Os.Promise) !== null && e !== void 0 ? e : Promise;\n}\nfunction Hs(t) {\n    return t && Wt(t.next) && Wt(t.error) && Wt(t.complete);\n}\nfunction Ls(t) {\n    return t && t instanceof os || Hs(t) && as(t);\n}\nvar Us = ss(function(t) {\n    return function() {\n        t(this), this.name = \"ObjectUnsubscribedError\", this.message = \"object unsubscribed\";\n    };\n}), cs = function(t) {\n    Qe(e, t);\n    function e() {\n        var r = t.call(this) || this;\n        return r.closed = !1, r.currentObservers = null, r.observers = [], r.isStopped = !1, r.hasError = !1, r.thrownError = null, r;\n    }\n    return e.prototype.lift = function(r) {\n        var s = new Ln(this, this);\n        return s.operator = r, s;\n    }, e.prototype._throwIfClosed = function() {\n        if (this.closed) throw new Us();\n    }, e.prototype.next = function(r) {\n        var s = this;\n        yr(function() {\n            var a, c;\n            if (s._throwIfClosed(), !s.isStopped) {\n                s.currentObservers || (s.currentObservers = Array.from(s.observers));\n                try {\n                    for(var d = yn(s.currentObservers), f = d.next(); !f.done; f = d.next()){\n                        var b = f.value;\n                        b.next(r);\n                    }\n                } catch (_) {\n                    a = {\n                        error: _\n                    };\n                } finally{\n                    try {\n                        f && !f.done && (c = d.return) && c.call(d);\n                    } finally{\n                        if (a) throw a.error;\n                    }\n                }\n            }\n        });\n    }, e.prototype.error = function(r) {\n        var s = this;\n        yr(function() {\n            if (s._throwIfClosed(), !s.isStopped) {\n                s.hasError = s.isStopped = !0, s.thrownError = r;\n                for(var a = s.observers; a.length;)a.shift().error(r);\n            }\n        });\n    }, e.prototype.complete = function() {\n        var r = this;\n        yr(function() {\n            if (r._throwIfClosed(), !r.isStopped) {\n                r.isStopped = !0;\n                for(var s = r.observers; s.length;)s.shift().complete();\n            }\n        });\n    }, e.prototype.unsubscribe = function() {\n        this.isStopped = this.closed = !0, this.observers = this.currentObservers = null;\n    }, Object.defineProperty(e.prototype, \"observed\", {\n        get: function() {\n            var r;\n            return ((r = this.observers) === null || r === void 0 ? void 0 : r.length) > 0;\n        },\n        enumerable: !1,\n        configurable: !0\n    }), e.prototype._trySubscribe = function(r) {\n        return this._throwIfClosed(), t.prototype._trySubscribe.call(this, r);\n    }, e.prototype._subscribe = function(r) {\n        return this._throwIfClosed(), this._checkFinalizedStatuses(r), this._innerSubscribe(r);\n    }, e.prototype._innerSubscribe = function(r) {\n        var s = this, a = this, c = a.hasError, d = a.isStopped, f = a.observers;\n        return c || d ? is : (this.currentObservers = null, f.push(r), new kr(function() {\n            s.currentObservers = null, bn(f, r);\n        }));\n    }, e.prototype._checkFinalizedStatuses = function(r) {\n        var s = this, a = s.hasError, c = s.thrownError, d = s.isStopped;\n        a ? r.error(c) : d && r.complete();\n    }, e.prototype.asObservable = function() {\n        var r = new jn();\n        return r.source = this, r;\n    }, e.create = function(r, s) {\n        return new Ln(r, s);\n    }, e;\n}(jn), Ln = function(t) {\n    Qe(e, t);\n    function e(r, s) {\n        var a = t.call(this) || this;\n        return a.destination = r, a.source = s, a;\n    }\n    return e.prototype.next = function(r) {\n        var s, a;\n        (a = (s = this.destination) === null || s === void 0 ? void 0 : s.next) === null || a === void 0 || a.call(s, r);\n    }, e.prototype.error = function(r) {\n        var s, a;\n        (a = (s = this.destination) === null || s === void 0 ? void 0 : s.error) === null || a === void 0 || a.call(s, r);\n    }, e.prototype.complete = function() {\n        var r, s;\n        (s = (r = this.destination) === null || r === void 0 ? void 0 : r.complete) === null || s === void 0 || s.call(r);\n    }, e.prototype._subscribe = function(r) {\n        var s, a;\n        return (a = (s = this.source) === null || s === void 0 ? void 0 : s.subscribe(r)) !== null && a !== void 0 ? a : is;\n    }, e;\n}(cs), Un = function(t) {\n    Qe(e, t);\n    function e(r) {\n        var s = t.call(this) || this;\n        return s._value = r, s;\n    }\n    return Object.defineProperty(e.prototype, \"value\", {\n        get: function() {\n            return this.getValue();\n        },\n        enumerable: !1,\n        configurable: !0\n    }), e.prototype._subscribe = function(r) {\n        var s = t.prototype._subscribe.call(this, r);\n        return !s.closed && r.next(this._value), s;\n    }, e.prototype.getValue = function() {\n        var r = this, s = r.hasError, a = r.thrownError, c = r._value;\n        if (s) throw a;\n        return this._throwIfClosed(), c;\n    }, e.prototype.next = function(r) {\n        t.prototype.next.call(this, this._value = r);\n    }, e;\n}(cs), St = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction xn(t) {\n    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t.default : t;\n}\nvar gr = {\n    exports: {}\n};\ngr.exports;\n(function(t, e) {\n    var r = 200, s = \"__lodash_hash_undefined__\", a = 1, c = 2, d = 9007199254740991, f = \"[object Arguments]\", b = \"[object Array]\", _ = \"[object AsyncFunction]\", M = \"[object Boolean]\", E = \"[object Date]\", m = \"[object Error]\", T = \"[object Function]\", C = \"[object GeneratorFunction]\", u = \"[object Map]\", l = \"[object Number]\", S = \"[object Null]\", w = \"[object Object]\", k = \"[object Promise]\", h = \"[object Proxy]\", y = \"[object RegExp]\", v = \"[object Set]\", I = \"[object String]\", x = \"[object Symbol]\", g = \"[object Undefined]\", O = \"[object WeakMap]\", D = \"[object ArrayBuffer]\", j = \"[object DataView]\", L = \"[object Float32Array]\", R = \"[object Float64Array]\", F = \"[object Int8Array]\", V = \"[object Int16Array]\", kt = \"[object Int32Array]\", Dt = \"[object Uint8Array]\", Ot = \"[object Uint8ClampedArray]\", U = \"[object Uint16Array]\", zt = \"[object Uint32Array]\", wt = /[\\\\^$.*+?()[\\]{}|]/g, at = /^\\[object .+?Constructor\\]$/, Ft = /^(?:0|[1-9]\\d*)$/, A = {};\n    A[L] = A[R] = A[F] = A[V] = A[kt] = A[Dt] = A[Ot] = A[U] = A[zt] = !0, A[f] = A[b] = A[D] = A[M] = A[j] = A[E] = A[m] = A[T] = A[u] = A[l] = A[w] = A[y] = A[v] = A[I] = A[O] = !1;\n    var et = typeof St == \"object\" && St && St.Object === Object && St, Mt = typeof self == \"object\" && self && self.Object === Object && self, ot = et || Mt || Function(\"return this\")(), $t = e && !e.nodeType && e, Et = $t && !0 && t && !t.nodeType && t, Gt = Et && Et.exports === $t, Yt = Gt && et.process, ee = function() {\n        try {\n            return Yt && Yt.binding && Yt.binding(\"util\");\n        } catch  {}\n    }(), Bt = ee && ee.isTypedArray;\n    function re(n, i) {\n        for(var o = -1, p = n == null ? 0 : n.length, N = 0, P = []; ++o < p;){\n            var G = n[o];\n            i(G, o, n) && (P[N++] = G);\n        }\n        return P;\n    }\n    function Xt(n, i) {\n        for(var o = -1, p = i.length, N = n.length; ++o < p;)n[N + o] = i[o];\n        return n;\n    }\n    function ne(n, i) {\n        for(var o = -1, p = n == null ? 0 : n.length; ++o < p;)if (i(n[o], o, n)) return !0;\n        return !1;\n    }\n    function _e(n, i) {\n        for(var o = -1, p = Array(n); ++o < n;)p[o] = i(o);\n        return p;\n    }\n    function ke(n) {\n        return function(i) {\n            return n(i);\n        };\n    }\n    function Nt(n, i) {\n        return n.has(i);\n    }\n    function Kt(n, i) {\n        return n == null ? void 0 : n[i];\n    }\n    function $(n) {\n        var i = -1, o = Array(n.size);\n        return n.forEach(function(p, N) {\n            o[++i] = [\n                N,\n                p\n            ];\n        }), o;\n    }\n    function H(n, i) {\n        return function(o) {\n            return n(i(o));\n        };\n    }\n    function z(n) {\n        var i = -1, o = Array(n.size);\n        return n.forEach(function(p) {\n            o[++i] = p;\n        }), o;\n    }\n    var rt = Array.prototype, ct = Function.prototype, B = Object.prototype, ut = ot[\"__core-js_shared__\"], q = ct.toString, ht = B.hasOwnProperty, Se = function() {\n        var n = /[^.]+$/.exec(ut && ut.keys && ut.keys.IE_PROTO || \"\");\n        return n ? \"Symbol(src)_1.\" + n : \"\";\n    }(), se = B.toString, Pe = RegExp(\"^\" + q.call(ht).replace(wt, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), Y = Gt ? ot.Buffer : void 0, mt = ot.Symbol, Vt = ot.Uint8Array, qt = B.propertyIsEnumerable, Tt = rt.splice, At = mt ? mt.toStringTag : void 0, we = Object.getOwnPropertySymbols, Re = Y ? Y.isBuffer : void 0, ie = H(Object.keys, Object), ze = Ht(ot, \"DataView\"), ae = Ht(ot, \"Map\"), Fe = Ht(ot, \"Promise\"), $e = Ht(ot, \"Set\"), Ne = Ht(ot, \"WeakMap\"), Jt = Ht(Object, \"create\"), rr = yt(ze), jt = yt(ae), Er = yt(Fe), Tr = yt($e), Ar = yt(Ne), nr = mt ? mt.prototype : void 0, je = nr ? nr.valueOf : void 0;\n    function nt(n) {\n        var i = -1, o = n == null ? 0 : n.length;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function xr() {\n        this.__data__ = Jt ? Jt(null) : {}, this.size = 0;\n    }\n    function Dr(n) {\n        var i = this.has(n) && delete this.__data__[n];\n        return this.size -= i ? 1 : 0, i;\n    }\n    function Or(n) {\n        var i = this.__data__;\n        if (Jt) {\n            var o = i[n];\n            return o === s ? void 0 : o;\n        }\n        return ht.call(i, n) ? i[n] : void 0;\n    }\n    function Cr(n) {\n        var i = this.__data__;\n        return Jt ? i[n] !== void 0 : ht.call(i, n);\n    }\n    function Pr(n, i) {\n        var o = this.__data__;\n        return this.size += this.has(n) ? 0 : 1, o[n] = Jt && i === void 0 ? s : i, this;\n    }\n    nt.prototype.clear = xr, nt.prototype.delete = Dr, nt.prototype.get = Or, nt.prototype.has = Cr, nt.prototype.set = Pr;\n    function lt(n) {\n        var i = -1, o = n == null ? 0 : n.length;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function Rr() {\n        this.__data__ = [], this.size = 0;\n    }\n    function zr(n) {\n        var i = this.__data__, o = Te(i, n);\n        if (o < 0) return !1;\n        var p = i.length - 1;\n        return o == p ? i.pop() : Tt.call(i, o, 1), --this.size, !0;\n    }\n    function Fr(n) {\n        var i = this.__data__, o = Te(i, n);\n        return o < 0 ? void 0 : i[o][1];\n    }\n    function $r(n) {\n        return Te(this.__data__, n) > -1;\n    }\n    function Nr(n, i) {\n        var o = this.__data__, p = Te(o, n);\n        return p < 0 ? (++this.size, o.push([\n            n,\n            i\n        ])) : o[p][1] = i, this;\n    }\n    lt.prototype.clear = Rr, lt.prototype.delete = zr, lt.prototype.get = Fr, lt.prototype.has = $r, lt.prototype.set = Nr;\n    function It(n) {\n        var i = -1, o = n == null ? 0 : n.length;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function jr() {\n        this.size = 0, this.__data__ = {\n            hash: new nt(),\n            map: new (ae || lt)(),\n            string: new nt()\n        };\n    }\n    function Hr(n) {\n        var i = xt(this, n).delete(n);\n        return this.size -= i ? 1 : 0, i;\n    }\n    function Lr(n) {\n        return xt(this, n).get(n);\n    }\n    function Ur(n) {\n        return xt(this, n).has(n);\n    }\n    function Wr(n, i) {\n        var o = xt(this, n), p = o.size;\n        return o.set(n, i), this.size += o.size == p ? 0 : 1, this;\n    }\n    It.prototype.clear = jr, It.prototype.delete = Hr, It.prototype.get = Lr, It.prototype.has = Ur, It.prototype.set = Wr;\n    function Me(n) {\n        var i = -1, o = n == null ? 0 : n.length;\n        for(this.__data__ = new It(); ++i < o;)this.add(n[i]);\n    }\n    function sr(n) {\n        return this.__data__.set(n, s), this;\n    }\n    function Ee(n) {\n        return this.__data__.has(n);\n    }\n    Me.prototype.add = Me.prototype.push = sr, Me.prototype.has = Ee;\n    function Ct(n) {\n        var i = this.__data__ = new lt(n);\n        this.size = i.size;\n    }\n    function He() {\n        this.__data__ = new lt(), this.size = 0;\n    }\n    function Gr(n) {\n        var i = this.__data__, o = i.delete(n);\n        return this.size = i.size, o;\n    }\n    function Yr(n) {\n        return this.__data__.get(n);\n    }\n    function Br(n) {\n        return this.__data__.has(n);\n    }\n    function Xr(n, i) {\n        var o = this.__data__;\n        if (o instanceof lt) {\n            var p = o.__data__;\n            if (!ae || p.length < r - 1) return p.push([\n                n,\n                i\n            ]), this.size = ++o.size, this;\n            o = this.__data__ = new It(p);\n        }\n        return o.set(n, i), this.size = o.size, this;\n    }\n    Ct.prototype.clear = He, Ct.prototype.delete = Gr, Ct.prototype.get = Yr, Ct.prototype.has = Br, Ct.prototype.set = Xr;\n    function Kr(n, i) {\n        var o = Ae(n), p = !o && ur(n), N = !o && !p && xe(n), P = !o && !p && !N && fr(n), G = o || p || N || P, W = G ? _e(n.length, String) : [], J = W.length;\n        for(var X in n)ht.call(n, X) && !(G && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (X == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        N && (X == \"offset\" || X == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        P && (X == \"buffer\" || X == \"byteLength\" || X == \"byteOffset\") || // Skip index properties.\n        rn(X, J))) && W.push(X);\n        return W;\n    }\n    function Te(n, i) {\n        for(var o = n.length; o--;)if (cr(n[o][0], i)) return o;\n        return -1;\n    }\n    function Le(n, i, o) {\n        var p = i(n);\n        return Ae(n) ? p : Xt(p, o(n));\n    }\n    function oe(n) {\n        return n == null ? n === void 0 ? g : S : At && At in Object(n) ? Lt(n) : or(n);\n    }\n    function ir(n) {\n        return Rt(n) && oe(n) == f;\n    }\n    function ar(n, i, o, p, N) {\n        return n === i ? !0 : n == null || i == null || !Rt(n) && !Rt(i) ? n !== n && i !== i : Vr(n, i, o, p, ar, N);\n    }\n    function Vr(n, i, o, p, N, P) {\n        var G = Ae(n), W = Ae(i), J = G ? b : Pt(n), X = W ? b : Pt(i);\n        J = J == f ? w : J, X = X == f ? w : X;\n        var dt = J == w, bt = X == w, Z = J == X;\n        if (Z && xe(n)) {\n            if (!xe(i)) return !1;\n            G = !0, dt = !1;\n        }\n        if (Z && !dt) return P || (P = new Ct()), G || fr(n) ? Ue(n, i, o, p, N, P) : Qr(n, i, J, o, p, N, P);\n        if (!(o & a)) {\n            var ft = dt && ht.call(n, \"__wrapped__\"), st = bt && ht.call(i, \"__wrapped__\");\n            if (ft || st) {\n                var Zt = ft ? n.value() : n, Ut = st ? i.value() : i;\n                return P || (P = new Ct()), N(Zt, Ut, o, p, P);\n            }\n        }\n        return Z ? (P || (P = new Ct()), tn(n, i, o, p, N, P)) : !1;\n    }\n    function qr(n) {\n        if (!dr(n) || sn(n)) return !1;\n        var i = lr(n) ? Pe : at;\n        return i.test(yt(n));\n    }\n    function Jr(n) {\n        return Rt(n) && Ge(n.length) && !!A[oe(n)];\n    }\n    function Zr(n) {\n        if (!an(n)) return ie(n);\n        var i = [];\n        for(var o in Object(n))ht.call(n, o) && o != \"constructor\" && i.push(o);\n        return i;\n    }\n    function Ue(n, i, o, p, N, P) {\n        var G = o & a, W = n.length, J = i.length;\n        if (W != J && !(G && J > W)) return !1;\n        var X = P.get(n);\n        if (X && P.get(i)) return X == i;\n        var dt = -1, bt = !0, Z = o & c ? new Me() : void 0;\n        for(P.set(n, i), P.set(i, n); ++dt < W;){\n            var ft = n[dt], st = i[dt];\n            if (p) var Zt = G ? p(st, ft, dt, i, n, P) : p(ft, st, dt, n, i, P);\n            if (Zt !== void 0) {\n                if (Zt) continue;\n                bt = !1;\n                break;\n            }\n            if (Z) {\n                if (!ne(i, function(Ut, ue) {\n                    if (!Nt(Z, ue) && (ft === Ut || N(ft, Ut, o, p, P))) return Z.push(ue);\n                })) {\n                    bt = !1;\n                    break;\n                }\n            } else if (!(ft === st || N(ft, st, o, p, P))) {\n                bt = !1;\n                break;\n            }\n        }\n        return P.delete(n), P.delete(i), bt;\n    }\n    function Qr(n, i, o, p, N, P, G) {\n        switch(o){\n            case j:\n                if (n.byteLength != i.byteLength || n.byteOffset != i.byteOffset) return !1;\n                n = n.buffer, i = i.buffer;\n            case D:\n                return !(n.byteLength != i.byteLength || !P(new Vt(n), new Vt(i)));\n            case M:\n            case E:\n            case l:\n                return cr(+n, +i);\n            case m:\n                return n.name == i.name && n.message == i.message;\n            case y:\n            case I:\n                return n == i + \"\";\n            case u:\n                var W = $;\n            case v:\n                var J = p & a;\n                if (W || (W = z), n.size != i.size && !J) return !1;\n                var X = G.get(n);\n                if (X) return X == i;\n                p |= c, G.set(n, i);\n                var dt = Ue(W(n), W(i), p, N, P, G);\n                return G.delete(n), dt;\n            case x:\n                if (je) return je.call(n) == je.call(i);\n        }\n        return !1;\n    }\n    function tn(n, i, o, p, N, P) {\n        var G = o & a, W = ce(n), J = W.length, X = ce(i), dt = X.length;\n        if (J != dt && !G) return !1;\n        for(var bt = J; bt--;){\n            var Z = W[bt];\n            if (!(G ? Z in i : ht.call(i, Z))) return !1;\n        }\n        var ft = P.get(n);\n        if (ft && P.get(i)) return ft == i;\n        var st = !0;\n        P.set(n, i), P.set(i, n);\n        for(var Zt = G; ++bt < J;){\n            Z = W[bt];\n            var Ut = n[Z], ue = i[Z];\n            if (p) var Fn = G ? p(ue, Ut, Z, i, n, P) : p(Ut, ue, Z, n, i, P);\n            if (!(Fn === void 0 ? Ut === ue || N(Ut, ue, o, p, P) : Fn)) {\n                st = !1;\n                break;\n            }\n            Zt || (Zt = Z == \"constructor\");\n        }\n        if (st && !Zt) {\n            var pr = n.constructor, hr = i.constructor;\n            pr != hr && \"constructor\" in n && \"constructor\" in i && !(typeof pr == \"function\" && pr instanceof pr && typeof hr == \"function\" && hr instanceof hr) && (st = !1);\n        }\n        return P.delete(n), P.delete(i), st;\n    }\n    function ce(n) {\n        return Le(n, Ye, en);\n    }\n    function xt(n, i) {\n        var o = n.__data__;\n        return nn(i) ? o[typeof i == \"string\" ? \"string\" : \"hash\"] : o.map;\n    }\n    function Ht(n, i) {\n        var o = Kt(n, i);\n        return qr(o) ? o : void 0;\n    }\n    function Lt(n) {\n        var i = ht.call(n, At), o = n[At];\n        try {\n            n[At] = void 0;\n            var p = !0;\n        } catch  {}\n        var N = se.call(n);\n        return p && (i ? n[At] = o : delete n[At]), N;\n    }\n    var en = we ? function(n) {\n        return n == null ? [] : (n = Object(n), re(we(n), function(i) {\n            return qt.call(n, i);\n        }));\n    } : cn, Pt = oe;\n    (ze && Pt(new ze(new ArrayBuffer(1))) != j || ae && Pt(new ae()) != u || Fe && Pt(Fe.resolve()) != k || $e && Pt(new $e()) != v || Ne && Pt(new Ne()) != O) && (Pt = function(n) {\n        var i = oe(n), o = i == w ? n.constructor : void 0, p = o ? yt(o) : \"\";\n        if (p) switch(p){\n            case rr:\n                return j;\n            case jt:\n                return u;\n            case Er:\n                return k;\n            case Tr:\n                return v;\n            case Ar:\n                return O;\n        }\n        return i;\n    });\n    function rn(n, i) {\n        return i = i ?? d, !!i && (typeof n == \"number\" || Ft.test(n)) && n > -1 && n % 1 == 0 && n < i;\n    }\n    function nn(n) {\n        var i = typeof n;\n        return i == \"string\" || i == \"number\" || i == \"symbol\" || i == \"boolean\" ? n !== \"__proto__\" : n === null;\n    }\n    function sn(n) {\n        return !!Se && Se in n;\n    }\n    function an(n) {\n        var i = n && n.constructor, o = typeof i == \"function\" && i.prototype || B;\n        return n === o;\n    }\n    function or(n) {\n        return se.call(n);\n    }\n    function yt(n) {\n        if (n != null) {\n            try {\n                return q.call(n);\n            } catch  {}\n            try {\n                return n + \"\";\n            } catch  {}\n        }\n        return \"\";\n    }\n    function cr(n, i) {\n        return n === i || n !== n && i !== i;\n    }\n    var ur = ir(/* @__PURE__ */ function() {\n        return arguments;\n    }()) ? ir : function(n) {\n        return Rt(n) && ht.call(n, \"callee\") && !qt.call(n, \"callee\");\n    }, Ae = Array.isArray;\n    function We(n) {\n        return n != null && Ge(n.length) && !lr(n);\n    }\n    var xe = Re || un;\n    function on(n, i) {\n        return ar(n, i);\n    }\n    function lr(n) {\n        if (!dr(n)) return !1;\n        var i = oe(n);\n        return i == T || i == C || i == _ || i == h;\n    }\n    function Ge(n) {\n        return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= d;\n    }\n    function dr(n) {\n        var i = typeof n;\n        return n != null && (i == \"object\" || i == \"function\");\n    }\n    function Rt(n) {\n        return n != null && typeof n == \"object\";\n    }\n    var fr = Bt ? ke(Bt) : Jr;\n    function Ye(n) {\n        return We(n) ? Kr(n) : Zr(n);\n    }\n    function cn() {\n        return [];\n    }\n    function un() {\n        return !1;\n    }\n    t.exports = on;\n})(gr, gr.exports);\nvar Ws = gr.exports;\nconst Q = /* @__PURE__ */ xn(Ws), Aa = \"add\", Gs = \"track\", Ys = \"trackItems\", xa = `${Gs}:changed`, Da = `${Ys}:changed`, Bs = \"state\", Oa = `${Bs}:changed`, Dn = \"design\", Xs = `${Dn}:load`, Ks = `${Dn}:resize`, gt = \"add\", Vs = `${gt}:text`, qs = `${gt}:video`, Js = `${gt}:audio`, Ca = `${gt}:placeholder`, Zs = `${gt}:image`, Qs = `${gt}:illustration`, ti = `${gt}:shape`, Pa = `${gt}:mask`, Ra = `${gt}:transition`, ei = `${gt}:animation`, ri = `${gt}:caption`, ni = `${gt}:template`, si = `${gt}:items`, ii = `${gt}:composition`, be = \"edit\", ai = `${be}:object`, oi = `${be}:replaceMedia`, za = `${be}:text`, Fa = `${be}:shape`, $a = `${be}:templateItem`, Na = `${be}:deleteTemplateItem`, ja = \"enterEditMode\", Ce = \"active\", Ha = `${Ce}:set`, La = `${Ce}:delete`, ci = `${Ce}:paste`, ui = `${Ce}:clone`, li = `${Ce}:split`, pt = \"layer\", Ua = `${pt}:locked`, Wa = `${pt}:hidden`, Ga = `${pt}:move`, Ya = `${pt}:select`, Ba = `${pt}:selection`, Xa = `${pt}:sendTo`, Ka = `${pt}:rename`, Va = `${pt}:editingName`, qa = `${pt}:copy`, Ja = `${pt}:paste`, di = `${pt}:clone`, Za = `${pt}:split`, Qa = `${pt}:cut`, fi = `${pt}:delete`, pi = `${pt}:replace`, Sr = \"history\", hi = `${Sr}:undo`, mi = `${Sr}:redo`, to = `${Sr}:reset`, us = \"scale\", yi = `${us}:changed`;\nvar Ir = {\n    exports: {}\n};\nIr.exports;\n(function(t, e) {\n    var r = 200, s = \"__lodash_hash_undefined__\", a = 9007199254740991, c = \"[object Arguments]\", d = \"[object Array]\", f = \"[object Boolean]\", b = \"[object Date]\", _ = \"[object Error]\", M = \"[object Function]\", E = \"[object GeneratorFunction]\", m = \"[object Map]\", T = \"[object Number]\", C = \"[object Object]\", u = \"[object Promise]\", l = \"[object RegExp]\", S = \"[object Set]\", w = \"[object String]\", k = \"[object Symbol]\", h = \"[object WeakMap]\", y = \"[object ArrayBuffer]\", v = \"[object DataView]\", I = \"[object Float32Array]\", x = \"[object Float64Array]\", g = \"[object Int8Array]\", O = \"[object Int16Array]\", D = \"[object Int32Array]\", j = \"[object Uint8Array]\", L = \"[object Uint8ClampedArray]\", R = \"[object Uint16Array]\", F = \"[object Uint32Array]\", V = /[\\\\^$.*+?()[\\]{}|]/g, kt = /\\w*$/, Dt = /^\\[object .+?Constructor\\]$/, Ot = /^(?:0|[1-9]\\d*)$/, U = {};\n    U[c] = U[d] = U[y] = U[v] = U[f] = U[b] = U[I] = U[x] = U[g] = U[O] = U[D] = U[m] = U[T] = U[C] = U[l] = U[S] = U[w] = U[k] = U[j] = U[L] = U[R] = U[F] = !0, U[_] = U[M] = U[h] = !1;\n    var zt = typeof St == \"object\" && St && St.Object === Object && St, wt = typeof self == \"object\" && self && self.Object === Object && self, at = zt || wt || Function(\"return this\")(), Ft = e && !e.nodeType && e, A = Ft && !0 && t && !t.nodeType && t, et = A && A.exports === Ft;\n    function Mt(n, i) {\n        return n.set(i[0], i[1]), n;\n    }\n    function ot(n, i) {\n        return n.add(i), n;\n    }\n    function $t(n, i) {\n        for(var o = -1, p = n ? n.length : 0; ++o < p && i(n[o], o, n) !== !1;);\n        return n;\n    }\n    function Et(n, i) {\n        for(var o = -1, p = i.length, N = n.length; ++o < p;)n[N + o] = i[o];\n        return n;\n    }\n    function Gt(n, i, o, p) {\n        for(var N = -1, P = n ? n.length : 0; ++N < P;)o = i(o, n[N], N, n);\n        return o;\n    }\n    function Yt(n, i) {\n        for(var o = -1, p = Array(n); ++o < n;)p[o] = i(o);\n        return p;\n    }\n    function ee(n, i) {\n        return n == null ? void 0 : n[i];\n    }\n    function Bt(n) {\n        var i = !1;\n        if (n != null && typeof n.toString != \"function\") try {\n            i = !!(n + \"\");\n        } catch  {}\n        return i;\n    }\n    function re(n) {\n        var i = -1, o = Array(n.size);\n        return n.forEach(function(p, N) {\n            o[++i] = [\n                N,\n                p\n            ];\n        }), o;\n    }\n    function Xt(n, i) {\n        return function(o) {\n            return n(i(o));\n        };\n    }\n    function ne(n) {\n        var i = -1, o = Array(n.size);\n        return n.forEach(function(p) {\n            o[++i] = p;\n        }), o;\n    }\n    var _e = Array.prototype, ke = Function.prototype, Nt = Object.prototype, Kt = at[\"__core-js_shared__\"], $ = function() {\n        var n = /[^.]+$/.exec(Kt && Kt.keys && Kt.keys.IE_PROTO || \"\");\n        return n ? \"Symbol(src)_1.\" + n : \"\";\n    }(), H = ke.toString, z = Nt.hasOwnProperty, rt = Nt.toString, ct = RegExp(\"^\" + H.call(z).replace(V, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), B = et ? at.Buffer : void 0, ut = at.Symbol, q = at.Uint8Array, ht = Xt(Object.getPrototypeOf, Object), Se = Object.create, se = Nt.propertyIsEnumerable, Pe = _e.splice, Y = Object.getOwnPropertySymbols, mt = B ? B.isBuffer : void 0, Vt = Xt(Object.keys, Object), qt = xt(at, \"DataView\"), Tt = xt(at, \"Map\"), At = xt(at, \"Promise\"), we = xt(at, \"Set\"), Re = xt(at, \"WeakMap\"), ie = xt(Object, \"create\"), ze = yt(qt), ae = yt(Tt), Fe = yt(At), $e = yt(we), Ne = yt(Re), Jt = ut ? ut.prototype : void 0, rr = Jt ? Jt.valueOf : void 0;\n    function jt(n) {\n        var i = -1, o = n ? n.length : 0;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function Er() {\n        this.__data__ = ie ? ie(null) : {};\n    }\n    function Tr(n) {\n        return this.has(n) && delete this.__data__[n];\n    }\n    function Ar(n) {\n        var i = this.__data__;\n        if (ie) {\n            var o = i[n];\n            return o === s ? void 0 : o;\n        }\n        return z.call(i, n) ? i[n] : void 0;\n    }\n    function nr(n) {\n        var i = this.__data__;\n        return ie ? i[n] !== void 0 : z.call(i, n);\n    }\n    function je(n, i) {\n        var o = this.__data__;\n        return o[n] = ie && i === void 0 ? s : i, this;\n    }\n    jt.prototype.clear = Er, jt.prototype.delete = Tr, jt.prototype.get = Ar, jt.prototype.has = nr, jt.prototype.set = je;\n    function nt(n) {\n        var i = -1, o = n ? n.length : 0;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function xr() {\n        this.__data__ = [];\n    }\n    function Dr(n) {\n        var i = this.__data__, o = Ee(i, n);\n        if (o < 0) return !1;\n        var p = i.length - 1;\n        return o == p ? i.pop() : Pe.call(i, o, 1), !0;\n    }\n    function Or(n) {\n        var i = this.__data__, o = Ee(i, n);\n        return o < 0 ? void 0 : i[o][1];\n    }\n    function Cr(n) {\n        return Ee(this.__data__, n) > -1;\n    }\n    function Pr(n, i) {\n        var o = this.__data__, p = Ee(o, n);\n        return p < 0 ? o.push([\n            n,\n            i\n        ]) : o[p][1] = i, this;\n    }\n    nt.prototype.clear = xr, nt.prototype.delete = Dr, nt.prototype.get = Or, nt.prototype.has = Cr, nt.prototype.set = Pr;\n    function lt(n) {\n        var i = -1, o = n ? n.length : 0;\n        for(this.clear(); ++i < o;){\n            var p = n[i];\n            this.set(p[0], p[1]);\n        }\n    }\n    function Rr() {\n        this.__data__ = {\n            hash: new jt(),\n            map: new (Tt || nt)(),\n            string: new jt()\n        };\n    }\n    function zr(n) {\n        return ce(this, n).delete(n);\n    }\n    function Fr(n) {\n        return ce(this, n).get(n);\n    }\n    function $r(n) {\n        return ce(this, n).has(n);\n    }\n    function Nr(n, i) {\n        return ce(this, n).set(n, i), this;\n    }\n    lt.prototype.clear = Rr, lt.prototype.delete = zr, lt.prototype.get = Fr, lt.prototype.has = $r, lt.prototype.set = Nr;\n    function It(n) {\n        this.__data__ = new nt(n);\n    }\n    function jr() {\n        this.__data__ = new nt();\n    }\n    function Hr(n) {\n        return this.__data__.delete(n);\n    }\n    function Lr(n) {\n        return this.__data__.get(n);\n    }\n    function Ur(n) {\n        return this.__data__.has(n);\n    }\n    function Wr(n, i) {\n        var o = this.__data__;\n        if (o instanceof nt) {\n            var p = o.__data__;\n            if (!Tt || p.length < r - 1) return p.push([\n                n,\n                i\n            ]), this;\n            o = this.__data__ = new lt(p);\n        }\n        return o.set(n, i), this;\n    }\n    It.prototype.clear = jr, It.prototype.delete = Hr, It.prototype.get = Lr, It.prototype.has = Ur, It.prototype.set = Wr;\n    function Me(n, i) {\n        var o = We(n) || Ae(n) ? Yt(n.length, String) : [], p = o.length, N = !!p;\n        for(var P in n)z.call(n, P) && !(N && (P == \"length\" || nn(P, p))) && o.push(P);\n        return o;\n    }\n    function sr(n, i, o) {\n        var p = n[i];\n        (!(z.call(n, i) && ur(p, o)) || o === void 0 && !(i in n)) && (n[i] = o);\n    }\n    function Ee(n, i) {\n        for(var o = n.length; o--;)if (ur(n[o][0], i)) return o;\n        return -1;\n    }\n    function Ct(n, i) {\n        return n && Ue(i, Ye(i), n);\n    }\n    function He(n, i, o, p, N, P, G) {\n        var W;\n        if (p && (W = P ? p(n, N, P, G) : p(n)), W !== void 0) return W;\n        if (!Rt(n)) return n;\n        var J = We(n);\n        if (J) {\n            if (W = en(n), !i) return Zr(n, W);\n        } else {\n            var X = Lt(n), dt = X == M || X == E;\n            if (lr(n)) return Te(n, i);\n            if (X == C || X == c || dt && !P) {\n                if (Bt(n)) return P ? n : {};\n                if (W = Pt(dt ? {} : n), !i) return Qr(n, Ct(W, n));\n            } else {\n                if (!U[X]) return P ? n : {};\n                W = rn(n, X, He, i);\n            }\n        }\n        G || (G = new It());\n        var bt = G.get(n);\n        if (bt) return bt;\n        if (G.set(n, W), !J) var Z = o ? tn(n) : Ye(n);\n        return $t(Z || n, function(ft, st) {\n            Z && (st = ft, ft = n[st]), sr(W, st, He(ft, i, o, p, st, n, G));\n        }), W;\n    }\n    function Gr(n) {\n        return Rt(n) ? Se(n) : {};\n    }\n    function Yr(n, i, o) {\n        var p = i(n);\n        return We(n) ? p : Et(p, o(n));\n    }\n    function Br(n) {\n        return rt.call(n);\n    }\n    function Xr(n) {\n        if (!Rt(n) || an(n)) return !1;\n        var i = Ge(n) || Bt(n) ? ct : Dt;\n        return i.test(yt(n));\n    }\n    function Kr(n) {\n        if (!or(n)) return Vt(n);\n        var i = [];\n        for(var o in Object(n))z.call(n, o) && o != \"constructor\" && i.push(o);\n        return i;\n    }\n    function Te(n, i) {\n        if (i) return n.slice();\n        var o = new n.constructor(n.length);\n        return n.copy(o), o;\n    }\n    function Le(n) {\n        var i = new n.constructor(n.byteLength);\n        return new q(i).set(new q(n)), i;\n    }\n    function oe(n, i) {\n        var o = i ? Le(n.buffer) : n.buffer;\n        return new n.constructor(o, n.byteOffset, n.byteLength);\n    }\n    function ir(n, i, o) {\n        var p = i ? o(re(n), !0) : re(n);\n        return Gt(p, Mt, new n.constructor());\n    }\n    function ar(n) {\n        var i = new n.constructor(n.source, kt.exec(n));\n        return i.lastIndex = n.lastIndex, i;\n    }\n    function Vr(n, i, o) {\n        var p = i ? o(ne(n), !0) : ne(n);\n        return Gt(p, ot, new n.constructor());\n    }\n    function qr(n) {\n        return rr ? Object(rr.call(n)) : {};\n    }\n    function Jr(n, i) {\n        var o = i ? Le(n.buffer) : n.buffer;\n        return new n.constructor(o, n.byteOffset, n.length);\n    }\n    function Zr(n, i) {\n        var o = -1, p = n.length;\n        for(i || (i = Array(p)); ++o < p;)i[o] = n[o];\n        return i;\n    }\n    function Ue(n, i, o, p) {\n        o || (o = {});\n        for(var N = -1, P = i.length; ++N < P;){\n            var G = i[N], W = void 0;\n            sr(o, G, W === void 0 ? n[G] : W);\n        }\n        return o;\n    }\n    function Qr(n, i) {\n        return Ue(n, Ht(n), i);\n    }\n    function tn(n) {\n        return Yr(n, Ye, Ht);\n    }\n    function ce(n, i) {\n        var o = n.__data__;\n        return sn(i) ? o[typeof i == \"string\" ? \"string\" : \"hash\"] : o.map;\n    }\n    function xt(n, i) {\n        var o = ee(n, i);\n        return Xr(o) ? o : void 0;\n    }\n    var Ht = Y ? Xt(Y, Object) : cn, Lt = Br;\n    (qt && Lt(new qt(new ArrayBuffer(1))) != v || Tt && Lt(new Tt()) != m || At && Lt(At.resolve()) != u || we && Lt(new we()) != S || Re && Lt(new Re()) != h) && (Lt = function(n) {\n        var i = rt.call(n), o = i == C ? n.constructor : void 0, p = o ? yt(o) : void 0;\n        if (p) switch(p){\n            case ze:\n                return v;\n            case ae:\n                return m;\n            case Fe:\n                return u;\n            case $e:\n                return S;\n            case Ne:\n                return h;\n        }\n        return i;\n    });\n    function en(n) {\n        var i = n.length, o = n.constructor(i);\n        return i && typeof n[0] == \"string\" && z.call(n, \"index\") && (o.index = n.index, o.input = n.input), o;\n    }\n    function Pt(n) {\n        return typeof n.constructor == \"function\" && !or(n) ? Gr(ht(n)) : {};\n    }\n    function rn(n, i, o, p) {\n        var N = n.constructor;\n        switch(i){\n            case y:\n                return Le(n);\n            case f:\n            case b:\n                return new N(+n);\n            case v:\n                return oe(n, p);\n            case I:\n            case x:\n            case g:\n            case O:\n            case D:\n            case j:\n            case L:\n            case R:\n            case F:\n                return Jr(n, p);\n            case m:\n                return ir(n, p, o);\n            case T:\n            case w:\n                return new N(n);\n            case l:\n                return ar(n);\n            case S:\n                return Vr(n, p, o);\n            case k:\n                return qr(n);\n        }\n    }\n    function nn(n, i) {\n        return i = i ?? a, !!i && (typeof n == \"number\" || Ot.test(n)) && n > -1 && n % 1 == 0 && n < i;\n    }\n    function sn(n) {\n        var i = typeof n;\n        return i == \"string\" || i == \"number\" || i == \"symbol\" || i == \"boolean\" ? n !== \"__proto__\" : n === null;\n    }\n    function an(n) {\n        return !!$ && $ in n;\n    }\n    function or(n) {\n        var i = n && n.constructor, o = typeof i == \"function\" && i.prototype || Nt;\n        return n === o;\n    }\n    function yt(n) {\n        if (n != null) {\n            try {\n                return H.call(n);\n            } catch  {}\n            try {\n                return n + \"\";\n            } catch  {}\n        }\n        return \"\";\n    }\n    function cr(n) {\n        return He(n, !0, !0);\n    }\n    function ur(n, i) {\n        return n === i || n !== n && i !== i;\n    }\n    function Ae(n) {\n        return on(n) && z.call(n, \"callee\") && (!se.call(n, \"callee\") || rt.call(n) == c);\n    }\n    var We = Array.isArray;\n    function xe(n) {\n        return n != null && dr(n.length) && !Ge(n);\n    }\n    function on(n) {\n        return fr(n) && xe(n);\n    }\n    var lr = mt || un;\n    function Ge(n) {\n        var i = Rt(n) ? rt.call(n) : \"\";\n        return i == M || i == E;\n    }\n    function dr(n) {\n        return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= a;\n    }\n    function Rt(n) {\n        var i = typeof n;\n        return !!n && (i == \"object\" || i == \"function\");\n    }\n    function fr(n) {\n        return !!n && typeof n == \"object\";\n    }\n    function Ye(n) {\n        return xe(n) ? Me(n) : Kr(n);\n    }\n    function cn() {\n        return [];\n    }\n    function un() {\n        return !1;\n    }\n    t.exports = cr;\n})(Ir, Ir.exports);\nvar gi = Ir.exports;\nconst K = /* @__PURE__ */ xn(gi), Oe = (t)=>new Promise((e, r)=>{\n        const s = new Image();\n        console.warn(\"update cdn config for cors?\"), s.onload = ()=>{\n            const a = s.width, c = s.height;\n            e({\n                width: a,\n                height: c\n            });\n        }, s.onerror = (a)=>{\n            r(a);\n        }, s.crossOrigin = \"anonymous\", s.src = t;\n    }), ls = (t)=>new Promise((e, r)=>{\n        const s = new Audio();\n        s.preload = \"auto\", s.addEventListener(\"loadedmetadata\", ()=>{\n            const a = s.duration * 1e3;\n            e({\n                duration: a\n            });\n        }), s.addEventListener(\"error\", (a)=>{\n            r(a);\n        }), s.src = t, s.crossOrigin = \"anonymous\", s.load();\n    }), _n = (t)=>new Promise((e, r)=>{\n        const s = document.createElement(\"video\");\n        s.preload = \"auto\", s.addEventListener(\"loadedmetadata\", ()=>{\n            const a = s.duration * 1e3, c = s.videoWidth, d = s.videoHeight;\n            e({\n                duration: a,\n                width: c,\n                height: d\n            });\n        }), s.addEventListener(\"error\", (a)=>{\n            r(a);\n        }), s.src = t, s.load();\n    }), Ii = async (t)=>{\n    var a, c;\n    const e = t.duration, r = (a = t.details) == null ? void 0 : a.width, s = (c = t.details) == null ? void 0 : c.height;\n    return e && r && s ? {\n        duration: e,\n        width: r,\n        height: s\n    } : _n(t.details.src);\n}, ds = (t, e)=>{\n    const r = document.createElement(\"div\");\n    Object.keys(e).forEach((a)=>{\n        a !== \"height\" && (r.style[a] = e[a]);\n    }), document.body.appendChild(r), r.textContent = t, r.style.whiteSpace = \"normal\", r.style.position = \"absolute\", r.style.visibility = \"hidden\", r.style.display = \"inline-block\", r.style.width = e.width + \"px\", r.style.fontSize = e.fontSize + \"px\";\n    const s = getComputedStyle(r).height;\n    return document.body.removeChild(r), parseFloat(s);\n}, br = (t)=>{\n    const e = t.map((r)=>new FontFace(r.fontFamily, `url(${r.url})`).load().catch((s)=>s));\n    return e.length === 0 ? Promise.resolve(!0) : new Promise((r, s)=>{\n        Promise.all(e).then((a)=>{\n            a.forEach((c)=>{\n                c && c.family && (document.fonts.add(c), r(!0));\n            });\n        }).catch((a)=>s(a));\n    });\n}, bi = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet Xe = (t = 21)=>{\n    let e = \"\", r = crypto.getRandomValues(new Uint8Array(t |= 0));\n    for(; t--;)e += bi[r[t] & 63];\n    return e;\n};\nfunction De(t = 16) {\n    const e = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", r = e.charAt(Math.floor(Math.random() * e.length));\n    let s = Xe(t - 1);\n    return s = s.replace(/[^a-zA-Z0-9]/g, \"\").slice(0, t - 1), r + s;\n}\nfunction vi(t) {\n    const e = /#([0-9a-fA-F]{3,6})\\b/g, r = /rgb\\(\\s*(\\d+),\\s*(\\d+),\\s*(\\d+)\\s*\\)/g, s = /rgba\\(\\s*(\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([0-9.]+)\\s*\\)/g;\n    function a(d) {\n        return d.length === 3 ? `#${d[0]}${d[0]}${d[1]}${d[1]}${d[2]}${d[2]}`.toUpperCase() : `#${d.toUpperCase()}`;\n    }\n    function c(d, f, b) {\n        return `#${(1 << 24 | d << 16 | f << 8 | b).toString(16).slice(1).toUpperCase()}`;\n    }\n    return t = t.replace(e, (d, f)=>a(f)), t = t.replace(r, (d, f, b, _)=>c(+f, +b, +_)), t = t.replace(s, (d, f, b, _)=>c(+f, +b, +_)), t;\n}\nfunction it(t) {\n    return /^#[0-9a-fA-F]{3}$/.test(t) ? \"#\" + t[1] + t[1] + t[2] + t[2] + t[3] + t[3] : t;\n}\nfunction Wn(t, e) {\n    let r = t;\n    for(const s in e)if (Object.prototype.hasOwnProperty.call(e, s)) {\n        const a = new RegExp(s, \"g\");\n        r = r.replace(a, e[s]);\n    }\n    return r;\n}\nfunction fs(t) {\n    const e = t.getAttribute(\"fill\");\n    if (e && e.trim() !== \"\" && e.trim() !== \"none\") return e.trim();\n    const r = t.getAttribute(\"style\");\n    if (r) {\n        const a = /fill\\s*:\\s*([^;]+);?/.exec(r);\n        if (a) {\n            const c = a[1].trim();\n            if (c !== \"\" && c !== \"none\") return c;\n        }\n    }\n    const s = t.parentElement;\n    return s ? fs(s) : null;\n}\nfunction Be(t) {\n    return /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/.test(t);\n}\nconst _i = (t)=>{\n    const e = `.${t.split(\".\").filter((c)=>c.includes(\"fill:\")).join(\".\")}`, r = {}, s = /\\.([\\w-]+)\\s*\\{\\s*([^}]+)\\s*\\}/g;\n    let a;\n    for(; (a = s.exec(e)) !== null;){\n        const c = a[1], d = a[2], f = {}, b = /fill\\s*:\\s*([^;]+);?/.exec(d), _ = /stroke\\s*:\\s*([^;]+);?/.exec(d);\n        b && (f.fill = it(b[1].trim())), _ && (f.stroke = it(_[1].trim())), r[c] = f;\n    }\n    return r;\n};\nfunction dn(t) {\n    let e = t.parentElement;\n    for(; e;){\n        if (e.tagName.toLowerCase() === \"mask\") return !0;\n        e = e.parentElement;\n    }\n    return !1;\n}\nfunction ki(t, e, r = 300, s = 300) {\n    const a = [], d = new DOMParser().parseFromString(t, \"image/svg+xml\"), f = d.documentElement;\n    f.setAttribute(\"width\", `${r}`), f.setAttribute(\"height\", `${s}`);\n    const b = f.querySelectorAll(\"style\"), _ = {};\n    b.forEach((u)=>{\n        const l = u.textContent || \"\", S = _i(l);\n        Object.assign(_, S);\n        const w = l.replace(/\\.(st[\\w-]+)/g, `.${e}-$1`).replace(/url\\(#(.*?)\\)/g, `url(#${e}-$1)`);\n        u.textContent = w;\n        const k = Array.from(d.querySelectorAll(\"*\")), h = /* @__PURE__ */ new Set();\n        k.forEach((y)=>{\n            if (dn(y)) return;\n            [\n                \"fill\",\n                \"stroke\",\n                \"stop-color\"\n            ].forEach((x)=>{\n                const g = y.getAttribute(x);\n                g && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(g) && h.add(it(g));\n            });\n            const v = y.getAttribute(\"style\");\n            if (v) {\n                const x = /fill\\s*:\\s*([^;]+);?/.exec(v), g = /stroke\\s*:\\s*([^;]+);?/.exec(v), O = /stop-color\\s*:\\s*([^;]+);?/.exec(v);\n                if (x) {\n                    const D = x[1].trim();\n                    D && ![\n                        \"none\",\n                        \"transparent\"\n                    ].includes(D) && Be(it(D)) && h.add(it(D));\n                }\n                if (g) {\n                    const D = g[1].trim();\n                    D && ![\n                        \"none\",\n                        \"transparent\"\n                    ].includes(D) && Be(it(D)) && h.add(it(D));\n                }\n                if (O) {\n                    const D = O[1].trim();\n                    D && ![\n                        \"none\",\n                        \"transparent\"\n                    ].includes(D) && Be(it(D)) && h.add(it(D));\n                }\n            }\n            const I = y.getAttribute(\"class\");\n            I && I.split(\" \").forEach((x)=>{\n                const g = _[x];\n                g != null && g.fill && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(g.fill) && h.add(it(g.fill)), g != null && g.stroke && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(g.stroke) && h.add(it(g.stroke));\n            });\n        }), Array.from(h).forEach((y)=>{\n            Be(y) && a.push(y);\n        });\n    });\n    const M = Array.from(d.querySelectorAll(\"*\")), E = /* @__PURE__ */ new Set();\n    return M.forEach((u)=>{\n        if (dn(u)) return;\n        const l = u.getAttribute(\"class\");\n        if (l) {\n            const w = l.split(\" \").map((k)=>`${e}-${k}`).join(\" \");\n            u.setAttribute(\"class\", w), w.split(\" \").forEach((k)=>{\n                const h = _[k];\n                h != null && h.fill && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(h.fill) && E.add(it(h.fill)), h != null && h.stroke && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(h.stroke) && E.add(it(h.stroke));\n            });\n        }\n        [\n            \"fill\",\n            \"stroke\",\n            \"stop-color\"\n        ].forEach((w)=>{\n            const k = u.getAttribute(w);\n            k && ![\n                \"none\",\n                \"transparent\"\n            ].includes(k) && E.add(it(k));\n        });\n        const S = u.getAttribute(\"style\");\n        if (S) {\n            const w = /fill\\s*:\\s*([^;]+);?/.exec(S), k = /stroke\\s*:\\s*([^;]+);?/.exec(S), h = /stop-color\\s*:\\s*([^;]+);?/.exec(S);\n            if (w) {\n                const y = w[1].trim();\n                y && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(y) && E.add(it(y));\n            }\n            if (k) {\n                const y = k[1].trim();\n                y && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(y) && E.add(it(y));\n            }\n            if (h) {\n                const y = h[1].trim();\n                y && ![\n                    \"none\",\n                    \"transparent\"\n                ].includes(y) && E.add(it(y));\n            }\n        }\n    }), E.forEach((u)=>!a.includes(u) && Be(u) && a.push(u)), Array.from(d.querySelectorAll(\"*\")).forEach((u)=>{\n        if (u.hasAttribute(\"id\")) {\n            const l = u.getAttribute(\"id\");\n            u.setAttribute(\"id\", `${e}-${l}`);\n        }\n        if ([\n            \"fill\",\n            \"stroke\",\n            \"stop-color\",\n            \"filter\",\n            \"clip-path\",\n            \"mask\"\n        ].forEach((l)=>{\n            const S = u.getAttribute(l);\n            S && S.includes(\"url(#\") && u.setAttribute(l, S.replace(/url\\(#(.*?)\\)/g, `url(#${e}-$1)`));\n        }), u.hasAttribute(\"style\")) {\n            const l = u.getAttribute(\"style\");\n            l.includes(\"url(#\") && u.setAttribute(\"style\", l.replace(/url\\(#(.*?)\\)/g, `url(#${e}-$1)`));\n        }\n    }), Array.from(d.querySelectorAll(\"path\")).forEach((u)=>{\n        if (dn(u)) return;\n        !fs(u) && !u.getAttribute(\"class\") && (u.setAttribute(\"fill\", \"#000000\"), a.includes(\"#000000\") || a.push(\"#000000\"));\n    }), {\n        serializer: new XMLSerializer().serializeToString(d),\n        colors: a\n    };\n}\nconst wr = {\n    color: \"#000000\",\n    x: 0,\n    y: 0,\n    blur: 0\n}, ve = (t, e)=>{\n    let r = e != null && e.trim ? e.trim.to - e.trim.from : (e == null ? void 0 : e.duration) || 5e3;\n    const s = {\n        from: 0,\n        to: r\n    };\n    if (!t) return s;\n    if (t.from < 0) return console.error(\"'from' must be a non-negative number. Returning default display.\"), s;\n    if (t.from !== void 0 && t.to === void 0) return {\n        from: t.from,\n        to: t.from + r\n    };\n    if (t.to !== void 0) {\n        if (t.to < 0) return console.error(\"'to' must be a non-negative number. Returning default display.\"), s;\n        if (t.to < t.from) return console.error(\"'to' must be greater than or equal to 'from'. Returning default display.\"), s;\n    }\n    return t;\n}, ps = (t, e)=>t ? t.from && !t.to ? {\n        from: t.from,\n        to: e.duration\n    } : t : {\n        from: 0,\n        to: e.duration\n    };\nfunction te(t, e) {\n    const r = t.scaleMode, s = {\n        x: t.size.width / 2,\n        y: t.size.height / 2\n    }, a = {\n        x: e.width / 2,\n        y: e.height / 2\n    };\n    let c;\n    r === \"fill\" ? c = Math.max(t.size.width / e.width, t.size.height / e.height) : c = Math.min(t.size.width / e.width, t.size.height / e.height);\n    const d = s.x - a.x;\n    return {\n        top: `${s.y - a.y}px`,\n        left: `${d}px`,\n        transform: `scale(${c})`\n    };\n}\nconst hs = async (t, e)=>{\n    const r = t.details.src, s = await Ii(t), a = te(e, {\n        ...s\n    }), c = ps(t.trim, {\n        duration: s.duration\n    }), d = {\n        width: s.width,\n        height: s.height,\n        opacity: 100,\n        src: r,\n        volume: t.details.volume ?? 100,\n        // Default volume\n        borderRadius: t.details.borderRadius ?? 0,\n        // Default border radius\n        borderWidth: t.details.borderWidth ?? 0,\n        // Default border width\n        borderColor: t.details.borderColor || \"#000000\",\n        // Default border color\n        boxShadow: t.details.boxShadow || wr,\n        top: t.details.top || a.top || \"0px\",\n        // Default top\n        left: t.details.left || a.left || \"0px\",\n        // Default left\n        transform: t.details.transform || a.transform,\n        // Default transform\n        blur: t.details.blur || 0,\n        brightness: t.details.brightness || 100,\n        flipX: t.details.flipX || !1,\n        flipY: t.details.flipY || !1,\n        rotate: t.details.rotate || \"0deg\",\n        visibility: t.details.visibility || \"visible\"\n    };\n    return {\n        ...t,\n        trim: c,\n        type: \"video\",\n        name: \"video\",\n        details: d,\n        playbackRate: t.playbackRate || 1,\n        display: ve(t.display, {\n            duration: s.duration,\n            trim: c\n        }),\n        duration: s.duration\n    };\n}, ms = async (t)=>{\n    const e = t.id, r = t.details, a = (await ls(r.src)).duration, c = ps(t.trim, {\n        duration: a\n    });\n    return {\n        id: e,\n        name: t.name || \"audio\",\n        type: \"audio\",\n        display: ve(t.display, {\n            duration: a,\n            trim: c\n        }),\n        trim: c,\n        playbackRate: t.playbackRate || 1,\n        details: {\n            src: r.src,\n            volume: r.volume ?? 100\n        },\n        metadata: {\n            ...t.metadata\n        },\n        duration: a\n    };\n}, ys = async (t, e)=>{\n    var E;\n    const r = t.trackItemIds, s = t.size || {\n        width: t.details.width,\n        height: t.details.height\n    }, a = Math.min(e.size.width / s.width, e.size.height / s.height), c = ((E = t.details) == null ? void 0 : E.rotate) || 0, d = te(e, s), f = t.display;\n    let b = 1 / 0, _ = 0;\n    r.forEach((m)=>{\n        const T = t.trackItemsMap[m];\n        T.display.from < b && (b = T.display.from), T.display.to > _ && (_ = T.display.to);\n    });\n    const M = t.trim || t.display || {\n        from: b,\n        to: _\n    };\n    return {\n        id: t.id,\n        type: \"template\",\n        details: {\n            ...s,\n            top: t.details.top || d.top,\n            left: t.details.left || d.left,\n            scale: a,\n            rotate: c\n        },\n        trim: M,\n        display: f || {\n            from: b,\n            to: _\n        },\n        activeEdit: !1\n    };\n}, Si = async (t, e)=>{\n    var M;\n    const r = t.trackItemIds, s = t.size || {\n        width: t.details.width,\n        height: t.details.height\n    }, a = Math.min(e.size.width / s.width, e.size.height / s.height), c = ((M = t.details) == null ? void 0 : M.rotate) || 0, d = te(e, s), f = t.display;\n    let b = 1 / 0, _ = 0;\n    return r.forEach((E)=>{\n        const m = t.trackItemsMap[E];\n        m.display.from < b && (b = m.display.from), m.display.to > _ && (_ = m.display.to);\n    }), {\n        id: t.id,\n        type: \"composition\",\n        details: {\n            ...s,\n            top: t.details.top || d.top,\n            left: t.details.left || d.left,\n            scale: a,\n            rotate: c\n        },\n        display: f || {\n            from: b,\n            to: _\n        }\n    };\n}, Gn = async (t, e)=>{\n    const r = t.details, s = Oe(r.src), a = fetch(r.src), [c, d] = await Promise.all([\n        s,\n        a\n    ]), f = await d.text(), b = te(e, c), { serializer: _, colors: M } = ki(vi(f), t.id, parseFloat(r.width || c.width), parseFloat(r.height || c.height)), E = t.details.colorMap || Object.fromEntries(M.map((m)=>[\n            m,\n            m\n        ]));\n    return {\n        id: t.id,\n        name: \"illustration\",\n        type: t.type,\n        display: ve(t.display),\n        playbackRate: t.playbackRate || 1,\n        details: {\n            src: r.src || \"\",\n            // Default source URL\n            width: r.width || c.width || 100,\n            // Default width\n            height: r.height || c.height || 100,\n            // Default height\n            opacity: r.opacity ?? 100,\n            // Default opacity\n            transform: r.transform || b.transform,\n            // Default transform\n            border: r.border || \"none\",\n            // Default border\n            borderRadius: r.borderRadius || 0,\n            // Default border radius\n            top: r.top || b.top || \"0px\",\n            // Default top\n            left: r.left || b.left || \"0px\",\n            // Default left\n            borderWidth: r.borderWidth ?? 0,\n            // Default border width\n            borderColor: r.borderColor || \"#000000\",\n            // Default border color\n            flipX: r.flipX || !1,\n            flipY: r.flipY || !1,\n            rotate: r.rotate || \"0deg\",\n            visibility: r.visibility || \"visible\",\n            svgString: _,\n            initialSvgString: K(_),\n            colorMap: E\n        },\n        metadata: t.metadata || {}\n    };\n}, wi = async (t, e)=>{\n    const r = t.details, s = Oe(r.src), [a] = await Promise.all([\n        s\n    ]), c = te(e, a);\n    return {\n        id: t.id,\n        name: \"shape\",\n        type: t.type,\n        display: ve(t.display),\n        playbackRate: t.playbackRate || 1,\n        details: {\n            src: r.src || \"\",\n            // Default source URL\n            width: r.width || a.width || 100,\n            // Default width\n            height: r.height || a.height || 100,\n            // Default height\n            opacity: r.opacity ?? 100,\n            // Default opacity\n            transform: r.transform || c.transform,\n            // Default transform\n            border: r.border || \"none\",\n            // Default border\n            borderRadius: r.borderRadius || 0,\n            // Default border radius\n            top: r.top || c.top || \"0px\",\n            // Default top\n            left: r.left || c.left || \"0px\",\n            // Default left\n            borderWidth: r.borderWidth ?? 0,\n            // Default border width\n            borderColor: r.borderColor || \"#000000\",\n            // Default border color\n            flipX: r.flipX || !1,\n            flipY: r.flipY || !1,\n            rotate: r.rotate || \"0deg\",\n            visibility: r.visibility || \"visible\",\n            backgroundColor: r.backgroundColor || \"#808080\"\n        },\n        metadata: t.metadata || {}\n    };\n}, gs = async (t, e)=>{\n    const r = t.details, s = await Oe(r.src), a = te(e, s);\n    return {\n        id: t.id,\n        type: \"image\",\n        name: \"image\",\n        display: ve(t.display),\n        playbackRate: t.playbackRate || 1,\n        details: {\n            src: r.src || \"\",\n            // Default source URL\n            width: r.width || s.width || 100,\n            // Default width\n            height: r.height || s.height || 100,\n            // Default height\n            opacity: r.opacity ?? 100,\n            // Default opacity\n            transform: r.transform || a.transform,\n            // Default transform\n            border: r.border || \"none\",\n            // Default border\n            borderRadius: r.borderRadius || 0,\n            // Default border radius\n            boxShadow: r.boxShadow || wr,\n            // Default box shadow\n            top: r.top || a.top || \"0px\",\n            // Default top\n            left: r.left || a.left || \"0px\",\n            // Default left\n            borderWidth: r.borderWidth ?? 0,\n            // Default border width\n            borderColor: r.borderColor || \"#000000\",\n            // Default border color\n            blur: r.blur || 0,\n            brightness: r.brightness || 100,\n            flipX: r.flipX || !1,\n            flipY: r.flipY || !1,\n            rotate: r.rotate || \"0deg\",\n            visibility: r.visibility || \"visible\"\n        },\n        metadata: t.metadata || {}\n    };\n}, Is = async (t, e)=>{\n    const r = t;\n    r.details.fontUrl && await br([\n        {\n            fontFamily: r.details.fontFamily,\n            url: r.details.fontUrl\n        }\n    ]);\n    const s = r.id, a = r.details, c = vs(a), d = ds(r.details.text, c), f = te(e, {\n        width: c.width,\n        height: d\n    });\n    return {\n        id: s,\n        name: \"caption\",\n        type: \"caption\",\n        display: ve(r.display),\n        details: {\n            ...c,\n            text: a.text || \"\",\n            // Default text content\n            height: d,\n            // Default height\n            fontUrl: a.fontUrl,\n            top: c.top || f.top,\n            left: c.left || f.left,\n            borderWidth: a.borderWidth || 0,\n            borderColor: a.borderColor || \"#000000\",\n            boxShadow: a.boxShadow || wr,\n            words: a.words || [],\n            appearedColor: a.appearedColor || a.color,\n            activeColor: a.activeColor || a.color,\n            activeFillColor: a.activeFillColor || \"transparent\"\n        },\n        metadata: t.metadata || {}\n    };\n}, bs = async (t, e)=>{\n    t.details.fontUrl && await br([\n        {\n            fontFamily: t.details.fontFamily,\n            url: t.details.fontUrl\n        }\n    ]);\n    const r = t.id, s = t.details, a = vs(s), c = ds(t.details.text, a), d = te(e, {\n        width: a.width,\n        height: c\n    });\n    return {\n        id: r,\n        name: \"text\",\n        type: \"text\",\n        display: ve(t.display),\n        details: {\n            ...a,\n            text: s.text || \"\",\n            // Default text content\n            height: c,\n            // Default height\n            fontUrl: s.fontUrl,\n            top: a.top || d.top,\n            left: a.left || d.left,\n            borderWidth: s.borderWidth || 0,\n            borderColor: s.borderColor || \"#000000\",\n            boxShadow: s.boxShadow || wr\n        },\n        metadata: {}\n    };\n}, vs = (t)=>({\n        fontFamily: t.fontFamily || \"Arial\",\n        // Default font family\n        fontSize: t.fontSize || \"16px\",\n        // Default font size\n        fontWeight: t.fontWeight || \"normal\",\n        // Default font weight\n        fontStyle: t.fontStyle || \"normal\",\n        // Default font style\n        textDecoration: t.textDecoration || \"none\",\n        // Default text decoration\n        textAlign: t.textAlign || \"left\",\n        // Default text alignment\n        lineHeight: t.lineHeight || \"normal\",\n        // Default line height\n        letterSpacing: t.letterSpacing || \"normal\",\n        // Default letter spacing\n        wordSpacing: t.wordSpacing || \"normal\",\n        // Default word spacing\n        color: t.color || \"#ffffff\",\n        // Default text color (black)\n        backgroundColor: t.backgroundColor || \"transparent\",\n        // Default background color\n        border: t.border || \"none\",\n        // Default border\n        textShadow: t.textShadow || \"none\",\n        // Default text shadow\n        text: t.text || \"\",\n        // Default text content\n        opacity: t.opacity ?? 100,\n        // Default opacity\n        width: t.width || 300,\n        wordWrap: t.wordWrap || \"normal\",\n        //'break-word'\n        wordBreak: t.wordBreak || \"normal\",\n        //'break-all',\n        WebkitTextStrokeColor: t.WebkitTextStrokeColor || \"#ffffff\",\n        WebkitTextStrokeWidth: t.WebkitTextStrokeWidth || \"0px\",\n        top: t.top,\n        left: t.left,\n        textTransform: t.textTransform || \"none\",\n        transform: t.transform || \"none\",\n        skewX: t.skewX || 0,\n        skewY: t.skewY || 0\n    }), Mi = async (t, e)=>{\n    switch(t.type){\n        case \"video\":\n            return hs(t, e || {});\n        case \"audio\":\n            return ms(t);\n        case \"image\":\n            return gs(t, e || {});\n        case \"text\":\n            return bs(t, e || {});\n        case \"caption\":\n            return Is(t, e || {});\n        case \"template\":\n            return ys(t, {\n                size: e == null ? void 0 : e.size\n            });\n        default:\n            throw new Error(\"Unsupported track item\");\n    }\n};\nfunction Ei(t, e) {\n    return e.some((r)=>t.some((s)=>s.id === r.id));\n}\nconst Ti = (t = [], e = [])=>t.length === 0 ? e.map((s)=>({\n            id: De(),\n            items: [\n                s.id\n            ],\n            type: s.type,\n            accepts: [\n                \"text\",\n                \"image\",\n                \"video\",\n                \"audio\",\n                \"caption\",\n                \"template\"\n            ]\n        })) : t.map((r)=>({\n            ...r,\n            items: r.items || [],\n            accepts: [\n                \"audio\",\n                \"video\",\n                \"image\",\n                \"text\",\n                \"caption\",\n                \"template\"\n            ],\n            type: r.type || \"text\",\n            magnetic: r.magnetic || !1,\n            static: r.static || !1,\n            id: r.id || De()\n        }));\nfunction Ai(t, e) {\n    return t.filter((s)=>{\n        if (e.forEach((a)=>{\n            s.items.includes(a) && (s.items = s.items.filter((c)=>c !== a));\n        }), s.items.length !== 0 || s.static) return s;\n    });\n}\nconst he = (t)=>Object.keys(t).reduce((e, r)=>{\n        const { display: s, playbackRate: a } = t[r];\n        return Math.max(e, s.to / (a || 1));\n    }, 0);\nfunction kn(t, e, r) {\n    return Math.min(Math.max(t, e), r);\n}\nconst xi = (t, e, r, s, a)=>{\n    if (s === void 0 && a === void 0) return {\n        trackId: void 0,\n        trackIndex: void 0\n    };\n    const c = a !== void 0 ? e[kn(a, 0, e.length)] : e.find((b)=>b.id === s);\n    if (!c) return {\n        trackId: void 0,\n        trackIndex: a !== void 0 ? kn(a, 0, e.length) : void 0\n    };\n    const d = c.items.map((b)=>r[b]), f = t.map((b)=>r[b]);\n    for (const b of d){\n        const _ = b.display.from, M = b.display.to;\n        for (const E of f){\n            const m = E.display.from;\n            if (!(E.display.to <= _ || m >= M)) return {\n                trackId: void 0,\n                trackIndex: e.indexOf(c)\n            };\n        }\n    }\n    return {\n        trackId: c.id,\n        trackIndex: e.indexOf(c)\n    };\n}, Yn = (t, e)=>{\n    var f, b;\n    const r = ((f = t.details.crop) == null ? void 0 : f.width) || t.details.width || 0, s = ((b = t.details.crop) == null ? void 0 : b.height) || t.details.height || 0;\n    let a = e.width, c = e.height;\n    const d = e.width / e.height;\n    return r / s > d ? (a = r, c = r / d) : (c = s, a = s * d), {\n        newWidth: a,\n        newHeight: c,\n        crop: {\n            x: 0,\n            y: 0,\n            height: s,\n            width: r\n        }\n    };\n}, Bn = (t, e)=>{\n    const r = K(t.trim), s = K(t.display);\n    return e.duration < t.display.to && (s.to = e.duration, r && (r.to = e.duration)), {\n        duration: e.duration,\n        trim: r,\n        display: s\n    };\n}, Di = (t)=>{\n    const { trackItemIds: e, transitionsMap: r, trackItemsMap: s } = t, a = /* @__PURE__ */ new Map();\n    Object.values(r).forEach((_)=>{\n        var T, C;\n        const { fromId: M, toId: E, kind: m } = _;\n        m !== \"none\" && (a.has(M) || a.set(M, []), a.has(E) || a.set(E, []), (T = a.get(M)) == null || T.push(_), (C = a.get(E)) == null || C.push(_));\n    });\n    const c = [], d = /* @__PURE__ */ new Set(), f = (_)=>{\n        const M = [];\n        let E = _;\n        for(; E && !d.has(E);){\n            d.add(E);\n            const m = s[E];\n            M.push(m);\n            const T = Object.values(r).find((C)=>C.fromId === E && C.kind !== \"none\");\n            if (!T) break;\n            M.push(T), E = T.toId;\n        }\n        return M;\n    }, b = Object.values(r).filter((_)=>_.kind !== \"none\");\n    for (const _ of e)if (!d.has(_) && (!a.has(_) || !b.some((M)=>M.toId === _))) {\n        const M = f(_);\n        M.length > 0 && c.push(M);\n    }\n    return c.forEach((_)=>{\n        _.sort((M, E)=>\"display\" in M && \"display\" in E ? M.display.from - E.display.from : 0);\n    }), c.filter((_)=>_.filter((E)=>E !== void 0).length > 0);\n};\nfunction Xn(t, e, r) {\n    t.forEach((s)=>{\n        const d = Object.values(e).filter((_)=>s.items.includes(_.id)).sort((_, M)=>_.display.from - M.display.from).map((_)=>_.id), f = Di({\n            trackItemIds: d,\n            transitionsMap: r,\n            trackItemsMap: e\n        });\n        let b = 0;\n        d.forEach((_)=>{\n            const M = [];\n            for (const m of f)if (m.find((T)=>T.id === _)) {\n                const T = f.findIndex((C)=>C.find((u)=>u.id === _));\n                if (T - 1 >= 0) for(let C = T - 1; C >= 0; C--){\n                    const u = f[C];\n                    M.push(u);\n                }\n            }\n            let E = 0;\n            if (M.forEach((m)=>{\n                m.forEach((T)=>{\n                    T.type === \"transition\" && (E += T.duration);\n                });\n            }), e[_]) {\n                const m = e[_].display.to - e[_].display.from;\n                e[_].display = {\n                    from: b - E,\n                    to: b + m - E\n                }, b += m;\n            }\n        });\n    });\n}\nfunction Oi(t, e) {\n    let s = e.reduce((a, c)=>c.display.to > a.display.to ? c : a, {\n        display: {\n            to: 0\n        }\n    }).display.to;\n    t.forEach((a)=>{\n        const c = a.display.from, f = a.display.to - c;\n        a.display.from = s, a.display.to = a.display.from + f, s = a.display.to;\n    });\n}\nfunction Ci(t) {\n    const e = t, r = e.tracks, s = e.trackItemsMap, a = [], c = {}, d = e.structure;\n    return r.forEach((f)=>{\n        var _;\n        const b = f.items.map((M)=>s[M]).sort((M, E)=>M.display.from - E.display.from);\n        for(let M = 0; M < b.length - 1; M++){\n            const E = b[M], m = b[M + 1];\n            if (Math.abs(E.display.to - m.display.from) <= 1) {\n                const T = `${E.id}-${m.id}`;\n                if ((_ = e.transitionIds) == null ? void 0 : _.includes(T)) c[T] = e.transitionsMap[T];\n                else {\n                    const u = {\n                        id: T,\n                        duration: 1500,\n                        fromId: E.id,\n                        toId: m.id,\n                        kind: \"none\",\n                        trackId: f.id,\n                        type: \"transition\"\n                    };\n                    c[T] = u;\n                }\n                a.push(T);\n            }\n        }\n    }), d.forEach((f)=>{\n        f.transitions.forEach((b)=>{\n            c[b] = {\n                ...e.transitionsMap[b],\n                trackId: f.id\n            };\n        });\n    }), e.transitionIds = a, e.transitionsMap = c, {\n        transitionIds: a,\n        transitionsMap: c\n    };\n}\nfunction Pi(t, e, r) {\n    const s = t.toId, a = r[s], c = e.find((d)=>d.items.includes(s));\n    c && (c.magnetic || c.items.forEach((d)=>{\n        const f = r[d];\n        f.display.from > a.display.from && (f.display.from = f.display.from + t.duration, f.display.to = f.display.to + t.duration);\n    }));\n}\nfunction Ri(t) {\n    const e = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(Dn))), r = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(gt))), s = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(pt))), a = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(Sr))), c = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(Ce))), d = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(be))), f = _designcombo_events__WEBPACK_IMPORTED_MODULE_0__.subject.pipe((0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.filter)(({ key: u })=>u.startsWith(us))), b = e.subscribe(async (u)=>{\n        var l, S;\n        if (u.key === Xs) {\n            const w = (l = u.value) == null ? void 0 : l.payload, k = w.trackItemsMap, h = w.trackItemDetailsMap;\n            console.warn(\"IMPROVE FONTS LOADING\");\n            for(const v in h)if (h[v].type === \"text\" || h[v].type === \"caption\") {\n                const I = h[v].details;\n                await br([\n                    {\n                        fontFamily: I.fontFamily,\n                        url: I.fontUrl\n                    }\n                ]);\n            } else if (h[v].type === \"illustration\") {\n                const I = k[v], x = h[v].details, g = await Gn({\n                    ...I,\n                    details: x\n                }, {\n                    size: {\n                        width: x.width,\n                        height: x.height\n                    }\n                }), O = Wn(g.details.svgString, x.colorMap);\n                g.details.svgString = O, h[v].details = g.details, k[v] = g;\n            }\n            const y = he(k);\n            t.updateState({\n                ...w,\n                duration: y\n            }, {\n                kind: \"design:load\",\n                updateHistory: !1\n            });\n        }\n        if (u.key === Ks) {\n            const w = (S = u.value) == null ? void 0 : S.payload;\n            t.updateState({\n                size: w\n            }, {\n                kind: \"design:resize\",\n                updateHistory: !1\n            });\n        }\n    }), _ = a.subscribe((u)=>{\n        if (u.key === hi) return t.undo();\n        if (u.key === mi) return t.redo();\n    }), M = f.subscribe((u)=>{\n        var l;\n        if (u.key === yi) {\n            const S = (l = u.value) == null ? void 0 : l.payload.scale;\n            t.updateState({\n                scale: S\n            }, {\n                kind: \"update\",\n                updateHistory: !1\n            });\n        }\n    }), E = s.subscribe(async (u)=>{\n        var S, w, k, h, y;\n        const l = [];\n        if ((S = u.value) != null && S.payload.trackItemIds && (l.push((w = u.value) == null ? void 0 : w.payload.trackItemIds), t.updateState({\n            activeIds: l\n        }, {\n            kind: \"update\",\n            updateHistory: !1\n        })), u.key === fi) {\n            const v = (k = u.value) == null ? void 0 : k.payload.trackItemIds, I = K(t.getState()), x = v && v.length ? v : I.activeIds, g = x.map((A)=>I.trackItemsMap[A]).filter((A)=>!!A).map((A)=>A.id), O = I.transitionIds.filter((A)=>{\n                const et = I.transitionsMap[A];\n                return g.includes(et.fromId) || g.includes(et.toId);\n            });\n            g.push(...O);\n            const D = {}, j = I.trackItemIds, L = I.transitionIds, R = I.trackItemDetailsMap, F = K(I.tracks), V = K(I.structure);\n            g.forEach((A)=>{\n                var Mt;\n                const et = I.trackItemsMap[A] || I.transitionsMap[A];\n                if (et.type === \"template\") {\n                    const ot = (Mt = I.structure.find((Et)=>Et.id === et.id)) == null ? void 0 : Mt.items;\n                    g.push(...ot);\n                    const $t = V.findIndex((Et)=>Et.id === et.id);\n                    V.splice($t, 1);\n                }\n            }), g.forEach((A)=>{\n                V.forEach((et)=>{\n                    et.items.includes(A) && (et.items = et.items.filter((Mt)=>Mt !== A));\n                });\n            });\n            const kt = j.filter((A)=>!g.includes(A));\n            L.forEach((A)=>{\n                x.includes(A) && x.length === 1 && (D[A] = K(I.transitionsMap[A]));\n            });\n            const Dt = L.filter((A)=>!g.includes(A) && !x.includes(A)), Ot = Object.fromEntries(Object.entries(R).filter(([A])=>!g.includes(A))), U = Object.fromEntries(Object.entries(I.transitionsMap).filter(([A])=>!g.includes(A)));\n            Object.keys(U).forEach((A)=>{\n                x.includes(A) && (U[A].kind = \"none\");\n            });\n            const zt = Ai(I.tracks, g), wt = Object.fromEntries(Object.entries(I.trackItemsMap).filter(([A])=>!g.includes(A))), at = F.filter((A)=>A.magnetic);\n            Xn(at, wt, I.transitionsMap);\n            const Ft = he(wt);\n            Object.keys(D).forEach((A)=>{\n                Pi(D[A], zt, wt);\n            }), t.updateState({\n                trackItemIds: kt,\n                trackItemDetailsMap: Ot,\n                activeIds: [],\n                trackItemsMap: wt,\n                tracks: zt,\n                duration: Ft,\n                structure: V,\n                transitionIds: Dt,\n                transitionsMap: U\n            }, {\n                updateHistory: !0,\n                kind: \"remove\"\n            });\n        }\n        if (u.key === di) {\n            const v = K(t.getState()), I = {}, x = ((h = u.value) == null ? void 0 : h.payload.trackItemIds) || v.activeIds;\n            if (x.length === 0) return;\n            x.forEach((O)=>{\n                const D = v.trackItemsMap[O], j = v.trackItemDetailsMap[O], L = De();\n                v.trackItemsMap[L] = {\n                    ...K(D),\n                    id: L\n                }, v.trackItemDetailsMap[L] = {\n                    ...K(j)\n                }, v.trackItemIds.push(L);\n                const R = v.tracks.find((F)=>F.items.includes(O));\n                I[R.id] ? I[R.id].items.push(L) : I[R.id] = {\n                    ...R,\n                    id: De(),\n                    items: [\n                        L\n                    ],\n                    static: !1,\n                    magnetic: !1\n                };\n            });\n            const g = Object.values(I);\n            v.tracks = [\n                ...g,\n                ...v.tracks\n            ], t.updateState({\n                trackItemDetailsMap: v.trackItemDetailsMap,\n                tracks: v.tracks,\n                trackItemIds: v.trackItemIds,\n                trackItemsMap: v.trackItemsMap\n            }, {\n                updateHistory: !0,\n                kind: \"update\"\n            });\n        }\n        if (u.key === pi) {\n            const v = (y = u.value) == null ? void 0 : y.payload, I = Object.keys(v)[0], x = Object.values(v)[0], g = K(t.getState()), O = g.trackItemDetailsMap[I], D = K(g.trackItemsMap[I]), j = O.details;\n            if (!x.details.src) return;\n            if (O.type === \"image\") {\n                const L = await Oe(x.details.src), { crop: R, newHeight: F, newWidth: V } = Yn(O, L);\n                x.details.crop = R, x.details.height = F, x.details.width = V;\n            } else if (O.type === \"video\") {\n                const L = await _n(x.details.src), R = g.trackItemsMap[I], { display: F, duration: V, trim: kt } = Bn(R, L), { crop: Dt, newHeight: Ot, newWidth: U } = Yn(O, L);\n                x.details.crop = Dt, x.details.height = Ot, x.details.width = U, D.display = F, D.duration = V, D.trim = kt;\n            } else if (O.type === \"audio\") {\n                const L = await ls(x.details.src), R = g.trackItemsMap[I], { display: F, duration: V, trim: kt } = Bn(R, L);\n                D.display = F, D.duration = V, D.trim = kt;\n            }\n            O.details = {\n                ...j,\n                ...x.details\n            }, g.trackItemDetailsMap[I] = {\n                ...O\n            }, g.trackItemsMap[I] = {\n                ...D\n            }, t.updateState({\n                trackItemDetailsMap: g.trackItemDetailsMap,\n                trackItemsMap: g.trackItemsMap\n            }, {\n                updateHistory: !0,\n                kind: \"update:details\"\n            });\n        }\n    }), m = r.subscribe(async (u)=>{\n        var g, O, D, j, L, R, F, V, kt, Dt, Ot, U, zt, wt, at, Ft, A, et, Mt, ot, $t, Et, Gt, Yt, ee, Bt, re, Xt, ne, _e, ke, Nt, Kt;\n        const l = K(t.getState()), S = ((O = (g = u.value) == null ? void 0 : g.options) == null ? void 0 : O.isSelected) || !1, w = (j = (D = u.value) == null ? void 0 : D.options) == null ? void 0 : j.scaleMode, k = (R = (L = u.value) == null ? void 0 : L.options) == null ? void 0 : R.isNewTrack;\n        let h = [], y = \"text\";\n        const v = (V = (F = u.value) == null ? void 0 : F.options) == null ? void 0 : V.trackId;\n        let I = (Dt = (kt = u.value) == null ? void 0 : kt.options) == null ? void 0 : Dt.trackIndex;\n        if (u.key === ei) {\n            const $ = (Ot = u.value) == null ? void 0 : Ot.payload;\n            let H = l.trackItemsMap[$.id].animations;\n            H ? H.in && $.animations.in ? H.in = $.animations.in : H.out && $.animations.out || !H.out && $.animations.out ? H.out = $.animations.out : !H.in && $.animations.in ? H.in = $.animations.in : H = $.animations : l.trackItemsMap[$.id].animations = $.animations;\n        }\n        if (u.key === si) {\n            const $ = (U = u.value) == null ? void 0 : U.payload, H = $.trackItems.map((Y)=>Mi(Y, {\n                    size: l.size\n                })), z = await Promise.all(H), rt = Ti($.tracks, $.trackItems), ct = [];\n            $.trackItems.forEach((Y)=>{\n                if (Y.type !== \"template\") return;\n                l.trackItemsMap = {\n                    ...l.trackItemsMap,\n                    ...Y.trackItemsMap\n                }, l.trackItemDetailsMap = {\n                    ...l.trackItemDetailsMap,\n                    ...Y.trackItemDetailsMap\n                }, l.transitionsMap = {\n                    ...l.transitionsMap,\n                    ...Y.transitionsMap\n                };\n                const mt = {\n                    id: Y.id,\n                    items: Y.trackItemIds,\n                    transitions: Y.transitionsIds || [],\n                    tracks: Y.tracks\n                };\n                ct.push(mt);\n            });\n            const B = [], ut = {}, q = {};\n            if (z.forEach((Y)=>{\n                const { details: mt, ...Vt } = Y;\n                B.push(Y.id), ut[Y.id] = {\n                    type: Y.type,\n                    details: mt\n                }, q[Y.id] = Vt;\n            }), Ei(l.tracks, rt)) l.tracks.forEach((Y)=>{\n                rt.forEach((mt)=>{\n                    if (Y.id === mt.id) {\n                        if (Y.magnetic) {\n                            const Vt = mt.items.map((Tt)=>q[Tt]), qt = Y.items.map((Tt)=>l.trackItemsMap[Tt]);\n                            Oi(Vt, qt);\n                        }\n                        Y.items.push(...B);\n                    }\n                });\n            });\n            else {\n                const Y = ((wt = (zt = u.value) == null ? void 0 : zt.options) == null ? void 0 : wt.trackIndex) || 0, mt = kn(Y, 0, l.tracks.length);\n                l.tracks.splice(mt, 0, ...rt);\n            }\n            l.trackItemDetailsMap = {\n                ...l.trackItemDetailsMap,\n                ...ut\n            }, l.trackItemsMap = {\n                ...l.trackItemsMap,\n                ...q\n            }, l.trackItemIds = [\n                ...l.trackItemIds,\n                ...B\n            ], l.structure = [\n                ...l.structure,\n                ...ct\n            ], l.duration = he(l.trackItemsMap);\n            const { transitionIds: Se, transitionsMap: se } = Ci(l), Pe = l.tracks.filter((Y)=>Y.magnetic);\n            Xn(Pe, l.trackItemsMap, se), t.updateState({\n                trackItemIds: l.trackItemIds,\n                trackItemDetailsMap: l.trackItemDetailsMap,\n                trackItemsMap: l.trackItemsMap,\n                tracks: l.tracks,\n                duration: l.duration,\n                structure: l.structure,\n                transitionIds: Se,\n                transitionsMap: se\n            }, {\n                updateHistory: !0,\n                kind: \"add\"\n            });\n            return;\n        }\n        if (u.key === ri) {\n            y = \"caption\";\n            const $ = (at = u.value) == null ? void 0 : at.payload, H = [];\n            for (const ct of $){\n                const B = Is(ct, {\n                    size: l.size\n                });\n                H.push(B);\n            }\n            const z = await Promise.all(H), rt = [];\n            for (const ct of z){\n                const B = ct.id;\n                rt.push(B);\n                const { details: ut, ...q } = ct;\n                l.trackItemDetailsMap[B] = {\n                    type: y,\n                    details: ut\n                }, l.trackItemsMap[B] = q, l.trackItemIds.push(B);\n            }\n            h = rt;\n        }\n        if (u.key === Vs) {\n            y = \"text\";\n            const $ = await bs((Ft = u.value) == null ? void 0 : Ft.payload, {\n                size: l.size\n            }), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === ni) {\n            y = \"template\";\n            const $ = (A = u.value) == null ? void 0 : A.payload.trackItemsMap, H = (et = u.value) == null ? void 0 : et.payload.trackItemDetailsMap, z = (Mt = u.value) == null ? void 0 : Mt.payload.transitionsMap, rt = ((ot = u.value) == null ? void 0 : ot.payload.transitionIds) || [], ct = ($t = u.value) == null ? void 0 : $t.payload.trackItemIds, B = ((Et = u.value) == null ? void 0 : Et.payload.tracks) || [], { details: ut, ...q } = await ys((Gt = u.value) == null ? void 0 : Gt.payload, {\n                size: l.size\n            }), ht = {\n                id: q.id,\n                items: ct,\n                transitions: rt,\n                tracks: B\n            };\n            l.trackItemDetailsMap[q.id] = {\n                type: y,\n                details: ut\n            }, l.trackItemsMap[q.id] = q, l.trackItemIds.push(q.id), h = [\n                q.id\n            ], l.trackItemsMap = {\n                ...l.trackItemsMap,\n                ...$,\n                [q.id]: {\n                    ...q\n                }\n            }, l.trackItemDetailsMap = {\n                ...l.trackItemDetailsMap,\n                ...H,\n                [q.id]: {\n                    type: \"template\",\n                    details: ut\n                }\n            }, l.transitionsMap = {\n                ...l.transitionsMap,\n                ...z\n            }, l.structure = [\n                ...l.structure,\n                ht\n            ];\n        }\n        if (u.key === Qs) {\n            y = \"illustration\";\n            const $ = await Gn((Yt = u.value) == null ? void 0 : Yt.payload, {\n                size: l.size\n            }), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === ti) {\n            y = \"shape\";\n            const $ = await wi((ee = u.value) == null ? void 0 : ee.payload, {\n                size: l.size\n            }), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === Zs) {\n            y = \"image\";\n            const $ = await gs((Bt = u.value) == null ? void 0 : Bt.payload, {\n                size: l.size,\n                scaleMode: w\n            }), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === Js) {\n            y = \"audio\";\n            const $ = await ms((re = u.value) == null ? void 0 : re.payload), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === qs) {\n            y = \"video\";\n            const $ = await hs((Xt = u.value) == null ? void 0 : Xt.payload, {\n                size: l.size,\n                scaleMode: w\n            }), { details: H, ...z } = $;\n            l.trackItemDetailsMap[z.id] = {\n                type: y,\n                details: H,\n                metadata: z.metadata\n            }, l.trackItemsMap[z.id] = z, l.trackItemIds.push(z.id), h = [\n                z.id\n            ];\n        }\n        if (u.key === ii) {\n            y = \"composition\";\n            const $ = (ne = u.value) == null ? void 0 : ne.payload.trackItemsMap, H = (_e = u.value) == null ? void 0 : _e.payload.trackItemDetailsMap, z = (ke = u.value) == null ? void 0 : ke.payload.trackItemIds, rt = ((Nt = u.value) == null ? void 0 : Nt.payload.tracks) || [], { details: ct, ...B } = await Si((Kt = u.value) == null ? void 0 : Kt.payload, {\n                size: l.size\n            }), ut = {\n                id: B.id,\n                items: z,\n                transitions: [],\n                tracks: rt\n            };\n            l.trackItemDetailsMap[B.id] = {\n                type: y,\n                details: ct\n            }, l.trackItemsMap[B.id] = B, l.trackItemIds.push(B.id), h = [\n                B.id\n            ], l.trackItemsMap = {\n                ...l.trackItemsMap,\n                ...$,\n                [B.id]: {\n                    ...B\n                }\n            }, l.trackItemDetailsMap = {\n                ...l.trackItemDetailsMap,\n                ...H,\n                [B.id]: {\n                    type: y,\n                    details: ct\n                }\n            }, l.structure = [\n                ...l.structure,\n                ut\n            ];\n        }\n        const x = xi(h, l.tracks, l.trackItemsMap, v, I);\n        if (k) {\n            const $ = Xe();\n            x.trackId = $;\n            const H = {\n                id: x.trackId,\n                accepts: [\n                    \"text\",\n                    \"audio\",\n                    \"helper\",\n                    \"video\",\n                    \"image\",\n                    \"caption\",\n                    \"template\"\n                ],\n                type: y,\n                items: h,\n                magnetic: !1,\n                static: !1\n            };\n            l.tracks.splice(x.trackIndex, 0, H);\n        } else if (x.trackId) {\n            const $ = l.tracks.find((H)=>H.id === x.trackId);\n            $ && $.items.push(...h);\n        } else if (x.trackIndex !== void 0) {\n            const $ = {\n                id: Xe(),\n                accepts: [\n                    \"text\",\n                    \"audio\",\n                    \"helper\",\n                    \"video\",\n                    \"image\",\n                    \"caption\",\n                    \"template\"\n                ],\n                type: y,\n                items: h,\n                magnetic: !1,\n                static: !1\n            };\n            l.tracks.splice(x.trackIndex, 0, $);\n        } else l.tracks.unshift({\n            id: Xe(),\n            accepts: [\n                \"text\",\n                \"audio\",\n                \"helper\",\n                \"video\",\n                \"image\",\n                \"caption\",\n                \"template\"\n            ],\n            type: y,\n            items: h,\n            magnetic: !1,\n            static: !1\n        });\n        S && (l.activeIds = h), l.duration = he(l.trackItemsMap), t.updateState({\n            activeIds: l.activeIds,\n            trackItemIds: l.trackItemIds,\n            trackItemDetailsMap: l.trackItemDetailsMap,\n            trackItemsMap: l.trackItemsMap,\n            transitionsMap: l.transitionsMap,\n            tracks: l.tracks,\n            duration: l.duration,\n            structure: l.structure\n        }, {\n            updateHistory: !0,\n            kind: \"add\"\n        });\n    }), T = c.subscribe(async (u)=>{\n        var l;\n        if (u.key === li) {\n            const S = K(t.getState()), w = (l = u.value) == null ? void 0 : l.options.time;\n            if (S.activeIds.length === 1) {\n                const k = S.activeIds[0], h = K(S.trackItemsMap[k]);\n                if (w >= h.display.to || w <= h.display.from) return;\n                const y = K(S.trackItemDetailsMap[k]), v = De(), I = K({\n                    ...h,\n                    display: {\n                        from: h.display.from,\n                        to: w\n                    }\n                }), x = K({\n                    ...h,\n                    id: v,\n                    display: {\n                        from: w,\n                        to: h.display.to\n                    }\n                });\n                if (h.type === \"video\" || h.type === \"audio\") {\n                    const g = w - I.display.from;\n                    I.trim = {\n                        from: h.trim.from,\n                        to: h.trim.from + g\n                    }, x.trim = {\n                        from: h.trim.from + g,\n                        to: h.trim.to\n                    };\n                }\n                S.trackItemsMap[k] = I, S.trackItemsMap[v] = x, S.trackItemIds.push(v), S.trackItemDetailsMap[v] = y, S.tracks.forEach((g)=>{\n                    g.items.includes(k) && g.items.push(v);\n                }), t.updateState({\n                    trackItemDetailsMap: S.trackItemDetailsMap,\n                    tracks: S.tracks,\n                    trackItemIds: S.trackItemIds,\n                    trackItemsMap: S.trackItemsMap\n                }, {\n                    updateHistory: !0,\n                    kind: \"update\"\n                });\n            }\n            return;\n        }\n        if (u.key === ui) {\n            const S = K(t.getState());\n            if (S.activeIds.length) {\n                const w = S.activeIds, k = [], h = {\n                    activeIds: w,\n                    trackItemDetailsMap: {},\n                    trackItemsMap: {},\n                    tracks: []\n                };\n                w.forEach((v)=>{\n                    h.trackItemDetailsMap[v] = S.trackItemDetailsMap[v], h.trackItemsMap[v] = S.trackItemsMap[v], k.push(S.tracks.find((I)=>I.items.includes(v)));\n                });\n                const y = /* @__PURE__ */ new Set();\n                k.filter((v)=>y.has(v.id) ? !1 : (y.add(v), !0)), h.tracks = Array.from(y.keys()), localStorage.setItem(\"DesignComboTemp\", JSON.stringify(h));\n            }\n        }\n        if (u.key === ci) {\n            const S = localStorage.getItem(\"DesignComboTemp\");\n            if (!S) return;\n            const w = K(t.getState()), k = JSON.parse(S), h = {}, y = k.trackItemsMap, v = k.trackItemDetailsMap, I = k.tracks, x = [], g = k.activeIds.map(async (O)=>{\n                const D = v[O];\n                (D.type === \"caption\" || D.type === \"text\") && D.details.fontUrl && await br([\n                    {\n                        fontFamily: D.details.fontFamily,\n                        url: D.details.fontUrl\n                    }\n                ]);\n                const j = De();\n                return h[O] = j, w.trackItemsMap[j] = {\n                    ...y[O],\n                    id: j\n                }, w.trackItemDetailsMap[j] = D, w.trackItemIds.push(j), !0;\n            });\n            await Promise.all(g), I.forEach((O)=>{\n                const D = O.items.map((L)=>h[L]), j = {\n                    ...O,\n                    magnetic: !1,\n                    static: !1,\n                    items: D,\n                    id: Xe()\n                };\n                x.push(j);\n            }), w.tracks = [\n                ...x,\n                ...w.tracks\n            ], t.updateState({\n                trackItemDetailsMap: w.trackItemDetailsMap,\n                tracks: w.tracks,\n                trackItemIds: w.trackItemIds,\n                trackItemsMap: w.trackItemsMap\n            }, {\n                updateHistory: !0,\n                kind: \"update\"\n            });\n        }\n    }), C = d.subscribe(async (u)=>{\n        var l, S, w;\n        if (u.key === ai) {\n            const k = K(t.getState()), h = k.trackItemDetailsMap, y = k.trackItemsMap, v = Object.keys((l = u.value) == null ? void 0 : l.payload);\n            if (!v.length) return;\n            const I = (S = u.value) == null ? void 0 : S.payload;\n            v.forEach((g)=>{\n                const O = I[g];\n                if (O.details) {\n                    if (h[g].details = {\n                        ...h[g].details,\n                        ...O.details\n                    }, O.details.colorMap) {\n                        const D = h[g].details.initialSvgString, j = Wn(D, O.details.colorMap);\n                        h[g].details.svgString = j;\n                    }\n                } else I[g].playbackRate && (y[g].playbackRate = I[g].playbackRate);\n                I[g].metadata && (y[g].metadata ? y[g].metadata = {\n                    ...y[g].metadata,\n                    ...I[g].metadata\n                } : y[g].metadata = I[g].metadata), I[g].display && (y[g].display = I[g].display);\n            });\n            for (const g of v){\n                const O = I[g];\n                if (y[g].type === \"shape\" && O.details.src) {\n                    const D = await Oe(O.details.src);\n                    h[g].details.width = D.width, h[g].details.height = D.height;\n                }\n            }\n            const x = he(y);\n            t.updateState({\n                trackItemDetailsMap: {\n                    ...h\n                },\n                trackItemsMap: {\n                    ...y\n                },\n                duration: x\n            }, {\n                updateHistory: !0,\n                kind: \"update:details\"\n            });\n        }\n        if (u.key === oi) {\n            const k = (w = u.value) == null ? void 0 : w.payload, h = Object.keys(k)[0], y = Object.values(k)[0], v = K(t.getState()), I = v.trackItemDetailsMap[h], x = I.details;\n            if (y.details) {\n                if (y.type === \"image\" && y.details.src) {\n                    const O = await Oe(y.details.src), D = I.details.width || 0, j = I.details.height || 0;\n                    let L = O.width, R = O.height;\n                    const F = O.width / O.height;\n                    D / j > F ? (L = D, R = D / F) : (R = j, L = j * F), x.crop = {\n                        x: 0,\n                        y: 0,\n                        height: x.height,\n                        width: x.width\n                    }, y.details.width = L, y.details.height = R;\n                }\n                if (y.type === \"video\" && y.details.src) {\n                    const O = await _n(y.details.src), D = I.details.width || 0, j = I.details.height || 0;\n                    let L = O.width, R = O.height;\n                    const F = O.width / O.height;\n                    D / j > F ? (L = D, R = D / F) : (R = j, L = j * F), x.crop = {\n                        x: 0,\n                        y: 0,\n                        height: x.height,\n                        width: x.width\n                    }, y.details.width = L, y.details.height = R;\n                }\n                I.details = {\n                    ...x,\n                    ...y.details\n                }, y.details = I.details;\n            }\n            const g = {\n                ...I,\n                ...y\n            };\n            v.trackItemDetailsMap[h] = g, v.trackItemsMap[h] = {\n                ...v.trackItemsMap[h],\n                type: y.type\n            }, t.updateState({\n                trackItemDetailsMap: {\n                    ...v.trackItemDetailsMap\n                },\n                trackItemsMap: {\n                    ...v.trackItemsMap\n                }\n            }, {\n                updateHistory: !0,\n                kind: \"update:details\"\n            });\n        }\n    });\n    return {\n        unsubscribe: ()=>{\n            m.unsubscribe(), T.unsubscribe(), C.unsubscribe(), _.unsubscribe(), E.unsubscribe(), b.unsubscribe(), M.unsubscribe();\n        }\n    };\n}\nconst zi = {\n    Date: !0,\n    RegExp: !0,\n    String: !0,\n    Number: !0\n};\nfunction _s(t, e, r = {\n    cyclesFix: !0\n}, s = []) {\n    var f, b;\n    let a = [];\n    const c = Array.isArray(t);\n    for(const _ in t){\n        const M = t[_], E = c ? +_ : _;\n        if (!(_ in e)) {\n            a.push({\n                type: \"REMOVE\",\n                path: [\n                    E\n                ],\n                oldValue: t[_]\n            });\n            continue;\n        }\n        const m = e[_], T = typeof M == \"object\" && typeof m == \"object\" && Array.isArray(M) === Array.isArray(m);\n        M && m && T && !zi[(b = (f = Object.getPrototypeOf(M)) == null ? void 0 : f.constructor) == null ? void 0 : b.name] && (!r.cyclesFix || !s.includes(M)) ? a.push.apply(a, _s(M, m, r, r.cyclesFix ? s.concat([\n            M\n        ]) : []).map((C)=>(C.path.unshift(E), C))) : M !== m && // treat NaN values as equivalent\n        !(Number.isNaN(M) && Number.isNaN(m)) && !(T && (isNaN(M) ? M + \"\" == m + \"\" : +M == +m)) && a.push({\n            path: [\n                E\n            ],\n            type: \"CHANGE\",\n            value: m,\n            oldValue: M\n        });\n    }\n    const d = Array.isArray(e);\n    for(const _ in e)_ in t || a.push({\n        type: \"CREATE\",\n        path: [\n            d ? +_ : _\n        ],\n        value: e[_]\n    });\n    return a;\n}\nvar On = Symbol.for(\"immer-nothing\"), Ke = Symbol.for(\"immer-draftable\"), vt = Symbol.for(\"immer-state\"), ks =  true ? [\n    // All error codes, starting by 0:\n    function(t) {\n        return `The plugin for '${t}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${t}()\\` when initializing your application.`;\n    },\n    function(t) {\n        return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${t}'`;\n    },\n    \"This object has been frozen and should not be mutated\",\n    function(t) {\n        return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + t;\n    },\n    \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n    \"Immer forbids circular references\",\n    \"The first or second argument to `produce` must be a function\",\n    \"The third argument to `produce` must be a function or undefined\",\n    \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n    \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n    function(t) {\n        return `'current' expects a draft, got: ${t}`;\n    },\n    \"Object.defineProperty() cannot be used on an Immer draft\",\n    \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n    \"Immer only supports deleting array indices\",\n    \"Immer only supports setting array indices and the 'length' property\",\n    function(t) {\n        return `'original' expects a draft, got: ${t}`;\n    }\n] : 0;\nfunction tt(t, ...e) {\n    if (true) {\n        const r = ks[t], s = typeof r == \"function\" ? r.apply(null, e) : r;\n        throw new Error(`[Immer] ${s}`);\n    }\n    throw new Error(`[Immer] minified error nr: ${t}. Full error at: https://bit.ly/3cXEKWf`);\n}\nvar me = Object.getPrototypeOf;\nfunction ye(t) {\n    return !!t && !!t[vt];\n}\nfunction Qt(t) {\n    var e;\n    return t ? Ss(t) || Array.isArray(t) || !!t[Ke] || !!((e = t.constructor) != null && e[Ke]) || tr(t) || er(t) : !1;\n}\nvar Fi = Object.prototype.constructor.toString();\nfunction Ss(t) {\n    if (!t || typeof t != \"object\") return !1;\n    const e = me(t);\n    if (e === null) return !0;\n    const r = Object.hasOwnProperty.call(e, \"constructor\") && e.constructor;\n    return r === Object ? !0 : typeof r == \"function\" && Function.toString.call(r) === Fi;\n}\nfunction Ve(t, e) {\n    ge(t) === 0 ? Reflect.ownKeys(t).forEach((r)=>{\n        e(r, t[r], t);\n    }) : t.forEach((r, s)=>e(s, r, t));\n}\nfunction ge(t) {\n    const e = t[vt];\n    return e ? e.type_ : Array.isArray(t) ? 1 : tr(t) ? 2 : er(t) ? 3 : 0;\n}\nfunction qe(t, e) {\n    return ge(t) === 2 ? t.has(e) : Object.prototype.hasOwnProperty.call(t, e);\n}\nfunction fn(t, e) {\n    return ge(t) === 2 ? t.get(e) : t[e];\n}\nfunction ws(t, e, r) {\n    const s = ge(t);\n    s === 2 ? t.set(e, r) : s === 3 ? t.add(r) : t[e] = r;\n}\nfunction $i(t, e) {\n    return t === e ? t !== 0 || 1 / t === 1 / e : t !== t && e !== e;\n}\nfunction tr(t) {\n    return t instanceof Map;\n}\nfunction er(t) {\n    return t instanceof Set;\n}\nfunction pe(t) {\n    return t.copy_ || t.base_;\n}\nfunction Sn(t, e) {\n    if (tr(t)) return new Map(t);\n    if (er(t)) return new Set(t);\n    if (Array.isArray(t)) return Array.prototype.slice.call(t);\n    const r = Ss(t);\n    if (e === !0 || e === \"class_only\" && !r) {\n        const s = Object.getOwnPropertyDescriptors(t);\n        delete s[vt];\n        let a = Reflect.ownKeys(s);\n        for(let c = 0; c < a.length; c++){\n            const d = a[c], f = s[d];\n            f.writable === !1 && (f.writable = !0, f.configurable = !0), (f.get || f.set) && (s[d] = {\n                configurable: !0,\n                writable: !0,\n                // could live with !!desc.set as well here...\n                enumerable: f.enumerable,\n                value: t[d]\n            });\n        }\n        return Object.create(me(t), s);\n    } else {\n        const s = me(t);\n        if (s !== null && r) return {\n            ...t\n        };\n        const a = Object.create(s);\n        return Object.assign(a, t);\n    }\n}\nfunction Cn(t, e = !1) {\n    return Mr(t) || ye(t) || !Qt(t) || (ge(t) > 1 && (t.set = t.add = t.clear = t.delete = Ni), Object.freeze(t), e && Object.entries(t).forEach(([r, s])=>Cn(s, !0))), t;\n}\nfunction Ni() {\n    tt(2);\n}\nfunction Mr(t) {\n    return Object.isFrozen(t);\n}\nvar wn = {};\nfunction Ie(t) {\n    const e = wn[t];\n    return e || tt(0, t), e;\n}\nfunction ji(t, e) {\n    wn[t] || (wn[t] = e);\n}\nvar Je;\nfunction Ms() {\n    return Je;\n}\nfunction Hi(t, e) {\n    return {\n        drafts_: [],\n        parent_: t,\n        immer_: e,\n        // Whenever the modified draft contains a draft from another scope, we\n        // need to prevent auto-freezing so the unowned draft can be finalized.\n        canAutoFreeze_: !0,\n        unfinalizedDrafts_: 0\n    };\n}\nfunction Kn(t, e) {\n    e && (Ie(\"Patches\"), t.patches_ = [], t.inversePatches_ = [], t.patchListener_ = e);\n}\nfunction Mn(t) {\n    En(t), t.drafts_.forEach(Li), t.drafts_ = null;\n}\nfunction En(t) {\n    t === Je && (Je = t.parent_);\n}\nfunction Vn(t) {\n    return Je = Hi(Je, t);\n}\nfunction Li(t) {\n    const e = t[vt];\n    e.type_ === 0 || e.type_ === 1 ? e.revoke_() : e.revoked_ = !0;\n}\nfunction qn(t, e) {\n    e.unfinalizedDrafts_ = e.drafts_.length;\n    const r = e.drafts_[0];\n    return t !== void 0 && t !== r ? (r[vt].modified_ && (Mn(e), tt(4)), Qt(t) && (t = vr(e, t), e.parent_ || _r(e, t)), e.patches_ && Ie(\"Patches\").generateReplacementPatches_(r[vt].base_, t, e.patches_, e.inversePatches_)) : t = vr(e, r, []), Mn(e), e.patches_ && e.patchListener_(e.patches_, e.inversePatches_), t !== On ? t : void 0;\n}\nfunction vr(t, e, r) {\n    if (Mr(e)) return e;\n    const s = e[vt];\n    if (!s) return Ve(e, (a, c)=>Jn(t, s, e, a, c, r)), e;\n    if (s.scope_ !== t) return e;\n    if (!s.modified_) return _r(t, s.base_, !0), s.base_;\n    if (!s.finalized_) {\n        s.finalized_ = !0, s.scope_.unfinalizedDrafts_--;\n        const a = s.copy_;\n        let c = a, d = !1;\n        s.type_ === 3 && (c = new Set(a), a.clear(), d = !0), Ve(c, (f, b)=>Jn(t, s, a, f, b, r, d)), _r(t, a, !1), r && t.patches_ && Ie(\"Patches\").generatePatches_(s, r, t.patches_, t.inversePatches_);\n    }\n    return s.copy_;\n}\nfunction Jn(t, e, r, s, a, c, d) {\n    if ( true && a === r && tt(5), ye(a)) {\n        const f = c && e && e.type_ !== 3 && // Set objects are atomic since they have no keys.\n        !qe(e.assigned_, s) ? c.concat(s) : void 0, b = vr(t, a, f);\n        if (ws(r, s, b), ye(b)) t.canAutoFreeze_ = !1;\n        else return;\n    } else d && r.add(a);\n    if (Qt(a) && !Mr(a)) {\n        if (!t.immer_.autoFreeze_ && t.unfinalizedDrafts_ < 1) return;\n        vr(t, a), (!e || !e.scope_.parent_) && typeof s != \"symbol\" && Object.prototype.propertyIsEnumerable.call(r, s) && _r(t, a);\n    }\n}\nfunction _r(t, e, r = !1) {\n    !t.parent_ && t.immer_.autoFreeze_ && t.canAutoFreeze_ && Cn(e, r);\n}\nfunction Ui(t, e) {\n    const r = Array.isArray(t), s = {\n        type_: r ? 1 : 0,\n        // Track which produce call this is associated with.\n        scope_: e ? e.scope_ : Ms(),\n        // True for both shallow and deep changes.\n        modified_: !1,\n        // Used during finalization.\n        finalized_: !1,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned_: {},\n        // The parent draft state.\n        parent_: e,\n        // The base state.\n        base_: t,\n        // The base proxy.\n        draft_: null,\n        // set below\n        // The base copy with any updated values.\n        copy_: null,\n        // Called by the `produce` function.\n        revoke_: null,\n        isManual_: !1\n    };\n    let a = s, c = Pn;\n    r && (a = [\n        s\n    ], c = Ze);\n    const { revoke: d, proxy: f } = Proxy.revocable(a, c);\n    return s.draft_ = f, s.revoke_ = d, f;\n}\nvar Pn = {\n    get (t, e) {\n        if (e === vt) return t;\n        const r = pe(t);\n        if (!qe(r, e)) return Wi(t, r, e);\n        const s = r[e];\n        return t.finalized_ || !Qt(s) ? s : s === pn(t.base_, e) ? (hn(t), t.copy_[e] = An(s, t)) : s;\n    },\n    has (t, e) {\n        return e in pe(t);\n    },\n    ownKeys (t) {\n        return Reflect.ownKeys(pe(t));\n    },\n    set (t, e, r) {\n        const s = Es(pe(t), e);\n        if (s != null && s.set) return s.set.call(t.draft_, r), !0;\n        if (!t.modified_) {\n            const a = pn(pe(t), e), c = a == null ? void 0 : a[vt];\n            if (c && c.base_ === r) return t.copy_[e] = r, t.assigned_[e] = !1, !0;\n            if ($i(r, a) && (r !== void 0 || qe(t.base_, e))) return !0;\n            hn(t), Tn(t);\n        }\n        return t.copy_[e] === r && // special case: handle new props with value 'undefined'\n        (r !== void 0 || e in t.copy_) || // special case: NaN\n        Number.isNaN(r) && Number.isNaN(t.copy_[e]) || (t.copy_[e] = r, t.assigned_[e] = !0), !0;\n    },\n    deleteProperty (t, e) {\n        return pn(t.base_, e) !== void 0 || e in t.base_ ? (t.assigned_[e] = !1, hn(t), Tn(t)) : delete t.assigned_[e], t.copy_ && delete t.copy_[e], !0;\n    },\n    // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n    // the same guarantee in ES5 mode.\n    getOwnPropertyDescriptor (t, e) {\n        const r = pe(t), s = Reflect.getOwnPropertyDescriptor(r, e);\n        return s && {\n            writable: !0,\n            configurable: t.type_ !== 1 || e !== \"length\",\n            enumerable: s.enumerable,\n            value: r[e]\n        };\n    },\n    defineProperty () {\n        tt(11);\n    },\n    getPrototypeOf (t) {\n        return me(t.base_);\n    },\n    setPrototypeOf () {\n        tt(12);\n    }\n}, Ze = {};\nVe(Pn, (t, e)=>{\n    Ze[t] = function() {\n        return arguments[0] = arguments[0][0], e.apply(this, arguments);\n    };\n});\nZe.deleteProperty = function(t, e) {\n    return  true && isNaN(parseInt(e)) && tt(13), Ze.set.call(this, t, e, void 0);\n};\nZe.set = function(t, e, r) {\n    return  true && e !== \"length\" && isNaN(parseInt(e)) && tt(14), Pn.set.call(this, t[0], e, r, t[0]);\n};\nfunction pn(t, e) {\n    const r = t[vt];\n    return (r ? pe(r) : t)[e];\n}\nfunction Wi(t, e, r) {\n    var a;\n    const s = Es(e, r);\n    return s ? \"value\" in s ? s.value : // This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    (a = s.get) == null ? void 0 : a.call(t.draft_) : void 0;\n}\nfunction Es(t, e) {\n    if (!(e in t)) return;\n    let r = me(t);\n    for(; r;){\n        const s = Object.getOwnPropertyDescriptor(r, e);\n        if (s) return s;\n        r = me(r);\n    }\n}\nfunction Tn(t) {\n    t.modified_ || (t.modified_ = !0, t.parent_ && Tn(t.parent_));\n}\nfunction hn(t) {\n    t.copy_ || (t.copy_ = Sn(t.base_, t.scope_.immer_.useStrictShallowCopy_));\n}\nvar Gi = class {\n    constructor(t){\n        this.autoFreeze_ = !0, this.useStrictShallowCopy_ = !1, this.produce = (e, r, s)=>{\n            if (typeof e == \"function\" && typeof r != \"function\") {\n                const c = r;\n                r = e;\n                const d = this;\n                return function(b = c, ..._) {\n                    return d.produce(b, (M)=>r.call(this, M, ..._));\n                };\n            }\n            typeof r != \"function\" && tt(6), s !== void 0 && typeof s != \"function\" && tt(7);\n            let a;\n            if (Qt(e)) {\n                const c = Vn(this), d = An(e, void 0);\n                let f = !0;\n                try {\n                    a = r(d), f = !1;\n                } finally{\n                    f ? Mn(c) : En(c);\n                }\n                return Kn(c, s), qn(a, c);\n            } else if (!e || typeof e != \"object\") {\n                if (a = r(e), a === void 0 && (a = e), a === On && (a = void 0), this.autoFreeze_ && Cn(a, !0), s) {\n                    const c = [], d = [];\n                    Ie(\"Patches\").generateReplacementPatches_(e, a, c, d), s(c, d);\n                }\n                return a;\n            } else tt(1, e);\n        }, this.produceWithPatches = (e, r)=>{\n            if (typeof e == \"function\") return (d, ...f)=>this.produceWithPatches(d, (b)=>e(b, ...f));\n            let s, a;\n            return [\n                this.produce(e, r, (d, f)=>{\n                    s = d, a = f;\n                }),\n                s,\n                a\n            ];\n        }, typeof (t == null ? void 0 : t.autoFreeze) == \"boolean\" && this.setAutoFreeze(t.autoFreeze), typeof (t == null ? void 0 : t.useStrictShallowCopy) == \"boolean\" && this.setUseStrictShallowCopy(t.useStrictShallowCopy);\n    }\n    createDraft(t) {\n        Qt(t) || tt(8), ye(t) && (t = Yi(t));\n        const e = Vn(this), r = An(t, void 0);\n        return r[vt].isManual_ = !0, En(e), r;\n    }\n    finishDraft(t, e) {\n        const r = t && t[vt];\n        (!r || !r.isManual_) && tt(9);\n        const { scope_: s } = r;\n        return Kn(s, e), qn(void 0, s);\n    }\n    /**\n   * Pass true to automatically freeze all copies created by Immer.\n   *\n   * By default, auto-freezing is enabled.\n   */ setAutoFreeze(t) {\n        this.autoFreeze_ = t;\n    }\n    /**\n   * Pass true to enable strict shallow copy.\n   *\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n   */ setUseStrictShallowCopy(t) {\n        this.useStrictShallowCopy_ = t;\n    }\n    applyPatches(t, e) {\n        let r;\n        for(r = e.length - 1; r >= 0; r--){\n            const a = e[r];\n            if (a.path.length === 0 && a.op === \"replace\") {\n                t = a.value;\n                break;\n            }\n        }\n        r > -1 && (e = e.slice(r + 1));\n        const s = Ie(\"Patches\").applyPatches_;\n        return ye(t) ? s(t, e) : this.produce(t, (a)=>s(a, e));\n    }\n};\nfunction An(t, e) {\n    const r = tr(t) ? Ie(\"MapSet\").proxyMap_(t, e) : er(t) ? Ie(\"MapSet\").proxySet_(t, e) : Ui(t, e);\n    return (e ? e.scope_ : Ms()).drafts_.push(r), r;\n}\nfunction Yi(t) {\n    return ye(t) || tt(10, t), Ts(t);\n}\nfunction Ts(t) {\n    if (!Qt(t) || Mr(t)) return t;\n    const e = t[vt];\n    let r;\n    if (e) {\n        if (!e.modified_) return e.base_;\n        e.finalized_ = !0, r = Sn(t, e.scope_.immer_.useStrictShallowCopy_);\n    } else r = Sn(t, !0);\n    return Ve(r, (s, a)=>{\n        ws(r, s, Ts(a));\n    }), e && (e.finalized_ = !1), r;\n}\nfunction Zn() {\n     true && ks.push('Sets cannot have \"replace\" patches.', function(m) {\n        return \"Unsupported patch operation: \" + m;\n    }, function(m) {\n        return \"Cannot apply patch, path doesn't resolve: \" + m;\n    }, \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\");\n    const e = \"replace\", r = \"add\", s = \"remove\";\n    function a(m, T, C, u) {\n        switch(m.type_){\n            case 0:\n            case 2:\n                return d(m, T, C, u);\n            case 1:\n                return c(m, T, C, u);\n            case 3:\n                return f(m, T, C, u);\n        }\n    }\n    function c(m, T, C, u) {\n        let { base_: l, assigned_: S } = m, w = m.copy_;\n        w.length < l.length && ([l, w] = [\n            w,\n            l\n        ], [C, u] = [\n            u,\n            C\n        ]);\n        for(let k = 0; k < l.length; k++)if (S[k] && w[k] !== l[k]) {\n            const h = T.concat([\n                k\n            ]);\n            C.push({\n                op: e,\n                path: h,\n                // Need to maybe clone it, as it can in fact be the original value\n                // due to the base/copy inversion at the start of this function\n                value: E(w[k])\n            }), u.push({\n                op: e,\n                path: h,\n                value: E(l[k])\n            });\n        }\n        for(let k = l.length; k < w.length; k++){\n            const h = T.concat([\n                k\n            ]);\n            C.push({\n                op: r,\n                path: h,\n                // Need to maybe clone it, as it can in fact be the original value\n                // due to the base/copy inversion at the start of this function\n                value: E(w[k])\n            });\n        }\n        for(let k = w.length - 1; l.length <= k; --k){\n            const h = T.concat([\n                k\n            ]);\n            u.push({\n                op: s,\n                path: h\n            });\n        }\n    }\n    function d(m, T, C, u) {\n        const { base_: l, copy_: S } = m;\n        Ve(m.assigned_, (w, k)=>{\n            const h = fn(l, w), y = fn(S, w), v = k ? qe(l, w) ? e : r : s;\n            if (h === y && v === e) return;\n            const I = T.concat(w);\n            C.push(v === s ? {\n                op: v,\n                path: I\n            } : {\n                op: v,\n                path: I,\n                value: y\n            }), u.push(v === r ? {\n                op: s,\n                path: I\n            } : v === s ? {\n                op: r,\n                path: I,\n                value: E(h)\n            } : {\n                op: e,\n                path: I,\n                value: E(h)\n            });\n        });\n    }\n    function f(m, T, C, u) {\n        let { base_: l, copy_: S } = m, w = 0;\n        l.forEach((k)=>{\n            if (!S.has(k)) {\n                const h = T.concat([\n                    w\n                ]);\n                C.push({\n                    op: s,\n                    path: h,\n                    value: k\n                }), u.unshift({\n                    op: r,\n                    path: h,\n                    value: k\n                });\n            }\n            w++;\n        }), w = 0, S.forEach((k)=>{\n            if (!l.has(k)) {\n                const h = T.concat([\n                    w\n                ]);\n                C.push({\n                    op: r,\n                    path: h,\n                    value: k\n                }), u.unshift({\n                    op: s,\n                    path: h,\n                    value: k\n                });\n            }\n            w++;\n        });\n    }\n    function b(m, T, C, u) {\n        C.push({\n            op: e,\n            path: [],\n            value: T === On ? void 0 : T\n        }), u.push({\n            op: e,\n            path: [],\n            value: m\n        });\n    }\n    function _(m, T) {\n        return T.forEach((C)=>{\n            const { path: u, op: l } = C;\n            let S = m;\n            for(let y = 0; y < u.length - 1; y++){\n                const v = ge(S);\n                let I = u[y];\n                typeof I != \"string\" && typeof I != \"number\" && (I = \"\" + I), (v === 0 || v === 1) && (I === \"__proto__\" || I === \"constructor\") && tt(19), typeof S == \"function\" && I === \"prototype\" && tt(19), S = fn(S, I), typeof S != \"object\" && tt(18, u.join(\"/\"));\n            }\n            const w = ge(S), k = M(C.value), h = u[u.length - 1];\n            switch(l){\n                case e:\n                    switch(w){\n                        case 2:\n                            return S.set(h, k);\n                        case 3:\n                            tt(16);\n                        default:\n                            return S[h] = k;\n                    }\n                case r:\n                    switch(w){\n                        case 1:\n                            return h === \"-\" ? S.push(k) : S.splice(h, 0, k);\n                        case 2:\n                            return S.set(h, k);\n                        case 3:\n                            return S.add(k);\n                        default:\n                            return S[h] = k;\n                    }\n                case s:\n                    switch(w){\n                        case 1:\n                            return S.splice(h, 1);\n                        case 2:\n                            return S.delete(h);\n                        case 3:\n                            return S.delete(C.value);\n                        default:\n                            return delete S[h];\n                    }\n                default:\n                    tt(17, l);\n            }\n        }), m;\n    }\n    function M(m) {\n        if (!Qt(m)) return m;\n        if (Array.isArray(m)) return m.map(M);\n        if (tr(m)) return new Map(Array.from(m.entries()).map(([C, u])=>[\n                C,\n                M(u)\n            ]));\n        if (er(m)) return new Set(Array.from(m).map(M));\n        const T = Object.create(me(m));\n        for(const C in m)T[C] = M(m[C]);\n        return qe(m, Ke) && (T[Ke] = m[Ke]), T;\n    }\n    function E(m) {\n        return ye(m) ? M(m) : m;\n    }\n    ji(\"Patches\", {\n        applyPatches_: _,\n        generatePatches_: a,\n        generateReplacementPatches_: b\n    });\n}\nvar _t = new Gi(), Bi = _t.produce;\n_t.produceWithPatches.bind(_t);\n_t.setAutoFreeze.bind(_t);\n_t.setUseStrictShallowCopy.bind(_t);\nvar Xi = _t.applyPatches.bind(_t);\n_t.createDraft.bind(_t);\n_t.finishDraft.bind(_t);\nvar Ki = 9007199254740991, Vi = \"[object Arguments]\", qi = \"[object Function]\", Ji = \"[object GeneratorFunction]\", Zi = \"[object Symbol]\", Qi = typeof St == \"object\" && St && St.Object === Object && St, ta = typeof self == \"object\" && self && self.Object === Object && self, ea = Qi || ta || Function(\"return this\")();\nfunction ra(t, e, r) {\n    switch(r.length){\n        case 0:\n            return t.call(e);\n        case 1:\n            return t.call(e, r[0]);\n        case 2:\n            return t.call(e, r[0], r[1]);\n        case 3:\n            return t.call(e, r[0], r[1], r[2]);\n    }\n    return t.apply(e, r);\n}\nfunction na(t, e) {\n    for(var r = -1, s = t ? t.length : 0, a = Array(s); ++r < s;)a[r] = e(t[r], r, t);\n    return a;\n}\nfunction sa(t, e) {\n    for(var r = -1, s = e.length, a = t.length; ++r < s;)t[a + r] = e[r];\n    return t;\n}\nvar Rn = Object.prototype, ia = Rn.hasOwnProperty, zn = Rn.toString, Qn = ea.Symbol, aa = Rn.propertyIsEnumerable, ts = Qn ? Qn.isConcatSpreadable : void 0, es = Math.max;\nfunction oa(t, e, r, s, a) {\n    var c = -1, d = t.length;\n    for(r || (r = da), a || (a = []); ++c < d;){\n        var f = t[c];\n        r(f) ? sa(a, f) : a[a.length] = f;\n    }\n    return a;\n}\nfunction ca(t, e) {\n    return t = Object(t), ua(t, e, function(r, s) {\n        return s in t;\n    });\n}\nfunction ua(t, e, r) {\n    for(var s = -1, a = e.length, c = {}; ++s < a;){\n        var d = e[s], f = t[d];\n        r(f, d) && (c[d] = f);\n    }\n    return c;\n}\nfunction la(t, e) {\n    return e = es(e === void 0 ? t.length - 1 : e, 0), function() {\n        for(var r = arguments, s = -1, a = es(r.length - e, 0), c = Array(a); ++s < a;)c[s] = r[e + s];\n        s = -1;\n        for(var d = Array(e + 1); ++s < e;)d[s] = r[s];\n        return d[e] = c, ra(t, this, d);\n    };\n}\nfunction da(t) {\n    return ha(t) || pa(t) || !!(ts && t && t[ts]);\n}\nfunction fa(t) {\n    if (typeof t == \"string\" || va(t)) return t;\n    var e = t + \"\";\n    return e == \"0\" && 1 / t == -1 / 0 ? \"-0\" : e;\n}\nfunction pa(t) {\n    return ya(t) && ia.call(t, \"callee\") && (!aa.call(t, \"callee\") || zn.call(t) == Vi);\n}\nvar ha = Array.isArray;\nfunction ma(t) {\n    return t != null && Ia(t.length) && !ga(t);\n}\nfunction ya(t) {\n    return As(t) && ma(t);\n}\nfunction ga(t) {\n    var e = ba(t) ? zn.call(t) : \"\";\n    return e == qi || e == Ji;\n}\nfunction Ia(t) {\n    return typeof t == \"number\" && t > -1 && t % 1 == 0 && t <= Ki;\n}\nfunction ba(t) {\n    var e = typeof t;\n    return !!t && (e == \"object\" || e == \"function\");\n}\nfunction As(t) {\n    return !!t && typeof t == \"object\";\n}\nfunction va(t) {\n    return typeof t == \"symbol\" || As(t) && zn.call(t) == Zi;\n}\nvar _a = la(function(t, e) {\n    return t == null ? {} : ca(t, na(oa(e), fa));\n}), ka = _a;\nconst rs = /* @__PURE__ */ xn(ka), Sa = {\n    width: 1080,\n    height: 1920\n}, wa = 30, Ma = {\n    size: Sa,\n    fps: wa,\n    tracks: [],\n    trackItemIds: [],\n    trackItemsMap: {},\n    transitionIds: [],\n    transitionsMap: {},\n    scale: {\n        unit: 1,\n        zoom: 1,\n        segments: 1,\n        index: 1\n    },\n    duration: 0,\n    activeIds: [],\n    trackItemDetailsMap: {},\n    structure: []\n}, ns = [\n    \"tracks\",\n    \"trackItemsMap\",\n    \"trackItemDetailsMap\",\n    \"transitionIds\",\n    \"transitionsMap\",\n    \"trackItemIds\",\n    \"structure\"\n];\nclass eo {\n    constructor(e){\n        le(this, \"stateSubject\");\n        le(this, \"stateHistorySubject\");\n        le(this, \"prevState\");\n        le(this, \"undos\", []);\n        le(this, \"redos\", []);\n        le(this, \"listener\");\n        const r = Object.assign({}, Ma, e);\n        this.stateSubject = new Un(r), this.stateHistorySubject = new Un({\n            handleRedo: !1,\n            handleUndo: !1\n        }), this.prevState = r, this.initListeners();\n    }\n    initListeners() {\n        Ri(this);\n    }\n    destroyListeners() {\n        this.listener && this.listener.unsubscribe();\n    }\n    purge() {\n        this.destroyListeners();\n    }\n    updateHistory(e, r) {\n        const s = rs(e, ns), a = rs(this.getState(), ns), c = _s(a, s);\n        c.length && (this.undos.push({\n            undos: c,\n            type: r\n        }), this.redos = []);\n    }\n    getStateHistory() {\n        return this.stateHistorySubject.getValue();\n    }\n    subscribeHistory(e) {\n        return this.stateHistorySubject.subscribe(e);\n    }\n    // Get the current state\n    getState() {\n        return this.stateSubject.getValue();\n    }\n    // Subscribe to state changes\n    subscribe(e) {\n        return this.stateSubject.subscribe(e);\n    }\n    // Update the state, emitting only if the part of the state has changed\n    updateState(e, r = {\n        updateHistory: !1\n    }) {\n        const s = this.getState(), a = {\n            ...K(s),\n            ...K(e)\n        };\n        Q(s, a) || (r.updateHistory && this.updateHistory(a, r.kind), this.prevState = s, this.stateSubject.next(a));\n    }\n    // emit changes for design size\n    subscribeToSize(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            Q(r.size, this.prevState.size) || e({\n                size: r.size\n            });\n        });\n    }\n    // Selectively subscribe to scale changes\n    subscribeToScale(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            Q(r.scale, this.prevState.scale) || e({\n                scale: r.scale\n            });\n        });\n    }\n    // Selectively subscribe to fps changes\n    subscribeToFps(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            r.fps !== this.prevState.fps && e({\n                fps: r.fps\n            });\n        });\n    }\n    subscribeToUpdateTrackItem(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            Q(r.trackItemsMap, this.prevState.trackItemsMap) || e({\n                trackItemsMap: r.trackItemsMap\n            });\n        });\n    }\n    subscribeToUpdateAnimations(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            const s = Object.keys(r.trackItemsMap).filter((a)=>{\n                const c = this.prevState.trackItemsMap[a], d = r.trackItemsMap[a];\n                return c && d && !Q(c.animations, d.animations);\n            });\n            e({\n                trackItemsMap: r.trackItemsMap,\n                changedAnimationIds: s\n            });\n        });\n    }\n    subscribeToUpdateTrackItemTiming(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            if (!Q(r.trackItemsMap, this.prevState.trackItemsMap)) {\n                const s = Object.keys(r.trackItemsMap).filter((c)=>{\n                    const d = this.prevState.trackItemsMap[c], f = r.trackItemsMap[c];\n                    return d && f && !Q(d.trim, f.trim);\n                }), a = Object.keys(r.trackItemsMap).filter((c)=>{\n                    const d = this.prevState.trackItemsMap[c], f = r.trackItemsMap[c];\n                    return d && f && !Q(d.display, f.display);\n                });\n                e({\n                    trackItemsMap: r.trackItemsMap,\n                    changedTrimIds: s.length > 0 ? s : void 0,\n                    changedDisplayIds: a.length > 0 ? a : void 0\n                });\n            }\n        });\n    }\n    subscribeToUpdateItemDetails(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            Q(r.trackItemDetailsMap, this.prevState.trackItemDetailsMap) || e({\n                trackItemDetailsMap: r.trackItemDetailsMap\n            });\n        });\n    }\n    // Selectively subscribe to duration changes\n    subscribeToDuration(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            r.duration !== this.prevState.duration && e({\n                duration: r.duration\n            });\n        });\n    }\n    subscribeToHistory(e) {\n        return this.stateHistorySubject.asObservable().subscribe((r)=>{\n            if (r.handleRedo) {\n                const s = this.undos[this.undos.length - 1].type;\n                e({\n                    ...this.getState(),\n                    type: s\n                }), this.stateHistorySubject.next({\n                    handleRedo: !1,\n                    handleUndo: !1\n                });\n            }\n            if (r.handleUndo) {\n                const s = this.redos[this.redos.length - 1].type;\n                e({\n                    ...this.getState(),\n                    type: s\n                }), this.stateHistorySubject.next({\n                    handleRedo: !1,\n                    handleUndo: !1\n                });\n            }\n        });\n    }\n    subscribeToAddOrRemoveItems(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            const s = [\n                ...r.trackItemIds\n            ].sort(), a = [\n                ...this.prevState.trackItemIds\n            ].sort(), c = [\n                ...r.transitionIds\n            ].sort(), d = [\n                ...this.prevState.transitionIds\n            ].sort();\n            (!Q(s, a) || !Q(c, d)) && e({\n                trackItemIds: r.trackItemIds\n            });\n        });\n    }\n    // Selectively subscribe to activeIds changes\n    subscribeToActiveIds(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            Q(r.activeIds, this.prevState.activeIds) || e({\n                activeIds: r.activeIds\n            });\n        });\n    }\n    subscribeToTracks(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            const s = r.tracks, c = this.prevState.tracks.map((f)=>f.id), d = s.filter((f)=>!c.includes(f.id));\n            d.length && e({\n                tracks: r.tracks,\n                changedTracks: d.map((f)=>f.id)\n            });\n        });\n    }\n    // Selectively subscribe to multiple track-related properties\n    subscribeToState(e) {\n        return this.stateSubject.asObservable().subscribe((r)=>{\n            (!Q(r.tracks, this.prevState.tracks) || !Q(r.trackItemIds, this.prevState.trackItemIds) || !Q(r.trackItemsMap, this.prevState.trackItemsMap) || !Q(r.transitionIds, this.prevState.transitionIds) || !Q(r.transitionsMap, this.prevState.transitionsMap) || !Q(r.trackItemDetailsMap, this.prevState.trackItemDetailsMap) || !Q(r.structure, this.prevState.structure)) && e({\n                tracks: r.tracks,\n                trackItemIds: r.trackItemIds,\n                trackItemsMap: r.trackItemsMap,\n                transitionIds: r.transitionIds,\n                transitionsMap: r.transitionsMap,\n                trackItemDetailsMap: r.trackItemDetailsMap,\n                structure: r.structure\n            });\n        });\n    }\n    undo() {\n        const e = this.undos.pop(), r = e == null ? void 0 : e.undos, s = e == null ? void 0 : e.type;\n        if (!r || !s) return;\n        Zn();\n        const { trackItemDetailsMap: a, trackItemIds: c, tracks: d, transitionIds: f, transitionsMap: b, trackItemsMap: _, structure: M } = this.getState(), E = K({\n            trackItemDetailsMap: a,\n            trackItemIds: c,\n            tracks: d,\n            transitionIds: f,\n            transitionsMap: b,\n            trackItemsMap: _,\n            structure: M\n        }), m = [], T = [], C = [], u = [], l = [], S = [], w = [];\n        r.forEach((R)=>{\n            let F;\n            const V = R.path.slice(1);\n            R.type === \"CREATE\" ? F = {\n                path: V,\n                op: \"remove\",\n                value: R.value\n            } : R.type === \"CHANGE\" ? F = {\n                path: V,\n                op: \"replace\",\n                value: R.oldValue\n            } : F = {\n                path: V,\n                op: \"add\",\n                value: R.oldValue\n            }, R.path.includes(\"trackItemIds\") ? C.push(F) : R.path.includes(\"transitionIds\") ? T.push(F) : R.path.includes(\"trackItemsMap\") ? l.push(F) : R.path.includes(\"transitionsMap\") ? u.push(F) : R.path.includes(\"tracks\") ? m.push(F) : R.path.includes(\"trackItemDetailsMap\") ? S.push(F) : R.path.includes(\"structure\") && w.push(F);\n        });\n        const k = this.applyPatch(E.tracks, m), h = this.applyPatch(E.transitionIds, T), y = this.applyPatch(E.trackItemIds, C), v = this.applyPatch(E.transitionsMap, u), I = this.applyPatch(E.trackItemsMap, l), x = this.applyPatch(E.trackItemDetailsMap, S), g = this.applyPatch(E.structure, w), O = K({\n            tracks: k,\n            transitionIds: h,\n            trackItemIds: y,\n            transitionsMap: v,\n            trackItemsMap: I,\n            trackItemDetailsMap: x,\n            structure: g\n        }), D = K(this.getState()), j = {\n            ...D,\n            ...O\n        };\n        this.prevState = D, this.redos.push({\n            redos: r,\n            type: s\n        });\n        const L = he(j.trackItemsMap);\n        this.stateSubject.next({\n            ...j,\n            duration: L\n        }), this.stateHistorySubject.next({\n            handleRedo: !1,\n            handleUndo: !0\n        }), this.updateState(j, {\n            updateHistory: !1\n        });\n    }\n    applyPatch(e, r) {\n        return r.reverse().reduce((s, a)=>Bi(s, (c)=>{\n                Xi(c, [\n                    a\n                ]);\n            }), e);\n    }\n    redo() {\n        const e = this.redos.pop(), r = e == null ? void 0 : e.redos, s = e == null ? void 0 : e.type;\n        if (!r || !s) return;\n        Zn();\n        const { trackItemDetailsMap: a, trackItemIds: c, tracks: d, transitionIds: f, transitionsMap: b, trackItemsMap: _, structure: M } = this.getState(), E = K({\n            trackItemDetailsMap: a,\n            trackItemIds: c,\n            tracks: d,\n            transitionIds: f,\n            transitionsMap: b,\n            trackItemsMap: _,\n            structure: M\n        }), m = [], T = [], C = [], u = [], l = [], S = [], w = [];\n        r.forEach((R)=>{\n            let F;\n            const V = R.path.slice(1);\n            R.type === \"CREATE\" ? F = {\n                path: V,\n                op: \"add\",\n                value: R.value\n            } : R.type === \"CHANGE\" ? F = {\n                path: V,\n                op: \"replace\",\n                value: R.value\n            } : F = {\n                path: V,\n                op: \"remove\",\n                value: R.oldValue\n            }, R.path.includes(\"trackItemIds\") ? C.push(F) : R.path.includes(\"transitionIds\") ? T.push(F) : R.path.includes(\"trackItemsMap\") ? l.push(F) : R.path.includes(\"transitionsMap\") ? u.push(F) : R.path.includes(\"trackItemDetailsMap\") ? S.push(F) : R.path.includes(\"structure\") ? w.push(F) : m.push(F);\n        });\n        const k = this.applyPatch(E.tracks, m), h = this.applyPatch(E.transitionIds, T), y = this.applyPatch(E.trackItemIds, C), v = this.applyPatch(E.transitionsMap, u), I = this.applyPatch(E.trackItemsMap, l), x = this.applyPatch(E.trackItemDetailsMap, S), g = this.applyPatch(E.structure, w), O = K({\n            tracks: k,\n            transitionIds: h,\n            trackItemIds: y,\n            transitionsMap: v,\n            trackItemsMap: I,\n            trackItemDetailsMap: x,\n            structure: g\n        }), D = K(this.getState()), j = {\n            ...D,\n            ...O\n        };\n        this.prevState = D, this.undos.push({\n            undos: r,\n            type: s\n        });\n        const L = he(j.trackItemsMap);\n        this.stateSubject.next({\n            ...j,\n            duration: L\n        }), this.stateHistorySubject.next({\n            handleRedo: !0,\n            handleUndo: !1\n        }), this.updateState(j, {\n            updateHistory: !1\n        });\n    }\n    toJSON() {\n        const { fps: e, tracks: r, size: s, trackItemDetailsMap: a, trackItemIds: c, transitionsMap: d, trackItemsMap: f, transitionIds: b } = this.getState();\n        return {\n            fps: e,\n            tracks: r,\n            size: s,\n            trackItemDetailsMap: a,\n            trackItemIds: c,\n            transitionsMap: d,\n            trackItemsMap: f,\n            transitionIds: b\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@designcombo/state/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@designcombo/timeline/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@designcombo/timeline/dist/index.es.js ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCEPTS_MAP: () => (/* binding */ H0),\n/* harmony export */   Audio: () => (/* binding */ ft),\n/* harmony export */   BOTTOM: () => (/* binding */ tb),\n/* harmony export */   CENTER: () => (/* binding */ He),\n/* harmony export */   Caption: () => (/* binding */ sr),\n/* harmony export */   Control: () => (/* binding */ U),\n/* harmony export */   DRAG_END: () => (/* binding */ ih),\n/* harmony export */   DRAG_PREFIX: () => (/* binding */ rh),\n/* harmony export */   DRAG_START: () => (/* binding */ g0),\n/* harmony export */   FabricObject: () => (/* binding */ nt),\n/* harmony export */   Helper: () => (/* binding */ Ss),\n/* harmony export */   Image: () => (/* binding */ Qs),\n/* harmony export */   LEFT: () => (/* binding */ ur),\n/* harmony export */   NONE: () => (/* binding */ eb),\n/* harmony export */   Pattern: () => (/* binding */ Yi),\n/* harmony export */   Placeholder: () => (/* binding */ er),\n/* harmony export */   PreviewTrackItem: () => (/* binding */ Oe),\n/* harmony export */   RIGHT: () => (/* binding */ dr),\n/* harmony export */   Rect: () => (/* binding */ X),\n/* harmony export */   SIZES_MAP: () => (/* binding */ Y0),\n/* harmony export */   TIMELINE_BOUNDING_CHANGED: () => (/* binding */ p0),\n/* harmony export */   TIMELINE_PREFIX: () => (/* binding */ nh),\n/* harmony export */   TIMELINE_SEEK: () => (/* binding */ m0),\n/* harmony export */   TOP: () => (/* binding */ Q0),\n/* harmony export */   Template: () => (/* binding */ Vt),\n/* harmony export */   Text: () => (/* binding */ tr),\n/* harmony export */   Track: () => (/* binding */ ue),\n/* harmony export */   Transition: () => (/* binding */ Jt),\n/* harmony export */   Video: () => (/* binding */ _t),\n/* harmony export */   calculateTimelineWidth: () => (/* binding */ sb),\n/* harmony export */   changeWidth: () => (/* binding */ Sn),\n/* harmony export */   classRegistry: () => (/* binding */ C),\n/* harmony export */   controlsUtils: () => (/* binding */ Ds),\n/* harmony export */   createAudioControls: () => (/* binding */ pf),\n/* harmony export */   createMediaControls: () => (/* binding */ mf),\n/* harmony export */   createResizeControls: () => (/* binding */ js),\n/* harmony export */   createTemplateControls: () => (/* binding */ gf),\n/* harmony export */   createTransitionControls: () => (/* binding */ ml),\n/* harmony export */   \"default\": () => (/* binding */ K0),\n/* harmony export */   drawVerticalLine: () => (/* binding */ qt),\n/* harmony export */   generateId: () => (/* binding */ Ws),\n/* harmony export */   getDuration: () => (/* binding */ pl),\n/* harmony export */   isTransformCentered: () => (/* binding */ fr),\n/* harmony export */   resize: () => (/* binding */ rb),\n/* harmony export */   resolveOrigin: () => (/* binding */ P),\n/* harmony export */   timeMsToUnits: () => (/* binding */ D),\n/* harmony export */   unitsToTimeMs: () => (/* binding */ Y),\n/* harmony export */   util: () => (/* binding */ sd),\n/* harmony export */   wrapWithFixedAnchor: () => (/* binding */ Mi)\n/* harmony export */ });\n/* harmony import */ var _designcombo_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @designcombo/events */ \"(ssr)/./node_modules/@designcombo/events/dist/index.es.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar Fh = Object.defineProperty;\nvar Rh = (i, t, e)=>t in i ? Fh(i, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : i[t] = e;\nvar T = (i, t, e)=>Rh(i, typeof t != \"symbol\" ? t + \"\" : t, e);\n\nfunction y(i, t, e) {\n    return (t = function(s) {\n        var r = function(n, o) {\n            if (typeof n != \"object\" || !n) return n;\n            var a = n[Symbol.toPrimitive];\n            if (a !== void 0) {\n                var c = a.call(n, o);\n                if (typeof c != \"object\") return c;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (o === \"string\" ? String : Number)(n);\n        }(s, \"string\");\n        return typeof r == \"symbol\" ? r : r + \"\";\n    }(t)) in i ? Object.defineProperty(i, t, {\n        value: e,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : i[t] = e, i;\n}\nfunction fo(i, t) {\n    var e = Object.keys(i);\n    if (Object.getOwnPropertySymbols) {\n        var s = Object.getOwnPropertySymbols(i);\n        t && (s = s.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(i, r).enumerable;\n        })), e.push.apply(e, s);\n    }\n    return e;\n}\nfunction v(i) {\n    for(var t = 1; t < arguments.length; t++){\n        var e = arguments[t] != null ? arguments[t] : {};\n        t % 2 ? fo(Object(e), !0).forEach(function(s) {\n            y(i, s, e[s]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(i, Object.getOwnPropertyDescriptors(e)) : fo(Object(e)).forEach(function(s) {\n            Object.defineProperty(i, s, Object.getOwnPropertyDescriptor(e, s));\n        });\n    }\n    return i;\n}\nfunction G(i, t) {\n    if (i == null) return {};\n    var e, s, r = function(o, a) {\n        if (o == null) return {};\n        var c = {};\n        for(var l in o)if (({}).hasOwnProperty.call(o, l)) {\n            if (a.indexOf(l) >= 0) continue;\n            c[l] = o[l];\n        }\n        return c;\n    }(i, t);\n    if (Object.getOwnPropertySymbols) {\n        var n = Object.getOwnPropertySymbols(i);\n        for(s = 0; s < n.length; s++)e = n[s], t.indexOf(e) >= 0 || ({}).propertyIsEnumerable.call(i, e) && (r[e] = i[e]);\n    }\n    return r;\n}\nfunction Me(i, t) {\n    return t || (t = i.slice(0)), Object.freeze(Object.defineProperties(i, {\n        raw: {\n            value: Object.freeze(t)\n        }\n    }));\n}\nclass go {\n    constructor(){\n        y(this, \"browserShadowBlurConstant\", 1), y(this, \"DPI\", 96), y(this, \"devicePixelRatio\",  false ? 0 : 1), y(this, \"perfLimitSizeTotal\", 2097152), y(this, \"maxCacheSideLimit\", 4096), y(this, \"minCacheSideLimit\", 256), y(this, \"disableStyleCopyPaste\", !1), y(this, \"enableGLFiltering\", !0), y(this, \"textureSize\", 4096), y(this, \"forceGLPutImageData\", !1), y(this, \"cachesBoundsOfCurve\", !1), y(this, \"fontPaths\", {}), y(this, \"NUM_FRACTION_DIGITS\", 4);\n    }\n}\nconst A = new class extends go {\n    constructor(i){\n        super(), this.configure(i);\n    }\n    configure() {\n        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        Object.assign(this, i);\n    }\n    addFonts() {\n        let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.fontPaths = v(v({}, this.fontPaths), i);\n    }\n    removeFonts() {\n        (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : []).forEach((i)=>{\n            delete this.fontPaths[i];\n        });\n    }\n    clearFonts() {\n        this.fontPaths = {};\n    }\n    restoreDefaults(i) {\n        const t = new go(), e = (i == null ? void 0 : i.reduce((s, r)=>(s[r] = t[r], s), {})) || t;\n        this.configure(e);\n    }\n}(), Te = function(i) {\n    for(var t = arguments.length, e = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)e[s - 1] = arguments[s];\n    return console[i](\"fabric\", ...e);\n};\nclass Yt extends Error {\n    constructor(t, e){\n        super(\"fabric: \".concat(t), e);\n    }\n}\nclass Fa extends Yt {\n    constructor(t){\n        super(\"\".concat(t, \" 'options.signal' is in 'aborted' state\"));\n    }\n}\nclass Lh {\n}\nclass Bh extends Lh {\n    testPrecision(t, e) {\n        const s = \"precision \".concat(e, ` float;\nvoid main(){}`), r = t.createShader(t.FRAGMENT_SHADER);\n        return !!r && (t.shaderSource(r, s), t.compileShader(r), !!t.getShaderParameter(r, t.COMPILE_STATUS));\n    }\n    queryWebGL(t) {\n        const e = t.getContext(\"webgl\");\n        e && (this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE), this.GLPrecision = [\n            \"highp\",\n            \"mediump\",\n            \"lowp\"\n        ].find((s)=>this.testPrecision(e, s)), e.getExtension(\"WEBGL_lose_context\").loseContext(), Te(\"log\", \"WebGL: max texture size \".concat(this.maxTextureSize)));\n    }\n    isSupported(t) {\n        return !!this.maxTextureSize && this.maxTextureSize >= t;\n    }\n}\nconst Wh = {};\nlet po;\nconst $t = ()=>po || (po = {\n        document,\n        window,\n        isTouchSupported: \"ontouchstart\" in window || \"ontouchstart\" in document || window && window.navigator && window.navigator.maxTouchPoints > 0,\n        WebGLProbe: new Bh(),\n        dispose () {},\n        copyPasteData: Wh\n    }), Cs = ()=>$t().document, fi = ()=>$t().window, Ra = ()=>{\n    var i;\n    return Math.max((i = A.devicePixelRatio) !== null && i !== void 0 ? i : fi().devicePixelRatio, 1);\n}, zs = new class {\n    constructor(){\n        y(this, \"charWidthsCache\", {}), y(this, \"boundsOfCurveCache\", {});\n    }\n    getFontCache(i) {\n        let { fontFamily: t, fontStyle: e, fontWeight: s } = i;\n        t = t.toLowerCase(), this.charWidthsCache[t] || (this.charWidthsCache[t] = {});\n        const r = this.charWidthsCache[t], n = \"\".concat(e.toLowerCase(), \"_\").concat((s + \"\").toLowerCase());\n        return r[n] || (r[n] = {}), r[n];\n    }\n    clearFontCache(i) {\n        (i = (i || \"\").toLowerCase()) ? this.charWidthsCache[i] && delete this.charWidthsCache[i] : this.charWidthsCache = {};\n    }\n    limitDimsByArea(i) {\n        const { perfLimitSizeTotal: t } = A, e = Math.sqrt(t * i);\n        return [\n            Math.floor(e),\n            Math.floor(t / e)\n        ];\n    }\n}(), sn = \"6.6.1\";\nfunction Be() {}\nconst xe = Math.PI / 2, he = 2 * Math.PI, jn = Math.PI / 180, ht = Object.freeze([\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n]), En = 16, ye = 0.4477152502, j = \"center\", L = \"left\", gt = \"top\", rn = \"bottom\", Z = \"right\", pt = \"none\", Pn = /\\r?\\n/, La = \"moving\", gi = \"scaling\", Ba = \"rotating\", An = \"rotate\", Wa = \"skewing\", $s = \"resizing\", Xa = \"modifyPoly\", Xh = \"modifyPath\", Ur = \"changed\", pi = \"scale\", ut = \"scaleX\", Tt = \"scaleY\", Os = \"skewX\", ks = \"skewY\", rt = \"fill\", mt = \"stroke\", $r = \"modified\", qe = \"json\", Ri = \"svg\", C = new class {\n    constructor(){\n        this[qe] = /* @__PURE__ */ new Map(), this[Ri] = /* @__PURE__ */ new Map();\n    }\n    has(i) {\n        return this[qe].has(i);\n    }\n    getClass(i) {\n        const t = this[qe].get(i);\n        if (!t) throw new Yt(\"No class registered for \".concat(i));\n        return t;\n    }\n    setClass(i, t) {\n        t ? this[qe].set(t, i) : (this[qe].set(i.type, i), this[qe].set(i.type.toLowerCase(), i));\n    }\n    getSVGClass(i) {\n        return this[Ri].get(i);\n    }\n    setSVGClass(i, t) {\n        this[Ri].set(t ?? i.type.toLowerCase(), i);\n    }\n}(), qr = new class extends Array {\n    remove(i) {\n        const t = this.indexOf(i);\n        t > -1 && this.splice(t, 1);\n    }\n    cancelAll() {\n        const i = this.splice(0);\n        return i.forEach((t)=>t.abort()), i;\n    }\n    cancelByCanvas(i) {\n        if (!i) return [];\n        const t = this.filter((e)=>{\n            var s;\n            return e.target === i || typeof e.target == \"object\" && ((s = e.target) === null || s === void 0 ? void 0 : s.canvas) === i;\n        });\n        return t.forEach((e)=>e.abort()), t;\n    }\n    cancelByTarget(i) {\n        if (!i) return [];\n        const t = this.filter((e)=>e.target === i);\n        return t.forEach((e)=>e.abort()), t;\n    }\n}();\nclass zh {\n    constructor(){\n        y(this, \"__eventListeners\", {});\n    }\n    on(t, e) {\n        if (this.__eventListeners || (this.__eventListeners = {}), typeof t == \"object\") return Object.entries(t).forEach((s)=>{\n            let [r, n] = s;\n            this.on(r, n);\n        }), ()=>this.off(t);\n        if (e) {\n            const s = t;\n            return this.__eventListeners[s] || (this.__eventListeners[s] = []), this.__eventListeners[s].push(e), ()=>this.off(s, e);\n        }\n        return ()=>!1;\n    }\n    once(t, e) {\n        if (typeof t == \"object\") {\n            const s = [];\n            return Object.entries(t).forEach((r)=>{\n                let [n, o] = r;\n                s.push(this.once(n, o));\n            }), ()=>s.forEach((r)=>r());\n        }\n        if (e) {\n            const s = this.on(t, function() {\n                for(var r = arguments.length, n = new Array(r), o = 0; o < r; o++)n[o] = arguments[o];\n                e.call(this, ...n), s();\n            });\n            return s;\n        }\n        return ()=>!1;\n    }\n    _removeEventListener(t, e) {\n        if (this.__eventListeners[t]) if (e) {\n            const s = this.__eventListeners[t], r = s.indexOf(e);\n            r > -1 && s.splice(r, 1);\n        } else this.__eventListeners[t] = [];\n    }\n    off(t, e) {\n        if (this.__eventListeners) if (t === void 0) for(const s in this.__eventListeners)this._removeEventListener(s);\n        else typeof t == \"object\" ? Object.entries(t).forEach((s)=>{\n            let [r, n] = s;\n            this._removeEventListener(r, n);\n        }) : this._removeEventListener(t, e);\n    }\n    fire(t, e) {\n        var s;\n        if (!this.__eventListeners) return;\n        const r = (s = this.__eventListeners[t]) === null || s === void 0 ? void 0 : s.concat();\n        if (r) for(let n = 0; n < r.length; n++)r[n].call(this, e || {});\n    }\n}\nconst Ee = (i, t)=>{\n    const e = i.indexOf(t);\n    return e !== -1 && i.splice(e, 1), i;\n}, Lt = (i)=>{\n    if (i === 0) return 1;\n    switch(Math.abs(i) / xe){\n        case 1:\n        case 3:\n            return 0;\n        case 2:\n            return -1;\n    }\n    return Math.cos(i);\n}, Bt = (i)=>{\n    if (i === 0) return 0;\n    const t = i / xe, e = Math.sign(i);\n    switch(t){\n        case 1:\n            return e;\n        case 2:\n            return 0;\n        case 3:\n            return -e;\n    }\n    return Math.sin(i);\n};\nclass _ {\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        typeof t == \"object\" ? (this.x = t.x, this.y = t.y) : (this.x = t, this.y = e);\n    }\n    add(t) {\n        return new _(this.x + t.x, this.y + t.y);\n    }\n    addEquals(t) {\n        return this.x += t.x, this.y += t.y, this;\n    }\n    scalarAdd(t) {\n        return new _(this.x + t, this.y + t);\n    }\n    scalarAddEquals(t) {\n        return this.x += t, this.y += t, this;\n    }\n    subtract(t) {\n        return new _(this.x - t.x, this.y - t.y);\n    }\n    subtractEquals(t) {\n        return this.x -= t.x, this.y -= t.y, this;\n    }\n    scalarSubtract(t) {\n        return new _(this.x - t, this.y - t);\n    }\n    scalarSubtractEquals(t) {\n        return this.x -= t, this.y -= t, this;\n    }\n    multiply(t) {\n        return new _(this.x * t.x, this.y * t.y);\n    }\n    scalarMultiply(t) {\n        return new _(this.x * t, this.y * t);\n    }\n    scalarMultiplyEquals(t) {\n        return this.x *= t, this.y *= t, this;\n    }\n    divide(t) {\n        return new _(this.x / t.x, this.y / t.y);\n    }\n    scalarDivide(t) {\n        return new _(this.x / t, this.y / t);\n    }\n    scalarDivideEquals(t) {\n        return this.x /= t, this.y /= t, this;\n    }\n    eq(t) {\n        return this.x === t.x && this.y === t.y;\n    }\n    lt(t) {\n        return this.x < t.x && this.y < t.y;\n    }\n    lte(t) {\n        return this.x <= t.x && this.y <= t.y;\n    }\n    gt(t) {\n        return this.x > t.x && this.y > t.y;\n    }\n    gte(t) {\n        return this.x >= t.x && this.y >= t.y;\n    }\n    lerp(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.5;\n        return e = Math.max(Math.min(1, e), 0), new _(this.x + (t.x - this.x) * e, this.y + (t.y - this.y) * e);\n    }\n    distanceFrom(t) {\n        const e = this.x - t.x, s = this.y - t.y;\n        return Math.sqrt(e * e + s * s);\n    }\n    midPointFrom(t) {\n        return this.lerp(t);\n    }\n    min(t) {\n        return new _(Math.min(this.x, t.x), Math.min(this.y, t.y));\n    }\n    max(t) {\n        return new _(Math.max(this.x, t.x), Math.max(this.y, t.y));\n    }\n    toString() {\n        return \"\".concat(this.x, \",\").concat(this.y);\n    }\n    setXY(t, e) {\n        return this.x = t, this.y = e, this;\n    }\n    setX(t) {\n        return this.x = t, this;\n    }\n    setY(t) {\n        return this.y = t, this;\n    }\n    setFromPoint(t) {\n        return this.x = t.x, this.y = t.y, this;\n    }\n    swap(t) {\n        const e = this.x, s = this.y;\n        this.x = t.x, this.y = t.y, t.x = e, t.y = s;\n    }\n    clone() {\n        return new _(this.x, this.y);\n    }\n    rotate(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Fn;\n        const s = Bt(t), r = Lt(t), n = this.subtract(e);\n        return new _(n.x * r - n.y * s, n.x * s + n.y * r).add(e);\n    }\n    transform(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];\n        return new _(t[0] * this.x + t[2] * this.y + (e ? 0 : t[4]), t[1] * this.x + t[3] * this.y + (e ? 0 : t[5]));\n    }\n}\nconst Fn = new _(0, 0), Vr = (i)=>!!i && Array.isArray(i._objects);\nfunction za(i) {\n    class t extends i {\n        constructor(){\n            super(...arguments), y(this, \"_objects\", []);\n        }\n        _onObjectAdded(s) {}\n        _onObjectRemoved(s) {}\n        _onStackOrderChanged(s) {}\n        add() {\n            for(var s = arguments.length, r = new Array(s), n = 0; n < s; n++)r[n] = arguments[n];\n            const o = this._objects.push(...r);\n            return r.forEach((a)=>this._onObjectAdded(a)), o;\n        }\n        insertAt(s) {\n            for(var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++)n[o - 1] = arguments[o];\n            return this._objects.splice(s, 0, ...n), n.forEach((a)=>this._onObjectAdded(a)), this._objects.length;\n        }\n        remove() {\n            const s = this._objects, r = [];\n            for(var n = arguments.length, o = new Array(n), a = 0; a < n; a++)o[a] = arguments[a];\n            return o.forEach((c)=>{\n                const l = s.indexOf(c);\n                l !== -1 && (s.splice(l, 1), r.push(c), this._onObjectRemoved(c));\n            }), r;\n        }\n        forEachObject(s) {\n            this.getObjects().forEach((r, n, o)=>s(r, n, o));\n        }\n        getObjects() {\n            for(var s = arguments.length, r = new Array(s), n = 0; n < s; n++)r[n] = arguments[n];\n            return r.length === 0 ? [\n                ...this._objects\n            ] : this._objects.filter((o)=>o.isType(...r));\n        }\n        item(s) {\n            return this._objects[s];\n        }\n        isEmpty() {\n            return this._objects.length === 0;\n        }\n        size() {\n            return this._objects.length;\n        }\n        contains(s, r) {\n            return !!this._objects.includes(s) || !!r && this._objects.some((n)=>n instanceof t && n.contains(s, !0));\n        }\n        complexity() {\n            return this._objects.reduce((s, r)=>s += r.complexity ? r.complexity() : 0, 0);\n        }\n        sendObjectToBack(s) {\n            return !(!s || s === this._objects[0]) && (Ee(this._objects, s), this._objects.unshift(s), this._onStackOrderChanged(s), !0);\n        }\n        bringObjectToFront(s) {\n            return !(!s || s === this._objects[this._objects.length - 1]) && (Ee(this._objects, s), this._objects.push(s), this._onStackOrderChanged(s), !0);\n        }\n        sendObjectBackwards(s, r) {\n            if (!s) return !1;\n            const n = this._objects.indexOf(s);\n            if (n !== 0) {\n                const o = this.findNewLowerIndex(s, n, r);\n                return Ee(this._objects, s), this._objects.splice(o, 0, s), this._onStackOrderChanged(s), !0;\n            }\n            return !1;\n        }\n        bringObjectForward(s, r) {\n            if (!s) return !1;\n            const n = this._objects.indexOf(s);\n            if (n !== this._objects.length - 1) {\n                const o = this.findNewUpperIndex(s, n, r);\n                return Ee(this._objects, s), this._objects.splice(o, 0, s), this._onStackOrderChanged(s), !0;\n            }\n            return !1;\n        }\n        moveObjectTo(s, r) {\n            return s !== this._objects[r] && (Ee(this._objects, s), this._objects.splice(r, 0, s), this._onStackOrderChanged(s), !0);\n        }\n        findNewLowerIndex(s, r, n) {\n            let o;\n            if (n) {\n                o = r;\n                for(let a = r - 1; a >= 0; --a)if (s.isOverlapping(this._objects[a])) {\n                    o = a;\n                    break;\n                }\n            } else o = r - 1;\n            return o;\n        }\n        findNewUpperIndex(s, r, n) {\n            let o;\n            if (n) {\n                o = r;\n                for(let a = r + 1; a < this._objects.length; ++a)if (s.isOverlapping(this._objects[a])) {\n                    o = a;\n                    break;\n                }\n            } else o = r + 1;\n            return o;\n        }\n        collectObjects(s) {\n            let { left: r, top: n, width: o, height: a } = s, { includeIntersecting: c = !0 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            const l = [], h = new _(r, n), u = h.add(new _(o, a));\n            for(let d = this._objects.length - 1; d >= 0; d--){\n                const f = this._objects[d];\n                f.selectable && f.visible && (c && f.intersectsWithRect(h, u) || f.isContainedWithinRect(h, u) || c && f.containsPoint(h) || c && f.containsPoint(u)) && l.push(f);\n            }\n            return l;\n        }\n    }\n    return t;\n}\nclass Ha extends zh {\n    _setOptions() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        for(const e in t)this.set(e, t[e]);\n    }\n    _setObject(t) {\n        for(const e in t)this._set(e, t[e]);\n    }\n    set(t, e) {\n        return typeof t == \"object\" ? this._setObject(t) : this._set(t, e), this;\n    }\n    _set(t, e) {\n        this[t] = e;\n    }\n    toggle(t) {\n        const e = this.get(t);\n        return typeof e == \"boolean\" && this.set(t, !e), this;\n    }\n    get(t) {\n        return this[t];\n    }\n}\nfunction Hs(i) {\n    return fi().requestAnimationFrame(i);\n}\nfunction Ya(i) {\n    return fi().cancelAnimationFrame(i);\n}\nlet Hh = 0;\nconst we = ()=>Hh++, kt = ()=>{\n    const i = Cs().createElement(\"canvas\");\n    if (!i || i.getContext === void 0) throw new Yt(\"Failed to create `canvas` element\");\n    return i;\n}, Va = ()=>Cs().createElement(\"img\"), Wt = (i)=>{\n    const t = kt();\n    return t.width = i.width, t.height = i.height, t;\n}, Rn = (i, t, e)=>i.toDataURL(\"image/\".concat(t), e), Ln = (i, t, e)=>new Promise((s, r)=>{\n        i.toBlob(s, \"image/\".concat(t), e);\n    }), K = (i)=>i * jn, Ce = (i)=>i / jn, Ga = (i)=>i.every((t, e)=>t === ht[e]), ot = (i, t, e)=>new _(i).transform(t, e), St = (i)=>{\n    const t = 1 / (i[0] * i[3] - i[1] * i[2]), e = [\n        t * i[3],\n        -t * i[1],\n        -t * i[2],\n        t * i[0],\n        0,\n        0\n    ], { x: s, y: r } = new _(i[4], i[5]).transform(e, !0);\n    return e[4] = -s, e[5] = -r, e;\n}, J = (i, t, e)=>[\n        i[0] * t[0] + i[2] * t[1],\n        i[1] * t[0] + i[3] * t[1],\n        i[0] * t[2] + i[2] * t[3],\n        i[1] * t[2] + i[3] * t[3],\n        e ? 0 : i[0] * t[4] + i[2] * t[5] + i[4],\n        e ? 0 : i[1] * t[4] + i[3] * t[5] + i[5]\n    ], mi = (i, t)=>i.reduceRight((e, s)=>s && e ? J(s, e, t) : s || e, void 0) || ht.concat(), Na = (i)=>{\n    let [t, e] = i;\n    return Math.atan2(e, t);\n}, ys = (i)=>{\n    const t = Na(i), e = Math.pow(i[0], 2) + Math.pow(i[1], 2), s = Math.sqrt(e), r = (i[0] * i[3] - i[2] * i[1]) / s, n = Math.atan2(i[0] * i[2] + i[1] * i[3], e);\n    return {\n        angle: Ce(t),\n        scaleX: s,\n        scaleY: r,\n        skewX: Ce(n),\n        skewY: 0,\n        translateX: i[4] || 0,\n        translateY: i[5] || 0\n    };\n}, Ms = function(i) {\n    return [\n        1,\n        0,\n        0,\n        1,\n        i,\n        arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0\n    ];\n};\nfunction Is() {\n    let { angle: i = 0 } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, { x: t = 0, y: e = 0 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const s = K(i), r = Lt(s), n = Bt(s);\n    return [\n        r,\n        n,\n        -n,\n        r,\n        t ? t - (r * t - n * e) : 0,\n        e ? e - (n * t + r * e) : 0\n    ];\n}\nconst vi = function(i) {\n    return [\n        i,\n        0,\n        0,\n        arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : i,\n        0,\n        0\n    ];\n}, Ua = (i)=>Math.tan(K(i)), Bn = (i)=>[\n        1,\n        0,\n        Ua(i),\n        1,\n        0,\n        0\n    ], Wn = (i)=>[\n        1,\n        Ua(i),\n        0,\n        1,\n        0,\n        0\n    ], ar = (i)=>{\n    let { scaleX: t = 1, scaleY: e = 1, flipX: s = !1, flipY: r = !1, skewX: n = 0, skewY: o = 0 } = i, a = vi(s ? -t : t, r ? -e : e);\n    return n && (a = J(a, Bn(n), !0)), o && (a = J(a, Wn(o), !0)), a;\n}, $a = (i)=>{\n    const { translateX: t = 0, translateY: e = 0, angle: s = 0 } = i;\n    let r = Ms(t, e);\n    s && (r = J(r, Is({\n        angle: s\n    })));\n    const n = ar(i);\n    return Ga(n) || (r = J(r, n)), r;\n}, Ys = function(i) {\n    let { signal: t, crossOrigin: e = null } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return new Promise(function(s, r) {\n        if (t && t.aborted) return r(new Fa(\"loadImage\"));\n        const n = Va();\n        let o;\n        t && (o = function(c) {\n            n.src = \"\", r(c);\n        }, t.addEventListener(\"abort\", o, {\n            once: !0\n        }));\n        const a = function() {\n            n.onload = n.onerror = null, o && (t == null || t.removeEventListener(\"abort\", o)), s(n);\n        };\n        i ? (n.onload = a, n.onerror = function() {\n            o && (t == null || t.removeEventListener(\"abort\", o)), r(new Yt(\"Error loading \".concat(n.src)));\n        }, e && (n.crossOrigin = e), n.src = i) : a();\n    });\n}, bs = function(i) {\n    let { signal: t, reviver: e = Be } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return new Promise((s, r)=>{\n        const n = [];\n        t && t.addEventListener(\"abort\", r, {\n            once: !0\n        }), Promise.all(i.map((o)=>C.getClass(o.type).fromObject(o, {\n                signal: t\n            }).then((a)=>(e(o, a), n.push(a), a)))).then(s).catch((o)=>{\n            n.forEach((a)=>{\n                a.dispose && a.dispose();\n            }), r(o);\n        }).finally(()=>{\n            t && t.removeEventListener(\"abort\", r);\n        });\n    });\n}, cr = function(i) {\n    let { signal: t } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return new Promise((e, s)=>{\n        const r = [];\n        t && t.addEventListener(\"abort\", s, {\n            once: !0\n        });\n        const n = Object.values(i).map((a)=>a && a.type && C.has(a.type) ? bs([\n                a\n            ], {\n                signal: t\n            }).then((c)=>{\n                let [l] = c;\n                return r.push(l), l;\n            }) : a), o = Object.keys(i);\n        Promise.all(n).then((a)=>a.reduce((c, l, h)=>(c[o[h]] = l, c), {})).then(e).catch((a)=>{\n            r.forEach((c)=>{\n                c.dispose && c.dispose();\n            }), s(a);\n        }).finally(()=>{\n            t && t.removeEventListener(\"abort\", s);\n        });\n    });\n}, Ve = function(i) {\n    return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : []).reduce((t, e)=>(e in i && (t[e] = i[e]), t), {});\n}, Xn = (i, t)=>Object.keys(i).reduce((e, s)=>(t(i[s], s, i) && (e[s] = i[s]), e), {}), mo = {\n    aliceblue: \"#F0F8FF\",\n    antiquewhite: \"#FAEBD7\",\n    aqua: \"#0FF\",\n    aquamarine: \"#7FFFD4\",\n    azure: \"#F0FFFF\",\n    beige: \"#F5F5DC\",\n    bisque: \"#FFE4C4\",\n    black: \"#000\",\n    blanchedalmond: \"#FFEBCD\",\n    blue: \"#00F\",\n    blueviolet: \"#8A2BE2\",\n    brown: \"#A52A2A\",\n    burlywood: \"#DEB887\",\n    cadetblue: \"#5F9EA0\",\n    chartreuse: \"#7FFF00\",\n    chocolate: \"#D2691E\",\n    coral: \"#FF7F50\",\n    cornflowerblue: \"#6495ED\",\n    cornsilk: \"#FFF8DC\",\n    crimson: \"#DC143C\",\n    cyan: \"#0FF\",\n    darkblue: \"#00008B\",\n    darkcyan: \"#008B8B\",\n    darkgoldenrod: \"#B8860B\",\n    darkgray: \"#A9A9A9\",\n    darkgrey: \"#A9A9A9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#BDB76B\",\n    darkmagenta: \"#8B008B\",\n    darkolivegreen: \"#556B2F\",\n    darkorange: \"#FF8C00\",\n    darkorchid: \"#9932CC\",\n    darkred: \"#8B0000\",\n    darksalmon: \"#E9967A\",\n    darkseagreen: \"#8FBC8F\",\n    darkslateblue: \"#483D8B\",\n    darkslategray: \"#2F4F4F\",\n    darkslategrey: \"#2F4F4F\",\n    darkturquoise: \"#00CED1\",\n    darkviolet: \"#9400D3\",\n    deeppink: \"#FF1493\",\n    deepskyblue: \"#00BFFF\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1E90FF\",\n    firebrick: \"#B22222\",\n    floralwhite: \"#FFFAF0\",\n    forestgreen: \"#228B22\",\n    fuchsia: \"#F0F\",\n    gainsboro: \"#DCDCDC\",\n    ghostwhite: \"#F8F8FF\",\n    gold: \"#FFD700\",\n    goldenrod: \"#DAA520\",\n    gray: \"#808080\",\n    grey: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#ADFF2F\",\n    honeydew: \"#F0FFF0\",\n    hotpink: \"#FF69B4\",\n    indianred: \"#CD5C5C\",\n    indigo: \"#4B0082\",\n    ivory: \"#FFFFF0\",\n    khaki: \"#F0E68C\",\n    lavender: \"#E6E6FA\",\n    lavenderblush: \"#FFF0F5\",\n    lawngreen: \"#7CFC00\",\n    lemonchiffon: \"#FFFACD\",\n    lightblue: \"#ADD8E6\",\n    lightcoral: \"#F08080\",\n    lightcyan: \"#E0FFFF\",\n    lightgoldenrodyellow: \"#FAFAD2\",\n    lightgray: \"#D3D3D3\",\n    lightgrey: \"#D3D3D3\",\n    lightgreen: \"#90EE90\",\n    lightpink: \"#FFB6C1\",\n    lightsalmon: \"#FFA07A\",\n    lightseagreen: \"#20B2AA\",\n    lightskyblue: \"#87CEFA\",\n    lightslategray: \"#789\",\n    lightslategrey: \"#789\",\n    lightsteelblue: \"#B0C4DE\",\n    lightyellow: \"#FFFFE0\",\n    lime: \"#0F0\",\n    limegreen: \"#32CD32\",\n    linen: \"#FAF0E6\",\n    magenta: \"#F0F\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66CDAA\",\n    mediumblue: \"#0000CD\",\n    mediumorchid: \"#BA55D3\",\n    mediumpurple: \"#9370DB\",\n    mediumseagreen: \"#3CB371\",\n    mediumslateblue: \"#7B68EE\",\n    mediumspringgreen: \"#00FA9A\",\n    mediumturquoise: \"#48D1CC\",\n    mediumvioletred: \"#C71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#F5FFFA\",\n    mistyrose: \"#FFE4E1\",\n    moccasin: \"#FFE4B5\",\n    navajowhite: \"#FFDEAD\",\n    navy: \"#000080\",\n    oldlace: \"#FDF5E6\",\n    olive: \"#808000\",\n    olivedrab: \"#6B8E23\",\n    orange: \"#FFA500\",\n    orangered: \"#FF4500\",\n    orchid: \"#DA70D6\",\n    palegoldenrod: \"#EEE8AA\",\n    palegreen: \"#98FB98\",\n    paleturquoise: \"#AFEEEE\",\n    palevioletred: \"#DB7093\",\n    papayawhip: \"#FFEFD5\",\n    peachpuff: \"#FFDAB9\",\n    peru: \"#CD853F\",\n    pink: \"#FFC0CB\",\n    plum: \"#DDA0DD\",\n    powderblue: \"#B0E0E6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#639\",\n    red: \"#F00\",\n    rosybrown: \"#BC8F8F\",\n    royalblue: \"#4169E1\",\n    saddlebrown: \"#8B4513\",\n    salmon: \"#FA8072\",\n    sandybrown: \"#F4A460\",\n    seagreen: \"#2E8B57\",\n    seashell: \"#FFF5EE\",\n    sienna: \"#A0522D\",\n    silver: \"#C0C0C0\",\n    skyblue: \"#87CEEB\",\n    slateblue: \"#6A5ACD\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#FFFAFA\",\n    springgreen: \"#00FF7F\",\n    steelblue: \"#4682B4\",\n    tan: \"#D2B48C\",\n    teal: \"#008080\",\n    thistle: \"#D8BFD8\",\n    tomato: \"#FF6347\",\n    turquoise: \"#40E0D0\",\n    violet: \"#EE82EE\",\n    wheat: \"#F5DEB3\",\n    white: \"#FFF\",\n    whitesmoke: \"#F5F5F5\",\n    yellow: \"#FF0\",\n    yellowgreen: \"#9ACD32\"\n}, Li = (i, t, e)=>(e < 0 && (e += 1), e > 1 && (e -= 1), e < 1 / 6 ? i + 6 * (t - i) * e : e < 0.5 ? t : e < 2 / 3 ? i + (t - i) * (2 / 3 - e) * 6 : i), vo = (i, t, e, s)=>{\n    i /= 255, t /= 255, e /= 255;\n    const r = Math.max(i, t, e), n = Math.min(i, t, e);\n    let o, a;\n    const c = (r + n) / 2;\n    if (r === n) o = a = 0;\n    else {\n        const l = r - n;\n        switch(a = c > 0.5 ? l / (2 - r - n) : l / (r + n), r){\n            case i:\n                o = (t - e) / l + (t < e ? 6 : 0);\n                break;\n            case t:\n                o = (e - i) / l + 2;\n                break;\n            case e:\n                o = (i - t) / l + 4;\n        }\n        o /= 6;\n    }\n    return [\n        Math.round(360 * o),\n        Math.round(100 * a),\n        Math.round(100 * c),\n        s\n    ];\n}, yo = function() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1\";\n    return parseFloat(i) / (i.endsWith(\"%\") ? 100 : 1);\n}, vr = (i)=>Math.min(Math.round(i), 255).toString(16).toUpperCase().padStart(2, \"0\"), bo = (i)=>{\n    let [t, e, s, r = 1] = i;\n    const n = Math.round(0.3 * t + 0.59 * e + 0.11 * s);\n    return [\n        n,\n        n,\n        n,\n        r\n    ];\n};\nclass W {\n    constructor(t){\n        if (y(this, \"isUnrecognised\", !1), t) if (t instanceof W) this.setSource([\n            ...t._source\n        ]);\n        else if (Array.isArray(t)) {\n            const [e, s, r, n = 1] = t;\n            this.setSource([\n                e,\n                s,\n                r,\n                n\n            ]);\n        } else this.setSource(this._tryParsingColor(t));\n        else this.setSource([\n            0,\n            0,\n            0,\n            1\n        ]);\n    }\n    _tryParsingColor(t) {\n        return (t = t.toLowerCase()) in mo && (t = mo[t]), t === \"transparent\" ? [\n            255,\n            255,\n            255,\n            0\n        ] : W.sourceFromHex(t) || W.sourceFromRgb(t) || W.sourceFromHsl(t) || (this.isUnrecognised = !0) && [\n            0,\n            0,\n            0,\n            1\n        ];\n    }\n    getSource() {\n        return this._source;\n    }\n    setSource(t) {\n        this._source = t;\n    }\n    toRgb() {\n        const [t, e, s] = this.getSource();\n        return \"rgb(\".concat(t, \",\").concat(e, \",\").concat(s, \")\");\n    }\n    toRgba() {\n        return \"rgba(\".concat(this.getSource().join(\",\"), \")\");\n    }\n    toHsl() {\n        const [t, e, s] = vo(...this.getSource());\n        return \"hsl(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%)\");\n    }\n    toHsla() {\n        const [t, e, s, r] = vo(...this.getSource());\n        return \"hsla(\".concat(t, \",\").concat(e, \"%,\").concat(s, \"%,\").concat(r, \")\");\n    }\n    toHex() {\n        return this.toHexa().slice(0, 6);\n    }\n    toHexa() {\n        const [t, e, s, r] = this.getSource();\n        return \"\".concat(vr(t)).concat(vr(e)).concat(vr(s)).concat(vr(Math.round(255 * r)));\n    }\n    getAlpha() {\n        return this.getSource()[3];\n    }\n    setAlpha(t) {\n        return this._source[3] = t, this;\n    }\n    toGrayscale() {\n        return this.setSource(bo(this.getSource())), this;\n    }\n    toBlackWhite(t) {\n        const [e, , , s] = bo(this.getSource()), r = e < (t || 127) ? 0 : 255;\n        return this.setSource([\n            r,\n            r,\n            r,\n            s\n        ]), this;\n    }\n    overlayWith(t) {\n        t instanceof W || (t = new W(t));\n        const e = this.getSource(), s = t.getSource(), [r, n, o] = e.map((a, c)=>Math.round(0.5 * a + 0.5 * s[c]));\n        return this.setSource([\n            r,\n            n,\n            o,\n            e[3]\n        ]), this;\n    }\n    static fromRgb(t) {\n        return W.fromRgba(t);\n    }\n    static fromRgba(t) {\n        return new W(W.sourceFromRgb(t));\n    }\n    static sourceFromRgb(t) {\n        const e = t.match(/^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n        if (e) {\n            const [s, r, n] = e.slice(1, 4).map((o)=>{\n                const a = parseFloat(o);\n                return o.endsWith(\"%\") ? Math.round(2.55 * a) : a;\n            });\n            return [\n                s,\n                r,\n                n,\n                yo(e[4])\n            ];\n        }\n    }\n    static fromHsl(t) {\n        return W.fromHsla(t);\n    }\n    static fromHsla(t) {\n        return new W(W.sourceFromHsl(t));\n    }\n    static sourceFromHsl(t) {\n        const e = t.match(/^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i);\n        if (!e) return;\n        const s = (W.parseAngletoDegrees(e[1]) % 360 + 360) % 360 / 360, r = parseFloat(e[2]) / 100, n = parseFloat(e[3]) / 100;\n        let o, a, c;\n        if (r === 0) o = a = c = n;\n        else {\n            const l = n <= 0.5 ? n * (r + 1) : n + r - n * r, h = 2 * n - l;\n            o = Li(h, l, s + 1 / 3), a = Li(h, l, s), c = Li(h, l, s - 1 / 3);\n        }\n        return [\n            Math.round(255 * o),\n            Math.round(255 * a),\n            Math.round(255 * c),\n            yo(e[4])\n        ];\n    }\n    static fromHex(t) {\n        return new W(W.sourceFromHex(t));\n    }\n    static sourceFromHex(t) {\n        if (t.match(/^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i)) {\n            const e = t.slice(t.indexOf(\"#\") + 1);\n            let s;\n            s = e.length <= 4 ? e.split(\"\").map((c)=>c + c) : e.match(/.{2}/g);\n            const [r, n, o, a = 255] = s.map((c)=>parseInt(c, 16));\n            return [\n                r,\n                n,\n                o,\n                a / 255\n            ];\n        }\n    }\n    static parseAngletoDegrees(t) {\n        const e = t.toLowerCase(), s = parseFloat(e);\n        return e.includes(\"rad\") ? Ce(s) : e.includes(\"turn\") ? 360 * s : s;\n    }\n}\nconst V = (i, t)=>parseFloat(Number(i).toFixed(t)), We = function(i) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : En;\n    const e = /\\D{0,2}$/.exec(i), s = parseFloat(i), r = A.DPI;\n    switch(e == null ? void 0 : e[0]){\n        case \"mm\":\n            return s * r / 25.4;\n        case \"cm\":\n            return s * r / 2.54;\n        case \"in\":\n            return s * r;\n        case \"pt\":\n            return s * r / 72;\n        case \"pc\":\n            return s * r / 72 * 12;\n        case \"em\":\n            return s * t;\n        default:\n            return s;\n    }\n}, qa = (i)=>{\n    const [t, e] = i.trim().split(\" \"), [s, r] = (n = t) && n !== pt ? [\n        n.slice(1, 4),\n        n.slice(5, 8)\n    ] : n === pt ? [\n        n,\n        n\n    ] : [\n        \"Mid\",\n        \"Mid\"\n    ];\n    var n;\n    return {\n        meetOrSlice: e || \"meet\",\n        alignX: s,\n        alignY: r\n    };\n}, qs = (i)=>\"matrix(\" + i.map((t)=>V(t, A.NUM_FRACTION_DIGITS)).join(\" \") + \")\", Ks = function(i, t) {\n    let e, s, r = !(arguments.length > 2 && arguments[2] !== void 0) || arguments[2];\n    if (t) if (t.toLive) e = \"url(#SVGID_\".concat(t.id, \")\");\n    else {\n        const n = new W(t), o = n.getAlpha();\n        e = n.toRgb(), o !== 1 && (s = o.toString());\n    }\n    else e = \"none\";\n    return r ? \"\".concat(i, \": \").concat(e, \"; \").concat(s ? \"\".concat(i, \"-opacity: \").concat(s, \"; \") : \"\") : \"\".concat(i, '=\"').concat(e, '\" ').concat(s ? \"\".concat(i, '-opacity=\"').concat(s, '\" ') : \"\");\n}, Ct = (i)=>!!i && i.toLive !== void 0, _o = (i)=>!!i && typeof i.toObject == \"function\", So = (i)=>!!i && i.offsetX !== void 0 && \"source\" in i, Pe = (i)=>!!i && \"multiSelectionStacking\" in i;\nfunction Ka(i) {\n    const t = i && At(i);\n    let e = 0, s = 0;\n    if (!i || !t) return {\n        left: e,\n        top: s\n    };\n    let r = i;\n    const n = t.documentElement, o = t.body || {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    for(; r && (r.parentNode || r.host) && (r = r.parentNode || r.host, r === t ? (e = o.scrollLeft || n.scrollLeft || 0, s = o.scrollTop || n.scrollTop || 0) : (e += r.scrollLeft || 0, s += r.scrollTop || 0), r.nodeType !== 1 || r.style.position !== \"fixed\"););\n    return {\n        left: e,\n        top: s\n    };\n}\nconst At = (i)=>i.ownerDocument || null, Ja = (i)=>{\n    var t;\n    return ((t = i.ownerDocument) === null || t === void 0 ? void 0 : t.defaultView) || null;\n}, Za = function(i, t, e) {\n    let { width: s, height: r } = e, n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n    i.width = s, i.height = r, n > 1 && (i.setAttribute(\"width\", (s * n).toString()), i.setAttribute(\"height\", (r * n).toString()), t.scale(n, n));\n}, nn = (i, t)=>{\n    let { width: e, height: s } = t;\n    e && (i.style.width = typeof e == \"number\" ? \"\".concat(e, \"px\") : e), s && (i.style.height = typeof s == \"number\" ? \"\".concat(s, \"px\") : s);\n};\nfunction To(i) {\n    return i.onselectstart !== void 0 && (i.onselectstart = ()=>!1), i.style.userSelect = pt, i;\n}\nclass Qa {\n    constructor(t){\n        y(this, \"_originalCanvasStyle\", void 0), y(this, \"lower\", void 0);\n        const e = this.createLowerCanvas(t);\n        this.lower = {\n            el: e,\n            ctx: e.getContext(\"2d\")\n        };\n    }\n    createLowerCanvas(t) {\n        const e = (s = t) && s.getContext !== void 0 ? t : t && Cs().getElementById(t) || kt();\n        var s;\n        if (e.hasAttribute(\"data-fabric\")) throw new Yt(\"Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?\");\n        return this._originalCanvasStyle = e.style.cssText, e.setAttribute(\"data-fabric\", \"main\"), e.classList.add(\"lower-canvas\"), e;\n    }\n    cleanupDOM(t) {\n        let { width: e, height: s } = t;\n        const { el: r } = this.lower;\n        r.classList.remove(\"lower-canvas\"), r.removeAttribute(\"data-fabric\"), r.setAttribute(\"width\", \"\".concat(e)), r.setAttribute(\"height\", \"\".concat(s)), r.style.cssText = this._originalCanvasStyle || \"\", this._originalCanvasStyle = void 0;\n    }\n    setDimensions(t, e) {\n        const { el: s, ctx: r } = this.lower;\n        Za(s, r, t, e);\n    }\n    setCSSDimensions(t) {\n        nn(this.lower.el, t);\n    }\n    calcOffset() {\n        return function(t) {\n            var e;\n            const s = t && At(t), r = {\n                left: 0,\n                top: 0\n            };\n            if (!s) return r;\n            const n = ((e = Ja(t)) === null || e === void 0 ? void 0 : e.getComputedStyle(t, null)) || {};\n            r.left += parseInt(n.borderLeftWidth, 10) || 0, r.top += parseInt(n.borderTopWidth, 10) || 0, r.left += parseInt(n.paddingLeft, 10) || 0, r.top += parseInt(n.paddingTop, 10) || 0;\n            let o = {\n                left: 0,\n                top: 0\n            };\n            const a = s.documentElement;\n            t.getBoundingClientRect !== void 0 && (o = t.getBoundingClientRect());\n            const c = Ka(t);\n            return {\n                left: o.left + c.left - (a.clientLeft || 0) + r.left,\n                top: o.top + c.top - (a.clientTop || 0) + r.top\n            };\n        }(this.lower.el);\n    }\n    dispose() {\n        $t().dispose(this.lower.el), delete this.lower;\n    }\n}\nconst Yh = {\n    backgroundVpt: !0,\n    backgroundColor: \"\",\n    overlayVpt: !0,\n    overlayColor: \"\",\n    includeDefaultValues: !0,\n    svgViewportTransformation: !0,\n    renderOnAddRemove: !0,\n    skipOffscreen: !0,\n    enableRetinaScaling: !0,\n    imageSmoothingEnabled: !0,\n    controlsAboveOverlay: !1,\n    allowTouchScrolling: !1,\n    viewportTransform: [\n        ...ht\n    ]\n};\nclass lr extends za(Ha) {\n    get lowerCanvasEl() {\n        var t;\n        return (t = this.elements.lower) === null || t === void 0 ? void 0 : t.el;\n    }\n    get contextContainer() {\n        var t;\n        return (t = this.elements.lower) === null || t === void 0 ? void 0 : t.ctx;\n    }\n    static getDefaults() {\n        return lr.ownDefaults;\n    }\n    constructor(t){\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(), Object.assign(this, this.constructor.getDefaults()), this.set(e), this.initElements(t), this._setDimensionsImpl({\n            width: this.width || this.elements.lower.el.width || 0,\n            height: this.height || this.elements.lower.el.height || 0\n        }), this.skipControlsDrawing = !1, this.viewportTransform = [\n            ...this.viewportTransform\n        ], this.calcViewportBoundaries();\n    }\n    initElements(t) {\n        this.elements = new Qa(t);\n    }\n    add() {\n        const t = super.add(...arguments);\n        return arguments.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n    }\n    insertAt(t) {\n        for(var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)s[r - 1] = arguments[r];\n        const n = super.insertAt(t, ...s);\n        return s.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), n;\n    }\n    remove() {\n        const t = super.remove(...arguments);\n        return t.length > 0 && this.renderOnAddRemove && this.requestRenderAll(), t;\n    }\n    _onObjectAdded(t) {\n        t.canvas && t.canvas !== this && (Te(\"warn\", `Canvas is trying to add an object that belongs to a different canvas.\nResulting to default behavior: removing object from previous canvas and adding to new canvas`), t.canvas.remove(t)), t._set(\"canvas\", this), t.setCoords(), this.fire(\"object:added\", {\n            target: t\n        }), t.fire(\"added\", {\n            target: this\n        });\n    }\n    _onObjectRemoved(t) {\n        t._set(\"canvas\", void 0), this.fire(\"object:removed\", {\n            target: t\n        }), t.fire(\"removed\", {\n            target: this\n        });\n    }\n    _onStackOrderChanged() {\n        this.renderOnAddRemove && this.requestRenderAll();\n    }\n    getRetinaScaling() {\n        return this.enableRetinaScaling ? Ra() : 1;\n    }\n    calcOffset() {\n        return this._offset = this.elements.calcOffset();\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    setWidth(t, e) {\n        return this.setDimensions({\n            width: t\n        }, e);\n    }\n    setHeight(t, e) {\n        return this.setDimensions({\n            height: t\n        }, e);\n    }\n    _setDimensionsImpl(t) {\n        let { cssOnly: e = !1, backstoreOnly: s = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (!e) {\n            const r = v({\n                width: this.width,\n                height: this.height\n            }, t);\n            this.elements.setDimensions(r, this.getRetinaScaling()), this.hasLostContext = !0, this.width = r.width, this.height = r.height;\n        }\n        s || this.elements.setCSSDimensions(t), this.calcOffset();\n    }\n    setDimensions(t, e) {\n        this._setDimensionsImpl(t, e), e && e.cssOnly || this.requestRenderAll();\n    }\n    getZoom() {\n        return this.viewportTransform[0];\n    }\n    setViewportTransform(t) {\n        this.viewportTransform = t, this.calcViewportBoundaries(), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    zoomToPoint(t, e) {\n        const s = t, r = [\n            ...this.viewportTransform\n        ], n = ot(t, St(r));\n        r[0] = e, r[3] = e;\n        const o = ot(n, r);\n        r[4] += s.x - o.x, r[5] += s.y - o.y, this.setViewportTransform(r);\n    }\n    setZoom(t) {\n        this.zoomToPoint(new _(0, 0), t);\n    }\n    absolutePan(t) {\n        const e = [\n            ...this.viewportTransform\n        ];\n        return e[4] = -t.x, e[5] = -t.y, this.setViewportTransform(e);\n    }\n    relativePan(t) {\n        return this.absolutePan(new _(-t.x - this.viewportTransform[4], -t.y - this.viewportTransform[5]));\n    }\n    getElement() {\n        return this.elements.lower.el;\n    }\n    clearContext(t) {\n        t.clearRect(0, 0, this.width, this.height);\n    }\n    getContext() {\n        return this.elements.lower.ctx;\n    }\n    clear() {\n        this.remove(...this.getObjects()), this.backgroundImage = void 0, this.overlayImage = void 0, this.backgroundColor = \"\", this.overlayColor = \"\", this.clearContext(this.getContext()), this.fire(\"canvas:cleared\"), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    renderAll() {\n        this.cancelRequestedRender(), this.destroyed || this.renderCanvas(this.getContext(), this._objects);\n    }\n    renderAndReset() {\n        this.nextRenderHandle = 0, this.renderAll();\n    }\n    requestRenderAll() {\n        this.nextRenderHandle || this.disposed || this.destroyed || (this.nextRenderHandle = Hs(()=>this.renderAndReset()));\n    }\n    calcViewportBoundaries() {\n        const t = this.width, e = this.height, s = St(this.viewportTransform), r = ot({\n            x: 0,\n            y: 0\n        }, s), n = ot({\n            x: t,\n            y: e\n        }, s), o = r.min(n), a = r.max(n);\n        return this.vptCoords = {\n            tl: o,\n            tr: new _(a.x, o.y),\n            bl: new _(o.x, a.y),\n            br: a\n        };\n    }\n    cancelRequestedRender() {\n        this.nextRenderHandle && (Ya(this.nextRenderHandle), this.nextRenderHandle = 0);\n    }\n    drawControls(t) {}\n    renderCanvas(t, e) {\n        if (this.destroyed) return;\n        const s = this.viewportTransform, r = this.clipPath;\n        this.calcViewportBoundaries(), this.clearContext(t), t.imageSmoothingEnabled = this.imageSmoothingEnabled, t.patternQuality = \"best\", this.fire(\"before:render\", {\n            ctx: t\n        }), this._renderBackground(t), t.save(), t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this._renderObjects(t, e), t.restore(), this.controlsAboveOverlay || this.skipControlsDrawing || this.drawControls(t), r && (r._set(\"canvas\", this), r.shouldCache(), r._transformDone = !0, r.renderCache({\n            forClipping: !0\n        }), this.drawClipPathOnCanvas(t, r)), this._renderOverlay(t), this.controlsAboveOverlay && !this.skipControlsDrawing && this.drawControls(t), this.fire(\"after:render\", {\n            ctx: t\n        }), this.__cleanupTask && (this.__cleanupTask(), this.__cleanupTask = void 0);\n    }\n    drawClipPathOnCanvas(t, e) {\n        const s = this.viewportTransform;\n        t.save(), t.transform(...s), t.globalCompositeOperation = \"destination-in\", e.transform(t), t.scale(1 / e.zoomX, 1 / e.zoomY), t.drawImage(e._cacheCanvas, -e.cacheTranslationX, -e.cacheTranslationY), t.restore();\n    }\n    _renderObjects(t, e) {\n        for(let s = 0, r = e.length; s < r; ++s)e[s] && e[s].render(t);\n    }\n    _renderBackgroundOrOverlay(t, e) {\n        const s = this[\"\".concat(e, \"Color\")], r = this[\"\".concat(e, \"Image\")], n = this.viewportTransform, o = this[\"\".concat(e, \"Vpt\")];\n        if (!s && !r) return;\n        const a = Ct(s);\n        if (s) {\n            if (t.save(), t.beginPath(), t.moveTo(0, 0), t.lineTo(this.width, 0), t.lineTo(this.width, this.height), t.lineTo(0, this.height), t.closePath(), t.fillStyle = a ? s.toLive(t) : s, o && t.transform(...n), a) {\n                t.transform(1, 0, 0, 1, s.offsetX || 0, s.offsetY || 0);\n                const c = s.gradientTransform || s.patternTransform;\n                c && t.transform(...c);\n            }\n            t.fill(), t.restore();\n        }\n        if (r) {\n            t.save();\n            const { skipOffscreen: c } = this;\n            this.skipOffscreen = o, o && t.transform(...n), r.render(t), this.skipOffscreen = c, t.restore();\n        }\n    }\n    _renderBackground(t) {\n        this._renderBackgroundOrOverlay(t, \"background\");\n    }\n    _renderOverlay(t) {\n        this._renderBackgroundOrOverlay(t, \"overlay\");\n    }\n    getCenter() {\n        return {\n            top: this.height / 2,\n            left: this.width / 2\n        };\n    }\n    getCenterPoint() {\n        return new _(this.width / 2, this.height / 2);\n    }\n    centerObjectH(t) {\n        return this._centerObject(t, new _(this.getCenterPoint().x, t.getCenterPoint().y));\n    }\n    centerObjectV(t) {\n        return this._centerObject(t, new _(t.getCenterPoint().x, this.getCenterPoint().y));\n    }\n    centerObject(t) {\n        return this._centerObject(t, this.getCenterPoint());\n    }\n    viewportCenterObject(t) {\n        return this._centerObject(t, this.getVpCenter());\n    }\n    viewportCenterObjectH(t) {\n        return this._centerObject(t, new _(this.getVpCenter().x, t.getCenterPoint().y));\n    }\n    viewportCenterObjectV(t) {\n        return this._centerObject(t, new _(t.getCenterPoint().x, this.getVpCenter().y));\n    }\n    getVpCenter() {\n        return ot(this.getCenterPoint(), St(this.viewportTransform));\n    }\n    _centerObject(t, e) {\n        t.setXY(e, j, j), t.setCoords(), this.renderOnAddRemove && this.requestRenderAll();\n    }\n    toDatalessJSON(t) {\n        return this.toDatalessObject(t);\n    }\n    toObject(t) {\n        return this._toObjectMethod(\"toObject\", t);\n    }\n    toJSON() {\n        return this.toObject();\n    }\n    toDatalessObject(t) {\n        return this._toObjectMethod(\"toDatalessObject\", t);\n    }\n    _toObjectMethod(t, e) {\n        const s = this.clipPath, r = s && !s.excludeFromExport ? this._toObject(s, t, e) : null;\n        return v(v(v({\n            version: sn\n        }, Ve(this, e)), {}, {\n            objects: this._objects.filter((n)=>!n.excludeFromExport).map((n)=>this._toObject(n, t, e))\n        }, this.__serializeBgOverlay(t, e)), r ? {\n            clipPath: r\n        } : null);\n    }\n    _toObject(t, e, s) {\n        let r;\n        this.includeDefaultValues || (r = t.includeDefaultValues, t.includeDefaultValues = !1);\n        const n = t[e](s);\n        return this.includeDefaultValues || (t.includeDefaultValues = !!r), n;\n    }\n    __serializeBgOverlay(t, e) {\n        const s = {}, r = this.backgroundImage, n = this.overlayImage, o = this.backgroundColor, a = this.overlayColor;\n        return Ct(o) ? o.excludeFromExport || (s.background = o.toObject(e)) : o && (s.background = o), Ct(a) ? a.excludeFromExport || (s.overlay = a.toObject(e)) : a && (s.overlay = a), r && !r.excludeFromExport && (s.backgroundImage = this._toObject(r, t, e)), n && !n.excludeFromExport && (s.overlayImage = this._toObject(n, t, e)), s;\n    }\n    toSVG() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, e = arguments.length > 1 ? arguments[1] : void 0;\n        t.reviver = e;\n        const s = [];\n        return this._setSVGPreamble(s, t), this._setSVGHeader(s, t), this.clipPath && s.push('<g clip-path=\"url(#'.concat(this.clipPath.clipPathId, `)\" >\n`)), this._setSVGBgOverlayColor(s, \"background\"), this._setSVGBgOverlayImage(s, \"backgroundImage\", e), this._setSVGObjects(s, e), this.clipPath && s.push(`</g>\n`), this._setSVGBgOverlayColor(s, \"overlay\"), this._setSVGBgOverlayImage(s, \"overlayImage\", e), s.push(\"</svg>\"), s.join(\"\");\n    }\n    _setSVGPreamble(t, e) {\n        e.suppressPreamble || t.push('<?xml version=\"1.0\" encoding=\"', e.encoding || \"UTF-8\", `\" standalone=\"no\" ?>\n`, '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ', `\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n`);\n    }\n    _setSVGHeader(t, e) {\n        const s = e.width || \"\".concat(this.width), r = e.height || \"\".concat(this.height), n = A.NUM_FRACTION_DIGITS, o = e.viewBox;\n        let a;\n        if (o) a = 'viewBox=\"'.concat(o.x, \" \").concat(o.y, \" \").concat(o.width, \" \").concat(o.height, '\" ');\n        else if (this.svgViewportTransformation) {\n            const c = this.viewportTransform;\n            a = 'viewBox=\"'.concat(V(-c[4] / c[0], n), \" \").concat(V(-c[5] / c[3], n), \" \").concat(V(this.width / c[0], n), \" \").concat(V(this.height / c[3], n), '\" ');\n        } else a = 'viewBox=\"0 0 '.concat(this.width, \" \").concat(this.height, '\" ');\n        t.push(\"<svg \", 'xmlns=\"http://www.w3.org/2000/svg\" ', 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ', 'version=\"1.1\" ', 'width=\"', s, '\" ', 'height=\"', r, '\" ', a, `xml:space=\"preserve\">\n`, \"<desc>Created with Fabric.js \", sn, `</desc>\n`, `<defs>\n`, this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(e), `</defs>\n`);\n    }\n    createSVGClipPathMarkup(t) {\n        const e = this.clipPath;\n        return e ? (e.clipPathId = \"CLIPPATH_\".concat(we()), '<clipPath id=\"'.concat(e.clipPathId, `\" >\n`).concat(e.toClipPathSVG(t.reviver), `</clipPath>\n`)) : \"\";\n    }\n    createSVGRefElementsMarkup() {\n        return [\n            \"background\",\n            \"overlay\"\n        ].map((t)=>{\n            const e = this[\"\".concat(t, \"Color\")];\n            if (Ct(e)) {\n                const s = this[\"\".concat(t, \"Vpt\")], r = this.viewportTransform, n = {\n                    isType: ()=>!1,\n                    width: this.width / (s ? r[0] : 1),\n                    height: this.height / (s ? r[3] : 1)\n                };\n                return e.toSVG(n, {\n                    additionalTransform: s ? qs(r) : \"\"\n                });\n            }\n        }).join(\"\");\n    }\n    createSVGFontFacesMarkup() {\n        const t = [], e = {}, s = A.fontPaths;\n        this._objects.forEach(function n(o) {\n            t.push(o), Vr(o) && o._objects.forEach(n);\n        }), t.forEach((n)=>{\n            if (!(o = n) || typeof o._renderText != \"function\") return;\n            var o;\n            const { styles: a, fontFamily: c } = n;\n            !e[c] && s[c] && (e[c] = !0, a && Object.values(a).forEach((l)=>{\n                Object.values(l).forEach((h)=>{\n                    let { fontFamily: u = \"\" } = h;\n                    !e[u] && s[u] && (e[u] = !0);\n                });\n            }));\n        });\n        const r = Object.keys(e).map((n)=>`\t\t@font-face {\n\t\t\tfont-family: '`.concat(n, `';\n\t\t\tsrc: url('`).concat(s[n], `');\n\t\t}\n`)).join(\"\");\n        return r ? `\t<style type=\"text/css\"><![CDATA[\n`.concat(r, `]]></style>\n`) : \"\";\n    }\n    _setSVGObjects(t, e) {\n        this.forEachObject((s)=>{\n            s.excludeFromExport || this._setSVGObject(t, s, e);\n        });\n    }\n    _setSVGObject(t, e, s) {\n        t.push(e.toSVG(s));\n    }\n    _setSVGBgOverlayImage(t, e, s) {\n        const r = this[e];\n        r && !r.excludeFromExport && r.toSVG && t.push(r.toSVG(s));\n    }\n    _setSVGBgOverlayColor(t, e) {\n        const s = this[\"\".concat(e, \"Color\")];\n        if (s) if (Ct(s)) {\n            const r = s.repeat || \"\", n = this.width, o = this.height, a = this[\"\".concat(e, \"Vpt\")] ? qs(St(this.viewportTransform)) : \"\";\n            t.push('<rect transform=\"'.concat(a, \" translate(\").concat(n / 2, \",\").concat(o / 2, ')\" x=\"').concat(s.offsetX - n / 2, '\" y=\"').concat(s.offsetY - o / 2, '\" width=\"').concat(r !== \"repeat-y\" && r !== \"no-repeat\" || !So(s) ? n : s.source.width, '\" height=\"').concat(r !== \"repeat-x\" && r !== \"no-repeat\" || !So(s) ? o : s.source.height, '\" fill=\"url(#SVGID_').concat(s.id, `)\"></rect>\n`));\n        } else t.push('<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ', 'fill=\"', s, '\"', `></rect>\n`);\n    }\n    loadFromJSON(t, e) {\n        let { signal: s } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!t) return Promise.reject(new Yt(\"`json` is undefined\"));\n        const r = typeof t == \"string\" ? JSON.parse(t) : t, { objects: n = [], backgroundImage: o, background: a, overlayImage: c, overlay: l, clipPath: h } = r, u = this.renderOnAddRemove;\n        return this.renderOnAddRemove = !1, Promise.all([\n            bs(n, {\n                reviver: e,\n                signal: s\n            }),\n            cr({\n                backgroundImage: o,\n                backgroundColor: a,\n                overlayImage: c,\n                overlayColor: l,\n                clipPath: h\n            }, {\n                signal: s\n            })\n        ]).then((d)=>{\n            let [f, g] = d;\n            return this.clear(), this.add(...f), this.set(r), this.set(g), this.renderOnAddRemove = u, this;\n        });\n    }\n    clone(t) {\n        const e = this.toObject(t);\n        return this.cloneWithoutData().loadFromJSON(e);\n    }\n    cloneWithoutData() {\n        const t = Wt(this);\n        return new this.constructor(t);\n    }\n    toDataURL() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { format: e = \"png\", quality: s = 1, multiplier: r = 1, enableRetinaScaling: n = !1 } = t, o = r * (n ? this.getRetinaScaling() : 1);\n        return Rn(this.toCanvasElement(o, t), e, s);\n    }\n    toBlob() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const { format: e = \"png\", quality: s = 1, multiplier: r = 1, enableRetinaScaling: n = !1 } = t, o = r * (n ? this.getRetinaScaling() : 1);\n        return Ln(this.toCanvasElement(o, t), e, s);\n    }\n    toCanvasElement() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, { width: e, height: s, left: r, top: n, filter: o } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const a = (e || this.width) * t, c = (s || this.height) * t, l = this.getZoom(), h = this.width, u = this.height, d = this.skipControlsDrawing, f = l * t, g = this.viewportTransform, p = [\n            f,\n            0,\n            0,\n            f,\n            (g[4] - (r || 0)) * t,\n            (g[5] - (n || 0)) * t\n        ], m = this.enableRetinaScaling, b = Wt({\n            width: a,\n            height: c\n        }), S = o ? this._objects.filter((w)=>o(w)) : this._objects;\n        return this.enableRetinaScaling = !1, this.viewportTransform = p, this.width = a, this.height = c, this.skipControlsDrawing = !0, this.calcViewportBoundaries(), this.renderCanvas(b.getContext(\"2d\"), S), this.viewportTransform = g, this.width = h, this.height = u, this.calcViewportBoundaries(), this.enableRetinaScaling = m, this.skipControlsDrawing = d, b;\n    }\n    dispose() {\n        return !this.disposed && this.elements.cleanupDOM({\n            width: this.width,\n            height: this.height\n        }), qr.cancelByCanvas(this), this.disposed = !0, new Promise((t, e)=>{\n            const s = ()=>{\n                this.destroy(), t(!0);\n            };\n            s.kill = e, this.__cleanupTask && this.__cleanupTask.kill(\"aborted\"), this.destroyed ? t(!1) : this.nextRenderHandle ? this.__cleanupTask = s : s();\n        });\n    }\n    destroy() {\n        this.destroyed = !0, this.cancelRequestedRender(), this.forEachObject((t)=>t.dispose()), this._objects = [], this.backgroundImage && this.backgroundImage.dispose(), this.backgroundImage = void 0, this.overlayImage && this.overlayImage.dispose(), this.overlayImage = void 0, this.elements.dispose();\n    }\n    toString() {\n        return \"#<Canvas (\".concat(this.complexity(), \"): { objects: \").concat(this._objects.length, \" }>\");\n    }\n}\ny(lr, \"ownDefaults\", Yh);\nconst Vh = [\n    \"touchstart\",\n    \"touchmove\",\n    \"touchend\"\n], tc = (i)=>{\n    const t = Ka(i.target), e = function(s) {\n        const r = s.changedTouches;\n        return r && r[0] ? r[0] : s;\n    }(i);\n    return new _(e.clientX + t.left, e.clientY + t.top);\n}, Kr = (i)=>Vh.includes(i.type) || i.pointerType === \"touch\", on = (i)=>{\n    i.preventDefault(), i.stopPropagation();\n}, Gt = (i)=>{\n    let t = 0, e = 0, s = 0, r = 0;\n    for(let n = 0, o = i.length; n < o; n++){\n        const { x: a, y: c } = i[n];\n        (a > s || !n) && (s = a), (a < t || !n) && (t = a), (c > r || !n) && (r = c), (c < e || !n) && (e = c);\n    }\n    return {\n        left: t,\n        top: e,\n        width: s - t,\n        height: r - e\n    };\n}, Gh = [\n    \"translateX\",\n    \"translateY\",\n    \"scaleX\",\n    \"scaleY\"\n], ec = (i, t)=>_s(i, J(t, i.calcOwnMatrix())), _s = (i, t)=>{\n    const e = ys(t), { translateX: s, translateY: r, scaleX: n, scaleY: o } = e, a = G(e, Gh), c = new _(s, r);\n    i.flipX = !1, i.flipY = !1, Object.assign(i, a), i.set({\n        scaleX: n,\n        scaleY: o\n    }), i.setPositionByOrigin(c, j, j);\n}, sc = (i)=>{\n    i.scaleX = 1, i.scaleY = 1, i.skewX = 0, i.skewY = 0, i.flipX = !1, i.flipY = !1, i.rotate(0);\n}, zn = (i)=>({\n        scaleX: i.scaleX,\n        scaleY: i.scaleY,\n        skewX: i.skewX,\n        skewY: i.skewY,\n        angle: i.angle,\n        left: i.left,\n        flipX: i.flipX,\n        flipY: i.flipY,\n        top: i.top\n    }), yi = (i, t, e)=>{\n    const s = i / 2, r = t / 2, n = [\n        new _(-s, -r),\n        new _(s, -r),\n        new _(-s, r),\n        new _(s, r)\n    ].map((a)=>a.transform(e)), o = Gt(n);\n    return new _(o.width, o.height);\n}, hr = function() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ht;\n    return J(St(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ht), i);\n}, ae = function(i) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ht, e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ht;\n    return i.transform(hr(t, e));\n}, rc = function(i) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ht, e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ht;\n    return i.transform(hr(t, e), !0);\n}, an = (i, t, e)=>{\n    const s = hr(t, e);\n    return _s(i, J(s, i.calcOwnMatrix())), s;\n}, Hn = (i, t)=>{\n    var e;\n    const { transform: { target: s } } = t;\n    (e = s.canvas) === null || e === void 0 || e.fire(\"object:\".concat(i), v(v({}, t), {}, {\n        target: s\n    })), s.fire(i, t);\n}, Nh = {\n    left: -0.5,\n    top: -0.5,\n    center: 0,\n    bottom: 0.5,\n    right: 0.5\n}, st = (i)=>typeof i == \"string\" ? Nh[i] : i - 0.5, Jr = \"not-allowed\";\nfunction ic(i) {\n    return st(i.originX) === st(j) && st(i.originY) === st(j);\n}\nfunction xo(i) {\n    return 0.5 - st(i);\n}\nconst Rt = (i, t)=>i[t], Yn = (i, t, e, s)=>({\n        e: i,\n        transform: t,\n        pointer: new _(e, s)\n    });\nfunction nc(i, t) {\n    const e = i.getTotalAngle() + Ce(Math.atan2(t.y, t.x)) + 360;\n    return Math.round(e % 360 / 45);\n}\nfunction bi(i, t, e, s, r) {\n    var n;\n    let { target: o, corner: a } = i;\n    const c = o.controls[a], l = ((n = o.canvas) === null || n === void 0 ? void 0 : n.getZoom()) || 1, h = o.padding / l, u = function(d, f, g, p) {\n        const m = d.getRelativeCenterPoint(), b = g !== void 0 && p !== void 0 ? d.translateToGivenOrigin(m, j, j, g, p) : new _(d.left, d.top);\n        return (d.angle ? f.rotate(-K(d.angle), m) : f).subtract(b);\n    }(o, new _(s, r), t, e);\n    return u.x >= h && (u.x -= h), u.x <= -h && (u.x += h), u.y >= h && (u.y -= h), u.y <= h && (u.y += h), u.x -= c.offsetX, u.y -= c.offsetY, u;\n}\nconst oc = (i, t, e, s)=>{\n    const { target: r, offsetX: n, offsetY: o } = t, a = e - n, c = s - o, l = !Rt(r, \"lockMovementX\") && r.left !== a, h = !Rt(r, \"lockMovementY\") && r.top !== c;\n    return l && r.set(L, a), h && r.set(gt, c), (l || h) && Hn(La, Yn(i, t, e, s)), l || h;\n};\nclass ac {\n    getSvgStyles(t) {\n        const e = this.fillRule ? this.fillRule : \"nonzero\", s = this.strokeWidth ? this.strokeWidth : \"0\", r = this.strokeDashArray ? this.strokeDashArray.join(\" \") : pt, n = this.strokeDashOffset ? this.strokeDashOffset : \"0\", o = this.strokeLineCap ? this.strokeLineCap : \"butt\", a = this.strokeLineJoin ? this.strokeLineJoin : \"miter\", c = this.strokeMiterLimit ? this.strokeMiterLimit : \"4\", l = this.opacity !== void 0 ? this.opacity : \"1\", h = this.visible ? \"\" : \" visibility: hidden;\", u = t ? \"\" : this.getSvgFilter(), d = Ks(rt, this.fill);\n        return [\n            Ks(mt, this.stroke),\n            \"stroke-width: \",\n            s,\n            \"; \",\n            \"stroke-dasharray: \",\n            r,\n            \"; \",\n            \"stroke-linecap: \",\n            o,\n            \"; \",\n            \"stroke-dashoffset: \",\n            n,\n            \"; \",\n            \"stroke-linejoin: \",\n            a,\n            \"; \",\n            \"stroke-miterlimit: \",\n            c,\n            \"; \",\n            d,\n            \"fill-rule: \",\n            e,\n            \"; \",\n            \"opacity: \",\n            l,\n            \";\",\n            u,\n            h\n        ].join(\"\");\n    }\n    getSvgFilter() {\n        return this.shadow ? \"filter: url(#SVGID_\".concat(this.shadow.id, \");\") : \"\";\n    }\n    getSvgCommons() {\n        return [\n            this.id ? 'id=\"'.concat(this.id, '\" ') : \"\",\n            this.clipPath ? 'clip-path=\"url(#'.concat(this.clipPath.clipPathId, ')\" ') : \"\"\n        ].join(\"\");\n    }\n    getSvgTransform(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        const s = t ? this.calcTransformMatrix() : this.calcOwnMatrix(), r = 'transform=\"'.concat(qs(s));\n        return \"\".concat(r).concat(e, '\" ');\n    }\n    _toSVG(t) {\n        return [\n            \"\"\n        ];\n    }\n    toSVG(t) {\n        return this._createBaseSVGMarkup(this._toSVG(t), {\n            reviver: t\n        });\n    }\n    toClipPathSVG(t) {\n        return \"\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(t), {\n            reviver: t\n        });\n    }\n    _createBaseClipPathSVGMarkup(t) {\n        let { reviver: e, additionalTransform: s = \"\" } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const r = [\n            this.getSvgTransform(!0, s),\n            this.getSvgCommons()\n        ].join(\"\"), n = t.indexOf(\"COMMON_PARTS\");\n        return t[n] = r, e ? e(t.join(\"\")) : t.join(\"\");\n    }\n    _createBaseSVGMarkup(t) {\n        let { noStyle: e, reviver: s, withShadow: r, additionalTransform: n } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const o = e ? \"\" : 'style=\"'.concat(this.getSvgStyles(), '\" '), a = r ? 'style=\"'.concat(this.getSvgFilter(), '\" ') : \"\", c = this.clipPath, l = this.strokeUniform ? 'vector-effect=\"non-scaling-stroke\" ' : \"\", h = c && c.absolutePositioned, u = this.stroke, d = this.fill, f = this.shadow, g = [], p = t.indexOf(\"COMMON_PARTS\");\n        let m;\n        c && (c.clipPathId = \"CLIPPATH_\".concat(we()), m = '<clipPath id=\"'.concat(c.clipPathId, `\" >\n`).concat(c.toClipPathSVG(s), `</clipPath>\n`)), h && g.push(\"<g \", a, this.getSvgCommons(), ` >\n`), g.push(\"<g \", this.getSvgTransform(!1), h ? \"\" : a + this.getSvgCommons(), ` >\n`);\n        const b = [\n            o,\n            l,\n            e ? \"\" : this.addPaintOrder(),\n            \" \",\n            n ? 'transform=\"'.concat(n, '\" ') : \"\"\n        ].join(\"\");\n        return t[p] = b, Ct(d) && g.push(d.toSVG(this)), Ct(u) && g.push(u.toSVG(this)), f && g.push(f.toSVG(this)), c && g.push(m), g.push(t.join(\"\")), g.push(`</g>\n`), h && g.push(`</g>\n`), s ? s(g.join(\"\")) : g.join(\"\");\n    }\n    addPaintOrder() {\n        return this.paintFirst !== rt ? ' paint-order=\"'.concat(this.paintFirst, '\" ') : \"\";\n    }\n}\nfunction _i(i) {\n    return new RegExp(\"^(\" + i.join(\"|\") + \")\\\\b\", \"i\");\n}\nvar wo;\nconst Xe = String.raw(wo || (wo = Me([\n    \"(?:[-+]?(?:d*.d+|d+.?)(?:[eE][-+]?d+)?)\"\n], [\n    \"(?:[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?)\"\n]))), Uh = new RegExp(\"(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(\" + Xe + \"(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|\" + Xe + \"))?\\\\s+(.*)\"), $h = {\n    cx: L,\n    x: L,\n    r: \"radius\",\n    cy: gt,\n    y: gt,\n    display: \"visible\",\n    visibility: \"visible\",\n    transform: \"transformMatrix\",\n    \"fill-opacity\": \"fillOpacity\",\n    \"fill-rule\": \"fillRule\",\n    \"font-family\": \"fontFamily\",\n    \"font-size\": \"fontSize\",\n    \"font-style\": \"fontStyle\",\n    \"font-weight\": \"fontWeight\",\n    \"letter-spacing\": \"charSpacing\",\n    \"paint-order\": \"paintFirst\",\n    \"stroke-dasharray\": \"strokeDashArray\",\n    \"stroke-dashoffset\": \"strokeDashOffset\",\n    \"stroke-linecap\": \"strokeLineCap\",\n    \"stroke-linejoin\": \"strokeLineJoin\",\n    \"stroke-miterlimit\": \"strokeMiterLimit\",\n    \"stroke-opacity\": \"strokeOpacity\",\n    \"stroke-width\": \"strokeWidth\",\n    \"text-decoration\": \"textDecoration\",\n    \"text-anchor\": \"textAnchor\",\n    opacity: \"opacity\",\n    \"clip-path\": \"clipPath\",\n    \"clip-rule\": \"clipRule\",\n    \"vector-effect\": \"strokeUniform\",\n    \"image-rendering\": \"imageSmoothing\"\n}, Bi = \"font-size\", Wi = \"clip-path\";\n_i([\n    \"path\",\n    \"circle\",\n    \"polygon\",\n    \"polyline\",\n    \"ellipse\",\n    \"rect\",\n    \"line\",\n    \"image\",\n    \"text\"\n]);\n_i([\n    \"symbol\",\n    \"image\",\n    \"marker\",\n    \"pattern\",\n    \"view\",\n    \"svg\"\n]);\nconst Co = _i([\n    \"symbol\",\n    \"g\",\n    \"a\",\n    \"svg\",\n    \"clipPath\",\n    \"defs\"\n]), qh = new _(1, 0), cc = new _(), Vn = (i, t)=>i.rotate(t), Zr = (i, t)=>new _(t).subtract(i), Qr = (i)=>i.distanceFrom(cc), ti = (i, t)=>Math.atan2(ps(i, t), hc(i, t)), lc = (i)=>ti(qh, i), Si = (i)=>i.eq(cc) ? i : i.scalarDivide(Qr(i)), Gn = function(i) {\n    let t = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];\n    return Si(new _(-i.y, i.x).scalarMultiply(t ? 1 : -1));\n}, ps = (i, t)=>i.x * t.y - i.y * t.x, hc = (i, t)=>i.x * t.x + i.y * t.y, cn = (i, t, e)=>{\n    if (i.eq(t) || i.eq(e)) return !0;\n    const s = ps(t, e), r = ps(t, i), n = ps(e, i);\n    return s >= 0 ? r >= 0 && n <= 0 : !(r <= 0 && n >= 0);\n}, Oo = \"(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?\", ko = new RegExp(\"(?:\\\\s|^)\" + Oo + Oo + \"(\" + Xe + \"?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)\");\nclass ce {\n    constructor(t){\n        const e = typeof t == \"string\" ? ce.parseShadow(t) : t;\n        Object.assign(this, ce.ownDefaults, e), this.id = we();\n    }\n    static parseShadow(t) {\n        const e = t.trim(), [, s = 0, r = 0, n = 0] = (ko.exec(e) || []).map((o)=>parseFloat(o) || 0);\n        return {\n            color: (e.replace(ko, \"\") || \"rgb(0,0,0)\").trim(),\n            offsetX: s,\n            offsetY: r,\n            blur: n\n        };\n    }\n    toString() {\n        return [\n            this.offsetX,\n            this.offsetY,\n            this.blur,\n            this.color\n        ].join(\"px \");\n    }\n    toSVG(t) {\n        const e = Vn(new _(this.offsetX, this.offsetY), K(-t.angle)), s = new W(this.color);\n        let r = 40, n = 40;\n        return t.width && t.height && (r = 100 * V((Math.abs(e.x) + this.blur) / t.width, A.NUM_FRACTION_DIGITS) + 20, n = 100 * V((Math.abs(e.y) + this.blur) / t.height, A.NUM_FRACTION_DIGITS) + 20), t.flipX && (e.x *= -1), t.flipY && (e.y *= -1), '<filter id=\"SVGID_'.concat(this.id, '\" y=\"-').concat(n, '%\" height=\"').concat(100 + 2 * n, '%\" x=\"-').concat(r, '%\" width=\"').concat(100 + 2 * r, `%\" >\n\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"`).concat(V(this.blur ? this.blur / 2 : 0, A.NUM_FRACTION_DIGITS), `\"></feGaussianBlur>\n\t<feOffset dx=\"`).concat(V(e.x, A.NUM_FRACTION_DIGITS), '\" dy=\"').concat(V(e.y, A.NUM_FRACTION_DIGITS), `\" result=\"oBlur\" ></feOffset>\n\t<feFlood flood-color=\"`).concat(s.toRgb(), '\" flood-opacity=\"').concat(s.getAlpha(), `\"/>\n\t<feComposite in2=\"oBlur\" operator=\"in\" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\n\t</feMerge>\n</filter>\n`);\n    }\n    toObject() {\n        const t = {\n            color: this.color,\n            blur: this.blur,\n            offsetX: this.offsetX,\n            offsetY: this.offsetY,\n            affectStroke: this.affectStroke,\n            nonScaling: this.nonScaling,\n            type: this.constructor.type\n        }, e = ce.ownDefaults;\n        return this.includeDefaultValues ? t : Xn(t, (s, r)=>s !== e[r]);\n    }\n    static async fromObject(t) {\n        return new this(t);\n    }\n}\ny(ce, \"ownDefaults\", {\n    color: \"rgb(0,0,0)\",\n    blur: 0,\n    offsetX: 0,\n    offsetY: 0,\n    affectStroke: !1,\n    includeDefaultValues: !0,\n    nonScaling: !1\n}), y(ce, \"type\", \"shadow\"), C.setClass(ce, \"shadow\");\nconst ze = (i, t, e)=>Math.max(i, Math.min(t, e)), Kh = [\n    gt,\n    L,\n    ut,\n    Tt,\n    \"flipX\",\n    \"flipY\",\n    \"originX\",\n    \"originY\",\n    \"angle\",\n    \"opacity\",\n    \"globalCompositeOperation\",\n    \"shadow\",\n    \"visible\",\n    Os,\n    ks\n], de = [\n    rt,\n    mt,\n    \"strokeWidth\",\n    \"strokeDashArray\",\n    \"width\",\n    \"height\",\n    \"paintFirst\",\n    \"strokeUniform\",\n    \"strokeLineCap\",\n    \"strokeDashOffset\",\n    \"strokeLineJoin\",\n    \"strokeMiterLimit\",\n    \"backgroundColor\",\n    \"clipPath\"\n], Jh = {\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0,\n    angle: 0,\n    flipX: !1,\n    flipY: !1,\n    scaleX: 1,\n    scaleY: 1,\n    minScaleLimit: 0,\n    skewX: 0,\n    skewY: 0,\n    originX: L,\n    originY: gt,\n    strokeWidth: 1,\n    strokeUniform: !1,\n    padding: 0,\n    opacity: 1,\n    paintFirst: rt,\n    fill: \"rgb(0,0,0)\",\n    fillRule: \"nonzero\",\n    stroke: null,\n    strokeDashArray: null,\n    strokeDashOffset: 0,\n    strokeLineCap: \"butt\",\n    strokeLineJoin: \"miter\",\n    strokeMiterLimit: 4,\n    globalCompositeOperation: \"source-over\",\n    backgroundColor: \"\",\n    shadow: null,\n    visible: !0,\n    includeDefaultValues: !0,\n    excludeFromExport: !1,\n    objectCaching: !0,\n    clipPath: void 0,\n    inverted: !1,\n    absolutePositioned: !1,\n    centeredRotation: !0,\n    centeredScaling: !1,\n    dirty: !0\n}, Xi = (i, t, e, s)=>(i < Math.abs(t) ? (i = t, s = e / 4) : s = t === 0 && i === 0 ? e / he * Math.asin(1) : e / he * Math.asin(t / i), {\n        a: i,\n        c: t,\n        p: e,\n        s\n    }), Mo = (i, t, e, s, r)=>i * Math.pow(2, 10 * (s -= 1)) * Math.sin((s * r - t) * he / e), uc = (i, t, e, s)=>-e * Math.cos(i / s * xe) + e + t, ln = (i, t, e, s)=>(i /= s) < 1 / 2.75 ? e * (7.5625 * i * i) + t : i < 2 / 2.75 ? e * (7.5625 * (i -= 1.5 / 2.75) * i + 0.75) + t : i < 2.5 / 2.75 ? e * (7.5625 * (i -= 2.25 / 2.75) * i + 0.9375) + t : e * (7.5625 * (i -= 2.625 / 2.75) * i + 0.984375) + t, Io = (i, t, e, s)=>e - ln(s - i, 0, e, s) + t;\nvar Zh = Object.freeze({\n    __proto__: null,\n    defaultEasing: uc,\n    easeInBack: function(i, t, e, s) {\n        let r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1.70158;\n        return e * (i /= s) * i * ((r + 1) * i - r) + t;\n    },\n    easeInBounce: Io,\n    easeInCirc: (i, t, e, s)=>-e * (Math.sqrt(1 - (i /= s) * i) - 1) + t,\n    easeInCubic: (i, t, e, s)=>e * (i / s) ** 3 + t,\n    easeInElastic: (i, t, e, s)=>{\n        const r = e;\n        let n = 0;\n        if (i === 0) return t;\n        if ((i /= s) === 1) return t + e;\n        n || (n = 0.3 * s);\n        const { a: o, s: a, p: c } = Xi(r, e, n, 1.70158);\n        return -Mo(o, a, c, i, s) + t;\n    },\n    easeInExpo: (i, t, e, s)=>i === 0 ? t : e * 2 ** (10 * (i / s - 1)) + t,\n    easeInOutBack: function(i, t, e, s) {\n        let r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1.70158;\n        return (i /= s / 2) < 1 ? e / 2 * (i * i * ((1 + (r *= 1.525)) * i - r)) + t : e / 2 * ((i -= 2) * i * ((1 + (r *= 1.525)) * i + r) + 2) + t;\n    },\n    easeInOutBounce: (i, t, e, s)=>i < s / 2 ? 0.5 * Io(2 * i, 0, e, s) + t : 0.5 * ln(2 * i - s, 0, e, s) + 0.5 * e + t,\n    easeInOutCirc: (i, t, e, s)=>(i /= s / 2) < 1 ? -e / 2 * (Math.sqrt(1 - i ** 2) - 1) + t : e / 2 * (Math.sqrt(1 - (i -= 2) * i) + 1) + t,\n    easeInOutCubic: (i, t, e, s)=>(i /= s / 2) < 1 ? e / 2 * i ** 3 + t : e / 2 * ((i - 2) ** 3 + 2) + t,\n    easeInOutElastic: (i, t, e, s)=>{\n        const r = e;\n        let n = 0;\n        if (i === 0) return t;\n        if ((i /= s / 2) === 2) return t + e;\n        n || (n = s * (0.3 * 1.5));\n        const { a: o, s: a, p: c, c: l } = Xi(r, e, n, 1.70158);\n        return i < 1 ? -0.5 * Mo(o, a, c, i, s) + t : o * Math.pow(2, -10 * (i -= 1)) * Math.sin((i * s - a) * he / c) * 0.5 + l + t;\n    },\n    easeInOutExpo: (i, t, e, s)=>i === 0 ? t : i === s ? t + e : (i /= s / 2) < 1 ? e / 2 * 2 ** (10 * (i - 1)) + t : e / 2 * -(2 ** (-10 * --i) + 2) + t,\n    easeInOutQuad: (i, t, e, s)=>(i /= s / 2) < 1 ? e / 2 * i ** 2 + t : -e / 2 * (--i * (i - 2) - 1) + t,\n    easeInOutQuart: (i, t, e, s)=>(i /= s / 2) < 1 ? e / 2 * i ** 4 + t : -e / 2 * ((i -= 2) * i ** 3 - 2) + t,\n    easeInOutQuint: (i, t, e, s)=>(i /= s / 2) < 1 ? e / 2 * i ** 5 + t : e / 2 * ((i - 2) ** 5 + 2) + t,\n    easeInOutSine: (i, t, e, s)=>-e / 2 * (Math.cos(Math.PI * i / s) - 1) + t,\n    easeInQuad: (i, t, e, s)=>e * (i /= s) * i + t,\n    easeInQuart: (i, t, e, s)=>e * (i /= s) * i ** 3 + t,\n    easeInQuint: (i, t, e, s)=>e * (i / s) ** 5 + t,\n    easeInSine: (i, t, e, s)=>-e * Math.cos(i / s * xe) + e + t,\n    easeOutBack: function(i, t, e, s) {\n        let r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1.70158;\n        return e * ((i = i / s - 1) * i * ((r + 1) * i + r) + 1) + t;\n    },\n    easeOutBounce: ln,\n    easeOutCirc: (i, t, e, s)=>e * Math.sqrt(1 - (i = i / s - 1) * i) + t,\n    easeOutCubic: (i, t, e, s)=>e * ((i / s - 1) ** 3 + 1) + t,\n    easeOutElastic: (i, t, e, s)=>{\n        const r = e;\n        let n = 0;\n        if (i === 0) return t;\n        if ((i /= s) === 1) return t + e;\n        n || (n = 0.3 * s);\n        const { a: o, s: a, p: c, c: l } = Xi(r, e, n, 1.70158);\n        return o * 2 ** (-10 * i) * Math.sin((i * s - a) * he / c) + l + t;\n    },\n    easeOutExpo: (i, t, e, s)=>i === s ? t + e : e * -(2 ** (-10 * i / s) + 1) + t,\n    easeOutQuad: (i, t, e, s)=>-e * (i /= s) * (i - 2) + t,\n    easeOutQuart: (i, t, e, s)=>-e * ((i = i / s - 1) * i ** 3 - 1) + t,\n    easeOutQuint: (i, t, e, s)=>e * ((i / s - 1) ** 5 + 1) + t,\n    easeOutSine: (i, t, e, s)=>e * Math.sin(i / s * xe) + t\n});\nconst Qh = ()=>!1;\nclass Nn {\n    constructor(t){\n        let { startValue: e, byValue: s, duration: r = 500, delay: n = 0, easing: o = uc, onStart: a = Be, onChange: c = Be, onComplete: l = Be, abort: h = Qh, target: u } = t;\n        y(this, \"_state\", \"pending\"), y(this, \"durationProgress\", 0), y(this, \"valueProgress\", 0), this.tick = this.tick.bind(this), this.duration = r, this.delay = n, this.easing = o, this._onStart = a, this._onChange = c, this._onComplete = l, this._abort = h, this.target = u, this.startValue = e, this.byValue = s, this.value = this.startValue, this.endValue = Object.freeze(this.calculate(this.duration).value);\n    }\n    get state() {\n        return this._state;\n    }\n    isDone() {\n        return this._state === \"aborted\" || this._state === \"completed\";\n    }\n    start() {\n        const t = (e)=>{\n            this._state === \"pending\" && (this.startTime = e || +/* @__PURE__ */ new Date(), this._state = \"running\", this._onStart(), this.tick(this.startTime));\n        };\n        this.register(), this.delay > 0 ? setTimeout(()=>Hs(t), this.delay) : Hs(t);\n    }\n    tick(t) {\n        const e = (t || +/* @__PURE__ */ new Date()) - this.startTime, s = Math.min(e, this.duration);\n        this.durationProgress = s / this.duration;\n        const { value: r, valueProgress: n } = this.calculate(s);\n        this.value = Object.freeze(r), this.valueProgress = n, this._state !== \"aborted\" && (this._abort(this.value, this.valueProgress, this.durationProgress) ? (this._state = \"aborted\", this.unregister()) : e >= this.duration ? (this.durationProgress = this.valueProgress = 1, this._onChange(this.endValue, this.valueProgress, this.durationProgress), this._state = \"completed\", this._onComplete(this.endValue, this.valueProgress, this.durationProgress), this.unregister()) : (this._onChange(this.value, this.valueProgress, this.durationProgress), Hs(this.tick)));\n    }\n    register() {\n        qr.push(this);\n    }\n    unregister() {\n        qr.remove(this);\n    }\n    abort() {\n        this._state = \"aborted\", this.unregister();\n    }\n}\nconst tu = [\n    \"startValue\",\n    \"endValue\"\n];\nclass eu extends Nn {\n    constructor(t){\n        let { startValue: e = 0, endValue: s = 100 } = t;\n        super(v(v({}, G(t, tu)), {}, {\n            startValue: e,\n            byValue: s - e\n        }));\n    }\n    calculate(t) {\n        const e = this.easing(t, this.startValue, this.byValue, this.duration);\n        return {\n            value: e,\n            valueProgress: Math.abs((e - this.startValue) / this.byValue)\n        };\n    }\n}\nconst su = [\n    \"startValue\",\n    \"endValue\"\n];\nclass ru extends Nn {\n    constructor(t){\n        let { startValue: e = [\n            0\n        ], endValue: s = [\n            100\n        ] } = t;\n        super(v(v({}, G(t, su)), {}, {\n            startValue: e,\n            byValue: s.map((r, n)=>r - e[n])\n        }));\n    }\n    calculate(t) {\n        const e = this.startValue.map((s, r)=>this.easing(t, s, this.byValue[r], this.duration, r));\n        return {\n            value: e,\n            valueProgress: Math.abs((e[0] - this.startValue[0]) / this.byValue[0])\n        };\n    }\n}\nconst iu = [\n    \"startValue\",\n    \"endValue\",\n    \"easing\",\n    \"onChange\",\n    \"onComplete\",\n    \"abort\"\n], nu = (i, t, e, s)=>t + e * (1 - Math.cos(i / s * xe)), zi = (i)=>i && ((t, e, s)=>i(new W(t).toRgba(), e, s));\nclass ou extends Nn {\n    constructor(t){\n        let { startValue: e, endValue: s, easing: r = nu, onChange: n, onComplete: o, abort: a } = t, c = G(t, iu);\n        const l = new W(e).getSource(), h = new W(s).getSource();\n        super(v(v({}, c), {}, {\n            startValue: l,\n            byValue: h.map((u, d)=>u - l[d]),\n            easing: r,\n            onChange: zi(n),\n            onComplete: zi(o),\n            abort: zi(a)\n        }));\n    }\n    calculate(t) {\n        const [e, s, r, n] = this.startValue.map((a, c)=>this.easing(t, a, this.byValue[c], this.duration, c)), o = [\n            ...[\n                e,\n                s,\n                r\n            ].map(Math.round),\n            ze(0, n, 1)\n        ];\n        return {\n            value: o,\n            valueProgress: o.map((a, c)=>this.byValue[c] !== 0 ? Math.abs((a - this.startValue[c]) / this.byValue[c]) : 0).find((a)=>a !== 0) || 0\n        };\n    }\n}\nfunction Un(i) {\n    const t = ((e)=>Array.isArray(e.startValue) || Array.isArray(e.endValue))(i) ? new ru(i) : new eu(i);\n    return t.start(), t;\n}\nfunction dc(i) {\n    const t = new ou(i);\n    return t.start(), t;\n}\nclass N {\n    constructor(t){\n        this.status = t, this.points = [];\n    }\n    includes(t) {\n        return this.points.some((e)=>e.eq(t));\n    }\n    append() {\n        for(var t = arguments.length, e = new Array(t), s = 0; s < t; s++)e[s] = arguments[s];\n        return this.points = this.points.concat(e.filter((r)=>!this.includes(r))), this;\n    }\n    static isPointContained(t, e, s) {\n        let r = arguments.length > 3 && arguments[3] !== void 0 && arguments[3];\n        if (e.eq(s)) return t.eq(e);\n        if (e.x === s.x) return t.x === e.x && (r || t.y >= Math.min(e.y, s.y) && t.y <= Math.max(e.y, s.y));\n        if (e.y === s.y) return t.y === e.y && (r || t.x >= Math.min(e.x, s.x) && t.x <= Math.max(e.x, s.x));\n        {\n            const n = Zr(e, s), o = Zr(e, t).divide(n);\n            return r ? Math.abs(o.x) === Math.abs(o.y) : o.x === o.y && o.x >= 0 && o.x <= 1;\n        }\n    }\n    static isPointInPolygon(t, e) {\n        const s = new _(t).setX(Math.min(t.x - 1, ...e.map((n)=>n.x)));\n        let r = 0;\n        for(let n = 0; n < e.length; n++){\n            const o = this.intersectSegmentSegment(e[n], e[(n + 1) % e.length], t, s);\n            if (o.includes(t)) return !0;\n            r += +(o.status === \"Intersection\");\n        }\n        return r % 2 == 1;\n    }\n    static intersectLineLine(t, e, s, r) {\n        let n = !(arguments.length > 4 && arguments[4] !== void 0) || arguments[4], o = !(arguments.length > 5 && arguments[5] !== void 0) || arguments[5];\n        const a = e.x - t.x, c = e.y - t.y, l = r.x - s.x, h = r.y - s.y, u = t.x - s.x, d = t.y - s.y, f = l * d - h * u, g = a * d - c * u, p = h * a - l * c;\n        if (p !== 0) {\n            const m = f / p, b = g / p;\n            return (n || 0 <= m && m <= 1) && (o || 0 <= b && b <= 1) ? new N(\"Intersection\").append(new _(t.x + m * a, t.y + m * c)) : new N();\n        }\n        if (f === 0 || g === 0) {\n            const m = n || o || N.isPointContained(t, s, r) || N.isPointContained(e, s, r) || N.isPointContained(s, t, e) || N.isPointContained(r, t, e);\n            return new N(m ? \"Coincident\" : void 0);\n        }\n        return new N(\"Parallel\");\n    }\n    static intersectSegmentLine(t, e, s, r) {\n        return N.intersectLineLine(t, e, s, r, !1, !0);\n    }\n    static intersectSegmentSegment(t, e, s, r) {\n        return N.intersectLineLine(t, e, s, r, !1, !1);\n    }\n    static intersectLinePolygon(t, e, s) {\n        let r = !(arguments.length > 3 && arguments[3] !== void 0) || arguments[3];\n        const n = new N(), o = s.length;\n        for(let a, c, l, h = 0; h < o; h++){\n            if (a = s[h], c = s[(h + 1) % o], l = N.intersectLineLine(t, e, a, c, r, !1), l.status === \"Coincident\") return l;\n            n.append(...l.points);\n        }\n        return n.points.length > 0 && (n.status = \"Intersection\"), n;\n    }\n    static intersectSegmentPolygon(t, e, s) {\n        return N.intersectLinePolygon(t, e, s, !1);\n    }\n    static intersectPolygonPolygon(t, e) {\n        const s = new N(), r = t.length, n = [];\n        for(let o = 0; o < r; o++){\n            const a = t[o], c = t[(o + 1) % r], l = N.intersectSegmentPolygon(a, c, e);\n            l.status === \"Coincident\" ? (n.push(l), s.append(a, c)) : s.append(...l.points);\n        }\n        return n.length > 0 && n.length === t.length ? new N(\"Coincident\") : (s.points.length > 0 && (s.status = \"Intersection\"), s);\n    }\n    static intersectPolygonRectangle(t, e, s) {\n        const r = e.min(s), n = e.max(s), o = new _(n.x, r.y), a = new _(r.x, n.y);\n        return N.intersectPolygonPolygon(t, [\n            r,\n            o,\n            n,\n            a\n        ]);\n    }\n}\nclass au extends Ha {\n    getX() {\n        return this.getXY().x;\n    }\n    setX(t) {\n        this.setXY(this.getXY().setX(t));\n    }\n    getY() {\n        return this.getXY().y;\n    }\n    setY(t) {\n        this.setXY(this.getXY().setY(t));\n    }\n    getRelativeX() {\n        return this.left;\n    }\n    setRelativeX(t) {\n        this.left = t;\n    }\n    getRelativeY() {\n        return this.top;\n    }\n    setRelativeY(t) {\n        this.top = t;\n    }\n    getXY() {\n        const t = this.getRelativeXY();\n        return this.group ? ot(t, this.group.calcTransformMatrix()) : t;\n    }\n    setXY(t, e, s) {\n        this.group && (t = ot(t, St(this.group.calcTransformMatrix()))), this.setRelativeXY(t, e, s);\n    }\n    getRelativeXY() {\n        return new _(this.left, this.top);\n    }\n    setRelativeXY(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.originX, s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.originY;\n        this.setPositionByOrigin(t, e, s);\n    }\n    isStrokeAccountedForInDimensions() {\n        return !1;\n    }\n    getCoords() {\n        const { tl: t, tr: e, br: s, bl: r } = this.aCoords || (this.aCoords = this.calcACoords()), n = [\n            t,\n            e,\n            s,\n            r\n        ];\n        if (this.group) {\n            const o = this.group.calcTransformMatrix();\n            return n.map((a)=>ot(a, o));\n        }\n        return n;\n    }\n    intersectsWithRect(t, e) {\n        return N.intersectPolygonRectangle(this.getCoords(), t, e).status === \"Intersection\";\n    }\n    intersectsWithObject(t) {\n        const e = N.intersectPolygonPolygon(this.getCoords(), t.getCoords());\n        return e.status === \"Intersection\" || e.status === \"Coincident\" || t.isContainedWithinObject(this) || this.isContainedWithinObject(t);\n    }\n    isContainedWithinObject(t) {\n        return this.getCoords().every((e)=>t.containsPoint(e));\n    }\n    isContainedWithinRect(t, e) {\n        const { left: s, top: r, width: n, height: o } = this.getBoundingRect();\n        return s >= t.x && s + n <= e.x && r >= t.y && r + o <= e.y;\n    }\n    isOverlapping(t) {\n        return this.intersectsWithObject(t) || this.isContainedWithinObject(t) || t.isContainedWithinObject(this);\n    }\n    containsPoint(t) {\n        return N.isPointInPolygon(t, this.getCoords());\n    }\n    isOnScreen() {\n        if (!this.canvas) return !1;\n        const { tl: t, br: e } = this.canvas.vptCoords;\n        return !!this.getCoords().some((s)=>s.x <= e.x && s.x >= t.x && s.y <= e.y && s.y >= t.y) || !!this.intersectsWithRect(t, e) || this.containsPoint(t.midPointFrom(e));\n    }\n    isPartiallyOnScreen() {\n        if (!this.canvas) return !1;\n        const { tl: t, br: e } = this.canvas.vptCoords;\n        return this.intersectsWithRect(t, e) ? !0 : this.getCoords().every((s)=>(s.x >= e.x || s.x <= t.x) && (s.y >= e.y || s.y <= t.y)) && this.containsPoint(t.midPointFrom(e));\n    }\n    getBoundingRect() {\n        return Gt(this.getCoords());\n    }\n    getScaledWidth() {\n        return this._getTransformedDimensions().x;\n    }\n    getScaledHeight() {\n        return this._getTransformedDimensions().y;\n    }\n    scale(t) {\n        this._set(ut, t), this._set(Tt, t), this.setCoords();\n    }\n    scaleToWidth(t) {\n        const e = this.getBoundingRect().width / this.getScaledWidth();\n        return this.scale(t / this.width / e);\n    }\n    scaleToHeight(t) {\n        const e = this.getBoundingRect().height / this.getScaledHeight();\n        return this.scale(t / this.height / e);\n    }\n    getCanvasRetinaScaling() {\n        var t;\n        return ((t = this.canvas) === null || t === void 0 ? void 0 : t.getRetinaScaling()) || 1;\n    }\n    getTotalAngle() {\n        return this.group ? Ce(Na(this.calcTransformMatrix())) : this.angle;\n    }\n    getViewportTransform() {\n        var t;\n        return ((t = this.canvas) === null || t === void 0 ? void 0 : t.viewportTransform) || ht.concat();\n    }\n    calcACoords() {\n        const t = Is({\n            angle: this.angle\n        }), { x: e, y: s } = this.getRelativeCenterPoint(), r = Ms(e, s), n = J(r, t), o = this._getTransformedDimensions(), a = o.x / 2, c = o.y / 2;\n        return {\n            tl: ot({\n                x: -a,\n                y: -c\n            }, n),\n            tr: ot({\n                x: a,\n                y: -c\n            }, n),\n            bl: ot({\n                x: -a,\n                y: c\n            }, n),\n            br: ot({\n                x: a,\n                y: c\n            }, n)\n        };\n    }\n    setCoords() {\n        this.aCoords = this.calcACoords();\n    }\n    transformMatrixKey() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 && arguments[0], e = [];\n        return !t && this.group && (e = this.group.transformMatrixKey(t)), e.push(this.top, this.left, this.width, this.height, this.scaleX, this.scaleY, this.angle, this.strokeWidth, this.skewX, this.skewY, +this.flipX, +this.flipY, st(this.originX), st(this.originY)), e;\n    }\n    calcTransformMatrix() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 && arguments[0], e = this.calcOwnMatrix();\n        if (t || !this.group) return e;\n        const s = this.transformMatrixKey(t), r = this.matrixCache;\n        return r && r.key.every((n, o)=>n === s[o]) ? r.value : (this.group && (e = J(this.group.calcTransformMatrix(!1), e)), this.matrixCache = {\n            key: s,\n            value: e\n        }, e);\n    }\n    calcOwnMatrix() {\n        const t = this.transformMatrixKey(!0), e = this.ownMatrixCache;\n        if (e && e.key === t) return e.value;\n        const s = this.getRelativeCenterPoint(), r = {\n            angle: this.angle,\n            translateX: s.x,\n            translateY: s.y,\n            scaleX: this.scaleX,\n            scaleY: this.scaleY,\n            skewX: this.skewX,\n            skewY: this.skewY,\n            flipX: this.flipX,\n            flipY: this.flipY\n        }, n = $a(r);\n        return this.ownMatrixCache = {\n            key: t,\n            value: n\n        }, n;\n    }\n    _getNonTransformedDimensions() {\n        return new _(this.width, this.height).scalarAdd(this.strokeWidth);\n    }\n    _calculateCurrentDimensions(t) {\n        return this._getTransformedDimensions(t).transform(this.getViewportTransform(), !0).scalarAdd(2 * this.padding);\n    }\n    _getTransformedDimensions() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const e = v({\n            scaleX: this.scaleX,\n            scaleY: this.scaleY,\n            skewX: this.skewX,\n            skewY: this.skewY,\n            width: this.width,\n            height: this.height,\n            strokeWidth: this.strokeWidth\n        }, t), s = e.strokeWidth;\n        let r = s, n = 0;\n        this.strokeUniform && (r = 0, n = s);\n        const o = e.width + r, a = e.height + r;\n        let c;\n        return c = e.skewX === 0 && e.skewY === 0 ? new _(o * e.scaleX, a * e.scaleY) : yi(o, a, ar(e)), c.scalarAdd(n);\n    }\n    translateToGivenOrigin(t, e, s, r, n) {\n        let o = t.x, a = t.y;\n        const c = st(r) - st(e), l = st(n) - st(s);\n        if (c || l) {\n            const h = this._getTransformedDimensions();\n            o += c * h.x, a += l * h.y;\n        }\n        return new _(o, a);\n    }\n    translateToCenterPoint(t, e, s) {\n        if (e === j && s === j) return t;\n        const r = this.translateToGivenOrigin(t, e, s, j, j);\n        return this.angle ? r.rotate(K(this.angle), t) : r;\n    }\n    translateToOriginPoint(t, e, s) {\n        const r = this.translateToGivenOrigin(t, j, j, e, s);\n        return this.angle ? r.rotate(K(this.angle), t) : r;\n    }\n    getCenterPoint() {\n        const t = this.getRelativeCenterPoint();\n        return this.group ? ot(t, this.group.calcTransformMatrix()) : t;\n    }\n    getRelativeCenterPoint() {\n        return this.translateToCenterPoint(new _(this.left, this.top), this.originX, this.originY);\n    }\n    getPointByOrigin(t, e) {\n        return this.translateToOriginPoint(this.getRelativeCenterPoint(), t, e);\n    }\n    setPositionByOrigin(t, e, s) {\n        const r = this.translateToCenterPoint(t, e, s), n = this.translateToOriginPoint(r, this.originX, this.originY);\n        this.set({\n            left: n.x,\n            top: n.y\n        });\n    }\n    _getLeftTopCoords() {\n        return this.translateToOriginPoint(this.getRelativeCenterPoint(), L, gt);\n    }\n}\nconst cu = [\n    \"type\"\n], lu = [\n    \"extraParam\"\n];\nlet ee = class Gr extends au {\n    static getDefaults() {\n        return Gr.ownDefaults;\n    }\n    get type() {\n        const t = this.constructor.type;\n        return t === \"FabricObject\" ? \"object\" : t.toLowerCase();\n    }\n    set type(t) {\n        Te(\"warn\", \"Setting type has no effect\", t);\n    }\n    constructor(t){\n        super(), y(this, \"_cacheContext\", null), Object.assign(this, Gr.ownDefaults), this.setOptions(t);\n    }\n    _createCacheCanvas() {\n        this._cacheCanvas = kt(), this._cacheContext = this._cacheCanvas.getContext(\"2d\"), this._updateCacheCanvas(), this.dirty = !0;\n    }\n    _limitCacheSize(t) {\n        const e = t.width, s = t.height, r = A.maxCacheSideLimit, n = A.minCacheSideLimit;\n        if (e <= r && s <= r && e * s <= A.perfLimitSizeTotal) return e < n && (t.width = n), s < n && (t.height = n), t;\n        const o = e / s, [a, c] = zs.limitDimsByArea(o), l = ze(n, a, r), h = ze(n, c, r);\n        return e > l && (t.zoomX /= e / l, t.width = l, t.capped = !0), s > h && (t.zoomY /= s / h, t.height = h, t.capped = !0), t;\n    }\n    _getCacheCanvasDimensions() {\n        const t = this.getTotalObjectScaling(), e = this._getTransformedDimensions({\n            skewX: 0,\n            skewY: 0\n        }), s = e.x * t.x / this.scaleX, r = e.y * t.y / this.scaleY;\n        return {\n            width: Math.ceil(s + 2),\n            height: Math.ceil(r + 2),\n            zoomX: t.x,\n            zoomY: t.y,\n            x: s,\n            y: r\n        };\n    }\n    _updateCacheCanvas() {\n        const t = this._cacheCanvas, e = this._cacheContext, { width: s, height: r, zoomX: n, zoomY: o, x: a, y: c } = this._limitCacheSize(this._getCacheCanvasDimensions()), l = s !== t.width || r !== t.height, h = this.zoomX !== n || this.zoomY !== o;\n        if (!t || !e) return !1;\n        if (l || h) {\n            s !== t.width || r !== t.height ? (t.width = s, t.height = r) : (e.setTransform(1, 0, 0, 1, 0, 0), e.clearRect(0, 0, t.width, t.height));\n            const u = a / 2, d = c / 2;\n            return this.cacheTranslationX = Math.round(t.width / 2 - u) + u, this.cacheTranslationY = Math.round(t.height / 2 - d) + d, e.translate(this.cacheTranslationX, this.cacheTranslationY), e.scale(n, o), this.zoomX = n, this.zoomY = o, !0;\n        }\n        return !1;\n    }\n    setOptions() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this._setOptions(t);\n    }\n    transform(t) {\n        const e = this.group && !this.group._transformDone || this.group && this.canvas && t === this.canvas.contextTop, s = this.calcTransformMatrix(!e);\n        t.transform(s[0], s[1], s[2], s[3], s[4], s[5]);\n    }\n    getObjectScaling() {\n        if (!this.group) return new _(Math.abs(this.scaleX), Math.abs(this.scaleY));\n        const t = ys(this.calcTransformMatrix());\n        return new _(Math.abs(t.scaleX), Math.abs(t.scaleY));\n    }\n    getTotalObjectScaling() {\n        const t = this.getObjectScaling();\n        if (this.canvas) {\n            const e = this.canvas.getZoom(), s = this.getCanvasRetinaScaling();\n            return t.scalarMultiply(e * s);\n        }\n        return t;\n    }\n    getObjectOpacity() {\n        let t = this.opacity;\n        return this.group && (t *= this.group.getObjectOpacity()), t;\n    }\n    _constrainScale(t) {\n        return Math.abs(t) < this.minScaleLimit ? t < 0 ? -this.minScaleLimit : this.minScaleLimit : t === 0 ? 1e-4 : t;\n    }\n    _set(t, e) {\n        t !== ut && t !== Tt || (e = this._constrainScale(e)), t === ut && e < 0 ? (this.flipX = !this.flipX, e *= -1) : t === \"scaleY\" && e < 0 ? (this.flipY = !this.flipY, e *= -1) : t !== \"shadow\" || !e || e instanceof ce || (e = new ce(e));\n        const s = this[t] !== e;\n        return this[t] = e, s && this.constructor.cacheProperties.includes(t) && (this.dirty = !0), this.parent && (this.dirty || s && this.constructor.stateProperties.includes(t)) && this.parent._set(\"dirty\", !0), this;\n    }\n    isNotVisible() {\n        return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;\n    }\n    render(t) {\n        this.isNotVisible() || this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (t.save(), this._setupCompositeOperation(t), this.drawSelectionBackground(t), this.transform(t), this._setOpacity(t), this._setShadow(t), this.shouldCache() ? (this.renderCache(), this.drawCacheOnCanvas(t)) : (this._removeCacheCanvas(), this.drawObject(t, !1, {}), this.dirty = !1), t.restore());\n    }\n    drawSelectionBackground(t) {}\n    renderCache(t) {\n        if (t = t || {}, this._cacheCanvas && this._cacheContext || this._createCacheCanvas(), this.isCacheDirty() && this._cacheContext) {\n            const { zoomX: e, zoomY: s, cacheTranslationX: r, cacheTranslationY: n } = this, { width: o, height: a } = this._cacheCanvas;\n            this.drawObject(this._cacheContext, t.forClipping, {\n                zoomX: e,\n                zoomY: s,\n                cacheTranslationX: r,\n                cacheTranslationY: n,\n                width: o,\n                height: a,\n                parentClipPaths: []\n            }), this.dirty = !1;\n        }\n    }\n    _removeCacheCanvas() {\n        this._cacheCanvas = void 0, this._cacheContext = null;\n    }\n    hasStroke() {\n        return this.stroke && this.stroke !== \"transparent\" && this.strokeWidth !== 0;\n    }\n    hasFill() {\n        return this.fill && this.fill !== \"transparent\";\n    }\n    needsItsOwnCache() {\n        return !!(this.paintFirst === mt && this.hasFill() && this.hasStroke() && this.shadow) || !!this.clipPath;\n    }\n    shouldCache() {\n        return this.ownCaching = this.objectCaching && (!this.parent || !this.parent.isOnACache()) || this.needsItsOwnCache(), this.ownCaching;\n    }\n    willDrawShadow() {\n        return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n    }\n    drawClipPathOnCache(t, e, s) {\n        t.save(), e.inverted ? t.globalCompositeOperation = \"destination-out\" : t.globalCompositeOperation = \"destination-in\", t.setTransform(1, 0, 0, 1, 0, 0), t.drawImage(s, 0, 0), t.restore();\n    }\n    drawObject(t, e, s) {\n        const r = this.fill, n = this.stroke;\n        e ? (this.fill = \"black\", this.stroke = \"\", this._setClippingProperties(t)) : this._renderBackground(t), this._render(t), this._drawClipPath(t, this.clipPath, s), this.fill = r, this.stroke = n;\n    }\n    createClipPathLayer(t, e) {\n        const s = Wt(e), r = s.getContext(\"2d\");\n        if (r.translate(e.cacheTranslationX, e.cacheTranslationY), r.scale(e.zoomX, e.zoomY), t._cacheCanvas = s, e.parentClipPaths.forEach((n)=>{\n            n.transform(r);\n        }), e.parentClipPaths.push(t), t.absolutePositioned) {\n            const n = St(this.calcTransformMatrix());\n            r.transform(n[0], n[1], n[2], n[3], n[4], n[5]);\n        }\n        return t.transform(r), t.drawObject(r, !0, e), s;\n    }\n    _drawClipPath(t, e, s) {\n        if (!e) return;\n        e._transformDone = !0;\n        const r = this.createClipPathLayer(e, s);\n        this.drawClipPathOnCache(t, e, r);\n    }\n    drawCacheOnCanvas(t) {\n        t.scale(1 / this.zoomX, 1 / this.zoomY), t.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n    }\n    isCacheDirty() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 && arguments[0];\n        if (this.isNotVisible()) return !1;\n        const e = this._cacheCanvas, s = this._cacheContext;\n        return !(!e || !s || t || !this._updateCacheCanvas()) || !!(this.dirty || this.clipPath && this.clipPath.absolutePositioned) && (e && s && !t && (s.save(), s.setTransform(1, 0, 0, 1, 0, 0), s.clearRect(0, 0, e.width, e.height), s.restore()), !0);\n    }\n    _renderBackground(t) {\n        if (!this.backgroundColor) return;\n        const e = this._getNonTransformedDimensions();\n        t.fillStyle = this.backgroundColor, t.fillRect(-e.x / 2, -e.y / 2, e.x, e.y), this._removeShadow(t);\n    }\n    _setOpacity(t) {\n        this.group && !this.group._transformDone ? t.globalAlpha = this.getObjectOpacity() : t.globalAlpha *= this.opacity;\n    }\n    _setStrokeStyles(t, e) {\n        const s = e.stroke;\n        s && (t.lineWidth = e.strokeWidth, t.lineCap = e.strokeLineCap, t.lineDashOffset = e.strokeDashOffset, t.lineJoin = e.strokeLineJoin, t.miterLimit = e.strokeMiterLimit, Ct(s) ? s.gradientUnits === \"percentage\" || s.gradientTransform || s.patternTransform ? this._applyPatternForTransformedGradient(t, s) : (t.strokeStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.strokeStyle = e.stroke);\n    }\n    _setFillStyles(t, e) {\n        let { fill: s } = e;\n        s && (Ct(s) ? (t.fillStyle = s.toLive(t), this._applyPatternGradientTransform(t, s)) : t.fillStyle = s);\n    }\n    _setClippingProperties(t) {\n        t.globalAlpha = 1, t.strokeStyle = \"transparent\", t.fillStyle = \"#000000\";\n    }\n    _setLineDash(t, e) {\n        e && e.length !== 0 && t.setLineDash(e);\n    }\n    _setShadow(t) {\n        if (!this.shadow) return;\n        const e = this.shadow, s = this.canvas, r = this.getCanvasRetinaScaling(), [n, , , o] = (s == null ? void 0 : s.viewportTransform) || ht, a = n * r, c = o * r, l = e.nonScaling ? new _(1, 1) : this.getObjectScaling();\n        t.shadowColor = e.color, t.shadowBlur = e.blur * A.browserShadowBlurConstant * (a + c) * (l.x + l.y) / 4, t.shadowOffsetX = e.offsetX * a * l.x, t.shadowOffsetY = e.offsetY * c * l.y;\n    }\n    _removeShadow(t) {\n        this.shadow && (t.shadowColor = \"\", t.shadowBlur = t.shadowOffsetX = t.shadowOffsetY = 0);\n    }\n    _applyPatternGradientTransform(t, e) {\n        if (!Ct(e)) return {\n            offsetX: 0,\n            offsetY: 0\n        };\n        const s = e.gradientTransform || e.patternTransform, r = -this.width / 2 + e.offsetX || 0, n = -this.height / 2 + e.offsetY || 0;\n        return e.gradientUnits === \"percentage\" ? t.transform(this.width, 0, 0, this.height, r, n) : t.transform(1, 0, 0, 1, r, n), s && t.transform(s[0], s[1], s[2], s[3], s[4], s[5]), {\n            offsetX: r,\n            offsetY: n\n        };\n    }\n    _renderPaintInOrder(t) {\n        this.paintFirst === mt ? (this._renderStroke(t), this._renderFill(t)) : (this._renderFill(t), this._renderStroke(t));\n    }\n    _render(t) {}\n    _renderFill(t) {\n        this.fill && (t.save(), this._setFillStyles(t, this), this.fillRule === \"evenodd\" ? t.fill(\"evenodd\") : t.fill(), t.restore());\n    }\n    _renderStroke(t) {\n        if (this.stroke && this.strokeWidth !== 0) {\n            if (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this.strokeUniform) {\n                const e = this.getObjectScaling();\n                t.scale(1 / e.x, 1 / e.y);\n            }\n            this._setLineDash(t, this.strokeDashArray), this._setStrokeStyles(t, this), t.stroke(), t.restore();\n        }\n    }\n    _applyPatternForTransformedGradient(t, e) {\n        var s;\n        const r = this._limitCacheSize(this._getCacheCanvasDimensions()), n = this.getCanvasRetinaScaling(), o = r.x / this.scaleX / n, a = r.y / this.scaleY / n, c = Wt({\n            width: Math.ceil(o),\n            height: Math.ceil(a)\n        }), l = c.getContext(\"2d\");\n        l && (l.beginPath(), l.moveTo(0, 0), l.lineTo(o, 0), l.lineTo(o, a), l.lineTo(0, a), l.closePath(), l.translate(o / 2, a / 2), l.scale(r.zoomX / this.scaleX / n, r.zoomY / this.scaleY / n), this._applyPatternGradientTransform(l, e), l.fillStyle = e.toLive(t), l.fill(), t.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2), t.scale(n * this.scaleX / r.zoomX, n * this.scaleY / r.zoomY), t.strokeStyle = (s = l.createPattern(c, \"no-repeat\")) !== null && s !== void 0 ? s : \"\");\n    }\n    _findCenterFromElement() {\n        return new _(this.left + this.width / 2, this.top + this.height / 2);\n    }\n    clone(t) {\n        const e = this.toObject(t);\n        return this.constructor.fromObject(e);\n    }\n    cloneAsImage(t) {\n        const e = this.toCanvasElement(t);\n        return new (C.getClass(\"image\"))(e);\n    }\n    toCanvasElement() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const e = zn(this), s = this.group, r = this.shadow, n = Math.abs, o = t.enableRetinaScaling ? Ra() : 1, a = (t.multiplier || 1) * o, c = t.canvasProvider || ((S)=>new lr(S, {\n                enableRetinaScaling: !1,\n                renderOnAddRemove: !1,\n                skipOffscreen: !1\n            }));\n        delete this.group, t.withoutTransform && sc(this), t.withoutShadow && (this.shadow = null), t.viewportTransform && an(this, this.getViewportTransform()), this.setCoords();\n        const l = kt(), h = this.getBoundingRect(), u = this.shadow, d = new _();\n        if (u) {\n            const S = u.blur, w = u.nonScaling ? new _(1, 1) : this.getObjectScaling();\n            d.x = 2 * Math.round(n(u.offsetX) + S) * n(w.x), d.y = 2 * Math.round(n(u.offsetY) + S) * n(w.y);\n        }\n        const f = h.width + d.x, g = h.height + d.y;\n        l.width = Math.ceil(f), l.height = Math.ceil(g);\n        const p = c(l);\n        t.format === \"jpeg\" && (p.backgroundColor = \"#fff\"), this.setPositionByOrigin(new _(p.width / 2, p.height / 2), j, j);\n        const m = this.canvas;\n        p._objects = [\n            this\n        ], this.set(\"canvas\", p), this.setCoords();\n        const b = p.toCanvasElement(a || 1, t);\n        return this.set(\"canvas\", m), this.shadow = r, s && (this.group = s), this.set(e), this.setCoords(), p._objects = [], p.destroy(), b;\n    }\n    toDataURL() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        return Rn(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n    }\n    toBlob() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        return Ln(this.toCanvasElement(t), t.format || \"png\", t.quality || 1);\n    }\n    isType() {\n        for(var t = arguments.length, e = new Array(t), s = 0; s < t; s++)e[s] = arguments[s];\n        return e.includes(this.constructor.type) || e.includes(this.type);\n    }\n    complexity() {\n        return 1;\n    }\n    toJSON() {\n        return this.toObject();\n    }\n    rotate(t) {\n        const { centeredRotation: e, originX: s, originY: r } = this;\n        if (e) {\n            const { x: n, y: o } = this.getRelativeCenterPoint();\n            this.originX = j, this.originY = j, this.left = n, this.top = o;\n        }\n        if (this.set(\"angle\", t), e) {\n            const { x: n, y: o } = this.translateToOriginPoint(this.getRelativeCenterPoint(), s, r);\n            this.left = n, this.top = o, this.originX = s, this.originY = r;\n        }\n    }\n    setOnGroup() {}\n    _setupCompositeOperation(t) {\n        this.globalCompositeOperation && (t.globalCompositeOperation = this.globalCompositeOperation);\n    }\n    dispose() {\n        qr.cancelByTarget(this), this.off(), this._set(\"canvas\", void 0), this._cacheCanvas && $t().dispose(this._cacheCanvas), this._cacheCanvas = void 0, this._cacheContext = null;\n    }\n    animate(t, e) {\n        return Object.entries(t).reduce((s, r)=>{\n            let [n, o] = r;\n            return s[n] = this._animate(n, o, e), s;\n        }, {});\n    }\n    _animate(t, e) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const r = t.split(\".\"), n = this.constructor.colorProperties.includes(r[r.length - 1]), { abort: o, startValue: a, onChange: c, onComplete: l } = s, h = v(v({}, s), {}, {\n            target: this,\n            startValue: a ?? r.reduce((u, d)=>u[d], this),\n            endValue: e,\n            abort: o == null ? void 0 : o.bind(this),\n            onChange: (u, d, f)=>{\n                r.reduce((g, p, m)=>(m === r.length - 1 && (g[p] = u), g[p]), this), c && c(u, d, f);\n            },\n            onComplete: (u, d, f)=>{\n                this.setCoords(), l && l(u, d, f);\n            }\n        });\n        return n ? dc(h) : Un(h);\n    }\n    isDescendantOf(t) {\n        const { parent: e, group: s } = this;\n        return e === t || s === t || !!e && e.isDescendantOf(t) || !!s && s !== e && s.isDescendantOf(t);\n    }\n    getAncestors() {\n        const t = [];\n        let e = this;\n        do e = e.parent, e && t.push(e);\n        while (e);\n        return t;\n    }\n    findCommonAncestors(t) {\n        if (this === t) return {\n            fork: [],\n            otherFork: [],\n            common: [\n                this,\n                ...this.getAncestors()\n            ]\n        };\n        const e = this.getAncestors(), s = t.getAncestors();\n        if (e.length === 0 && s.length > 0 && this === s[s.length - 1]) return {\n            fork: [],\n            otherFork: [\n                t,\n                ...s.slice(0, s.length - 1)\n            ],\n            common: [\n                this\n            ]\n        };\n        for(let r, n = 0; n < e.length; n++){\n            if (r = e[n], r === t) return {\n                fork: [\n                    this,\n                    ...e.slice(0, n)\n                ],\n                otherFork: [],\n                common: e.slice(n)\n            };\n            for(let o = 0; o < s.length; o++){\n                if (this === s[o]) return {\n                    fork: [],\n                    otherFork: [\n                        t,\n                        ...s.slice(0, o)\n                    ],\n                    common: [\n                        this,\n                        ...e\n                    ]\n                };\n                if (r === s[o]) return {\n                    fork: [\n                        this,\n                        ...e.slice(0, n)\n                    ],\n                    otherFork: [\n                        t,\n                        ...s.slice(0, o)\n                    ],\n                    common: e.slice(n)\n                };\n            }\n        }\n        return {\n            fork: [\n                this,\n                ...e\n            ],\n            otherFork: [\n                t,\n                ...s\n            ],\n            common: []\n        };\n    }\n    hasCommonAncestors(t) {\n        const e = this.findCommonAncestors(t);\n        return e && !!e.common.length;\n    }\n    isInFrontOf(t) {\n        if (this === t) return;\n        const e = this.findCommonAncestors(t);\n        if (e.fork.includes(t)) return !0;\n        if (e.otherFork.includes(this)) return !1;\n        const s = e.common[0] || this.canvas;\n        if (!s) return;\n        const r = e.fork.pop(), n = e.otherFork.pop(), o = s._objects.indexOf(r), a = s._objects.indexOf(n);\n        return o > -1 && o > a;\n    }\n    toObject() {\n        const t = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : []).concat(Gr.customProperties, this.constructor.customProperties || []);\n        let e;\n        const s = A.NUM_FRACTION_DIGITS, { clipPath: r, fill: n, stroke: o, shadow: a, strokeDashArray: c, left: l, top: h, originX: u, originY: d, width: f, height: g, strokeWidth: p, strokeLineCap: m, strokeDashOffset: b, strokeLineJoin: S, strokeUniform: w, strokeMiterLimit: k, scaleX: O, scaleY: x, angle: I, flipX: M, flipY: E, opacity: R, visible: tt, backgroundColor: F, fillRule: B, paintFirst: $, globalCompositeOperation: yt, skewX: dt, skewY: Dt } = this;\n        r && !r.excludeFromExport && (e = r.toObject(t.concat(\"inverted\", \"absolutePositioned\")));\n        const q = (te)=>V(te, s), zt = v(v({}, Ve(this, t)), {}, {\n            type: this.constructor.type,\n            version: sn,\n            originX: u,\n            originY: d,\n            left: q(l),\n            top: q(h),\n            width: q(f),\n            height: q(g),\n            fill: _o(n) ? n.toObject() : n,\n            stroke: _o(o) ? o.toObject() : o,\n            strokeWidth: q(p),\n            strokeDashArray: c && c.concat(),\n            strokeLineCap: m,\n            strokeDashOffset: b,\n            strokeLineJoin: S,\n            strokeUniform: w,\n            strokeMiterLimit: q(k),\n            scaleX: q(O),\n            scaleY: q(x),\n            angle: q(I),\n            flipX: M,\n            flipY: E,\n            opacity: q(R),\n            shadow: a && a.toObject(),\n            visible: tt,\n            backgroundColor: F,\n            fillRule: B,\n            paintFirst: $,\n            globalCompositeOperation: yt,\n            skewX: q(dt),\n            skewY: q(Dt)\n        }, e ? {\n            clipPath: e\n        } : null);\n        return this.includeDefaultValues ? zt : this._removeDefaultValues(zt);\n    }\n    toDatalessObject(t) {\n        return this.toObject(t);\n    }\n    _removeDefaultValues(t) {\n        const e = this.constructor.getDefaults(), s = Object.keys(e).length > 0 ? e : Object.getPrototypeOf(this);\n        return Xn(t, (r, n)=>{\n            if (n === L || n === gt || n === \"type\") return !0;\n            const o = s[n];\n            return r !== o && !(Array.isArray(r) && Array.isArray(o) && r.length === 0 && o.length === 0);\n        });\n    }\n    toString() {\n        return \"#<\".concat(this.constructor.type, \">\");\n    }\n    static _fromObject(t) {\n        let e = G(t, cu), s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, { extraParam: r } = s, n = G(s, lu);\n        return cr(e, n).then((o)=>r ? (delete o[r], new this(e[r], o)) : new this(o));\n    }\n    static fromObject(t, e) {\n        return this._fromObject(t, e);\n    }\n};\ny(ee, \"stateProperties\", Kh), y(ee, \"cacheProperties\", de), y(ee, \"ownDefaults\", Jh), y(ee, \"type\", \"FabricObject\"), y(ee, \"colorProperties\", [\n    rt,\n    mt,\n    \"backgroundColor\"\n]), y(ee, \"customProperties\", []), C.setClass(ee), C.setClass(ee, \"object\");\nconst Ie = (i, t, e)=>(s, r, n, o)=>{\n        const a = t(s, r, n, o);\n        return a && Hn(i, v(v({}, Yn(s, r, n, o)), e)), a;\n    };\nfunction Ge(i) {\n    return (t, e, s, r)=>{\n        const { target: n, originX: o, originY: a } = e, c = n.getRelativeCenterPoint(), l = n.translateToOriginPoint(c, o, a), h = i(t, e, s, r);\n        return n.setPositionByOrigin(l, e.originX, e.originY), h;\n    };\n}\nconst hn = Ie($s, Ge((i, t, e, s)=>{\n    const r = bi(t, t.originX, t.originY, e, s);\n    if (st(t.originX) === st(j) || st(t.originX) === st(Z) && r.x < 0 || st(t.originX) === st(L) && r.x > 0) {\n        const { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = ic(t) ? 2 : 1, c = n.width, l = Math.abs(r.x * a / n.scaleX) - o;\n        return n.set(\"width\", Math.max(l, 1)), c !== n.width;\n    }\n    return !1;\n}));\nfunction fc(i, t, e, s, r) {\n    s = s || {};\n    const n = this.sizeX || s.cornerSize || r.cornerSize, o = this.sizeY || s.cornerSize || r.cornerSize, a = s.transparentCorners !== void 0 ? s.transparentCorners : r.transparentCorners, c = a ? mt : rt, l = !a && (s.cornerStrokeColor || r.cornerStrokeColor);\n    let h, u = t, d = e;\n    i.save(), i.fillStyle = s.cornerColor || r.cornerColor || \"\", i.strokeStyle = s.cornerStrokeColor || r.cornerStrokeColor || \"\", n > o ? (h = n, i.scale(1, o / n), d = e * n / o) : o > n ? (h = o, i.scale(n / o, 1), u = t * o / n) : h = n, i.beginPath(), i.arc(u, d, h / 2, 0, he, !1), i[c](), l && i.stroke(), i.restore();\n}\nfunction gc(i, t, e, s, r) {\n    s = s || {};\n    const n = this.sizeX || s.cornerSize || r.cornerSize, o = this.sizeY || s.cornerSize || r.cornerSize, a = s.transparentCorners !== void 0 ? s.transparentCorners : r.transparentCorners, c = a ? mt : rt, l = !a && (s.cornerStrokeColor || r.cornerStrokeColor), h = n / 2, u = o / 2;\n    i.save(), i.fillStyle = s.cornerColor || r.cornerColor || \"\", i.strokeStyle = s.cornerStrokeColor || r.cornerStrokeColor || \"\", i.translate(t, e);\n    const d = r.getTotalAngle();\n    i.rotate(K(d)), i[\"\".concat(c, \"Rect\")](-h, -u, n, o), l && i.strokeRect(-h, -u, n, o), i.restore();\n}\nclass U {\n    constructor(t){\n        y(this, \"visible\", !0), y(this, \"actionName\", pi), y(this, \"angle\", 0), y(this, \"x\", 0), y(this, \"y\", 0), y(this, \"offsetX\", 0), y(this, \"offsetY\", 0), y(this, \"sizeX\", 0), y(this, \"sizeY\", 0), y(this, \"touchSizeX\", 0), y(this, \"touchSizeY\", 0), y(this, \"cursorStyle\", \"crosshair\"), y(this, \"withConnection\", !1), Object.assign(this, t);\n    }\n    shouldActivate(t, e, s, r) {\n        var n;\n        let { tl: o, tr: a, br: c, bl: l } = r;\n        return ((n = e.canvas) === null || n === void 0 ? void 0 : n.getActiveObject()) === e && e.isControlVisible(t) && N.isPointInPolygon(s, [\n            o,\n            a,\n            c,\n            l\n        ]);\n    }\n    getActionHandler(t, e, s) {\n        return this.actionHandler;\n    }\n    getMouseDownHandler(t, e, s) {\n        return this.mouseDownHandler;\n    }\n    getMouseUpHandler(t, e, s) {\n        return this.mouseUpHandler;\n    }\n    cursorStyleHandler(t, e, s) {\n        return e.cursorStyle;\n    }\n    getActionName(t, e, s) {\n        return e.actionName;\n    }\n    getVisibility(t, e) {\n        var s, r;\n        return (s = (r = t._controlsVisibility) === null || r === void 0 ? void 0 : r[e]) !== null && s !== void 0 ? s : this.visible;\n    }\n    setVisibility(t, e, s) {\n        this.visible = t;\n    }\n    positionHandler(t, e, s, r) {\n        return new _(this.x * t.x + this.offsetX, this.y * t.y + this.offsetY).transform(e);\n    }\n    calcCornerCoords(t, e, s, r, n, o) {\n        const a = mi([\n            Ms(s, r),\n            Is({\n                angle: t\n            }),\n            vi((n ? this.touchSizeX : this.sizeX) || e, (n ? this.touchSizeY : this.sizeY) || e)\n        ]);\n        return {\n            tl: new _(-0.5, -0.5).transform(a),\n            tr: new _(0.5, -0.5).transform(a),\n            br: new _(0.5, 0.5).transform(a),\n            bl: new _(-0.5, 0.5).transform(a)\n        };\n    }\n    render(t, e, s, r, n) {\n        ((r = r || {}).cornerStyle || n.cornerStyle) === \"circle\" ? fc.call(this, t, e, s, r, n) : gc.call(this, t, e, s, r, n);\n    }\n}\nconst pc = (i, t, e)=>e.lockRotation ? Jr : t.cursorStyle, mc = Ie(Ba, Ge((i, t, e, s)=>{\n    let { target: r, ex: n, ey: o, theta: a, originX: c, originY: l } = t;\n    const h = r.translateToOriginPoint(r.getRelativeCenterPoint(), c, l);\n    if (Rt(r, \"lockRotation\")) return !1;\n    const u = Math.atan2(o - h.y, n - h.x), d = Math.atan2(s - h.y, e - h.x);\n    let f = Ce(d - u + a);\n    if (r.snapAngle && r.snapAngle > 0) {\n        const p = r.snapAngle, m = r.snapThreshold || p, b = Math.ceil(f / p) * p, S = Math.floor(f / p) * p;\n        Math.abs(f - S) < m ? f = S : Math.abs(f - b) < m && (f = b);\n    }\n    f < 0 && (f = 360 + f), f %= 360;\n    const g = r.angle !== f;\n    return r.angle = f, g;\n}));\nfunction vc(i, t) {\n    const e = t.canvas, s = i[e.uniScaleKey];\n    return e.uniformScaling && !s || !e.uniformScaling && s;\n}\nfunction yc(i, t, e) {\n    const s = Rt(i, \"lockScalingX\"), r = Rt(i, \"lockScalingY\");\n    if (s && r || !t && (s || r) && e || s && t === \"x\" || r && t === \"y\") return !0;\n    const { width: n, height: o, strokeWidth: a } = i;\n    return n === 0 && a === 0 && t !== \"y\" || o === 0 && a === 0 && t !== \"x\";\n}\nconst hu = [\n    \"e\",\n    \"se\",\n    \"s\",\n    \"sw\",\n    \"w\",\n    \"nw\",\n    \"n\",\n    \"ne\",\n    \"e\"\n], Ze = (i, t, e)=>{\n    const s = vc(i, e);\n    if (yc(e, t.x !== 0 && t.y === 0 ? \"x\" : t.x === 0 && t.y !== 0 ? \"y\" : \"\", s)) return Jr;\n    const r = nc(e, t);\n    return \"\".concat(hu[r], \"-resize\");\n};\nfunction $n(i, t, e, s) {\n    let r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};\n    const n = t.target, o = r.by, a = vc(i, n);\n    let c, l, h, u, d, f;\n    if (yc(n, o, a)) return !1;\n    if (t.gestureScale) l = t.scaleX * t.gestureScale, h = t.scaleY * t.gestureScale;\n    else {\n        if (c = bi(t, t.originX, t.originY, e, s), d = o !== \"y\" ? Math.sign(c.x || t.signX || 1) : 1, f = o !== \"x\" ? Math.sign(c.y || t.signY || 1) : 1, t.signX || (t.signX = d), t.signY || (t.signY = f), Rt(n, \"lockScalingFlip\") && (t.signX !== d || t.signY !== f)) return !1;\n        if (u = n._getTransformedDimensions(), a && !o) {\n            const m = Math.abs(c.x) + Math.abs(c.y), { original: b } = t, S = m / (Math.abs(u.x * b.scaleX / n.scaleX) + Math.abs(u.y * b.scaleY / n.scaleY));\n            l = b.scaleX * S, h = b.scaleY * S;\n        } else l = Math.abs(c.x * n.scaleX / u.x), h = Math.abs(c.y * n.scaleY / u.y);\n        ic(t) && (l *= 2, h *= 2), t.signX !== d && o !== \"y\" && (t.originX = xo(t.originX), l *= -1, t.signX = d), t.signY !== f && o !== \"x\" && (t.originY = xo(t.originY), h *= -1, t.signY = f);\n    }\n    const g = n.scaleX, p = n.scaleY;\n    return o ? (o === \"x\" && n.set(ut, l), o === \"y\" && n.set(Tt, h)) : (!Rt(n, \"lockScalingX\") && n.set(ut, l), !Rt(n, \"lockScalingY\") && n.set(Tt, h)), g !== n.scaleX || p !== n.scaleY;\n}\nconst Ls = Ie(gi, Ge((i, t, e, s)=>$n(i, t, e, s))), bc = Ie(gi, Ge((i, t, e, s)=>$n(i, t, e, s, {\n        by: \"x\"\n    }))), _c = Ie(gi, Ge((i, t, e, s)=>$n(i, t, e, s, {\n        by: \"y\"\n    }))), uu = [\n    \"target\",\n    \"ex\",\n    \"ey\",\n    \"skewingSide\"\n], Hi = {\n    x: {\n        counterAxis: \"y\",\n        scale: ut,\n        skew: Os,\n        lockSkewing: \"lockSkewingX\",\n        origin: \"originX\",\n        flip: \"flipX\"\n    },\n    y: {\n        counterAxis: \"x\",\n        scale: Tt,\n        skew: ks,\n        lockSkewing: \"lockSkewingY\",\n        origin: \"originY\",\n        flip: \"flipY\"\n    }\n}, du = [\n    \"ns\",\n    \"nesw\",\n    \"ew\",\n    \"nwse\"\n], Sc = (i, t, e)=>{\n    if (t.x !== 0 && Rt(e, \"lockSkewingY\") || t.y !== 0 && Rt(e, \"lockSkewingX\")) return Jr;\n    const s = nc(e, t) % 4;\n    return \"\".concat(du[s], \"-resize\");\n};\nfunction Tc(i, t, e, s, r) {\n    const { target: n } = e, { counterAxis: o, origin: a, lockSkewing: c, skew: l, flip: h } = Hi[i];\n    if (Rt(n, c)) return !1;\n    const { origin: u, flip: d } = Hi[o], f = st(e[u]) * (n[d] ? -1 : 1), g = -Math.sign(f) * (n[h] ? -1 : 1), p = 0.5 * -((n[l] === 0 && bi(e, j, j, s, r)[i] > 0 || n[l] > 0 ? 1 : -1) * g) + 0.5;\n    return Ie(Wa, Ge((b, S, w, k)=>(function(O, x, I) {\n            let { target: M, ex: E, ey: R, skewingSide: tt } = x, F = G(x, uu);\n            const { skew: B } = Hi[O], $ = I.subtract(new _(E, R)).divide(new _(M.scaleX, M.scaleY))[O], yt = M[B], dt = F[B], Dt = Math.tan(K(dt)), q = O === \"y\" ? M._getTransformedDimensions({\n                scaleX: 1,\n                scaleY: 1,\n                skewX: 0\n            }).x : M._getTransformedDimensions({\n                scaleX: 1,\n                scaleY: 1\n            }).y, zt = 2 * $ * tt / Math.max(q, 1) + Dt, te = Ce(Math.atan(zt));\n            M.set(B, te);\n            const pr = yt !== M[B];\n            if (pr && O === \"y\") {\n                const { skewX: Ai, scaleX: Ps } = M, me = M._getTransformedDimensions({\n                    skewY: yt\n                }), mr = M._getTransformedDimensions(), je = Ai !== 0 ? me.x / mr.x : 1;\n                je !== 1 && M.set(ut, je * Ps);\n            }\n            return pr;\n        })(i, S, new _(w, k))))(t, v(v({}, e), {}, {\n        [a]: p,\n        skewingSide: g\n    }), s, r);\n}\nconst xc = (i, t, e, s)=>Tc(\"x\", i, t, e, s), wc = (i, t, e, s)=>Tc(\"y\", i, t, e, s);\nfunction Ti(i, t) {\n    return i[t.canvas.altActionKey];\n}\nconst Bs = (i, t, e)=>{\n    const s = Ti(i, e);\n    return t.x === 0 ? s ? Os : Tt : t.y === 0 ? s ? ks : ut : \"\";\n}, Fe = (i, t, e)=>Ti(i, e) ? Sc(0, t, e) : Ze(i, t, e), un = (i, t, e, s)=>Ti(i, t.target) ? wc(i, t, e, s) : bc(i, t, e, s), dn = (i, t, e, s)=>Ti(i, t.target) ? xc(i, t, e, s) : _c(i, t, e, s), qn = ()=>({\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            cursorStyleHandler: Fe,\n            actionHandler: un,\n            getActionName: Bs\n        }),\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            cursorStyleHandler: Fe,\n            actionHandler: un,\n            getActionName: Bs\n        }),\n        mb: new U({\n            x: 0,\n            y: 0.5,\n            cursorStyleHandler: Fe,\n            actionHandler: dn,\n            getActionName: Bs\n        }),\n        mt: new U({\n            x: 0,\n            y: -0.5,\n            cursorStyleHandler: Fe,\n            actionHandler: dn,\n            getActionName: Bs\n        }),\n        tl: new U({\n            x: -0.5,\n            y: -0.5,\n            cursorStyleHandler: Ze,\n            actionHandler: Ls\n        }),\n        tr: new U({\n            x: 0.5,\n            y: -0.5,\n            cursorStyleHandler: Ze,\n            actionHandler: Ls\n        }),\n        bl: new U({\n            x: -0.5,\n            y: 0.5,\n            cursorStyleHandler: Ze,\n            actionHandler: Ls\n        }),\n        br: new U({\n            x: 0.5,\n            y: 0.5,\n            cursorStyleHandler: Ze,\n            actionHandler: Ls\n        }),\n        mtr: new U({\n            x: 0,\n            y: -0.5,\n            actionHandler: mc,\n            cursorStyleHandler: pc,\n            offsetY: -40,\n            withConnection: !0,\n            actionName: An\n        })\n    }), Cc = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            actionHandler: hn,\n            cursorStyleHandler: Fe,\n            actionName: $s\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            actionHandler: hn,\n            cursorStyleHandler: Fe,\n            actionName: $s\n        })\n    }), Oc = ()=>v(v({}, qn()), Cc());\nclass Js extends ee {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Js.ownDefaults);\n    }\n    constructor(t){\n        super(), Object.assign(this, this.constructor.createControls(), Js.ownDefaults), this.setOptions(t);\n    }\n    static createControls() {\n        return {\n            controls: qn()\n        };\n    }\n    _updateCacheCanvas() {\n        const t = this.canvas;\n        if (this.noScaleCache && t && t._currentTransform) {\n            const e = t._currentTransform, s = e.target, r = e.action;\n            if (this === s && r && r.startsWith(pi)) return !1;\n        }\n        return super._updateCacheCanvas();\n    }\n    getActiveControl() {\n        const t = this.__corner;\n        return t ? {\n            key: t,\n            control: this.controls[t],\n            coord: this.oCoords[t]\n        } : void 0;\n    }\n    findControl(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];\n        if (!this.hasControls || !this.canvas) return;\n        this.__corner = void 0;\n        const s = Object.entries(this.oCoords);\n        for(let r = s.length - 1; r >= 0; r--){\n            const [n, o] = s[r], a = this.controls[n];\n            if (a.shouldActivate(n, this, t, e ? o.touchCorner : o.corner)) return this.__corner = n, {\n                key: n,\n                control: a,\n                coord: this.oCoords[n]\n            };\n        }\n    }\n    calcOCoords() {\n        const t = this.getViewportTransform(), e = this.getCenterPoint(), s = Ms(e.x, e.y), r = Is({\n            angle: this.getTotalAngle() - (this.group && this.flipX ? 180 : 0)\n        }), n = J(s, r), o = J(t, n), a = J(o, [\n            1 / t[0],\n            0,\n            0,\n            1 / t[3],\n            0,\n            0\n        ]), c = this.group ? ys(this.calcTransformMatrix()) : void 0;\n        c && (c.scaleX = Math.abs(c.scaleX), c.scaleY = Math.abs(c.scaleY));\n        const l = this._calculateCurrentDimensions(c), h = {};\n        return this.forEachControl((u, d)=>{\n            const f = u.positionHandler(l, a, this, u);\n            h[d] = Object.assign(f, this._calcCornerCoords(u, f));\n        }), h;\n    }\n    _calcCornerCoords(t, e) {\n        const s = this.getTotalAngle();\n        return {\n            corner: t.calcCornerCoords(s, this.cornerSize, e.x, e.y, !1, this),\n            touchCorner: t.calcCornerCoords(s, this.touchCornerSize, e.x, e.y, !0, this)\n        };\n    }\n    setCoords() {\n        super.setCoords(), this.canvas && (this.oCoords = this.calcOCoords());\n    }\n    forEachControl(t) {\n        for(const e in this.controls)t(this.controls[e], e, this);\n    }\n    drawSelectionBackground(t) {\n        if (!this.selectionBackgroundColor || this.canvas && this.canvas._activeObject !== this) return;\n        t.save();\n        const e = this.getRelativeCenterPoint(), s = this._calculateCurrentDimensions(), r = this.getViewportTransform();\n        t.translate(e.x, e.y), t.scale(1 / r[0], 1 / r[3]), t.rotate(K(this.angle)), t.fillStyle = this.selectionBackgroundColor, t.fillRect(-s.x / 2, -s.y / 2, s.x, s.y), t.restore();\n    }\n    strokeBorders(t, e) {\n        t.strokeRect(-e.x / 2, -e.y / 2, e.x, e.y);\n    }\n    _drawBorders(t, e) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        const r = v({\n            hasControls: this.hasControls,\n            borderColor: this.borderColor,\n            borderDashArray: this.borderDashArray\n        }, s);\n        t.save(), t.strokeStyle = r.borderColor, this._setLineDash(t, r.borderDashArray), this.strokeBorders(t, e), r.hasControls && this.drawControlsConnectingLines(t, e), t.restore();\n    }\n    _renderControls(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { hasBorders: s, hasControls: r } = this, n = v({\n            hasBorders: s,\n            hasControls: r\n        }, e), o = this.getViewportTransform(), a = n.hasBorders, c = n.hasControls, l = J(o, this.calcTransformMatrix()), h = ys(l);\n        t.save(), t.translate(h.translateX, h.translateY), t.lineWidth = this.borderScaleFactor, this.group === this.parent && (t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1), this.flipX && (h.angle -= 180), t.rotate(K(this.group ? h.angle : this.angle)), a && this.drawBorders(t, h, e), c && this.drawControls(t, e), t.restore();\n    }\n    drawBorders(t, e, s) {\n        let r;\n        if (s && s.forActiveSelection || this.group) {\n            const n = yi(this.width, this.height, ar(e)), o = this.isStrokeAccountedForInDimensions() ? Fn : (this.strokeUniform ? new _().scalarAdd(this.canvas ? this.canvas.getZoom() : 1) : new _(e.scaleX, e.scaleY)).scalarMultiply(this.strokeWidth);\n            r = n.add(o).scalarAdd(this.borderScaleFactor).scalarAdd(2 * this.padding);\n        } else r = this._calculateCurrentDimensions().scalarAdd(this.borderScaleFactor);\n        this._drawBorders(t, r, s);\n    }\n    drawControlsConnectingLines(t, e) {\n        let s = !1;\n        t.beginPath(), this.forEachControl((r, n)=>{\n            r.withConnection && r.getVisibility(this, n) && (s = !0, t.moveTo(r.x * e.x, r.y * e.y), t.lineTo(r.x * e.x + r.offsetX, r.y * e.y + r.offsetY));\n        }), s && t.stroke();\n    }\n    drawControls(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        t.save();\n        const s = this.getCanvasRetinaScaling(), { cornerStrokeColor: r, cornerDashArray: n, cornerColor: o } = this, a = v({\n            cornerStrokeColor: r,\n            cornerDashArray: n,\n            cornerColor: o\n        }, e);\n        t.setTransform(s, 0, 0, s, 0, 0), t.strokeStyle = t.fillStyle = a.cornerColor, this.transparentCorners || (t.strokeStyle = a.cornerStrokeColor), this._setLineDash(t, a.cornerDashArray), this.forEachControl((c, l)=>{\n            if (c.getVisibility(this, l)) {\n                const h = this.oCoords[l];\n                c.render(t, h.x, h.y, a, this);\n            }\n        }), t.restore();\n    }\n    isControlVisible(t) {\n        return this.controls[t] && this.controls[t].getVisibility(this, t);\n    }\n    setControlVisible(t, e) {\n        this._controlsVisibility || (this._controlsVisibility = {}), this._controlsVisibility[t] = e;\n    }\n    setControlsVisibility() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        Object.entries(t).forEach((e)=>{\n            let [s, r] = e;\n            return this.setControlVisible(s, r);\n        });\n    }\n    clearContextTop(t) {\n        if (!this.canvas) return;\n        const e = this.canvas.contextTop;\n        if (!e) return;\n        const s = this.canvas.viewportTransform;\n        e.save(), e.transform(s[0], s[1], s[2], s[3], s[4], s[5]), this.transform(e);\n        const r = this.width + 4, n = this.height + 4;\n        return e.clearRect(-r / 2, -n / 2, r, n), t || e.restore(), e;\n    }\n    onDeselect(t) {\n        return !1;\n    }\n    onSelect(t) {\n        return !1;\n    }\n    shouldStartDragging(t) {\n        return !1;\n    }\n    onDragStart(t) {\n        return !1;\n    }\n    canDrop(t) {\n        return !1;\n    }\n    renderDragSourceEffect(t) {}\n    renderDropTargetEffect(t) {}\n}\nfunction kc(i, t) {\n    return t.forEach((e)=>{\n        Object.getOwnPropertyNames(e.prototype).forEach((s)=>{\n            s !== \"constructor\" && Object.defineProperty(i.prototype, s, Object.getOwnPropertyDescriptor(e.prototype, s) || /* @__PURE__ */ Object.create(null));\n        });\n    }), i;\n}\ny(Js, \"ownDefaults\", {\n    noScaleCache: !0,\n    lockMovementX: !1,\n    lockMovementY: !1,\n    lockRotation: !1,\n    lockScalingX: !1,\n    lockScalingY: !1,\n    lockSkewingX: !1,\n    lockSkewingY: !1,\n    lockScalingFlip: !1,\n    cornerSize: 13,\n    touchCornerSize: 24,\n    transparentCorners: !0,\n    cornerColor: \"rgb(178,204,255)\",\n    cornerStrokeColor: \"\",\n    cornerStyle: \"rect\",\n    cornerDashArray: null,\n    hasControls: !0,\n    borderColor: \"rgb(178,204,255)\",\n    borderDashArray: null,\n    borderOpacityWhenMoving: 0.4,\n    borderScaleFactor: 1,\n    hasBorders: !0,\n    selectionBackgroundColor: \"\",\n    selectable: !0,\n    evented: !0,\n    perPixelTargetFind: !1,\n    activeOn: \"down\",\n    hoverCursor: null,\n    moveCursor: null\n});\nclass nt extends Js {\n}\nkc(nt, [\n    ac\n]), C.setClass(nt), C.setClass(nt, \"object\");\nconst Mc = (i, t, e, s)=>{\n    const r = 2 * (s = Math.round(s)) + 1, { data: n } = i.getImageData(t - s, e - s, r, r);\n    for(let o = 3; o < n.length; o += 4)if (n[o] > 0) return !1;\n    return !0;\n};\nclass Ic {\n    constructor(t){\n        this.options = t, this.strokeProjectionMagnitude = this.options.strokeWidth / 2, this.scale = new _(this.options.scaleX, this.options.scaleY), this.strokeUniformScalar = this.options.strokeUniform ? new _(1 / this.options.scaleX, 1 / this.options.scaleY) : new _(1, 1);\n    }\n    createSideVector(t, e) {\n        const s = Zr(t, e);\n        return this.options.strokeUniform ? s.multiply(this.scale) : s;\n    }\n    projectOrthogonally(t, e, s) {\n        return this.applySkew(t.add(this.calcOrthogonalProjection(t, e, s)));\n    }\n    isSkewed() {\n        return this.options.skewX !== 0 || this.options.skewY !== 0;\n    }\n    applySkew(t) {\n        const e = new _(t);\n        return e.y += e.x * Math.tan(K(this.options.skewY)), e.x += e.y * Math.tan(K(this.options.skewX)), e;\n    }\n    scaleUnitVector(t, e) {\n        return t.multiply(this.strokeUniformScalar).scalarMultiply(e);\n    }\n}\nconst fu = new _();\nclass ms extends Ic {\n    static getOrthogonalRotationFactor(t, e) {\n        const s = e ? ti(t, e) : lc(t);\n        return Math.abs(s) < xe ? -1 : 1;\n    }\n    constructor(t, e, s, r){\n        super(r), y(this, \"AB\", void 0), y(this, \"AC\", void 0), y(this, \"alpha\", void 0), y(this, \"bisector\", void 0), this.A = new _(t), this.B = new _(e), this.C = new _(s), this.AB = this.createSideVector(this.A, this.B), this.AC = this.createSideVector(this.A, this.C), this.alpha = ti(this.AB, this.AC), this.bisector = Si(Vn(this.AB.eq(fu) ? this.AC : this.AB, this.alpha / 2));\n    }\n    calcOrthogonalProjection(t, e) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.strokeProjectionMagnitude;\n        const r = this.createSideVector(t, e), n = Gn(r), o = ms.getOrthogonalRotationFactor(n, this.bisector);\n        return this.scaleUnitVector(n, s * o);\n    }\n    projectBevel() {\n        const t = [];\n        return (this.alpha % he == 0 ? [\n            this.B\n        ] : [\n            this.B,\n            this.C\n        ]).forEach((e)=>{\n            t.push(this.projectOrthogonally(this.A, e)), t.push(this.projectOrthogonally(this.A, e, -this.strokeProjectionMagnitude));\n        }), t;\n    }\n    projectMiter() {\n        const t = [], e = Math.abs(this.alpha), s = 1 / Math.sin(e / 2), r = this.scaleUnitVector(this.bisector, -this.strokeProjectionMagnitude * s), n = this.options.strokeUniform ? Qr(this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit)) : this.options.strokeMiterLimit;\n        return Qr(r) / this.strokeProjectionMagnitude <= n && t.push(this.applySkew(this.A.add(r))), t.push(...this.projectBevel()), t;\n    }\n    projectRoundNoSkew(t, e) {\n        const s = [], r = new _(ms.getOrthogonalRotationFactor(this.bisector), ms.getOrthogonalRotationFactor(new _(this.bisector.y, this.bisector.x)));\n        return [\n            new _(1, 0).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(r),\n            new _(0, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar).multiply(r)\n        ].forEach((n)=>{\n            cn(n, t, e) && s.push(this.A.add(n));\n        }), s;\n    }\n    projectRoundWithSkew(t, e) {\n        const s = [], { skewX: r, skewY: n, scaleX: o, scaleY: a, strokeUniform: c } = this.options, l = new _(Math.tan(K(r)), Math.tan(K(n))), h = this.strokeProjectionMagnitude, u = c ? h / a / Math.sqrt(1 / a ** 2 + 1 / o ** 2 * l.y ** 2) : h / Math.sqrt(1 + l.y ** 2), d = new _(Math.sqrt(Math.max(h ** 2 - u ** 2, 0)), u), f = c ? h / Math.sqrt(1 + l.x ** 2 * (1 / a) ** 2 / (1 / o + 1 / o * l.x * l.y) ** 2) : h / Math.sqrt(1 + l.x ** 2 / (1 + l.x * l.y) ** 2), g = new _(f, Math.sqrt(Math.max(h ** 2 - f ** 2, 0)));\n        return [\n            g,\n            g.scalarMultiply(-1),\n            d,\n            d.scalarMultiply(-1)\n        ].map((p)=>this.applySkew(c ? p.multiply(this.strokeUniformScalar) : p)).forEach((p)=>{\n            cn(p, t, e) && s.push(this.applySkew(this.A).add(p));\n        }), s;\n    }\n    projectRound() {\n        const t = [];\n        t.push(...this.projectBevel());\n        const e = this.alpha % he == 0, s = this.applySkew(this.A), r = t[e ? 0 : 2].subtract(s), n = t[e ? 1 : 0].subtract(s), o = e ? this.applySkew(this.AB.scalarMultiply(-1)) : this.applySkew(this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1)), a = ps(r, o) > 0, c = a ? r : n, l = a ? n : r;\n        return this.isSkewed() ? t.push(...this.projectRoundWithSkew(c, l)) : t.push(...this.projectRoundNoSkew(c, l)), t;\n    }\n    projectPoints() {\n        switch(this.options.strokeLineJoin){\n            case \"miter\":\n                return this.projectMiter();\n            case \"round\":\n                return this.projectRound();\n            default:\n                return this.projectBevel();\n        }\n    }\n    project() {\n        return this.projectPoints().map((t)=>({\n                originPoint: this.A,\n                projectedPoint: t,\n                angle: this.alpha,\n                bisector: this.bisector\n            }));\n    }\n}\nclass Do extends Ic {\n    constructor(t, e, s){\n        super(s), this.A = new _(t), this.T = new _(e);\n    }\n    calcOrthogonalProjection(t, e) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.strokeProjectionMagnitude;\n        const r = this.createSideVector(t, e);\n        return this.scaleUnitVector(Gn(r), s);\n    }\n    projectButt() {\n        return [\n            this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n            this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude)\n        ];\n    }\n    projectRound() {\n        const t = [];\n        if (!this.isSkewed() && this.A.eq(this.T)) {\n            const e = new _(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n            t.push(this.applySkew(this.A.add(e)), this.applySkew(this.A.subtract(e)));\n        } else t.push(...new ms(this.A, this.T, this.T, this.options).projectRound());\n        return t;\n    }\n    projectSquare() {\n        const t = [];\n        if (this.A.eq(this.T)) {\n            const e = new _(1, 1).scalarMultiply(this.strokeProjectionMagnitude).multiply(this.strokeUniformScalar);\n            t.push(this.A.add(e), this.A.subtract(e));\n        } else {\n            const e = this.calcOrthogonalProjection(this.A, this.T, this.strokeProjectionMagnitude), s = this.scaleUnitVector(Si(this.createSideVector(this.A, this.T)), -this.strokeProjectionMagnitude), r = this.A.add(s);\n            t.push(r.add(e), r.subtract(e));\n        }\n        return t.map((e)=>this.applySkew(e));\n    }\n    projectPoints() {\n        switch(this.options.strokeLineCap){\n            case \"round\":\n                return this.projectRound();\n            case \"square\":\n                return this.projectSquare();\n            default:\n                return this.projectButt();\n        }\n    }\n    project() {\n        return this.projectPoints().map((t)=>({\n                originPoint: this.A,\n                projectedPoint: t\n            }));\n    }\n}\nconst Dc = function(i, t) {\n    let e = arguments.length > 2 && arguments[2] !== void 0 && arguments[2];\n    const s = [];\n    if (i.length === 0) return s;\n    const r = i.reduce((n, o)=>(n[n.length - 1].eq(o) || n.push(new _(o)), n), [\n        new _(i[0])\n    ]);\n    if (r.length === 1) e = !0;\n    else if (!e) {\n        const n = r[0], o = ((a, c)=>{\n            for(let l = a.length - 1; l >= 0; l--)if (c(a[l], l, a)) return l;\n            return -1;\n        })(r, (a)=>!a.eq(n));\n        r.splice(o + 1);\n    }\n    return r.forEach((n, o, a)=>{\n        let c, l;\n        o === 0 ? (l = a[1], c = e ? n : a[a.length - 1]) : o === a.length - 1 ? (c = a[o - 1], l = e ? n : a[0]) : (c = a[o - 1], l = a[o + 1]), e && a.length === 1 ? s.push(...new Do(n, n, t).project()) : !e || o !== 0 && o !== a.length - 1 ? s.push(...new ms(n, c, l, t).project()) : s.push(...new Do(n, o === 0 ? l : c, t).project());\n    }), s;\n}, Kn = (i)=>{\n    const t = {};\n    return Object.keys(i).forEach((e)=>{\n        t[e] = {}, Object.keys(i[e]).forEach((s)=>{\n            t[e][s] = v({}, i[e][s]);\n        });\n    }), t;\n}, jc = (i)=>i.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\"), xi = (i)=>{\n    const t = [];\n    for(let e, s = 0; s < i.length; s++)(e = gu(i, s)) !== !1 && t.push(e);\n    return t;\n}, gu = (i, t)=>{\n    const e = i.charCodeAt(t);\n    if (isNaN(e)) return \"\";\n    if (e < 55296 || e > 57343) return i.charAt(t);\n    if (55296 <= e && e <= 56319) {\n        if (i.length <= t + 1) throw \"High surrogate without following low surrogate\";\n        const r = i.charCodeAt(t + 1);\n        if (56320 > r || r > 57343) throw \"High surrogate without following low surrogate\";\n        return i.charAt(t) + i.charAt(t + 1);\n    }\n    if (t === 0) throw \"Low surrogate without preceding high surrogate\";\n    const s = i.charCodeAt(t - 1);\n    if (55296 > s || s > 56319) throw \"Low surrogate without preceding high surrogate\";\n    return !1;\n};\nvar pu = Object.freeze({\n    __proto__: null,\n    capitalize: function(i) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];\n        return \"\".concat(i.charAt(0).toUpperCase()).concat(t ? i.slice(1) : i.slice(1).toLowerCase());\n    },\n    escapeXml: jc,\n    graphemeSplit: xi\n});\nconst wi = function(i, t) {\n    let e = arguments.length > 2 && arguments[2] !== void 0 && arguments[2];\n    return i.fill !== t.fill || i.stroke !== t.stroke || i.strokeWidth !== t.strokeWidth || i.fontSize !== t.fontSize || i.fontFamily !== t.fontFamily || i.fontWeight !== t.fontWeight || i.fontStyle !== t.fontStyle || i.textBackgroundColor !== t.textBackgroundColor || i.deltaY !== t.deltaY || e && (i.overline !== t.overline || i.underline !== t.underline || i.linethrough !== t.linethrough);\n}, Ec = (i, t)=>{\n    const e = t.split(`\n`), s = [];\n    let r = -1, n = {};\n    i = Kn(i);\n    for(let o = 0; o < e.length; o++){\n        const a = xi(e[o]);\n        if (i[o]) for(let c = 0; c < a.length; c++){\n            r++;\n            const l = i[o][c];\n            l && Object.keys(l).length > 0 && (wi(n, l, !0) ? s.push({\n                start: r,\n                end: r + 1,\n                style: l\n            }) : s[s.length - 1].end++), n = l || {};\n        }\n        else r += a.length, n = {};\n    }\n    return s;\n}, Pc = (i, t)=>{\n    if (!Array.isArray(i)) return Kn(i);\n    const e = t.split(Pn), s = {};\n    let r = -1, n = 0;\n    for(let o = 0; o < e.length; o++){\n        const a = xi(e[o]);\n        for(let c = 0; c < a.length; c++)r++, i[n] && i[n].start <= r && r < i[n].end && (s[o] = s[o] || {}, s[o][c] = v({}, i[n].style), r === i[n].end - 1 && n++);\n    }\n    return s;\n}, De = [\n    \"display\",\n    \"transform\",\n    rt,\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"opacity\",\n    mt,\n    \"stroke-dasharray\",\n    \"stroke-linecap\",\n    \"stroke-dashoffset\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"id\",\n    \"paint-order\",\n    \"vector-effect\",\n    \"instantiated_by_use\",\n    \"clip-path\"\n];\nfunction jo(i, t) {\n    const e = i.nodeName, s = i.getAttribute(\"class\"), r = i.getAttribute(\"id\"), n = \"(?![a-zA-Z\\\\-]+)\";\n    let o;\n    if (o = new RegExp(\"^\" + e, \"i\"), t = t.replace(o, \"\"), r && t.length && (o = new RegExp(\"#\" + r + n, \"i\"), t = t.replace(o, \"\")), s && t.length) {\n        const a = s.split(\" \");\n        for(let c = a.length; c--;)o = new RegExp(\"\\\\.\" + a[c] + n, \"i\"), t = t.replace(o, \"\");\n    }\n    return t.length === 0;\n}\nfunction mu(i, t) {\n    let e = !0;\n    const s = jo(i, t.pop());\n    return s && t.length && (e = function(r, n) {\n        let o, a = !0;\n        for(; r.parentElement && r.parentElement.nodeType === 1 && n.length;)a && (o = n.pop()), a = jo(r = r.parentElement, o);\n        return n.length === 0;\n    }(i, t)), s && e && t.length === 0;\n}\nconst vu = (i)=>{\n    var t;\n    return (t = $h[i]) !== null && t !== void 0 ? t : i;\n}, yu = new RegExp(\"(\".concat(Xe, \")\"), \"gi\"), bu = (i)=>i.replace(yu, \" $1 \").replace(/,/gi, \" \").replace(/\\s+/gi, \" \");\nvar Eo, Po, Ao, Fo, Ro, Lo, Bo;\nconst lt = \"(\".concat(Xe, \")\"), _u = String.raw(Eo || (Eo = Me([\n    \"(skewX)(\",\n    \")\"\n], [\n    \"(skewX)\\\\(\",\n    \"\\\\)\"\n])), lt), Su = String.raw(Po || (Po = Me([\n    \"(skewY)(\",\n    \")\"\n], [\n    \"(skewY)\\\\(\",\n    \"\\\\)\"\n])), lt), Tu = String.raw(Ao || (Ao = Me([\n    \"(rotate)(\",\n    \"(?: \",\n    \" \",\n    \")?)\"\n], [\n    \"(rotate)\\\\(\",\n    \"(?: \",\n    \" \",\n    \")?\\\\)\"\n])), lt, lt, lt), xu = String.raw(Fo || (Fo = Me([\n    \"(scale)(\",\n    \"(?: \",\n    \")?)\"\n], [\n    \"(scale)\\\\(\",\n    \"(?: \",\n    \")?\\\\)\"\n])), lt, lt), wu = String.raw(Ro || (Ro = Me([\n    \"(translate)(\",\n    \"(?: \",\n    \")?)\"\n], [\n    \"(translate)\\\\(\",\n    \"(?: \",\n    \")?\\\\)\"\n])), lt, lt), Cu = String.raw(Lo || (Lo = Me([\n    \"(matrix)(\",\n    \" \",\n    \" \",\n    \" \",\n    \" \",\n    \" \",\n    \")\"\n], [\n    \"(matrix)\\\\(\",\n    \" \",\n    \" \",\n    \" \",\n    \" \",\n    \" \",\n    \"\\\\)\"\n])), lt, lt, lt, lt, lt, lt), Jn = \"(?:\".concat(Cu, \"|\").concat(wu, \"|\").concat(Tu, \"|\").concat(xu, \"|\").concat(_u, \"|\").concat(Su, \")\"), Ou = \"(?:\".concat(Jn, \"*)\"), ku = String.raw(Bo || (Bo = Me([\n    \"^s*(?:\",\n    \"?)s*$\"\n], [\n    \"^\\\\s*(?:\",\n    \"?)\\\\s*$\"\n])), Ou), Mu = new RegExp(ku), Iu = new RegExp(Jn), Du = new RegExp(Jn, \"g\");\nfunction fn(i) {\n    const t = [];\n    if (!(i = bu(i).replace(/\\s*([()])\\s*/gi, \"$1\")) || i && !Mu.test(i)) return [\n        ...ht\n    ];\n    for (const e of i.matchAll(Du)){\n        const s = Iu.exec(e[0]);\n        if (!s) continue;\n        let r = ht;\n        const n = s.filter((g)=>!!g), [, o, ...a] = n, [c, l, h, u, d, f] = a.map((g)=>parseFloat(g));\n        switch(o){\n            case \"translate\":\n                r = Ms(c, l);\n                break;\n            case An:\n                r = Is({\n                    angle: c\n                }, {\n                    x: l,\n                    y: h\n                });\n                break;\n            case pi:\n                r = vi(c, l);\n                break;\n            case Os:\n                r = Bn(c);\n                break;\n            case ks:\n                r = Wn(c);\n                break;\n            case \"matrix\":\n                r = [\n                    c,\n                    l,\n                    h,\n                    u,\n                    d,\n                    f\n                ];\n        }\n        t.push(r);\n    }\n    return mi(t);\n}\nfunction ju(i, t, e, s) {\n    const r = Array.isArray(t);\n    let n, o = t;\n    if (i !== rt && i !== mt || t !== pt) {\n        if (i === \"strokeUniform\") return t === \"non-scaling-stroke\";\n        if (i === \"strokeDashArray\") o = t === pt ? null : t.replace(/,/g, \" \").split(/\\s+/).map(parseFloat);\n        else if (i === \"transformMatrix\") o = e && e.transformMatrix ? J(e.transformMatrix, fn(t)) : fn(t);\n        else if (i === \"visible\") o = t !== pt && t !== \"hidden\", e && e.visible === !1 && (o = !1);\n        else if (i === \"opacity\") o = parseFloat(t), e && e.opacity !== void 0 && (o *= e.opacity);\n        else if (i === \"textAnchor\") o = t === \"start\" ? L : t === \"end\" ? Z : j;\n        else if (i === \"charSpacing\") n = We(t, s) / s * 1e3;\n        else if (i === \"paintFirst\") {\n            const a = t.indexOf(rt), c = t.indexOf(mt);\n            o = rt, (a > -1 && c > -1 && c < a || a === -1 && c > -1) && (o = mt);\n        } else {\n            if (i === \"href\" || i === \"xlink:href\" || i === \"font\" || i === \"id\") return t;\n            if (i === \"imageSmoothing\") return t === \"optimizeQuality\";\n            n = r ? t.map(We) : We(t, s);\n        }\n    } else o = \"\";\n    return !r && isNaN(n) ? o : n;\n}\nfunction Eu(i, t) {\n    const e = i.match(Uh);\n    if (!e) return;\n    const s = e[1], r = e[3], n = e[4], o = e[5], a = e[6];\n    s && (t.fontStyle = s), r && (t.fontWeight = isNaN(parseFloat(r)) ? r : parseFloat(r)), n && (t.fontSize = We(n)), a && (t.fontFamily = a), o && (t.lineHeight = o === \"normal\" ? 1 : o);\n}\nfunction Pu(i, t) {\n    i.replace(/;\\s*$/, \"\").split(\";\").forEach((e)=>{\n        if (!e) return;\n        const [s, r] = e.split(\":\");\n        t[s.trim().toLowerCase()] = r.trim();\n    });\n}\nfunction Au(i) {\n    const t = {}, e = i.getAttribute(\"style\");\n    return e && (typeof e == \"string\" ? Pu(e, t) : function(s, r) {\n        Object.entries(s).forEach((n)=>{\n            let [o, a] = n;\n            a !== void 0 && (r[o.toLowerCase()] = a);\n        });\n    }(e, t)), t;\n}\nconst Fu = {\n    stroke: \"strokeOpacity\",\n    fill: \"fillOpacity\"\n};\nfunction fe(i, t, e) {\n    if (!i) return {};\n    let s, r = {}, n = En;\n    i.parentNode && Co.test(i.parentNode.nodeName) && (r = fe(i.parentElement, t, e), r.fontSize && (s = n = We(r.fontSize)));\n    const o = v(v(v({}, t.reduce((l, h)=>{\n        const u = i.getAttribute(h);\n        return u && (l[h] = u), l;\n    }, {})), function(l) {\n        let h = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, u = {};\n        for(const d in h)mu(l, d.split(\" \")) && (u = v(v({}, u), h[d]));\n        return u;\n    }(i, e)), Au(i));\n    o[Wi] && i.setAttribute(Wi, o[Wi]), o[Bi] && (s = We(o[Bi], n), o[Bi] = \"\".concat(s));\n    const a = {};\n    for(const l in o){\n        const h = vu(l), u = ju(h, o[l], r, s);\n        a[h] = u;\n    }\n    a && a.font && Eu(a.font, a);\n    const c = v(v({}, r), a);\n    return Co.test(i.nodeName) ? c : function(l) {\n        const h = nt.getDefaults();\n        return Object.entries(Fu).forEach((u)=>{\n            let [d, f] = u;\n            if (l[f] === void 0 || l[d] === \"\") return;\n            if (l[d] === void 0) {\n                if (!h[d]) return;\n                l[d] = h[d];\n            }\n            if (l[d].indexOf(\"url(\") === 0) return;\n            const g = new W(l[d]);\n            l[d] = g.setAlpha(V(g.getAlpha() * l[f], 2)).toRgba();\n        }), l;\n    }(c);\n}\nconst Ru = [\n    \"left\",\n    \"top\",\n    \"width\",\n    \"height\",\n    \"visible\"\n], Ac = [\n    \"rx\",\n    \"ry\"\n];\nclass X extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), X.ownDefaults);\n    }\n    constructor(t){\n        super(), Object.assign(this, X.ownDefaults), this.setOptions(t), this._initRxRy();\n    }\n    _initRxRy() {\n        const { rx: t, ry: e } = this;\n        t && !e ? this.ry = t : e && !t && (this.rx = e);\n    }\n    _render(t) {\n        const { width: e, height: s } = this, r = -e / 2, n = -s / 2, o = this.rx ? Math.min(this.rx, e / 2) : 0, a = this.ry ? Math.min(this.ry, s / 2) : 0, c = o !== 0 || a !== 0;\n        t.beginPath(), t.moveTo(r + o, n), t.lineTo(r + e - o, n), c && t.bezierCurveTo(r + e - ye * o, n, r + e, n + ye * a, r + e, n + a), t.lineTo(r + e, n + s - a), c && t.bezierCurveTo(r + e, n + s - ye * a, r + e - ye * o, n + s, r + e - o, n + s), t.lineTo(r + o, n + s), c && t.bezierCurveTo(r + ye * o, n + s, r, n + s - ye * a, r, n + s - a), t.lineTo(r, n + a), c && t.bezierCurveTo(r, n + ye * a, r + ye * o, n, r + o, n), t.closePath(), this._renderPaintInOrder(t);\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return super.toObject([\n            ...Ac,\n            ...t\n        ]);\n    }\n    _toSVG() {\n        const { width: t, height: e, rx: s, ry: r } = this;\n        return [\n            \"<rect \",\n            \"COMMON_PARTS\",\n            'x=\"'.concat(-t / 2, '\" y=\"').concat(-e / 2, '\" rx=\"').concat(s, '\" ry=\"').concat(r, '\" width=\"').concat(t, '\" height=\"').concat(e, `\" />\n`)\n        ];\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, this.ATTRIBUTE_NAMES, s), { left: n = 0, top: o = 0, width: a = 0, height: c = 0, visible: l = !0 } = r, h = G(r, Ru);\n        return new this(v(v(v({}, e), h), {}, {\n            left: n,\n            top: o,\n            width: a,\n            height: c,\n            visible: !!(l && a && c)\n        }));\n    }\n}\ny(X, \"type\", \"Rect\"), y(X, \"cacheProperties\", [\n    ...de,\n    ...Ac\n]), y(X, \"ownDefaults\", {\n    rx: 0,\n    ry: 0\n}), y(X, \"ATTRIBUTE_NAMES\", [\n    ...De,\n    \"x\",\n    \"y\",\n    \"rx\",\n    \"ry\",\n    \"width\",\n    \"height\"\n]), C.setClass(X), C.setSVGClass(X);\nconst ne = \"initialization\", ei = \"added\", Zn = \"removed\", si = \"imperative\", Fc = (i, t)=>{\n    const { strokeUniform: e, strokeWidth: s, width: r, height: n, group: o } = t, a = o && o !== i ? hr(o.calcTransformMatrix(), i.calcTransformMatrix()) : null, c = a ? t.getRelativeCenterPoint().transform(a) : t.getRelativeCenterPoint(), l = !t.isStrokeAccountedForInDimensions(), h = e && l ? rc(new _(s, s), void 0, i.calcTransformMatrix()) : Fn, u = !e && l ? s : 0, d = yi(r + u, n + u, mi([\n        a,\n        t.calcOwnMatrix()\n    ], !0)).add(h).scalarDivide(2);\n    return [\n        c.subtract(d),\n        c.add(d)\n    ];\n};\nclass Ci {\n    calcLayoutResult(t, e) {\n        if (this.shouldPerformLayout(t)) return this.calcBoundingBox(e, t);\n    }\n    shouldPerformLayout(t) {\n        let { type: e, prevStrategy: s, strategy: r } = t;\n        return e === ne || e === si || !!s && r !== s;\n    }\n    shouldLayoutClipPath(t) {\n        let { type: e, target: { clipPath: s } } = t;\n        return e !== ne && s && !s.absolutePositioned;\n    }\n    getInitialSize(t, e) {\n        return e.size;\n    }\n    calcBoundingBox(t, e) {\n        const { type: s, target: r } = e;\n        if (s === si && e.overrides) return e.overrides;\n        if (t.length === 0) return;\n        const { left: n, top: o, width: a, height: c } = Gt(t.map((u)=>Fc(r, u)).reduce((u, d)=>u.concat(d), [])), l = new _(a, c), h = new _(n, o).add(l.scalarDivide(2));\n        if (s === ne) {\n            const u = this.getInitialSize(e, {\n                size: l,\n                center: h\n            });\n            return {\n                center: h,\n                relativeCorrection: new _(0, 0),\n                size: u\n            };\n        }\n        return {\n            center: h.transform(r.calcOwnMatrix()),\n            size: l\n        };\n    }\n}\ny(Ci, \"type\", \"strategy\");\nclass gn extends Ci {\n    shouldPerformLayout(t) {\n        return !0;\n    }\n}\ny(gn, \"type\", \"fit-content\"), C.setClass(gn);\nconst Lu = [\n    \"strategy\"\n], Bu = [\n    \"target\",\n    \"strategy\",\n    \"bubbles\",\n    \"prevStrategy\"\n], Rc = \"layoutManager\";\nclass Zs {\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new gn();\n        y(this, \"strategy\", void 0), this.strategy = t, this._subscriptions = /* @__PURE__ */ new Map();\n    }\n    performLayout(t) {\n        const e = v(v({\n            bubbles: !0,\n            strategy: this.strategy\n        }, t), {}, {\n            prevStrategy: this._prevLayoutStrategy,\n            stopPropagation () {\n                this.bubbles = !1;\n            }\n        });\n        this.onBeforeLayout(e);\n        const s = this.getLayoutResult(e);\n        s && this.commitLayout(e, s), this.onAfterLayout(e, s), this._prevLayoutStrategy = e.strategy;\n    }\n    attachHandlers(t, e) {\n        const { target: s } = e;\n        return [\n            $r,\n            La,\n            $s,\n            Ba,\n            gi,\n            Wa,\n            Ur,\n            Xa,\n            Xh\n        ].map((r)=>t.on(r, (n)=>this.performLayout(r === $r ? {\n                    type: \"object_modified\",\n                    trigger: r,\n                    e: n,\n                    target: s\n                } : {\n                    type: \"object_modifying\",\n                    trigger: r,\n                    e: n,\n                    target: s\n                })));\n    }\n    subscribe(t, e) {\n        this.unsubscribe(t, e);\n        const s = this.attachHandlers(t, e);\n        this._subscriptions.set(t, s);\n    }\n    unsubscribe(t, e) {\n        (this._subscriptions.get(t) || []).forEach((s)=>s()), this._subscriptions.delete(t);\n    }\n    unsubscribeTargets(t) {\n        t.targets.forEach((e)=>this.unsubscribe(e, t));\n    }\n    subscribeTargets(t) {\n        t.targets.forEach((e)=>this.subscribe(e, t));\n    }\n    onBeforeLayout(t) {\n        const { target: e, type: s } = t, { canvas: r } = e;\n        if (s === ne || s === ei ? this.subscribeTargets(t) : s === Zn && this.unsubscribeTargets(t), e.fire(\"layout:before\", {\n            context: t\n        }), r && r.fire(\"object:layout:before\", {\n            target: e,\n            context: t\n        }), s === si && t.deep) {\n            const n = G(t, Lu);\n            e.forEachObject((o)=>o.layoutManager && o.layoutManager.performLayout(v(v({}, n), {}, {\n                    bubbles: !1,\n                    target: o\n                })));\n        }\n    }\n    getLayoutResult(t) {\n        const { target: e, strategy: s, type: r } = t, n = s.calcLayoutResult(t, e.getObjects());\n        if (!n) return;\n        const o = r === ne ? new _() : e.getRelativeCenterPoint(), { center: a, correction: c = new _(), relativeCorrection: l = new _() } = n, h = o.subtract(a).add(c).transform(r === ne ? ht : St(e.calcOwnMatrix()), !0).add(l);\n        return {\n            result: n,\n            prevCenter: o,\n            nextCenter: a,\n            offset: h\n        };\n    }\n    commitLayout(t, e) {\n        const { target: s } = t, { result: { size: r }, nextCenter: n } = e;\n        var o, a;\n        s.set({\n            width: r.x,\n            height: r.y\n        }), this.layoutObjects(t, e), t.type === ne ? s.set({\n            left: (o = t.x) !== null && o !== void 0 ? o : n.x + r.x * st(s.originX),\n            top: (a = t.y) !== null && a !== void 0 ? a : n.y + r.y * st(s.originY)\n        }) : (s.setPositionByOrigin(n, j, j), s.setCoords(), s.set(\"dirty\", !0));\n    }\n    layoutObjects(t, e) {\n        const { target: s } = t;\n        s.forEachObject((r)=>{\n            r.group === s && this.layoutObject(t, e, r);\n        }), t.strategy.shouldLayoutClipPath(t) && this.layoutObject(t, e, s.clipPath);\n    }\n    layoutObject(t, e, s) {\n        let { offset: r } = e;\n        s.set({\n            left: s.left + r.x,\n            top: s.top + r.y\n        });\n    }\n    onAfterLayout(t, e) {\n        const { target: s, strategy: r, bubbles: n, prevStrategy: o } = t, a = G(t, Bu), { canvas: c } = s;\n        s.fire(\"layout:after\", {\n            context: t,\n            result: e\n        }), c && c.fire(\"object:layout:after\", {\n            context: t,\n            result: e,\n            target: s\n        });\n        const l = s.parent;\n        n && l != null && l.layoutManager && ((a.path || (a.path = [])).push(s), l.layoutManager.performLayout(v(v({}, a), {}, {\n            target: l\n        }))), s.set(\"dirty\", !0);\n    }\n    dispose() {\n        const { _subscriptions: t } = this;\n        t.forEach((e)=>e.forEach((s)=>s())), t.clear();\n    }\n    toObject() {\n        return {\n            type: Rc,\n            strategy: this.strategy.constructor.type\n        };\n    }\n    toJSON() {\n        return this.toObject();\n    }\n}\nC.setClass(Zs, Rc);\nconst Wu = [\n    \"type\",\n    \"objects\",\n    \"layoutManager\"\n];\nclass Xu extends Zs {\n    performLayout() {}\n}\nclass Nt extends za(nt) {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Nt.ownDefaults);\n    }\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(), y(this, \"_activeObjects\", []), y(this, \"__objectSelectionTracker\", void 0), y(this, \"__objectSelectionDisposer\", void 0), Object.assign(this, Nt.ownDefaults), this.setOptions(e), this.groupInit(t, e);\n    }\n    groupInit(t, e) {\n        var s;\n        this._objects = [\n            ...t\n        ], this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(this, !0), this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(this, !1), this.forEachObject((r)=>{\n            this.enterGroup(r, !1);\n        }), this.layoutManager = (s = e.layoutManager) !== null && s !== void 0 ? s : new Zs(), this.layoutManager.performLayout({\n            type: ne,\n            target: this,\n            targets: [\n                ...t\n            ],\n            x: e.left,\n            y: e.top\n        });\n    }\n    canEnterGroup(t) {\n        return t === this || this.isDescendantOf(t) ? (Te(\"error\", \"Group: circular object trees are not supported, this call has no effect\"), !1) : this._objects.indexOf(t) === -1 || (Te(\"error\", \"Group: duplicate objects are not supported inside group, this call has no effect\"), !1);\n    }\n    _filterObjectsBeforeEnteringGroup(t) {\n        return t.filter((e, s, r)=>this.canEnterGroup(e) && r.indexOf(e) === s);\n    }\n    add() {\n        for(var t = arguments.length, e = new Array(t), s = 0; s < t; s++)e[s] = arguments[s];\n        const r = this._filterObjectsBeforeEnteringGroup(e), n = super.add(...r);\n        return this._onAfterObjectsChange(ei, r), n;\n    }\n    insertAt(t) {\n        for(var e = arguments.length, s = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++)s[r - 1] = arguments[r];\n        const n = this._filterObjectsBeforeEnteringGroup(s), o = super.insertAt(t, ...n);\n        return this._onAfterObjectsChange(ei, n), o;\n    }\n    remove() {\n        const t = super.remove(...arguments);\n        return this._onAfterObjectsChange(Zn, t), t;\n    }\n    _onObjectAdded(t) {\n        this.enterGroup(t, !0), this.fire(\"object:added\", {\n            target: t\n        }), t.fire(\"added\", {\n            target: this\n        });\n    }\n    _onObjectRemoved(t, e) {\n        this.exitGroup(t, e), this.fire(\"object:removed\", {\n            target: t\n        }), t.fire(\"removed\", {\n            target: this\n        });\n    }\n    _onAfterObjectsChange(t, e) {\n        this.layoutManager.performLayout({\n            type: t,\n            targets: e,\n            target: this\n        });\n    }\n    _onStackOrderChanged() {\n        this._set(\"dirty\", !0);\n    }\n    _set(t, e) {\n        const s = this[t];\n        return super._set(t, e), t === \"canvas\" && s !== e && (this._objects || []).forEach((r)=>{\n            r._set(t, e);\n        }), this;\n    }\n    _shouldSetNestedCoords() {\n        return this.subTargetCheck;\n    }\n    removeAll() {\n        return this._activeObjects = [], this.remove(...this._objects);\n    }\n    __objectSelectionMonitor(t, e) {\n        let { target: s } = e;\n        const r = this._activeObjects;\n        if (t) r.push(s), this._set(\"dirty\", !0);\n        else if (r.length > 0) {\n            const n = r.indexOf(s);\n            n > -1 && (r.splice(n, 1), this._set(\"dirty\", !0));\n        }\n    }\n    _watchObject(t, e) {\n        t && this._watchObject(!1, e), t ? (e.on(\"selected\", this.__objectSelectionTracker), e.on(\"deselected\", this.__objectSelectionDisposer)) : (e.off(\"selected\", this.__objectSelectionTracker), e.off(\"deselected\", this.__objectSelectionDisposer));\n    }\n    enterGroup(t, e) {\n        t.group && t.group.remove(t), t._set(\"parent\", this), this._enterGroup(t, e);\n    }\n    _enterGroup(t, e) {\n        e && _s(t, J(St(this.calcTransformMatrix()), t.calcTransformMatrix())), this._shouldSetNestedCoords() && t.setCoords(), t._set(\"group\", this), t._set(\"canvas\", this.canvas), this._watchObject(!0, t);\n        const s = this.canvas && this.canvas.getActiveObject && this.canvas.getActiveObject();\n        s && (s === t || t.isDescendantOf(s)) && this._activeObjects.push(t);\n    }\n    exitGroup(t, e) {\n        this._exitGroup(t, e), t._set(\"parent\", void 0), t._set(\"canvas\", void 0);\n    }\n    _exitGroup(t, e) {\n        t._set(\"group\", void 0), e || (_s(t, J(this.calcTransformMatrix(), t.calcTransformMatrix())), t.setCoords()), this._watchObject(!1, t);\n        const s = this._activeObjects.length > 0 ? this._activeObjects.indexOf(t) : -1;\n        s > -1 && this._activeObjects.splice(s, 1);\n    }\n    shouldCache() {\n        const t = nt.prototype.shouldCache.call(this);\n        if (t) {\n            for(let e = 0; e < this._objects.length; e++)if (this._objects[e].willDrawShadow()) return this.ownCaching = !1, !1;\n        }\n        return t;\n    }\n    willDrawShadow() {\n        if (super.willDrawShadow()) return !0;\n        for(let t = 0; t < this._objects.length; t++)if (this._objects[t].willDrawShadow()) return !0;\n        return !1;\n    }\n    isOnACache() {\n        return this.ownCaching || !!this.parent && this.parent.isOnACache();\n    }\n    drawObject(t, e, s) {\n        this._renderBackground(t);\n        for(let n = 0; n < this._objects.length; n++){\n            var r;\n            const o = this._objects[n];\n            (r = this.canvas) !== null && r !== void 0 && r.preserveObjectStacking && o.group !== this ? (t.save(), t.transform(...St(this.calcTransformMatrix())), o.render(t), t.restore()) : o.group === this && o.render(t);\n        }\n        this._drawClipPath(t, this.clipPath, s);\n    }\n    setCoords() {\n        super.setCoords(), this._shouldSetNestedCoords() && this.forEachObject((t)=>t.setCoords());\n    }\n    triggerLayout() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.layoutManager.performLayout(v({\n            target: this,\n            type: si\n        }, t));\n    }\n    render(t) {\n        this._transformDone = !0, super.render(t), this._transformDone = !1;\n    }\n    __serializeObjects(t, e) {\n        const s = this.includeDefaultValues;\n        return this._objects.filter(function(r) {\n            return !r.excludeFromExport;\n        }).map(function(r) {\n            const n = r.includeDefaultValues;\n            r.includeDefaultValues = s;\n            const o = r[t || \"toObject\"](e);\n            return r.includeDefaultValues = n, o;\n        });\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        const e = this.layoutManager.toObject();\n        return v(v(v({}, super.toObject([\n            \"subTargetCheck\",\n            \"interactive\",\n            ...t\n        ])), e.strategy !== \"fit-content\" || this.includeDefaultValues ? {\n            layoutManager: e\n        } : {}), {}, {\n            objects: this.__serializeObjects(\"toObject\", t)\n        });\n    }\n    toString() {\n        return \"#<Group: (\".concat(this.complexity(), \")>\");\n    }\n    dispose() {\n        this.layoutManager.unsubscribeTargets({\n            targets: this.getObjects(),\n            target: this\n        }), this._activeObjects = [], this.forEachObject((t)=>{\n            this._watchObject(!1, t), t.dispose();\n        }), super.dispose();\n    }\n    _createSVGBgRect(t) {\n        if (!this.backgroundColor) return \"\";\n        const e = X.prototype._toSVG.call(this), s = e.indexOf(\"COMMON_PARTS\");\n        e[s] = 'for=\"group\" ';\n        const r = e.join(\"\");\n        return t ? t(r) : r;\n    }\n    _toSVG(t) {\n        const e = [\n            \"<g \",\n            \"COMMON_PARTS\",\n            ` >\n`\n        ], s = this._createSVGBgRect(t);\n        s && e.push(\"\t\t\", s);\n        for(let r = 0; r < this._objects.length; r++)e.push(\"\t\t\", this._objects[r].toSVG(t));\n        return e.push(`</g>\n`), e;\n    }\n    getSvgStyles() {\n        const t = this.opacity !== void 0 && this.opacity !== 1 ? \"opacity: \".concat(this.opacity, \";\") : \"\", e = this.visible ? \"\" : \" visibility: hidden;\";\n        return [\n            t,\n            this.getSvgFilter(),\n            e\n        ].join(\"\");\n    }\n    toClipPathSVG(t) {\n        const e = [], s = this._createSVGBgRect(t);\n        s && e.push(\"\t\", s);\n        for(let r = 0; r < this._objects.length; r++)e.push(\"\t\", this._objects[r].toClipPathSVG(t));\n        return this._createBaseClipPathSVGMarkup(e, {\n            reviver: t\n        });\n    }\n    static fromObject(t, e) {\n        let { type: s, objects: r = [], layoutManager: n } = t, o = G(t, Wu);\n        return Promise.all([\n            bs(r, e),\n            cr(o, e)\n        ]).then((a)=>{\n            let [c, l] = a;\n            const h = new this(c, v(v(v({}, o), l), {}, {\n                layoutManager: new Xu()\n            }));\n            if (n) {\n                const u = C.getClass(n.type), d = C.getClass(n.strategy);\n                h.layoutManager = new u(new d());\n            } else h.layoutManager = new Zs();\n            return h.layoutManager.subscribeTargets({\n                type: ne,\n                target: h,\n                targets: h.getObjects()\n            }), h.setCoords(), h;\n        });\n    }\n}\ny(Nt, \"type\", \"Group\"), y(Nt, \"ownDefaults\", {\n    strokeWidth: 0,\n    subTargetCheck: !1,\n    interactive: !1\n}), C.setClass(Nt);\nconst Lc = (i, t)=>Math.min(t.width / i.width, t.height / i.height), Bc = (i, t)=>Math.max(t.width / i.width, t.height / i.height), pn = \"\\\\s*,?\\\\s*\", Fs = \"\".concat(pn, \"(\").concat(Xe, \")\"), zu = \"\".concat(Fs).concat(Fs).concat(Fs).concat(pn, \"([01])\").concat(pn, \"([01])\").concat(Fs).concat(Fs), Hu = {\n    m: \"l\",\n    M: \"L\"\n}, Yu = (i, t, e, s, r, n, o, a, c, l, h)=>{\n    const u = Lt(i), d = Bt(i), f = Lt(t), g = Bt(t), p = e * r * f - s * n * g + o, m = s * r * f + e * n * g + a;\n    return [\n        \"C\",\n        l + c * (-e * r * d - s * n * u),\n        h + c * (-s * r * d + e * n * u),\n        p + c * (e * r * g + s * n * f),\n        m + c * (s * r * g - e * n * f),\n        p,\n        m\n    ];\n}, Wo = (i, t, e, s)=>{\n    const r = Math.atan2(t, i), n = Math.atan2(s, e);\n    return n >= r ? n - r : 2 * Math.PI - (r - n);\n};\nfunction mn(i, t, e, s, r, n, o, a) {\n    let c;\n    if (A.cachesBoundsOfCurve && (c = [\n        ...arguments\n    ].join(), zs.boundsOfCurveCache[c])) return zs.boundsOfCurveCache[c];\n    const l = Math.sqrt, h = Math.abs, u = [], d = [\n        [\n            0,\n            0\n        ],\n        [\n            0,\n            0\n        ]\n    ];\n    let f = 6 * i - 12 * e + 6 * r, g = -3 * i + 9 * e - 9 * r + 3 * o, p = 3 * e - 3 * i;\n    for(let k = 0; k < 2; ++k){\n        if (k > 0 && (f = 6 * t - 12 * s + 6 * n, g = -3 * t + 9 * s - 9 * n + 3 * a, p = 3 * s - 3 * t), h(g) < 1e-12) {\n            if (h(f) < 1e-12) continue;\n            const E = -p / f;\n            0 < E && E < 1 && u.push(E);\n            continue;\n        }\n        const O = f * f - 4 * p * g;\n        if (O < 0) continue;\n        const x = l(O), I = (-f + x) / (2 * g);\n        0 < I && I < 1 && u.push(I);\n        const M = (-f - x) / (2 * g);\n        0 < M && M < 1 && u.push(M);\n    }\n    let m = u.length;\n    const b = m, S = Xc(i, t, e, s, r, n, o, a);\n    for(; m--;){\n        const { x: k, y: O } = S(u[m]);\n        d[0][m] = k, d[1][m] = O;\n    }\n    d[0][b] = i, d[1][b] = t, d[0][b + 1] = o, d[1][b + 1] = a;\n    const w = [\n        new _(Math.min(...d[0]), Math.min(...d[1])),\n        new _(Math.max(...d[0]), Math.max(...d[1]))\n    ];\n    return A.cachesBoundsOfCurve && (zs.boundsOfCurveCache[c] = w), w;\n}\nconst Vu = (i, t, e)=>{\n    let [s, r, n, o, a, c, l, h] = e;\n    const u = ((d, f, g, p, m, b, S)=>{\n        if (g === 0 || p === 0) return [];\n        let w = 0, k = 0, O = 0;\n        const x = Math.PI, I = S * jn, M = Bt(I), E = Lt(I), R = 0.5 * (-E * d - M * f), tt = 0.5 * (-E * f + M * d), F = g ** 2, B = p ** 2, $ = tt ** 2, yt = R ** 2, dt = F * B - F * $ - B * yt;\n        let Dt = Math.abs(g), q = Math.abs(p);\n        if (dt < 0) {\n            const ve = Math.sqrt(1 - dt / (F * B));\n            Dt *= ve, q *= ve;\n        } else O = (m === b ? -1 : 1) * Math.sqrt(dt / (F * $ + B * yt));\n        const zt = O * Dt * tt / q, te = -O * q * R / Dt, pr = E * zt - M * te + 0.5 * d, Ai = M * zt + E * te + 0.5 * f;\n        let Ps = Wo(1, 0, (R - zt) / Dt, (tt - te) / q), me = Wo((R - zt) / Dt, (tt - te) / q, (-R - zt) / Dt, (-tt - te) / q);\n        b === 0 && me > 0 ? me -= 2 * x : b === 1 && me < 0 && (me += 2 * x);\n        const mr = Math.ceil(Math.abs(me / x * 2)), je = [], As = me / mr, Ah = 8 / 3 * Math.sin(As / 4) * Math.sin(As / 4) / Math.sin(As / 2);\n        let Fi = Ps + As;\n        for(let ve = 0; ve < mr; ve++)je[ve] = Yu(Ps, Fi, E, M, Dt, q, pr, Ai, Ah, w, k), w = je[ve][5], k = je[ve][6], Ps = Fi, Fi += As;\n        return je;\n    })(l - i, h - t, r, n, a, c, o);\n    for(let d = 0, f = u.length; d < f; d++)u[d][1] += i, u[d][2] += t, u[d][3] += i, u[d][4] += t, u[d][5] += i, u[d][6] += t;\n    return u;\n}, Wc = (i)=>{\n    let t = 0, e = 0, s = 0, r = 0;\n    const n = [];\n    let o, a = 0, c = 0;\n    for (const l of i){\n        const h = [\n            ...l\n        ];\n        let u;\n        switch(h[0]){\n            case \"l\":\n                h[1] += t, h[2] += e;\n            case \"L\":\n                t = h[1], e = h[2], u = [\n                    \"L\",\n                    t,\n                    e\n                ];\n                break;\n            case \"h\":\n                h[1] += t;\n            case \"H\":\n                t = h[1], u = [\n                    \"L\",\n                    t,\n                    e\n                ];\n                break;\n            case \"v\":\n                h[1] += e;\n            case \"V\":\n                e = h[1], u = [\n                    \"L\",\n                    t,\n                    e\n                ];\n                break;\n            case \"m\":\n                h[1] += t, h[2] += e;\n            case \"M\":\n                t = h[1], e = h[2], s = h[1], r = h[2], u = [\n                    \"M\",\n                    t,\n                    e\n                ];\n                break;\n            case \"c\":\n                h[1] += t, h[2] += e, h[3] += t, h[4] += e, h[5] += t, h[6] += e;\n            case \"C\":\n                a = h[3], c = h[4], t = h[5], e = h[6], u = [\n                    \"C\",\n                    h[1],\n                    h[2],\n                    a,\n                    c,\n                    t,\n                    e\n                ];\n                break;\n            case \"s\":\n                h[1] += t, h[2] += e, h[3] += t, h[4] += e;\n            case \"S\":\n                o === \"C\" ? (a = 2 * t - a, c = 2 * e - c) : (a = t, c = e), t = h[3], e = h[4], u = [\n                    \"C\",\n                    a,\n                    c,\n                    h[1],\n                    h[2],\n                    t,\n                    e\n                ], a = u[3], c = u[4];\n                break;\n            case \"q\":\n                h[1] += t, h[2] += e, h[3] += t, h[4] += e;\n            case \"Q\":\n                a = h[1], c = h[2], t = h[3], e = h[4], u = [\n                    \"Q\",\n                    a,\n                    c,\n                    t,\n                    e\n                ];\n                break;\n            case \"t\":\n                h[1] += t, h[2] += e;\n            case \"T\":\n                o === \"Q\" ? (a = 2 * t - a, c = 2 * e - c) : (a = t, c = e), t = h[1], e = h[2], u = [\n                    \"Q\",\n                    a,\n                    c,\n                    t,\n                    e\n                ];\n                break;\n            case \"a\":\n                h[6] += t, h[7] += e;\n            case \"A\":\n                Vu(t, e, h).forEach((d)=>n.push(d)), t = h[6], e = h[7];\n                break;\n            case \"z\":\n            case \"Z\":\n                t = s, e = r, u = [\n                    \"Z\"\n                ];\n        }\n        u ? (n.push(u), o = u[0]) : o = \"\";\n    }\n    return n;\n}, ri = (i, t, e, s)=>Math.sqrt((e - i) ** 2 + (s - t) ** 2), Xc = (i, t, e, s, r, n, o, a)=>(c)=>{\n        const l = c ** 3, h = ((f)=>3 * f ** 2 * (1 - f))(c), u = ((f)=>3 * f * (1 - f) ** 2)(c), d = ((f)=>(1 - f) ** 3)(c);\n        return new _(o * l + r * h + e * u + i * d, a * l + n * h + s * u + t * d);\n    }, zc = (i)=>i ** 2, Hc = (i)=>2 * i * (1 - i), Yc = (i)=>(1 - i) ** 2, Gu = (i, t, e, s, r, n, o, a)=>(c)=>{\n        const l = zc(c), h = Hc(c), u = Yc(c), d = 3 * (u * (e - i) + h * (r - e) + l * (o - r)), f = 3 * (u * (s - t) + h * (n - s) + l * (a - n));\n        return Math.atan2(f, d);\n    }, Nu = (i, t, e, s, r, n)=>(o)=>{\n        const a = zc(o), c = Hc(o), l = Yc(o);\n        return new _(r * a + e * c + i * l, n * a + s * c + t * l);\n    }, Uu = (i, t, e, s, r, n)=>(o)=>{\n        const a = 1 - o, c = 2 * (a * (e - i) + o * (r - e)), l = 2 * (a * (s - t) + o * (n - s));\n        return Math.atan2(l, c);\n    }, Xo = (i, t, e)=>{\n    let s = new _(t, e), r = 0;\n    for(let n = 1; n <= 100; n += 1){\n        const o = i(n / 100);\n        r += ri(s.x, s.y, o.x, o.y), s = o;\n    }\n    return r;\n}, $u = (i, t)=>{\n    let e, s = 0, r = 0, n = {\n        x: i.x,\n        y: i.y\n    }, o = v({}, n), a = 0.01, c = 0;\n    const l = i.iterator, h = i.angleFinder;\n    for(; r < t && a > 1e-4;)o = l(s), c = s, e = ri(n.x, n.y, o.x, o.y), e + r > t ? (s -= a, a /= 2) : (n = o, s += a, r += e);\n    return v(v({}, o), {}, {\n        angle: h(c)\n    });\n}, Qn = (i)=>{\n    let t, e, s = 0, r = 0, n = 0, o = 0, a = 0;\n    const c = [];\n    for (const l of i){\n        const h = {\n            x: r,\n            y: n,\n            command: l[0],\n            length: 0\n        };\n        switch(l[0]){\n            case \"M\":\n                e = h, e.x = o = r = l[1], e.y = a = n = l[2];\n                break;\n            case \"L\":\n                e = h, e.length = ri(r, n, l[1], l[2]), r = l[1], n = l[2];\n                break;\n            case \"C\":\n                t = Xc(r, n, l[1], l[2], l[3], l[4], l[5], l[6]), e = h, e.iterator = t, e.angleFinder = Gu(r, n, l[1], l[2], l[3], l[4], l[5], l[6]), e.length = Xo(t, r, n), r = l[5], n = l[6];\n                break;\n            case \"Q\":\n                t = Nu(r, n, l[1], l[2], l[3], l[4]), e = h, e.iterator = t, e.angleFinder = Uu(r, n, l[1], l[2], l[3], l[4]), e.length = Xo(t, r, n), r = l[3], n = l[4];\n                break;\n            case \"Z\":\n                e = h, e.destX = o, e.destY = a, e.length = ri(r, n, o, a), r = o, n = a;\n        }\n        s += e.length, c.push(e);\n    }\n    return c.push({\n        length: s,\n        x: r,\n        y: n\n    }), c;\n}, Vc = function(i, t) {\n    let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Qn(i), s = 0;\n    for(; t - e[s].length > 0 && s < e.length - 2;)t -= e[s].length, s++;\n    const r = e[s], n = t / r.length, o = i[s];\n    switch(r.command){\n        case \"M\":\n            return {\n                x: r.x,\n                y: r.y,\n                angle: 0\n            };\n        case \"Z\":\n            return v(v({}, new _(r.x, r.y).lerp(new _(r.destX, r.destY), n)), {}, {\n                angle: Math.atan2(r.destY - r.y, r.destX - r.x)\n            });\n        case \"L\":\n            return v(v({}, new _(r.x, r.y).lerp(new _(o[1], o[2]), n)), {}, {\n                angle: Math.atan2(o[2] - r.y, o[1] - r.x)\n            });\n        case \"C\":\n        case \"Q\":\n            return $u(r, t);\n    }\n}, qu = new RegExp(\"[mzlhvcsqta][^mzlhvcsqta]*\", \"gi\"), zo = new RegExp(zu, \"g\"), Ku = new RegExp(Xe, \"gi\"), Ju = {\n    m: 2,\n    l: 2,\n    h: 1,\n    v: 1,\n    c: 6,\n    s: 4,\n    q: 4,\n    t: 2,\n    a: 7\n}, Gc = (i)=>{\n    var t;\n    const e = [], s = (t = i.match(qu)) !== null && t !== void 0 ? t : [];\n    for (const r of s){\n        const n = r[0];\n        if (n === \"z\" || n === \"Z\") {\n            e.push([\n                n\n            ]);\n            continue;\n        }\n        const o = Ju[n.toLowerCase()];\n        let a = [];\n        if (n === \"a\" || n === \"A\") {\n            zo.lastIndex = 0;\n            for(let c = null; c = zo.exec(r);)a.push(...c.slice(1));\n        } else a = r.match(Ku) || [];\n        for(let c = 0; c < a.length; c += o){\n            const l = new Array(o), h = Hu[n];\n            l[0] = c > 0 && h ? h : n;\n            for(let u = 0; u < o; u++)l[u + 1] = parseFloat(a[c + u]);\n            e.push(l);\n        }\n    }\n    return e;\n}, Zu = function(i) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, e = new _(i[0]), s = new _(i[1]), r = 1, n = 0;\n    const o = [], a = i.length, c = a > 2;\n    let l;\n    for(c && (r = i[2].x < s.x ? -1 : i[2].x === s.x ? 0 : 1, n = i[2].y < s.y ? -1 : i[2].y === s.y ? 0 : 1), o.push([\n        \"M\",\n        e.x - r * t,\n        e.y - n * t\n    ]), l = 1; l < a; l++){\n        if (!e.eq(s)) {\n            const h = e.midPointFrom(s);\n            o.push([\n                \"Q\",\n                e.x,\n                e.y,\n                h.x,\n                h.y\n            ]);\n        }\n        e = i[l], l + 1 < i.length && (s = i[l + 1]);\n    }\n    return c && (r = e.x > i[l - 2].x ? 1 : e.x === i[l - 2].x ? 0 : -1, n = e.y > i[l - 2].y ? 1 : e.y === i[l - 2].y ? 0 : -1), o.push([\n        \"L\",\n        e.x + r * t,\n        e.y + n * t\n    ]), o;\n}, Nc = (i, t)=>i.map((e)=>e.map((s, r)=>r === 0 || t === void 0 ? s : V(s, t)).join(\" \")).join(\" \");\nfunction ii(i, t) {\n    const e = i.style;\n    e && t && (typeof t == \"string\" ? e.cssText += \";\" + t : Object.entries(t).forEach((s)=>{\n        let [r, n] = s;\n        return e.setProperty(r, n);\n    }));\n}\nconst Qu = (i, t)=>Math.floor(Math.random() * (t - i + 1)) + i;\nfunction td(i) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const e = t.onComplete || Be, s = new (fi()).XMLHttpRequest(), r = t.signal, n = function() {\n        s.abort();\n    }, o = function() {\n        r && r.removeEventListener(\"abort\", n), s.onerror = s.ontimeout = Be;\n    };\n    if (r && r.aborted) throw new Fa(\"request\");\n    return r && r.addEventListener(\"abort\", n, {\n        once: !0\n    }), s.onreadystatechange = function() {\n        s.readyState === 4 && (o(), e(s), s.onreadystatechange = Be);\n    }, s.onerror = s.ontimeout = o, s.open(\"get\", i, !0), s.send(), s;\n}\nconst ed = (i, t)=>{\n    let e = i._findCenterFromElement();\n    i.transformMatrix && (((s)=>{\n        if (s.transformMatrix) {\n            const { scaleX: r, scaleY: n, angle: o, skewX: a } = ys(s.transformMatrix);\n            s.flipX = !1, s.flipY = !1, s.set(ut, r), s.set(Tt, n), s.angle = o, s.skewX = a, s.skewY = 0;\n        }\n    })(i), e = e.transform(i.transformMatrix)), delete i.transformMatrix, t && (i.scaleX *= t.scaleX, i.scaleY *= t.scaleY, i.cropX = t.cropX, i.cropY = t.cropY, e.x += t.offsetLeft, e.y += t.offsetTop, i.width = t.width, i.height = t.height), i.setPositionByOrigin(e, j, j);\n};\nvar sd = Object.freeze({\n    __proto__: null,\n    addTransformToObject: ec,\n    animate: Un,\n    animateColor: dc,\n    applyTransformToObject: _s,\n    calcAngleBetweenVectors: ti,\n    calcDimensionsMatrix: ar,\n    calcPlaneChangeMatrix: hr,\n    calcVectorRotation: lc,\n    cancelAnimFrame: Ya,\n    capValue: ze,\n    composeMatrix: $a,\n    copyCanvasElement: (i)=>{\n        var t;\n        const e = Wt(i);\n        return (t = e.getContext(\"2d\")) === null || t === void 0 || t.drawImage(i, 0, 0), e;\n    },\n    cos: Lt,\n    createCanvasElement: kt,\n    createImage: Va,\n    createRotateMatrix: Is,\n    createScaleMatrix: vi,\n    createSkewXMatrix: Bn,\n    createSkewYMatrix: Wn,\n    createTranslateMatrix: Ms,\n    createVector: Zr,\n    crossProduct: ps,\n    degreesToRadians: K,\n    dotProduct: hc,\n    ease: Zh,\n    enlivenObjectEnlivables: cr,\n    enlivenObjects: bs,\n    findScaleToCover: Bc,\n    findScaleToFit: Lc,\n    getBoundsOfCurve: mn,\n    getOrthonormalVector: Gn,\n    getPathSegmentsInfo: Qn,\n    getPointOnPath: Vc,\n    getPointer: tc,\n    getRandomInt: Qu,\n    getRegularPolygonPath: (i, t)=>{\n        const e = 2 * Math.PI / i;\n        let s = -xe;\n        i % 2 == 0 && (s += e / 2);\n        const r = new Array(i + 1);\n        for(let n = 0; n < i; n++){\n            const o = n * e + s, { x: a, y: c } = new _(Lt(o), Bt(o)).scalarMultiply(t);\n            r[n] = [\n                n === 0 ? \"M\" : \"L\",\n                a,\n                c\n            ];\n        }\n        return r[i] = [\n            \"Z\"\n        ], r;\n    },\n    getSmoothPathFromPoints: Zu,\n    getSvgAttributes: (i)=>{\n        const t = [\n            \"instantiated_by_use\",\n            \"style\",\n            \"id\",\n            \"class\"\n        ];\n        switch(i){\n            case \"linearGradient\":\n                return t.concat([\n                    \"x1\",\n                    \"y1\",\n                    \"x2\",\n                    \"y2\",\n                    \"gradientUnits\",\n                    \"gradientTransform\"\n                ]);\n            case \"radialGradient\":\n                return t.concat([\n                    \"gradientUnits\",\n                    \"gradientTransform\",\n                    \"cx\",\n                    \"cy\",\n                    \"r\",\n                    \"fx\",\n                    \"fy\",\n                    \"fr\"\n                ]);\n            case \"stop\":\n                return t.concat([\n                    \"offset\",\n                    \"stop-color\",\n                    \"stop-opacity\"\n                ]);\n        }\n        return t;\n    },\n    getUnitVector: Si,\n    groupSVGElements: (i, t)=>i && i.length === 1 ? i[0] : new Nt(i, t),\n    hasStyleChanged: wi,\n    invertTransform: St,\n    isBetweenVectors: cn,\n    isIdentityMatrix: Ga,\n    isTouchEvent: Kr,\n    isTransparent: Mc,\n    joinPath: Nc,\n    loadImage: Ys,\n    magnitude: Qr,\n    makeBoundingBoxFromPoints: Gt,\n    makePathSimpler: Wc,\n    matrixToSVG: qs,\n    mergeClipPaths: (i, t)=>{\n        var e;\n        let s = i, r = t;\n        s.inverted && !r.inverted && (s = t, r = i), an(r, (e = r.group) === null || e === void 0 ? void 0 : e.calcTransformMatrix(), s.calcTransformMatrix());\n        const n = s.inverted && r.inverted;\n        return n && (s.inverted = r.inverted = !1), new Nt([\n            s\n        ], {\n            clipPath: r,\n            inverted: n\n        });\n    },\n    multiplyTransformMatrices: J,\n    multiplyTransformMatrixArray: mi,\n    parsePath: Gc,\n    parsePreserveAspectRatioAttribute: qa,\n    parseUnit: We,\n    pick: Ve,\n    projectStrokeOnPoints: Dc,\n    qrDecompose: ys,\n    radiansToDegrees: Ce,\n    removeFromArray: Ee,\n    removeTransformFromObject: (i, t)=>{\n        const e = St(t), s = J(e, i.calcOwnMatrix());\n        _s(i, s);\n    },\n    removeTransformMatrixForSvgParsing: ed,\n    request: td,\n    requestAnimFrame: Hs,\n    resetObjectTransform: sc,\n    rotatePoint: (i, t, e)=>i.rotate(e, t),\n    rotateVector: Vn,\n    saveObjectTransform: zn,\n    sendObjectToPlane: an,\n    sendPointToPlane: ae,\n    sendVectorToPlane: rc,\n    setStyle: ii,\n    sin: Bt,\n    sizeAfterTransform: yi,\n    string: pu,\n    stylesFromArray: Pc,\n    stylesToArray: Ec,\n    toBlob: Ln,\n    toDataURL: Rn,\n    toFixed: V,\n    transformPath: (i, t, e)=>(e && (t = J(t, [\n            1,\n            0,\n            0,\n            1,\n            -e.x,\n            -e.y\n        ])), i.map((s)=>{\n            const r = [\n                ...s\n            ];\n            for(let n = 1; n < s.length - 1; n += 2){\n                const { x: o, y: a } = ot({\n                    x: s[n],\n                    y: s[n + 1]\n                }, t);\n                r[n] = o, r[n + 1] = a;\n            }\n            return r;\n        })),\n    transformPoint: ot\n});\nclass rd extends Qa {\n    constructor(t){\n        let { allowTouchScrolling: e = !1, containerClass: s = \"\" } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(t), y(this, \"upper\", void 0), y(this, \"container\", void 0);\n        const { el: r } = this.lower, n = this.createUpperCanvas();\n        this.upper = {\n            el: n,\n            ctx: n.getContext(\"2d\")\n        }, this.applyCanvasStyle(r, {\n            allowTouchScrolling: e\n        }), this.applyCanvasStyle(n, {\n            allowTouchScrolling: e,\n            styles: {\n                position: \"absolute\",\n                left: \"0\",\n                top: \"0\"\n            }\n        });\n        const o = this.createContainerElement();\n        o.classList.add(s), r.parentNode && r.parentNode.replaceChild(o, r), o.append(r, n), this.container = o;\n    }\n    createUpperCanvas() {\n        const { el: t } = this.lower, e = kt();\n        return e.className = t.className, e.classList.remove(\"lower-canvas\"), e.classList.add(\"upper-canvas\"), e.setAttribute(\"data-fabric\", \"top\"), e.style.cssText = t.style.cssText, e.setAttribute(\"draggable\", \"true\"), e;\n    }\n    createContainerElement() {\n        const t = Cs().createElement(\"div\");\n        return t.setAttribute(\"data-fabric\", \"wrapper\"), ii(t, {\n            position: \"relative\"\n        }), To(t), t;\n    }\n    applyCanvasStyle(t, e) {\n        const { styles: s, allowTouchScrolling: r } = e;\n        ii(t, v(v({}, s), {}, {\n            \"touch-action\": r ? \"manipulation\" : pt\n        })), To(t);\n    }\n    setDimensions(t, e) {\n        super.setDimensions(t, e);\n        const { el: s, ctx: r } = this.upper;\n        Za(s, r, t, e);\n    }\n    setCSSDimensions(t) {\n        super.setCSSDimensions(t), nn(this.upper.el, t), nn(this.container, t);\n    }\n    cleanupDOM(t) {\n        const e = this.container, { el: s } = this.lower, { el: r } = this.upper;\n        super.cleanupDOM(t), e.removeChild(r), e.removeChild(s), e.parentNode && e.parentNode.replaceChild(s, e);\n    }\n    dispose() {\n        super.dispose(), $t().dispose(this.upper.el), delete this.upper, delete this.container;\n    }\n}\nclass Oi extends lr {\n    constructor(){\n        super(...arguments), y(this, \"targets\", []), y(this, \"_hoveredTargets\", []), y(this, \"_objectsToRender\", void 0), y(this, \"_currentTransform\", null), y(this, \"_groupSelector\", null), y(this, \"contextTopDirty\", !1);\n    }\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Oi.ownDefaults);\n    }\n    get upperCanvasEl() {\n        var t;\n        return (t = this.elements.upper) === null || t === void 0 ? void 0 : t.el;\n    }\n    get contextTop() {\n        var t;\n        return (t = this.elements.upper) === null || t === void 0 ? void 0 : t.ctx;\n    }\n    get wrapperEl() {\n        return this.elements.container;\n    }\n    initElements(t) {\n        this.elements = new rd(t, {\n            allowTouchScrolling: this.allowTouchScrolling,\n            containerClass: this.containerClass\n        }), this._createCacheCanvas();\n    }\n    _onObjectAdded(t) {\n        this._objectsToRender = void 0, super._onObjectAdded(t);\n    }\n    _onObjectRemoved(t) {\n        this._objectsToRender = void 0, t === this._activeObject && (this.fire(\"before:selection:cleared\", {\n            deselected: [\n                t\n            ]\n        }), this._discardActiveObject(), this.fire(\"selection:cleared\", {\n            deselected: [\n                t\n            ]\n        }), t.fire(\"deselected\", {\n            target: t\n        })), t === this._hoveredTarget && (this._hoveredTarget = void 0, this._hoveredTargets = []), super._onObjectRemoved(t);\n    }\n    _onStackOrderChanged() {\n        this._objectsToRender = void 0, super._onStackOrderChanged();\n    }\n    _chooseObjectsToRender() {\n        const t = this._activeObject;\n        return !this.preserveObjectStacking && t ? this._objects.filter((e)=>!e.group && e !== t).concat(t) : this._objects;\n    }\n    renderAll() {\n        this.cancelRequestedRender(), this.destroyed || (!this.contextTopDirty || this._groupSelector || this.isDrawingMode || (this.clearContext(this.contextTop), this.contextTopDirty = !1), this.hasLostContext && (this.renderTopLayer(this.contextTop), this.hasLostContext = !1), !this._objectsToRender && (this._objectsToRender = this._chooseObjectsToRender()), this.renderCanvas(this.getContext(), this._objectsToRender));\n    }\n    renderTopLayer(t) {\n        t.save(), this.isDrawingMode && this._isCurrentlyDrawing && (this.freeDrawingBrush && this.freeDrawingBrush._render(), this.contextTopDirty = !0), this.selection && this._groupSelector && (this._drawSelection(t), this.contextTopDirty = !0), t.restore();\n    }\n    renderTop() {\n        const t = this.contextTop;\n        this.clearContext(t), this.renderTopLayer(t), this.fire(\"after:render\", {\n            ctx: t\n        });\n    }\n    setTargetFindTolerance(t) {\n        t = Math.round(t), this.targetFindTolerance = t;\n        const e = this.getRetinaScaling(), s = Math.ceil((2 * t + 1) * e);\n        this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = s, this.pixelFindContext.scale(e, e);\n    }\n    isTargetTransparent(t, e, s) {\n        const r = this.targetFindTolerance, n = this.pixelFindContext;\n        this.clearContext(n), n.save(), n.translate(-e + r, -s + r), n.transform(...this.viewportTransform);\n        const o = t.selectionBackgroundColor;\n        t.selectionBackgroundColor = \"\", t.render(n), t.selectionBackgroundColor = o, n.restore();\n        const a = Math.round(r * this.getRetinaScaling());\n        return Mc(n, a, a, a);\n    }\n    _isSelectionKeyPressed(t) {\n        const e = this.selectionKey;\n        return !!e && (Array.isArray(e) ? !!e.find((s)=>!!s && t[s] === !0) : t[e]);\n    }\n    _shouldClearSelection(t, e) {\n        const s = this.getActiveObjects(), r = this._activeObject;\n        return !!(!e || e && r && s.length > 1 && s.indexOf(e) === -1 && r !== e && !this._isSelectionKeyPressed(t) || e && !e.evented || e && !e.selectable && r && r !== e);\n    }\n    _shouldCenterTransform(t, e, s) {\n        if (!t) return;\n        let r;\n        return e === pi || e === ut || e === Tt || e === $s ? r = this.centeredScaling || t.centeredScaling : e === An && (r = this.centeredRotation || t.centeredRotation), r ? !s : s;\n    }\n    _getOriginFromCorner(t, e) {\n        const s = {\n            x: t.originX,\n            y: t.originY\n        };\n        return e && ([\n            \"ml\",\n            \"tl\",\n            \"bl\"\n        ].includes(e) ? s.x = Z : [\n            \"mr\",\n            \"tr\",\n            \"br\"\n        ].includes(e) && (s.x = L), [\n            \"tl\",\n            \"mt\",\n            \"tr\"\n        ].includes(e) ? s.y = rn : [\n            \"bl\",\n            \"mb\",\n            \"br\"\n        ].includes(e) && (s.y = gt)), s;\n    }\n    _setupCurrentTransform(t, e, s) {\n        var r;\n        const n = e.group ? ae(this.getScenePoint(t), void 0, e.group.calcTransformMatrix()) : this.getScenePoint(t), { key: o = \"\", control: a } = e.getActiveControl() || {}, c = s && a ? (r = a.getActionHandler(t, e, a)) === null || r === void 0 ? void 0 : r.bind(a) : oc, l = ((f, g, p, m)=>{\n            if (!g || !f) return \"drag\";\n            const b = m.controls[g];\n            return b.getActionName(p, b, m);\n        })(s, o, t, e), h = t[this.centeredKey], u = this._shouldCenterTransform(e, l, h) ? {\n            x: j,\n            y: j\n        } : this._getOriginFromCorner(e, o), d = {\n            target: e,\n            action: l,\n            actionHandler: c,\n            actionPerformed: !1,\n            corner: o,\n            scaleX: e.scaleX,\n            scaleY: e.scaleY,\n            skewX: e.skewX,\n            skewY: e.skewY,\n            offsetX: n.x - e.left,\n            offsetY: n.y - e.top,\n            originX: u.x,\n            originY: u.y,\n            ex: n.x,\n            ey: n.y,\n            lastX: n.x,\n            lastY: n.y,\n            theta: K(e.angle),\n            width: e.width,\n            height: e.height,\n            shiftKey: t.shiftKey,\n            altKey: h,\n            original: v(v({}, zn(e)), {}, {\n                originX: u.x,\n                originY: u.y\n            })\n        };\n        this._currentTransform = d, this.fire(\"before:transform\", {\n            e: t,\n            transform: d\n        });\n    }\n    setCursor(t) {\n        this.upperCanvasEl.style.cursor = t;\n    }\n    _drawSelection(t) {\n        const { x: e, y: s, deltaX: r, deltaY: n } = this._groupSelector, o = new _(e, s).transform(this.viewportTransform), a = new _(e + r, s + n).transform(this.viewportTransform), c = this.selectionLineWidth / 2;\n        let l = Math.min(o.x, a.x), h = Math.min(o.y, a.y), u = Math.max(o.x, a.x), d = Math.max(o.y, a.y);\n        this.selectionColor && (t.fillStyle = this.selectionColor, t.fillRect(l, h, u - l, d - h)), this.selectionLineWidth && this.selectionBorderColor && (t.lineWidth = this.selectionLineWidth, t.strokeStyle = this.selectionBorderColor, l += c, h += c, u -= c, d -= c, nt.prototype._setLineDash.call(this, t, this.selectionDashArray), t.strokeRect(l, h, u - l, d - h));\n    }\n    findTarget(t) {\n        if (this.skipTargetFind) return;\n        const e = this.getViewportPoint(t), s = this._activeObject, r = this.getActiveObjects();\n        if (this.targets = [], s && r.length >= 1) {\n            if (s.findControl(e, Kr(t)) || r.length > 1 && this.searchPossibleTargets([\n                s\n            ], e)) return s;\n            if (s === this.searchPossibleTargets([\n                s\n            ], e)) {\n                if (this.preserveObjectStacking) {\n                    const n = this.targets;\n                    this.targets = [];\n                    const o = this.searchPossibleTargets(this._objects, e);\n                    return t[this.altSelectionKey] && o && o !== s ? (this.targets = n, s) : o;\n                }\n                return s;\n            }\n        }\n        return this.searchPossibleTargets(this._objects, e);\n    }\n    _pointIsInObjectSelectionArea(t, e) {\n        let s = t.getCoords();\n        const r = this.getZoom(), n = t.padding / r;\n        if (n) {\n            const [o, a, c, l] = s, h = Math.atan2(a.y - o.y, a.x - o.x), u = Lt(h) * n, d = Bt(h) * n, f = u + d, g = u - d;\n            s = [\n                new _(o.x - g, o.y - f),\n                new _(a.x + f, a.y - g),\n                new _(c.x + g, c.y + f),\n                new _(l.x - f, l.y + g)\n            ];\n        }\n        return N.isPointInPolygon(e, s);\n    }\n    _checkTarget(t, e) {\n        return !!(t && t.visible && t.evented && this._pointIsInObjectSelectionArea(t, ae(e, void 0, this.viewportTransform)) && (!this.perPixelTargetFind && !t.perPixelTargetFind || t.isEditing || !this.isTargetTransparent(t, e.x, e.y)));\n    }\n    _searchPossibleTargets(t, e) {\n        let s = t.length;\n        for(; s--;){\n            const r = t[s];\n            if (this._checkTarget(r, e)) {\n                if (Vr(r) && r.subTargetCheck) {\n                    const n = this._searchPossibleTargets(r._objects, e);\n                    n && this.targets.push(n);\n                }\n                return r;\n            }\n        }\n    }\n    searchPossibleTargets(t, e) {\n        const s = this._searchPossibleTargets(t, e);\n        if (s && Vr(s) && s.interactive && this.targets[0]) {\n            const r = this.targets;\n            for(let n = r.length - 1; n > 0; n--){\n                const o = r[n];\n                if (!Vr(o) || !o.interactive) return o;\n            }\n            return r[0];\n        }\n        return s;\n    }\n    getViewportPoint(t) {\n        return this._pointer ? this._pointer : this.getPointer(t, !0);\n    }\n    getScenePoint(t) {\n        return this._absolutePointer ? this._absolutePointer : this.getPointer(t);\n    }\n    getPointer(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];\n        const s = this.upperCanvasEl, r = s.getBoundingClientRect();\n        let n = tc(t), o = r.width || 0, a = r.height || 0;\n        o && a || (gt in r && rn in r && (a = Math.abs(r.top - r.bottom)), Z in r && L in r && (o = Math.abs(r.right - r.left))), this.calcOffset(), n.x = n.x - this._offset.left, n.y = n.y - this._offset.top, e || (n = ae(n, void 0, this.viewportTransform));\n        const c = this.getRetinaScaling();\n        c !== 1 && (n.x /= c, n.y /= c);\n        const l = o === 0 || a === 0 ? new _(1, 1) : new _(s.width / o, s.height / a);\n        return n.multiply(l);\n    }\n    _setDimensionsImpl(t, e) {\n        this._resetTransformEventData(), super._setDimensionsImpl(t, e), this._isCurrentlyDrawing && this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n    _createCacheCanvas() {\n        this.pixelFindCanvasEl = kt(), this.pixelFindContext = this.pixelFindCanvasEl.getContext(\"2d\", {\n            willReadFrequently: !0\n        }), this.setTargetFindTolerance(this.targetFindTolerance);\n    }\n    getTopContext() {\n        return this.elements.upper.ctx;\n    }\n    getSelectionContext() {\n        return this.elements.upper.ctx;\n    }\n    getSelectionElement() {\n        return this.elements.upper.el;\n    }\n    getActiveObject() {\n        return this._activeObject;\n    }\n    getActiveObjects() {\n        const t = this._activeObject;\n        return Pe(t) ? t.getObjects() : t ? [\n            t\n        ] : [];\n    }\n    _fireSelectionEvents(t, e) {\n        let s = !1, r = !1;\n        const n = this.getActiveObjects(), o = [], a = [];\n        t.forEach((c)=>{\n            n.includes(c) || (s = !0, c.fire(\"deselected\", {\n                e,\n                target: c\n            }), a.push(c));\n        }), n.forEach((c)=>{\n            t.includes(c) || (s = !0, c.fire(\"selected\", {\n                e,\n                target: c\n            }), o.push(c));\n        }), t.length > 0 && n.length > 0 ? (r = !0, s && this.fire(\"selection:updated\", {\n            e,\n            selected: o,\n            deselected: a\n        })) : n.length > 0 ? (r = !0, this.fire(\"selection:created\", {\n            e,\n            selected: o\n        })) : t.length > 0 && (r = !0, this.fire(\"selection:cleared\", {\n            e,\n            deselected: a\n        })), r && (this._objectsToRender = void 0);\n    }\n    setActiveObject(t, e) {\n        const s = this.getActiveObjects(), r = this._setActiveObject(t, e);\n        return this._fireSelectionEvents(s, e), r;\n    }\n    _setActiveObject(t, e) {\n        const s = this._activeObject;\n        return s !== t && !(!this._discardActiveObject(e, t) && this._activeObject) && !t.onSelect({\n            e\n        }) && (this._activeObject = t, Pe(t) && s !== t && t.set(\"canvas\", this), t.setCoords(), !0);\n    }\n    _discardActiveObject(t, e) {\n        const s = this._activeObject;\n        return !!s && !s.onDeselect({\n            e: t,\n            object: e\n        }) && (this._currentTransform && this._currentTransform.target === s && this.endCurrentTransform(t), Pe(s) && s === this._hoveredTarget && (this._hoveredTarget = void 0), this._activeObject = void 0, !0);\n    }\n    discardActiveObject(t) {\n        const e = this.getActiveObjects(), s = this.getActiveObject();\n        e.length && this.fire(\"before:selection:cleared\", {\n            e: t,\n            deselected: [\n                s\n            ]\n        });\n        const r = this._discardActiveObject(t);\n        return this._fireSelectionEvents(e, t), r;\n    }\n    endCurrentTransform(t) {\n        const e = this._currentTransform;\n        this._finalizeCurrentTransform(t), e && e.target && (e.target.isMoving = !1), this._currentTransform = null;\n    }\n    _finalizeCurrentTransform(t) {\n        const e = this._currentTransform, s = e.target, r = {\n            e: t,\n            target: s,\n            transform: e,\n            action: e.action\n        };\n        s._scaling && (s._scaling = !1), s.setCoords(), e.actionPerformed && (this.fire(\"object:modified\", r), s.fire($r, r));\n    }\n    setViewportTransform(t) {\n        super.setViewportTransform(t);\n        const e = this._activeObject;\n        e && e.setCoords();\n    }\n    destroy() {\n        const t = this._activeObject;\n        Pe(t) && (t.removeAll(), t.dispose()), delete this._activeObject, super.destroy(), this.pixelFindContext = null, this.pixelFindCanvasEl = void 0;\n    }\n    clear() {\n        this.discardActiveObject(), this._activeObject = void 0, this.clearContext(this.contextTop), super.clear();\n    }\n    drawControls(t) {\n        const e = this._activeObject;\n        e && e._renderControls(t);\n    }\n    _toObject(t, e, s) {\n        const r = this._realizeGroupTransformOnObject(t), n = super._toObject(t, e, s);\n        return t.set(r), n;\n    }\n    _realizeGroupTransformOnObject(t) {\n        const { group: e } = t;\n        if (e && Pe(e) && this._activeObject === e) {\n            const s = Ve(t, [\n                \"angle\",\n                \"flipX\",\n                \"flipY\",\n                L,\n                ut,\n                Tt,\n                Os,\n                ks,\n                gt\n            ]);\n            return ec(t, e.calcOwnMatrix()), s;\n        }\n        return {};\n    }\n    _setSVGObject(t, e, s) {\n        const r = this._realizeGroupTransformOnObject(e);\n        super._setSVGObject(t, e, s), e.set(r);\n    }\n}\ny(Oi, \"ownDefaults\", {\n    uniformScaling: !0,\n    uniScaleKey: \"shiftKey\",\n    centeredScaling: !1,\n    centeredRotation: !1,\n    centeredKey: \"altKey\",\n    altActionKey: \"shiftKey\",\n    selection: !0,\n    selectionKey: \"shiftKey\",\n    selectionColor: \"rgba(100, 100, 255, 0.3)\",\n    selectionDashArray: [],\n    selectionBorderColor: \"rgba(255, 255, 255, 0.3)\",\n    selectionLineWidth: 1,\n    selectionFullyContained: !1,\n    hoverCursor: \"move\",\n    moveCursor: \"move\",\n    defaultCursor: \"default\",\n    freeDrawingCursor: \"crosshair\",\n    notAllowedCursor: \"not-allowed\",\n    perPixelTargetFind: !1,\n    targetFindTolerance: 0,\n    skipTargetFind: !1,\n    stopContextMenu: !1,\n    fireRightClick: !1,\n    fireMiddleClick: !1,\n    enablePointerEvents: !1,\n    containerClass: \"canvas-container\",\n    preserveObjectStacking: !1\n});\nclass id {\n    constructor(t){\n        y(this, \"targets\", []), y(this, \"__disposer\", void 0);\n        const e = ()=>{\n            const { hiddenTextarea: r } = t.getActiveObject() || {};\n            r && r.focus();\n        }, s = t.upperCanvasEl;\n        s.addEventListener(\"click\", e), this.__disposer = ()=>s.removeEventListener(\"click\", e);\n    }\n    exitTextEditing() {\n        this.target = void 0, this.targets.forEach((t)=>{\n            t.isEditing && t.exitEditing();\n        });\n    }\n    add(t) {\n        this.targets.push(t);\n    }\n    remove(t) {\n        this.unregister(t), Ee(this.targets, t);\n    }\n    register(t) {\n        this.target = t;\n    }\n    unregister(t) {\n        t === this.target && (this.target = void 0);\n    }\n    onMouseMove(t) {\n        var e;\n        !((e = this.target) === null || e === void 0) && e.isEditing && this.target.updateSelectionOnMouseMove(t);\n    }\n    clear() {\n        this.targets = [], this.target = void 0;\n    }\n    dispose() {\n        this.clear(), this.__disposer(), delete this.__disposer;\n    }\n}\nconst nd = [\n    \"target\",\n    \"oldTarget\",\n    \"fireCanvas\",\n    \"e\"\n], bt = {\n    passive: !1\n}, Ke = (i, t)=>{\n    const e = i.getViewportPoint(t), s = i.getScenePoint(t);\n    return {\n        viewportPoint: e,\n        scenePoint: s,\n        pointer: e,\n        absolutePointer: s\n    };\n}, be = function(i) {\n    for(var t = arguments.length, e = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)e[s - 1] = arguments[s];\n    return i.addEventListener(...e);\n}, xt = function(i) {\n    for(var t = arguments.length, e = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)e[s - 1] = arguments[s];\n    return i.removeEventListener(...e);\n}, od = {\n    mouse: {\n        in: \"over\",\n        out: \"out\",\n        targetIn: \"mouseover\",\n        targetOut: \"mouseout\",\n        canvasIn: \"mouse:over\",\n        canvasOut: \"mouse:out\"\n    },\n    drag: {\n        in: \"enter\",\n        out: \"leave\",\n        targetIn: \"dragenter\",\n        targetOut: \"dragleave\",\n        canvasIn: \"drag:enter\",\n        canvasOut: \"drag:leave\"\n    }\n};\nclass vn extends Oi {\n    constructor(t){\n        super(t, arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}), y(this, \"_isClick\", void 0), y(this, \"textEditingManager\", new id(this)), [\n            \"_onMouseDown\",\n            \"_onTouchStart\",\n            \"_onMouseMove\",\n            \"_onMouseUp\",\n            \"_onTouchEnd\",\n            \"_onResize\",\n            \"_onMouseWheel\",\n            \"_onMouseOut\",\n            \"_onMouseEnter\",\n            \"_onContextMenu\",\n            \"_onDoubleClick\",\n            \"_onDragStart\",\n            \"_onDragEnd\",\n            \"_onDragProgress\",\n            \"_onDragOver\",\n            \"_onDragEnter\",\n            \"_onDragLeave\",\n            \"_onDrop\"\n        ].forEach((e)=>{\n            this[e] = this[e].bind(this);\n        }), this.addOrRemove(be, \"add\");\n    }\n    _getEventPrefix() {\n        return this.enablePointerEvents ? \"pointer\" : \"mouse\";\n    }\n    addOrRemove(t, e) {\n        const s = this.upperCanvasEl, r = this._getEventPrefix();\n        t(Ja(s), \"resize\", this._onResize), t(s, r + \"down\", this._onMouseDown), t(s, \"\".concat(r, \"move\"), this._onMouseMove, bt), t(s, \"\".concat(r, \"out\"), this._onMouseOut), t(s, \"\".concat(r, \"enter\"), this._onMouseEnter), t(s, \"wheel\", this._onMouseWheel), t(s, \"contextmenu\", this._onContextMenu), t(s, \"dblclick\", this._onDoubleClick), t(s, \"dragstart\", this._onDragStart), t(s, \"dragend\", this._onDragEnd), t(s, \"dragover\", this._onDragOver), t(s, \"dragenter\", this._onDragEnter), t(s, \"dragleave\", this._onDragLeave), t(s, \"drop\", this._onDrop), this.enablePointerEvents || t(s, \"touchstart\", this._onTouchStart, bt);\n    }\n    removeListeners() {\n        this.addOrRemove(xt, \"remove\");\n        const t = this._getEventPrefix(), e = At(this.upperCanvasEl);\n        xt(e, \"\".concat(t, \"up\"), this._onMouseUp), xt(e, \"touchend\", this._onTouchEnd, bt), xt(e, \"\".concat(t, \"move\"), this._onMouseMove, bt), xt(e, \"touchmove\", this._onMouseMove, bt), clearTimeout(this._willAddMouseDown);\n    }\n    _onMouseWheel(t) {\n        this.__onMouseWheel(t);\n    }\n    _onMouseOut(t) {\n        const e = this._hoveredTarget, s = v({\n            e: t\n        }, Ke(this, t));\n        this.fire(\"mouse:out\", v(v({}, s), {}, {\n            target: e\n        })), this._hoveredTarget = void 0, e && e.fire(\"mouseout\", v({}, s)), this._hoveredTargets.forEach((r)=>{\n            this.fire(\"mouse:out\", v(v({}, s), {}, {\n                target: r\n            })), r && r.fire(\"mouseout\", v({}, s));\n        }), this._hoveredTargets = [];\n    }\n    _onMouseEnter(t) {\n        this._currentTransform || this.findTarget(t) || (this.fire(\"mouse:over\", v({\n            e: t\n        }, Ke(this, t))), this._hoveredTarget = void 0, this._hoveredTargets = []);\n    }\n    _onDragStart(t) {\n        this._isClick = !1;\n        const e = this.getActiveObject();\n        if (e && e.onDragStart(t)) {\n            this._dragSource = e;\n            const s = {\n                e: t,\n                target: e\n            };\n            return this.fire(\"dragstart\", s), e.fire(\"dragstart\", s), void be(this.upperCanvasEl, \"drag\", this._onDragProgress);\n        }\n        on(t);\n    }\n    _renderDragEffects(t, e, s) {\n        let r = !1;\n        const n = this._dropTarget;\n        n && n !== e && n !== s && (n.clearContextTop(), r = !0), e == null || e.clearContextTop(), s !== e && (s == null || s.clearContextTop());\n        const o = this.contextTop;\n        o.save(), o.transform(...this.viewportTransform), e && (o.save(), e.transform(o), e.renderDragSourceEffect(t), o.restore(), r = !0), s && (o.save(), s.transform(o), s.renderDropTargetEffect(t), o.restore(), r = !0), o.restore(), r && (this.contextTopDirty = !0);\n    }\n    _onDragEnd(t) {\n        const e = !!t.dataTransfer && t.dataTransfer.dropEffect !== pt, s = e ? this._activeObject : void 0, r = {\n            e: t,\n            target: this._dragSource,\n            subTargets: this.targets,\n            dragSource: this._dragSource,\n            didDrop: e,\n            dropTarget: s\n        };\n        xt(this.upperCanvasEl, \"drag\", this._onDragProgress), this.fire(\"dragend\", r), this._dragSource && this._dragSource.fire(\"dragend\", r), delete this._dragSource, this._onMouseUp(t);\n    }\n    _onDragProgress(t) {\n        const e = {\n            e: t,\n            target: this._dragSource,\n            dragSource: this._dragSource,\n            dropTarget: this._draggedoverTarget\n        };\n        this.fire(\"drag\", e), this._dragSource && this._dragSource.fire(\"drag\", e);\n    }\n    findDragTargets(t) {\n        return this.targets = [], {\n            target: this._searchPossibleTargets(this._objects, this.getViewportPoint(t)),\n            targets: [\n                ...this.targets\n            ]\n        };\n    }\n    _onDragOver(t) {\n        const e = \"dragover\", { target: s, targets: r } = this.findDragTargets(t), n = this._dragSource, o = {\n            e: t,\n            target: s,\n            subTargets: r,\n            dragSource: n,\n            canDrop: !1,\n            dropTarget: void 0\n        };\n        let a;\n        this.fire(e, o), this._fireEnterLeaveEvents(s, o), s && (s.canDrop(t) && (a = s), s.fire(e, o));\n        for(let c = 0; c < r.length; c++){\n            const l = r[c];\n            l.canDrop(t) && (a = l), l.fire(e, o);\n        }\n        this._renderDragEffects(t, n, a), this._dropTarget = a;\n    }\n    _onDragEnter(t) {\n        const { target: e, targets: s } = this.findDragTargets(t), r = {\n            e: t,\n            target: e,\n            subTargets: s,\n            dragSource: this._dragSource\n        };\n        this.fire(\"dragenter\", r), this._fireEnterLeaveEvents(e, r);\n    }\n    _onDragLeave(t) {\n        const e = {\n            e: t,\n            target: this._draggedoverTarget,\n            subTargets: this.targets,\n            dragSource: this._dragSource\n        };\n        this.fire(\"dragleave\", e), this._fireEnterLeaveEvents(void 0, e), this._renderDragEffects(t, this._dragSource), this._dropTarget = void 0, this.targets = [], this._hoveredTargets = [];\n    }\n    _onDrop(t) {\n        const { target: e, targets: s } = this.findDragTargets(t), r = this._basicEventHandler(\"drop:before\", v({\n            e: t,\n            target: e,\n            subTargets: s,\n            dragSource: this._dragSource\n        }, Ke(this, t)));\n        r.didDrop = !1, r.dropTarget = void 0, this._basicEventHandler(\"drop\", r), this.fire(\"drop:after\", r);\n    }\n    _onContextMenu(t) {\n        const e = this.findTarget(t), s = this.targets || [], r = this._basicEventHandler(\"contextmenu:before\", {\n            e: t,\n            target: e,\n            subTargets: s\n        });\n        return this.stopContextMenu && on(t), this._basicEventHandler(\"contextmenu\", r), !1;\n    }\n    _onDoubleClick(t) {\n        this._cacheTransformEventData(t), this._handleEvent(t, \"dblclick\"), this._resetTransformEventData();\n    }\n    getPointerId(t) {\n        const e = t.changedTouches;\n        return e ? e[0] && e[0].identifier : this.enablePointerEvents ? t.pointerId : -1;\n    }\n    _isMainEvent(t) {\n        return t.isPrimary === !0 || t.isPrimary !== !1 && (t.type === \"touchend\" && t.touches.length === 0 || !t.changedTouches || t.changedTouches[0].identifier === this.mainTouchId);\n    }\n    _onTouchStart(t) {\n        let e = !this.allowTouchScrolling;\n        const s = this._activeObject;\n        this.mainTouchId === void 0 && (this.mainTouchId = this.getPointerId(t)), this.__onMouseDown(t), (this.isDrawingMode || s && this._target === s) && (e = !0), e && t.preventDefault(), this._resetTransformEventData();\n        const r = this.upperCanvasEl, n = this._getEventPrefix(), o = At(r);\n        be(o, \"touchend\", this._onTouchEnd, bt), e && be(o, \"touchmove\", this._onMouseMove, bt), xt(r, \"\".concat(n, \"down\"), this._onMouseDown);\n    }\n    _onMouseDown(t) {\n        this.__onMouseDown(t), this._resetTransformEventData();\n        const e = this.upperCanvasEl, s = this._getEventPrefix();\n        xt(e, \"\".concat(s, \"move\"), this._onMouseMove, bt);\n        const r = At(e);\n        be(r, \"\".concat(s, \"up\"), this._onMouseUp), be(r, \"\".concat(s, \"move\"), this._onMouseMove, bt);\n    }\n    _onTouchEnd(t) {\n        if (t.touches.length > 0) return;\n        this.__onMouseUp(t), this._resetTransformEventData(), delete this.mainTouchId;\n        const e = this._getEventPrefix(), s = At(this.upperCanvasEl);\n        xt(s, \"touchend\", this._onTouchEnd, bt), xt(s, \"touchmove\", this._onMouseMove, bt), this._willAddMouseDown && clearTimeout(this._willAddMouseDown), this._willAddMouseDown = setTimeout(()=>{\n            be(this.upperCanvasEl, \"\".concat(e, \"down\"), this._onMouseDown), this._willAddMouseDown = 0;\n        }, 400);\n    }\n    _onMouseUp(t) {\n        this.__onMouseUp(t), this._resetTransformEventData();\n        const e = this.upperCanvasEl, s = this._getEventPrefix();\n        if (this._isMainEvent(t)) {\n            const r = At(this.upperCanvasEl);\n            xt(r, \"\".concat(s, \"up\"), this._onMouseUp), xt(r, \"\".concat(s, \"move\"), this._onMouseMove, bt), be(e, \"\".concat(s, \"move\"), this._onMouseMove, bt);\n        }\n    }\n    _onMouseMove(t) {\n        const e = this.getActiveObject();\n        !this.allowTouchScrolling && (!e || !e.shouldStartDragging(t)) && t.preventDefault && t.preventDefault(), this.__onMouseMove(t);\n    }\n    _onResize() {\n        this.calcOffset(), this._resetTransformEventData();\n    }\n    _shouldRender(t) {\n        const e = this.getActiveObject();\n        return !!e != !!t || e && t && e !== t;\n    }\n    __onMouseUp(t) {\n        var e;\n        this._cacheTransformEventData(t), this._handleEvent(t, \"up:before\");\n        const s = this._currentTransform, r = this._isClick, n = this._target, { button: o } = t;\n        if (o) return (this.fireMiddleClick && o === 1 || this.fireRightClick && o === 2) && this._handleEvent(t, \"up\"), void this._resetTransformEventData();\n        if (this.isDrawingMode && this._isCurrentlyDrawing) return void this._onMouseUpInDrawingMode(t);\n        if (!this._isMainEvent(t)) return;\n        let a, c, l = !1;\n        if (s && (this._finalizeCurrentTransform(t), l = s.actionPerformed), !r) {\n            const h = n === this._activeObject;\n            this.handleSelection(t), l || (l = this._shouldRender(n) || !h && n === this._activeObject);\n        }\n        if (n) {\n            const h = n.findControl(this.getViewportPoint(t), Kr(t)), { key: u, control: d } = h || {};\n            if (c = u, n.selectable && n !== this._activeObject && n.activeOn === \"up\") this.setActiveObject(n, t), l = !0;\n            else if (d) {\n                const f = d.getMouseUpHandler(t, n, d);\n                f && (a = this.getScenePoint(t), f.call(d, t, s, a.x, a.y));\n            }\n            n.isMoving = !1;\n        }\n        if (s && (s.target !== n || s.corner !== c)) {\n            const h = s.target && s.target.controls[s.corner], u = h && h.getMouseUpHandler(t, s.target, h);\n            a = a || this.getScenePoint(t), u && u.call(h, t, s, a.x, a.y);\n        }\n        this._setCursorFromEvent(t, n), this._handleEvent(t, \"up\"), this._groupSelector = null, this._currentTransform = null, n && (n.__corner = void 0), l ? this.requestRenderAll() : r || (e = this._activeObject) !== null && e !== void 0 && e.isEditing || this.renderTop();\n    }\n    _basicEventHandler(t, e) {\n        const { target: s, subTargets: r = [] } = e;\n        this.fire(t, e), s && s.fire(t, e);\n        for(let n = 0; n < r.length; n++)r[n] !== s && r[n].fire(t, e);\n        return e;\n    }\n    _handleEvent(t, e) {\n        const s = this._target, r = this.targets || [], n = v(v({\n            e: t,\n            target: s,\n            subTargets: r\n        }, Ke(this, t)), {}, {\n            transform: this._currentTransform\n        }, e === \"up:before\" || e === \"up\" ? {\n            isClick: this._isClick,\n            currentTarget: this.findTarget(t),\n            currentSubTargets: this.targets\n        } : {});\n        this.fire(\"mouse:\".concat(e), n), s && s.fire(\"mouse\".concat(e), n);\n        for(let o = 0; o < r.length; o++)r[o] !== s && r[o].fire(\"mouse\".concat(e), n);\n    }\n    _onMouseDownInDrawingMode(t) {\n        this._isCurrentlyDrawing = !0, this.getActiveObject() && (this.discardActiveObject(t), this.requestRenderAll());\n        const e = this.getScenePoint(t);\n        this.freeDrawingBrush && this.freeDrawingBrush.onMouseDown(e, {\n            e: t,\n            pointer: e\n        }), this._handleEvent(t, \"down\");\n    }\n    _onMouseMoveInDrawingMode(t) {\n        if (this._isCurrentlyDrawing) {\n            const e = this.getScenePoint(t);\n            this.freeDrawingBrush && this.freeDrawingBrush.onMouseMove(e, {\n                e: t,\n                pointer: e\n            });\n        }\n        this.setCursor(this.freeDrawingCursor), this._handleEvent(t, \"move\");\n    }\n    _onMouseUpInDrawingMode(t) {\n        const e = this.getScenePoint(t);\n        this.freeDrawingBrush ? this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n            e: t,\n            pointer: e\n        }) : this._isCurrentlyDrawing = !1, this._handleEvent(t, \"up\");\n    }\n    __onMouseDown(t) {\n        this._isClick = !0, this._cacheTransformEventData(t), this._handleEvent(t, \"down:before\");\n        let e = this._target;\n        const { button: s } = t;\n        if (s) return (this.fireMiddleClick && s === 1 || this.fireRightClick && s === 2) && this._handleEvent(t, \"down\"), void this._resetTransformEventData();\n        if (this.isDrawingMode) return void this._onMouseDownInDrawingMode(t);\n        if (!this._isMainEvent(t) || this._currentTransform) return;\n        let r = this._shouldRender(e), n = !1;\n        if (this.handleMultiSelection(t, e) ? (e = this._activeObject, n = !0, r = !0) : this._shouldClearSelection(t, e) && this.discardActiveObject(t), this.selection && (!e || !e.selectable && !e.isEditing && e !== this._activeObject)) {\n            const o = this.getScenePoint(t);\n            this._groupSelector = {\n                x: o.x,\n                y: o.y,\n                deltaY: 0,\n                deltaX: 0\n            };\n        }\n        if (e) {\n            const o = e === this._activeObject;\n            e.selectable && e.activeOn === \"down\" && this.setActiveObject(e, t);\n            const a = e.findControl(this.getViewportPoint(t), Kr(t));\n            if (e === this._activeObject && (a || !n)) {\n                this._setupCurrentTransform(t, e, o);\n                const c = a ? a.control : void 0, l = this.getScenePoint(t), h = c && c.getMouseDownHandler(t, e, c);\n                h && h.call(c, t, this._currentTransform, l.x, l.y);\n            }\n        }\n        r && (this._objectsToRender = void 0), this._handleEvent(t, \"down\"), r && this.requestRenderAll();\n    }\n    _resetTransformEventData() {\n        this._target = this._pointer = this._absolutePointer = void 0;\n    }\n    _cacheTransformEventData(t) {\n        this._resetTransformEventData(), this._pointer = this.getViewportPoint(t), this._absolutePointer = ae(this._pointer, void 0, this.viewportTransform), this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(t);\n    }\n    __onMouseMove(t) {\n        if (this._isClick = !1, this._cacheTransformEventData(t), this._handleEvent(t, \"move:before\"), this.isDrawingMode) return void this._onMouseMoveInDrawingMode(t);\n        if (!this._isMainEvent(t)) return;\n        const e = this._groupSelector;\n        if (e) {\n            const s = this.getScenePoint(t);\n            e.deltaX = s.x - e.x, e.deltaY = s.y - e.y, this.renderTop();\n        } else if (this._currentTransform) this._transformObject(t);\n        else {\n            const s = this.findTarget(t);\n            this._setCursorFromEvent(t, s), this._fireOverOutEvents(t, s);\n        }\n        this.textEditingManager.onMouseMove(t), this._handleEvent(t, \"move\"), this._resetTransformEventData();\n    }\n    _fireOverOutEvents(t, e) {\n        const s = this._hoveredTarget, r = this._hoveredTargets, n = this.targets, o = Math.max(r.length, n.length);\n        this.fireSyntheticInOutEvents(\"mouse\", {\n            e: t,\n            target: e,\n            oldTarget: s,\n            fireCanvas: !0\n        });\n        for(let a = 0; a < o; a++)this.fireSyntheticInOutEvents(\"mouse\", {\n            e: t,\n            target: n[a],\n            oldTarget: r[a]\n        });\n        this._hoveredTarget = e, this._hoveredTargets = this.targets.concat();\n    }\n    _fireEnterLeaveEvents(t, e) {\n        const s = this._draggedoverTarget, r = this._hoveredTargets, n = this.targets, o = Math.max(r.length, n.length);\n        this.fireSyntheticInOutEvents(\"drag\", v(v({}, e), {}, {\n            target: t,\n            oldTarget: s,\n            fireCanvas: !0\n        }));\n        for(let a = 0; a < o; a++)this.fireSyntheticInOutEvents(\"drag\", v(v({}, e), {}, {\n            target: n[a],\n            oldTarget: r[a]\n        }));\n        this._draggedoverTarget = t;\n    }\n    fireSyntheticInOutEvents(t, e) {\n        let { target: s, oldTarget: r, fireCanvas: n, e: o } = e, a = G(e, nd);\n        const { targetIn: c, targetOut: l, canvasIn: h, canvasOut: u } = od[t], d = r !== s;\n        if (r && d) {\n            const f = v(v({}, a), {}, {\n                e: o,\n                target: r,\n                nextTarget: s\n            }, Ke(this, o));\n            n && this.fire(u, f), r.fire(l, f);\n        }\n        if (s && d) {\n            const f = v(v({}, a), {}, {\n                e: o,\n                target: s,\n                previousTarget: r\n            }, Ke(this, o));\n            n && this.fire(h, f), s.fire(c, f);\n        }\n    }\n    __onMouseWheel(t) {\n        this._cacheTransformEventData(t), this._handleEvent(t, \"wheel\"), this._resetTransformEventData();\n    }\n    _transformObject(t) {\n        const e = this.getScenePoint(t), s = this._currentTransform, r = s.target, n = r.group ? ae(e, void 0, r.group.calcTransformMatrix()) : e;\n        s.shiftKey = t.shiftKey, s.altKey = !!this.centeredKey && t[this.centeredKey], this._performTransformAction(t, s, n), s.actionPerformed && this.requestRenderAll();\n    }\n    _performTransformAction(t, e, s) {\n        const { action: r, actionHandler: n, target: o } = e, a = !!n && n(t, e, s.x, s.y);\n        a && o.setCoords(), r === \"drag\" && a && (e.target.isMoving = !0, this.setCursor(e.target.moveCursor || this.moveCursor)), e.actionPerformed = e.actionPerformed || a;\n    }\n    _setCursorFromEvent(t, e) {\n        if (!e) return void this.setCursor(this.defaultCursor);\n        let s = e.hoverCursor || this.hoverCursor;\n        const r = Pe(this._activeObject) ? this._activeObject : null, n = (!r || e.group !== r) && e.findControl(this.getViewportPoint(t));\n        if (n) {\n            const o = n.control;\n            this.setCursor(o.cursorStyleHandler(t, o, e));\n        } else e.subTargetCheck && this.targets.concat().reverse().map((o)=>{\n            s = o.hoverCursor || s;\n        }), this.setCursor(s);\n    }\n    handleMultiSelection(t, e) {\n        const s = this._activeObject, r = Pe(s);\n        if (s && this._isSelectionKeyPressed(t) && this.selection && e && e.selectable && (s !== e || r) && (r || !e.isDescendantOf(s) && !s.isDescendantOf(e)) && !e.onSelect({\n            e: t\n        }) && !s.getActiveControl()) {\n            if (r) {\n                const n = s.getObjects();\n                if (e === s) {\n                    const o = this.getViewportPoint(t);\n                    if (!(e = this.searchPossibleTargets(n, o) || this.searchPossibleTargets(this._objects, o)) || !e.selectable) return !1;\n                }\n                e.group === s ? (s.remove(e), this._hoveredTarget = e, this._hoveredTargets = [\n                    ...this.targets\n                ], s.size() === 1 && this._setActiveObject(s.item(0), t)) : (s.multiSelectAdd(e), this._hoveredTarget = s, this._hoveredTargets = [\n                    ...this.targets\n                ]), this._fireSelectionEvents(n, t);\n            } else {\n                s.isEditing && s.exitEditing();\n                const n = new (C.getClass(\"ActiveSelection\"))([], {\n                    canvas: this\n                });\n                n.multiSelectAdd(s, e), this._hoveredTarget = n, this._setActiveObject(n, t), this._fireSelectionEvents([\n                    s\n                ], t);\n            }\n            return !0;\n        }\n        return !1;\n    }\n    handleSelection(t) {\n        if (!this.selection || !this._groupSelector) return !1;\n        const { x: e, y: s, deltaX: r, deltaY: n } = this._groupSelector, o = new _(e, s), a = o.add(new _(r, n)), c = o.min(a), l = o.max(a).subtract(c), h = this.collectObjects({\n            left: c.x,\n            top: c.y,\n            width: l.x,\n            height: l.y\n        }, {\n            includeIntersecting: !this.selectionFullyContained\n        }), u = o.eq(a) ? h[0] ? [\n            h[0]\n        ] : [] : h.length > 1 ? h.filter((d)=>!d.onSelect({\n                e: t\n            })).reverse() : h;\n        if (u.length === 1) this.setActiveObject(u[0], t);\n        else if (u.length > 1) {\n            const d = C.getClass(\"ActiveSelection\");\n            this.setActiveObject(new d(u, {\n                canvas: this\n            }), t);\n        }\n        return this._groupSelector = null, !0;\n    }\n    clear() {\n        this.textEditingManager.clear(), super.clear();\n    }\n    destroy() {\n        this.removeListeners(), this.textEditingManager.dispose(), super.destroy();\n    }\n}\nconst Uc = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n}, ad = v(v({}, Uc), {}, {\n    r1: 0,\n    r2: 0\n}), Qe = (i, t)=>isNaN(i) && typeof t == \"number\" ? t : i, cd = /^(\\d+\\.\\d+)%|(\\d+)%$/;\nfunction $c(i) {\n    return i && cd.test(i);\n}\nfunction qc(i, t) {\n    const e = typeof i == \"number\" ? i : typeof i == \"string\" ? parseFloat(i) / ($c(i) ? 100 : 1) : NaN;\n    return ze(0, Qe(e, t), 1);\n}\nconst ld = /\\s*;\\s*/, hd = /\\s*:\\s*/;\nfunction ud(i, t) {\n    let e, s;\n    const r = i.getAttribute(\"style\");\n    if (r) {\n        const o = r.split(ld);\n        o[o.length - 1] === \"\" && o.pop();\n        for(let a = o.length; a--;){\n            const [c, l] = o[a].split(hd).map((h)=>h.trim());\n            c === \"stop-color\" ? e = l : c === \"stop-opacity\" && (s = l);\n        }\n    }\n    const n = new W(e || i.getAttribute(\"stop-color\") || \"rgb(0,0,0)\");\n    return {\n        offset: qc(i.getAttribute(\"offset\"), 0),\n        color: n.toRgb(),\n        opacity: Qe(parseFloat(s || i.getAttribute(\"stop-opacity\") || \"\"), 1) * n.getAlpha() * t\n    };\n}\nfunction dd(i, t) {\n    const e = [], s = i.getElementsByTagName(\"stop\"), r = qc(t, 1);\n    for(let n = s.length; n--;)e.push(ud(s[n], r));\n    return e;\n}\nfunction Kc(i) {\n    return i.nodeName === \"linearGradient\" || i.nodeName === \"LINEARGRADIENT\" ? \"linear\" : \"radial\";\n}\nfunction Jc(i) {\n    return i.getAttribute(\"gradientUnits\") === \"userSpaceOnUse\" ? \"pixels\" : \"percentage\";\n}\nfunction jt(i, t) {\n    return i.getAttribute(t);\n}\nfunction fd(i, t) {\n    return function(e, s) {\n        let r, { width: n, height: o, gradientUnits: a } = s;\n        return Object.keys(e).reduce((c, l)=>{\n            const h = e[l];\n            return h === \"Infinity\" ? r = 1 : h === \"-Infinity\" ? r = 0 : (r = typeof h == \"string\" ? parseFloat(h) : h, typeof h == \"string\" && $c(h) && (r *= 0.01, a === \"pixels\" && (l !== \"x1\" && l !== \"x2\" && l !== \"r2\" || (r *= n), l !== \"y1\" && l !== \"y2\" || (r *= o)))), c[l] = r, c;\n        }, {});\n    }(Kc(i) === \"linear\" ? function(e) {\n        return {\n            x1: jt(e, \"x1\") || 0,\n            y1: jt(e, \"y1\") || 0,\n            x2: jt(e, \"x2\") || \"100%\",\n            y2: jt(e, \"y2\") || 0\n        };\n    }(i) : function(e) {\n        return {\n            x1: jt(e, \"fx\") || jt(e, \"cx\") || \"50%\",\n            y1: jt(e, \"fy\") || jt(e, \"cy\") || \"50%\",\n            r1: 0,\n            x2: jt(e, \"cx\") || \"50%\",\n            y2: jt(e, \"cy\") || \"50%\",\n            r2: jt(e, \"r\") || \"50%\"\n        };\n    }(i), v(v({}, t), {}, {\n        gradientUnits: Jc(i)\n    }));\n}\nclass yr {\n    constructor(t){\n        const { type: e = \"linear\", gradientUnits: s = \"pixels\", coords: r = {}, colorStops: n = [], offsetX: o = 0, offsetY: a = 0, gradientTransform: c, id: l } = t || {};\n        Object.assign(this, {\n            type: e,\n            gradientUnits: s,\n            coords: v(v({}, e === \"radial\" ? ad : Uc), r),\n            colorStops: n,\n            offsetX: o,\n            offsetY: a,\n            gradientTransform: c,\n            id: l ? \"\".concat(l, \"_\").concat(we()) : we()\n        });\n    }\n    addColorStop(t) {\n        for(const e in t){\n            const s = new W(t[e]);\n            this.colorStops.push({\n                offset: parseFloat(e),\n                color: s.toRgb(),\n                opacity: s.getAlpha()\n            });\n        }\n        return this;\n    }\n    toObject(t) {\n        return v(v({}, Ve(this, t)), {}, {\n            type: this.type,\n            coords: v({}, this.coords),\n            colorStops: this.colorStops.map((e)=>v({}, e)),\n            offsetX: this.offsetX,\n            offsetY: this.offsetY,\n            gradientUnits: this.gradientUnits,\n            gradientTransform: this.gradientTransform ? [\n                ...this.gradientTransform\n            ] : void 0\n        });\n    }\n    toSVG(t) {\n        let { additionalTransform: e } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const s = [], r = this.gradientTransform ? this.gradientTransform.concat() : ht.concat(), n = this.gradientUnits === \"pixels\" ? \"userSpaceOnUse\" : \"objectBoundingBox\", o = this.colorStops.map((u)=>v({}, u)).sort((u, d)=>u.offset - d.offset);\n        let a = -this.offsetX, c = -this.offsetY;\n        var l;\n        n === \"objectBoundingBox\" ? (a /= t.width, c /= t.height) : (a += t.width / 2, c += t.height / 2), (l = t) && typeof l._renderPathCommands == \"function\" && this.gradientUnits !== \"percentage\" && (a -= t.pathOffset.x, c -= t.pathOffset.y), r[4] -= a, r[5] -= c;\n        const h = [\n            'id=\"SVGID_'.concat(this.id, '\"'),\n            'gradientUnits=\"'.concat(n, '\"'),\n            'gradientTransform=\"'.concat(e ? e + \" \" : \"\").concat(qs(r), '\"'),\n            \"\"\n        ].join(\" \");\n        if (this.type === \"linear\") {\n            const { x1: u, y1: d, x2: f, y2: g } = this.coords;\n            s.push(\"<linearGradient \", h, ' x1=\"', u, '\" y1=\"', d, '\" x2=\"', f, '\" y2=\"', g, `\">\n`);\n        } else if (this.type === \"radial\") {\n            const { x1: u, y1: d, x2: f, y2: g, r1: p, r2: m } = this.coords, b = p > m;\n            s.push(\"<radialGradient \", h, ' cx=\"', b ? u : f, '\" cy=\"', b ? d : g, '\" r=\"', b ? p : m, '\" fx=\"', b ? f : u, '\" fy=\"', b ? g : d, `\">\n`), b && (o.reverse(), o.forEach((w)=>{\n                w.offset = 1 - w.offset;\n            }));\n            const S = Math.min(p, m);\n            if (S > 0) {\n                const w = S / Math.max(p, m);\n                o.forEach((k)=>{\n                    k.offset += w * (1 - k.offset);\n                });\n            }\n        }\n        return o.forEach((u)=>{\n            let { color: d, offset: f, opacity: g } = u;\n            s.push(\"<stop \", 'offset=\"', 100 * f + \"%\", '\" style=\"stop-color:', d, g !== void 0 ? \";stop-opacity: \" + g : \";\", `\"/>\n`);\n        }), s.push(this.type === \"linear\" ? \"</linearGradient>\" : \"</radialGradient>\", `\n`), s.join(\"\");\n    }\n    toLive(t) {\n        const { x1: e, y1: s, x2: r, y2: n, r1: o, r2: a } = this.coords, c = this.type === \"linear\" ? t.createLinearGradient(e, s, r, n) : t.createRadialGradient(e, s, o, r, n, a);\n        return this.colorStops.forEach((l)=>{\n            let { color: h, opacity: u, offset: d } = l;\n            c.addColorStop(d, u !== void 0 ? new W(h).setAlpha(u).toRgba() : h);\n        }), c;\n    }\n    static async fromObject(t) {\n        const { colorStops: e, gradientTransform: s } = t;\n        return new this(v(v({}, t), {}, {\n            colorStops: e ? e.map((r)=>v({}, r)) : void 0,\n            gradientTransform: s ? [\n                ...s\n            ] : void 0\n        }));\n    }\n    static fromElement(t, e, s) {\n        const r = Jc(t), n = e._findCenterFromElement();\n        return new this(v({\n            id: t.getAttribute(\"id\") || void 0,\n            type: Kc(t),\n            coords: fd(t, {\n                width: s.viewBoxWidth || s.width,\n                height: s.viewBoxHeight || s.height\n            }),\n            colorStops: dd(t, s.opacity),\n            gradientUnits: r,\n            gradientTransform: fn(t.getAttribute(\"gradientTransform\") || \"\")\n        }, r === \"pixels\" ? {\n            offsetX: e.width / 2 - n.x,\n            offsetY: e.height / 2 - n.y\n        } : {\n            offsetX: 0,\n            offsetY: 0\n        }));\n    }\n}\ny(yr, \"type\", \"Gradient\"), C.setClass(yr, \"gradient\"), C.setClass(yr, \"linear\"), C.setClass(yr, \"radial\");\nconst gd = [\n    \"type\",\n    \"source\",\n    \"patternTransform\"\n];\nclass Yi {\n    get type() {\n        return \"pattern\";\n    }\n    set type(t) {\n        Te(\"warn\", \"Setting type has no effect\", t);\n    }\n    constructor(t){\n        y(this, \"repeat\", \"repeat\"), y(this, \"offsetX\", 0), y(this, \"offsetY\", 0), y(this, \"crossOrigin\", \"\"), this.id = we(), Object.assign(this, t);\n    }\n    isImageSource() {\n        return !!this.source && typeof this.source.src == \"string\";\n    }\n    isCanvasSource() {\n        return !!this.source && !!this.source.toDataURL;\n    }\n    sourceToString() {\n        return this.isImageSource() ? this.source.src : this.isCanvasSource() ? this.source.toDataURL() : \"\";\n    }\n    toLive(t) {\n        return this.source && (!this.isImageSource() || this.source.complete && this.source.naturalWidth !== 0 && this.source.naturalHeight !== 0) ? t.createPattern(this.source, this.repeat) : null;\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        const { repeat: e, crossOrigin: s } = this;\n        return v(v({}, Ve(this, t)), {}, {\n            type: \"pattern\",\n            source: this.sourceToString(),\n            repeat: e,\n            crossOrigin: s,\n            offsetX: V(this.offsetX, A.NUM_FRACTION_DIGITS),\n            offsetY: V(this.offsetY, A.NUM_FRACTION_DIGITS),\n            patternTransform: this.patternTransform ? [\n                ...this.patternTransform\n            ] : null\n        });\n    }\n    toSVG(t) {\n        let { width: e, height: s } = t;\n        const { source: r, repeat: n, id: o } = this, a = Qe(this.offsetX / e, 0), c = Qe(this.offsetY / s, 0), l = n === \"repeat-y\" || n === \"no-repeat\" ? 1 + Math.abs(a || 0) : Qe(r.width / e, 0), h = n === \"repeat-x\" || n === \"no-repeat\" ? 1 + Math.abs(c || 0) : Qe(r.height / s, 0);\n        return [\n            '<pattern id=\"SVGID_'.concat(o, '\" x=\"').concat(a, '\" y=\"').concat(c, '\" width=\"').concat(l, '\" height=\"').concat(h, '\">'),\n            '<image x=\"0\" y=\"0\" width=\"'.concat(r.width, '\" height=\"').concat(r.height, '\" xlink:href=\"').concat(this.sourceToString(), '\"></image>'),\n            \"</pattern>\",\n            \"\"\n        ].join(`\n`);\n    }\n    static async fromObject(t, e) {\n        let { type: s, source: r, patternTransform: n } = t, o = G(t, gd);\n        const a = await Ys(r, v(v({}, e), {}, {\n            crossOrigin: o.crossOrigin\n        }));\n        return new this(v(v({}, o), {}, {\n            patternTransform: n && n.slice(0),\n            source: a\n        }));\n    }\n}\ny(Yi, \"type\", \"Pattern\"), C.setClass(Yi), C.setClass(Yi, \"pattern\");\nconst pd = [\n    \"path\",\n    \"left\",\n    \"top\"\n], md = [\n    \"d\"\n];\nclass Ae extends nt {\n    constructor(t){\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, { path: s, left: r, top: n } = e, o = G(e, pd);\n        super(), Object.assign(this, Ae.ownDefaults), this.setOptions(o), this._setPath(t || [], !0), typeof r == \"number\" && this.set(L, r), typeof n == \"number\" && this.set(gt, n);\n    }\n    _setPath(t, e) {\n        this.path = Wc(Array.isArray(t) ? t : Gc(t)), this.setBoundingBox(e);\n    }\n    _findCenterFromElement() {\n        const t = this._calcBoundsFromPath();\n        return new _(t.left + t.width / 2, t.top + t.height / 2);\n    }\n    _renderPathCommands(t) {\n        const e = -this.pathOffset.x, s = -this.pathOffset.y;\n        t.beginPath();\n        for (const r of this.path)switch(r[0]){\n            case \"L\":\n                t.lineTo(r[1] + e, r[2] + s);\n                break;\n            case \"M\":\n                t.moveTo(r[1] + e, r[2] + s);\n                break;\n            case \"C\":\n                t.bezierCurveTo(r[1] + e, r[2] + s, r[3] + e, r[4] + s, r[5] + e, r[6] + s);\n                break;\n            case \"Q\":\n                t.quadraticCurveTo(r[1] + e, r[2] + s, r[3] + e, r[4] + s);\n                break;\n            case \"Z\":\n                t.closePath();\n        }\n    }\n    _render(t) {\n        this._renderPathCommands(t), this._renderPaintInOrder(t);\n    }\n    toString() {\n        return \"#<Path (\".concat(this.complexity(), '): { \"top\": ').concat(this.top, ', \"left\": ').concat(this.left, \" }>\");\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return v(v({}, super.toObject(t)), {}, {\n            path: this.path.map((e)=>e.slice())\n        });\n    }\n    toDatalessObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        const e = this.toObject(t);\n        return this.sourcePath && (delete e.path, e.sourcePath = this.sourcePath), e;\n    }\n    _toSVG() {\n        const t = Nc(this.path, A.NUM_FRACTION_DIGITS);\n        return [\n            \"<path \",\n            \"COMMON_PARTS\",\n            'd=\"'.concat(t, `\" stroke-linecap=\"round\" />\n`)\n        ];\n    }\n    _getOffsetTransform() {\n        const t = A.NUM_FRACTION_DIGITS;\n        return \" translate(\".concat(V(-this.pathOffset.x, t), \", \").concat(V(-this.pathOffset.y, t), \")\");\n    }\n    toClipPathSVG(t) {\n        const e = this._getOffsetTransform();\n        return \"\t\" + this._createBaseClipPathSVGMarkup(this._toSVG(), {\n            reviver: t,\n            additionalTransform: e\n        });\n    }\n    toSVG(t) {\n        const e = this._getOffsetTransform();\n        return this._createBaseSVGMarkup(this._toSVG(), {\n            reviver: t,\n            additionalTransform: e\n        });\n    }\n    complexity() {\n        return this.path.length;\n    }\n    setDimensions() {\n        this.setBoundingBox();\n    }\n    setBoundingBox(t) {\n        const { width: e, height: s, pathOffset: r } = this._calcDimensions();\n        this.set({\n            width: e,\n            height: s,\n            pathOffset: r\n        }), t && this.setPositionByOrigin(r, j, j);\n    }\n    _calcBoundsFromPath() {\n        const t = [];\n        let e = 0, s = 0, r = 0, n = 0;\n        for (const o of this.path)switch(o[0]){\n            case \"L\":\n                r = o[1], n = o[2], t.push({\n                    x: e,\n                    y: s\n                }, {\n                    x: r,\n                    y: n\n                });\n                break;\n            case \"M\":\n                r = o[1], n = o[2], e = r, s = n;\n                break;\n            case \"C\":\n                t.push(...mn(r, n, o[1], o[2], o[3], o[4], o[5], o[6])), r = o[5], n = o[6];\n                break;\n            case \"Q\":\n                t.push(...mn(r, n, o[1], o[2], o[1], o[2], o[3], o[4])), r = o[3], n = o[4];\n                break;\n            case \"Z\":\n                r = e, n = s;\n        }\n        return Gt(t);\n    }\n    _calcDimensions() {\n        const t = this._calcBoundsFromPath();\n        return v(v({}, t), {}, {\n            pathOffset: new _(t.left + t.width / 2, t.top + t.height / 2)\n        });\n    }\n    static fromObject(t) {\n        return this._fromObject(t, {\n            extraParam: \"path\"\n        });\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, this.ATTRIBUTE_NAMES, s), { d: n } = r;\n        return new this(n, v(v(v({}, G(r, md)), e), {}, {\n            left: void 0,\n            top: void 0\n        }));\n    }\n}\ny(Ae, \"type\", \"Path\"), y(Ae, \"cacheProperties\", [\n    ...de,\n    \"path\",\n    \"fillRule\"\n]), y(Ae, \"ATTRIBUTE_NAMES\", [\n    ...De,\n    \"d\"\n]), C.setClass(Ae), C.setSVGClass(Ae);\nconst vd = [\n    \"left\",\n    \"top\",\n    \"radius\"\n], Zc = [\n    \"radius\",\n    \"startAngle\",\n    \"endAngle\",\n    \"counterClockwise\"\n];\nclass se extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), se.ownDefaults);\n    }\n    constructor(t){\n        super(), Object.assign(this, se.ownDefaults), this.setOptions(t);\n    }\n    _set(t, e) {\n        return super._set(t, e), t === \"radius\" && this.setRadius(e), this;\n    }\n    _render(t) {\n        t.beginPath(), t.arc(0, 0, this.radius, K(this.startAngle), K(this.endAngle), this.counterClockwise), this._renderPaintInOrder(t);\n    }\n    getRadiusX() {\n        return this.get(\"radius\") * this.get(ut);\n    }\n    getRadiusY() {\n        return this.get(\"radius\") * this.get(Tt);\n    }\n    setRadius(t) {\n        this.radius = t, this.set({\n            width: 2 * t,\n            height: 2 * t\n        });\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return super.toObject([\n            ...Zc,\n            ...t\n        ]);\n    }\n    _toSVG() {\n        const t = (this.endAngle - this.startAngle) % 360;\n        if (t === 0) return [\n            \"<circle \",\n            \"COMMON_PARTS\",\n            'cx=\"0\" cy=\"0\" ',\n            'r=\"',\n            \"\".concat(this.radius),\n            `\" />\n`\n        ];\n        {\n            const { radius: e } = this, s = K(this.startAngle), r = K(this.endAngle), n = Lt(s) * e, o = Bt(s) * e, a = Lt(r) * e, c = Bt(r) * e, l = t > 180 ? 1 : 0, h = this.counterClockwise ? 0 : 1;\n            return [\n                '<path d=\"M '.concat(n, \" \").concat(o, \" A \").concat(e, \" \").concat(e, \" 0 \").concat(l, \" \").concat(h, \" \").concat(a, \" \").concat(c, '\" '),\n                \"COMMON_PARTS\",\n                ` />\n`\n            ];\n        }\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, this.ATTRIBUTE_NAMES, s), { left: n = 0, top: o = 0, radius: a = 0 } = r;\n        return new this(v(v({}, G(r, vd)), {}, {\n            radius: a,\n            left: n - a,\n            top: o - a\n        }));\n    }\n    static fromObject(t) {\n        return super._fromObject(t);\n    }\n}\ny(se, \"type\", \"Circle\"), y(se, \"cacheProperties\", [\n    ...de,\n    ...Zc\n]), y(se, \"ownDefaults\", {\n    radius: 0,\n    startAngle: 0,\n    endAngle: 360,\n    counterClockwise: !1\n}), y(se, \"ATTRIBUTE_NAMES\", [\n    \"cx\",\n    \"cy\",\n    \"r\",\n    ...De\n]), C.setClass(se), C.setSVGClass(se);\nconst yd = [\n    \"x1\",\n    \"y1\",\n    \"x2\",\n    \"y2\"\n], bd = [\n    \"x1\",\n    \"y1\",\n    \"x2\",\n    \"y2\"\n], yn = [\n    \"x1\",\n    \"x2\",\n    \"y1\",\n    \"y2\"\n];\nclass Se extends nt {\n    constructor(){\n        let [t, e, s, r] = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            0,\n            0,\n            0,\n            0\n        ], n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(), Object.assign(this, Se.ownDefaults), this.setOptions(n), this.x1 = t, this.x2 = s, this.y1 = e, this.y2 = r, this._setWidthHeight();\n        const { left: o, top: a } = n;\n        typeof o == \"number\" && this.set(L, o), typeof a == \"number\" && this.set(gt, a);\n    }\n    _setWidthHeight() {\n        const { x1: t, y1: e, x2: s, y2: r } = this;\n        this.width = Math.abs(s - t), this.height = Math.abs(r - e);\n        const { left: n, top: o, width: a, height: c } = Gt([\n            {\n                x: t,\n                y: e\n            },\n            {\n                x: s,\n                y: r\n            }\n        ]), l = new _(n + a / 2, o + c / 2);\n        this.setPositionByOrigin(l, j, j);\n    }\n    _set(t, e) {\n        return super._set(t, e), yn.includes(t) && this._setWidthHeight(), this;\n    }\n    _render(t) {\n        t.beginPath();\n        const e = this.calcLinePoints();\n        t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.lineWidth = this.strokeWidth;\n        const s = t.strokeStyle;\n        var r;\n        Ct(this.stroke) ? t.strokeStyle = this.stroke.toLive(t) : t.strokeStyle = (r = this.stroke) !== null && r !== void 0 ? r : t.fillStyle, this.stroke && this._renderStroke(t), t.strokeStyle = s;\n    }\n    _findCenterFromElement() {\n        return new _((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return v(v({}, super.toObject(t)), this.calcLinePoints());\n    }\n    _getNonTransformedDimensions() {\n        const t = super._getNonTransformedDimensions();\n        return this.strokeLineCap === \"butt\" && (this.width === 0 && (t.y -= this.strokeWidth), this.height === 0 && (t.x -= this.strokeWidth)), t;\n    }\n    calcLinePoints() {\n        const { x1: t, x2: e, y1: s, y2: r, width: n, height: o } = this, a = t <= e ? -1 : 1, c = s <= r ? -1 : 1;\n        return {\n            x1: a * n / 2,\n            x2: a * -n / 2,\n            y1: c * o / 2,\n            y2: c * -o / 2\n        };\n    }\n    _toSVG() {\n        const { x1: t, x2: e, y1: s, y2: r } = this.calcLinePoints();\n        return [\n            \"<line \",\n            \"COMMON_PARTS\",\n            'x1=\"'.concat(t, '\" y1=\"').concat(s, '\" x2=\"').concat(e, '\" y2=\"').concat(r, `\" />\n`)\n        ];\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, this.ATTRIBUTE_NAMES, s), { x1: n = 0, y1: o = 0, x2: a = 0, y2: c = 0 } = r;\n        return new this([\n            n,\n            o,\n            a,\n            c\n        ], G(r, yd));\n    }\n    static fromObject(t) {\n        let { x1: e, y1: s, x2: r, y2: n } = t, o = G(t, bd);\n        return this._fromObject(v(v({}, o), {}, {\n            points: [\n                e,\n                s,\n                r,\n                n\n            ]\n        }), {\n            extraParam: \"points\"\n        });\n    }\n}\ny(Se, \"type\", \"Line\"), y(Se, \"cacheProperties\", [\n    ...de,\n    ...yn\n]), y(Se, \"ATTRIBUTE_NAMES\", De.concat(yn)), C.setClass(Se), C.setSVGClass(Se);\nclass Re extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Re.ownDefaults);\n    }\n    constructor(t){\n        super(), Object.assign(this, Re.ownDefaults), this.setOptions(t);\n    }\n    _render(t) {\n        const e = this.width / 2, s = this.height / 2;\n        t.beginPath(), t.moveTo(-e, s), t.lineTo(0, -s), t.lineTo(e, s), t.closePath(), this._renderPaintInOrder(t);\n    }\n    _toSVG() {\n        const t = this.width / 2, e = this.height / 2;\n        return [\n            \"<polygon \",\n            \"COMMON_PARTS\",\n            'points=\"',\n            \"\".concat(-t, \" \").concat(e, \",0 \").concat(-e, \",\").concat(t, \" \").concat(e),\n            '\" />'\n        ];\n    }\n}\ny(Re, \"type\", \"Triangle\"), y(Re, \"ownDefaults\", {\n    width: 100,\n    height: 100\n}), C.setClass(Re), C.setSVGClass(Re);\nconst Qc = [\n    \"rx\",\n    \"ry\"\n];\nclass re extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), re.ownDefaults);\n    }\n    constructor(t){\n        super(), Object.assign(this, re.ownDefaults), this.setOptions(t);\n    }\n    _set(t, e) {\n        switch(super._set(t, e), t){\n            case \"rx\":\n                this.rx = e, this.set(\"width\", 2 * e);\n                break;\n            case \"ry\":\n                this.ry = e, this.set(\"height\", 2 * e);\n        }\n        return this;\n    }\n    getRx() {\n        return this.get(\"rx\") * this.get(ut);\n    }\n    getRy() {\n        return this.get(\"ry\") * this.get(Tt);\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return super.toObject([\n            ...Qc,\n            ...t\n        ]);\n    }\n    _toSVG() {\n        return [\n            \"<ellipse \",\n            \"COMMON_PARTS\",\n            'cx=\"0\" cy=\"0\" rx=\"'.concat(this.rx, '\" ry=\"').concat(this.ry, `\" />\n`)\n        ];\n    }\n    _render(t) {\n        t.beginPath(), t.save(), t.transform(1, 0, 0, this.ry / this.rx, 0, 0), t.arc(0, 0, this.rx, 0, he, !1), t.restore(), this._renderPaintInOrder(t);\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, this.ATTRIBUTE_NAMES, s);\n        return r.left = (r.left || 0) - r.rx, r.top = (r.top || 0) - r.ry, new this(r);\n    }\n}\nfunction _d(i) {\n    if (!i) return [];\n    const t = i.replace(/,/g, \" \").trim().split(/\\s+/), e = [];\n    for(let s = 0; s < t.length; s += 2)e.push({\n        x: parseFloat(t[s]),\n        y: parseFloat(t[s + 1])\n    });\n    return e;\n}\ny(re, \"type\", \"Ellipse\"), y(re, \"cacheProperties\", [\n    ...de,\n    ...Qc\n]), y(re, \"ownDefaults\", {\n    rx: 0,\n    ry: 0\n}), y(re, \"ATTRIBUTE_NAMES\", [\n    ...De,\n    \"cx\",\n    \"cy\",\n    \"rx\",\n    \"ry\"\n]), C.setClass(re), C.setSVGClass(re);\nconst Sd = [\n    \"left\",\n    \"top\"\n], tl = {\n    exactBoundingBox: !1\n};\nclass Et extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Et.ownDefaults);\n    }\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(), y(this, \"strokeDiff\", void 0), Object.assign(this, Et.ownDefaults), this.setOptions(e), this.points = t;\n        const { left: s, top: r } = e;\n        this.initialized = !0, this.setBoundingBox(!0), typeof s == \"number\" && this.set(L, s), typeof r == \"number\" && this.set(gt, r);\n    }\n    isOpen() {\n        return !0;\n    }\n    _projectStrokeOnPoints(t) {\n        return Dc(this.points, t, this.isOpen());\n    }\n    _calcDimensions(t) {\n        t = v({\n            scaleX: this.scaleX,\n            scaleY: this.scaleY,\n            skewX: this.skewX,\n            skewY: this.skewY,\n            strokeLineCap: this.strokeLineCap,\n            strokeLineJoin: this.strokeLineJoin,\n            strokeMiterLimit: this.strokeMiterLimit,\n            strokeUniform: this.strokeUniform,\n            strokeWidth: this.strokeWidth\n        }, t || {});\n        const e = this.exactBoundingBox ? this._projectStrokeOnPoints(t).map((l)=>l.projectedPoint) : this.points;\n        if (e.length === 0) return {\n            left: 0,\n            top: 0,\n            width: 0,\n            height: 0,\n            pathOffset: new _(),\n            strokeOffset: new _(),\n            strokeDiff: new _()\n        };\n        const s = Gt(e), r = ar(v(v({}, t), {}, {\n            scaleX: 1,\n            scaleY: 1\n        })), n = Gt(this.points.map((l)=>ot(l, r, !0))), o = new _(this.scaleX, this.scaleY);\n        let a = s.left + s.width / 2, c = s.top + s.height / 2;\n        return this.exactBoundingBox && (a -= c * Math.tan(K(this.skewX)), c -= a * Math.tan(K(this.skewY))), v(v({}, s), {}, {\n            pathOffset: new _(a, c),\n            strokeOffset: new _(n.left, n.top).subtract(new _(s.left, s.top)).multiply(o),\n            strokeDiff: new _(s.width, s.height).subtract(new _(n.width, n.height)).multiply(o)\n        });\n    }\n    _findCenterFromElement() {\n        const t = Gt(this.points);\n        return new _(t.left + t.width / 2, t.top + t.height / 2);\n    }\n    setDimensions() {\n        this.setBoundingBox();\n    }\n    setBoundingBox(t) {\n        const { left: e, top: s, width: r, height: n, pathOffset: o, strokeOffset: a, strokeDiff: c } = this._calcDimensions();\n        this.set({\n            width: r,\n            height: n,\n            pathOffset: o,\n            strokeOffset: a,\n            strokeDiff: c\n        }), t && this.setPositionByOrigin(new _(e + r / 2, s + n / 2), j, j);\n    }\n    isStrokeAccountedForInDimensions() {\n        return this.exactBoundingBox;\n    }\n    _getNonTransformedDimensions() {\n        return this.exactBoundingBox ? new _(this.width, this.height) : super._getNonTransformedDimensions();\n    }\n    _getTransformedDimensions() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (this.exactBoundingBox) {\n            let o;\n            if (Object.keys(t).some((a)=>this.strokeUniform || this.constructor.layoutProperties.includes(a))) {\n                var e, s;\n                const { width: a, height: c } = this._calcDimensions(t);\n                o = new _((e = t.width) !== null && e !== void 0 ? e : a, (s = t.height) !== null && s !== void 0 ? s : c);\n            } else {\n                var r, n;\n                o = new _((r = t.width) !== null && r !== void 0 ? r : this.width, (n = t.height) !== null && n !== void 0 ? n : this.height);\n            }\n            return o.multiply(new _(t.scaleX || this.scaleX, t.scaleY || this.scaleY));\n        }\n        return super._getTransformedDimensions(t);\n    }\n    _set(t, e) {\n        const s = this.initialized && this[t] !== e, r = super._set(t, e);\n        return this.exactBoundingBox && s && ((t === ut || t === Tt) && this.strokeUniform && this.constructor.layoutProperties.includes(\"strokeUniform\") || this.constructor.layoutProperties.includes(t)) && this.setDimensions(), r;\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return v(v({}, super.toObject(t)), {}, {\n            points: this.points.map((e)=>{\n                let { x: s, y: r } = e;\n                return {\n                    x: s,\n                    y: r\n                };\n            })\n        });\n    }\n    _toSVG() {\n        const t = [], e = this.pathOffset.x, s = this.pathOffset.y, r = A.NUM_FRACTION_DIGITS;\n        for(let n = 0, o = this.points.length; n < o; n++)t.push(V(this.points[n].x - e, r), \",\", V(this.points[n].y - s, r), \" \");\n        return [\n            \"<\".concat(this.constructor.type.toLowerCase(), \" \"),\n            \"COMMON_PARTS\",\n            'points=\"'.concat(t.join(\"\"), `\" />\n`)\n        ];\n    }\n    _render(t) {\n        const e = this.points.length, s = this.pathOffset.x, r = this.pathOffset.y;\n        if (e && !isNaN(this.points[e - 1].y)) {\n            t.beginPath(), t.moveTo(this.points[0].x - s, this.points[0].y - r);\n            for(let n = 0; n < e; n++){\n                const o = this.points[n];\n                t.lineTo(o.x - s, o.y - r);\n            }\n            !this.isOpen() && t.closePath(), this._renderPaintInOrder(t);\n        }\n    }\n    complexity() {\n        return this.points.length;\n    }\n    static async fromElement(t, e, s) {\n        return new this(_d(t.getAttribute(\"points\")), v(v({}, G(fe(t, this.ATTRIBUTE_NAMES, s), Sd)), e));\n    }\n    static fromObject(t) {\n        return this._fromObject(t, {\n            extraParam: \"points\"\n        });\n    }\n}\ny(Et, \"ownDefaults\", tl), y(Et, \"type\", \"Polyline\"), y(Et, \"layoutProperties\", [\n    Os,\n    ks,\n    \"strokeLineCap\",\n    \"strokeLineJoin\",\n    \"strokeMiterLimit\",\n    \"strokeWidth\",\n    \"strokeUniform\",\n    \"points\"\n]), y(Et, \"cacheProperties\", [\n    ...de,\n    \"points\"\n]), y(Et, \"ATTRIBUTE_NAMES\", [\n    ...De\n]), C.setClass(Et), C.setSVGClass(Et);\nclass br extends Et {\n    isOpen() {\n        return !1;\n    }\n}\ny(br, \"ownDefaults\", tl), y(br, \"type\", \"Polygon\"), C.setClass(br), C.setSVGClass(br);\nconst el = [\n    \"fontSize\",\n    \"fontWeight\",\n    \"fontFamily\",\n    \"fontStyle\"\n], sl = [\n    \"underline\",\n    \"overline\",\n    \"linethrough\"\n], rl = [\n    ...el,\n    \"lineHeight\",\n    \"text\",\n    \"charSpacing\",\n    \"textAlign\",\n    \"styles\",\n    \"path\",\n    \"pathStartOffset\",\n    \"pathSide\",\n    \"pathAlign\"\n], il = [\n    ...rl,\n    ...sl,\n    \"textBackgroundColor\",\n    \"direction\"\n], Td = [\n    ...el,\n    ...sl,\n    mt,\n    \"strokeWidth\",\n    rt,\n    \"deltaY\",\n    \"textBackgroundColor\"\n], xd = {\n    _reNewline: Pn,\n    _reSpacesAndTabs: /[ \\t\\r]/g,\n    _reSpaceAndTab: /[ \\t\\r]/,\n    _reWords: /\\S+/g,\n    fontSize: 40,\n    fontWeight: \"normal\",\n    fontFamily: \"Times New Roman\",\n    underline: !1,\n    overline: !1,\n    linethrough: !1,\n    textAlign: L,\n    fontStyle: \"normal\",\n    lineHeight: 1.16,\n    superscript: {\n        size: 0.6,\n        baseline: -0.35\n    },\n    subscript: {\n        size: 0.6,\n        baseline: 0.11\n    },\n    textBackgroundColor: \"\",\n    stroke: null,\n    shadow: null,\n    path: void 0,\n    pathStartOffset: 0,\n    pathSide: L,\n    pathAlign: \"baseline\",\n    _fontSizeFraction: 0.222,\n    offsets: {\n        underline: 0.1,\n        linethrough: -0.315,\n        overline: -0.88\n    },\n    _fontSizeMult: 1.13,\n    charSpacing: 0,\n    deltaY: 0,\n    direction: \"ltr\",\n    CACHE_FONT_SIZE: 400,\n    MIN_TEXT_WIDTH: 2\n}, Ht = \"justify\", ni = \"justify-left\", Vs = \"justify-right\", Gs = \"justify-center\";\nclass nl extends nt {\n    isEmptyStyles(t) {\n        if (!this.styles || t !== void 0 && !this.styles[t]) return !0;\n        const e = t === void 0 ? this.styles : {\n            line: this.styles[t]\n        };\n        for(const s in e)for(const r in e[s])for(const n in e[s][r])return !1;\n        return !0;\n    }\n    styleHas(t, e) {\n        if (!this.styles || e !== void 0 && !this.styles[e]) return !1;\n        const s = e === void 0 ? this.styles : {\n            0: this.styles[e]\n        };\n        for(const r in s)for(const n in s[r])if (s[r][n][t] !== void 0) return !0;\n        return !1;\n    }\n    cleanStyle(t) {\n        if (!this.styles) return !1;\n        const e = this.styles;\n        let s, r, n = 0, o = !0, a = 0;\n        for(const c in e){\n            s = 0;\n            for(const l in e[c]){\n                const h = e[c][l] || {};\n                n++, h[t] !== void 0 ? (r ? h[t] !== r && (o = !1) : r = h[t], h[t] === this[t] && delete h[t]) : o = !1, Object.keys(h).length !== 0 ? s++ : delete e[c][l];\n            }\n            s === 0 && delete e[c];\n        }\n        for(let c = 0; c < this._textLines.length; c++)a += this._textLines[c].length;\n        o && n === a && (this[t] = r, this.removeStyle(t));\n    }\n    removeStyle(t) {\n        if (!this.styles) return;\n        const e = this.styles;\n        let s, r, n;\n        for(r in e){\n            for(n in s = e[r], s)delete s[n][t], Object.keys(s[n]).length === 0 && delete s[n];\n            Object.keys(s).length === 0 && delete e[r];\n        }\n    }\n    _extendStyles(t, e) {\n        const { lineIndex: s, charIndex: r } = this.get2DCursorLocation(t);\n        this._getLineStyle(s) || this._setLineStyle(s);\n        const n = Xn(v(v({}, this._getStyleDeclaration(s, r)), e), (o)=>o !== void 0);\n        this._setStyleDeclaration(s, r, n);\n    }\n    getSelectionStyles(t, e, s) {\n        const r = [];\n        for(let n = t; n < (e || t); n++)r.push(this.getStyleAtPosition(n, s));\n        return r;\n    }\n    getStyleAtPosition(t, e) {\n        const { lineIndex: s, charIndex: r } = this.get2DCursorLocation(t);\n        return e ? this.getCompleteStyleDeclaration(s, r) : this._getStyleDeclaration(s, r);\n    }\n    setSelectionStyles(t, e, s) {\n        for(let r = e; r < (s || e); r++)this._extendStyles(r, t);\n        this._forceClearCache = !0;\n    }\n    _getStyleDeclaration(t, e) {\n        var s;\n        const r = this.styles && this.styles[t];\n        return r && (s = r[e]) !== null && s !== void 0 ? s : {};\n    }\n    getCompleteStyleDeclaration(t, e) {\n        return v(v({}, Ve(this, this.constructor._styleProperties)), this._getStyleDeclaration(t, e));\n    }\n    _setStyleDeclaration(t, e, s) {\n        this.styles[t][e] = s;\n    }\n    _deleteStyleDeclaration(t, e) {\n        delete this.styles[t][e];\n    }\n    _getLineStyle(t) {\n        return !!this.styles[t];\n    }\n    _setLineStyle(t) {\n        this.styles[t] = {};\n    }\n    _deleteLineStyle(t) {\n        delete this.styles[t];\n    }\n}\ny(nl, \"_styleProperties\", Td);\nconst wd = /  +/g, Cd = /\"/g;\nfunction Vi(i, t, e, s, r) {\n    return \"\t\t\".concat(function(n, o) {\n        let { left: a, top: c, width: l, height: h } = o, u = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : A.NUM_FRACTION_DIGITS;\n        const d = Ks(rt, n, !1), [f, g, p, m] = [\n            a,\n            c,\n            l,\n            h\n        ].map((b)=>V(b, u));\n        return \"<rect \".concat(d, ' x=\"').concat(f, '\" y=\"').concat(g, '\" width=\"').concat(p, '\" height=\"').concat(m, '\"></rect>');\n    }(i, {\n        left: t,\n        top: e,\n        width: s,\n        height: r\n    }), `\n`);\n}\nconst Od = [\n    \"textAnchor\",\n    \"textDecoration\",\n    \"dx\",\n    \"dy\",\n    \"top\",\n    \"left\",\n    \"fontSize\",\n    \"strokeWidth\"\n];\nlet Gi;\nclass ct extends nl {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), ct.ownDefaults);\n    }\n    constructor(t, e){\n        super(), y(this, \"__charBounds\", []), Object.assign(this, ct.ownDefaults), this.setOptions(e), this.styles || (this.styles = {}), this.text = t, this.initialized = !0, this.path && this.setPathInfo(), this.initDimensions(), this.setCoords();\n    }\n    setPathInfo() {\n        const t = this.path;\n        t && (t.segmentsInfo = Qn(t.path));\n    }\n    _splitText() {\n        const t = this._splitTextIntoLines(this.text);\n        return this.textLines = t.lines, this._textLines = t.graphemeLines, this._unwrappedTextLines = t._unwrappedLines, this._text = t.graphemeText, t;\n    }\n    initDimensions() {\n        this._splitText(), this._clearCache(), this.dirty = !0, this.path ? (this.width = this.path.width, this.height = this.path.height) : (this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH, this.height = this.calcTextHeight()), this.textAlign.includes(Ht) && this.enlargeSpaces();\n    }\n    enlargeSpaces() {\n        let t, e, s, r, n, o, a;\n        for(let c = 0, l = this._textLines.length; c < l; c++)if ((this.textAlign === Ht || c !== l - 1 && !this.isEndOfWrapping(c)) && (r = 0, n = this._textLines[c], e = this.getLineWidth(c), e < this.width && (a = this.textLines[c].match(this._reSpacesAndTabs)))) {\n            s = a.length, t = (this.width - e) / s;\n            for(let h = 0; h <= n.length; h++)o = this.__charBounds[c][h], this._reSpaceAndTab.test(n[h]) ? (o.width += t, o.kernedWidth += t, o.left += r, r += t) : o.left += r;\n        }\n    }\n    isEndOfWrapping(t) {\n        return t === this._textLines.length - 1;\n    }\n    missingNewlineOffset(t) {\n        return 1;\n    }\n    get2DCursorLocation(t, e) {\n        const s = e ? this._unwrappedTextLines : this._textLines;\n        let r;\n        for(r = 0; r < s.length; r++){\n            if (t <= s[r].length) return {\n                lineIndex: r,\n                charIndex: t\n            };\n            t -= s[r].length + this.missingNewlineOffset(r, e);\n        }\n        return {\n            lineIndex: r - 1,\n            charIndex: s[r - 1].length < t ? s[r - 1].length : t\n        };\n    }\n    toString() {\n        return \"#<Text (\".concat(this.complexity(), '): { \"text\": \"').concat(this.text, '\", \"fontFamily\": \"').concat(this.fontFamily, '\" }>');\n    }\n    _getCacheCanvasDimensions() {\n        const t = super._getCacheCanvasDimensions(), e = this.fontSize;\n        return t.width += e * t.zoomX, t.height += e * t.zoomY, t;\n    }\n    _render(t) {\n        const e = this.path;\n        e && !e.isNotVisible() && e._render(t), this._setTextStyles(t), this._renderTextLinesBackground(t), this._renderTextDecoration(t, \"underline\"), this._renderText(t), this._renderTextDecoration(t, \"overline\"), this._renderTextDecoration(t, \"linethrough\");\n    }\n    _renderText(t) {\n        this.paintFirst === mt ? (this._renderTextStroke(t), this._renderTextFill(t)) : (this._renderTextFill(t), this._renderTextStroke(t));\n    }\n    _setTextStyles(t, e, s) {\n        if (t.textBaseline = \"alphabetic\", this.path) switch(this.pathAlign){\n            case j:\n                t.textBaseline = \"middle\";\n                break;\n            case \"ascender\":\n                t.textBaseline = gt;\n                break;\n            case \"descender\":\n                t.textBaseline = rn;\n        }\n        t.font = this._getFontDeclaration(e, s);\n    }\n    calcTextWidth() {\n        let t = this.getLineWidth(0);\n        for(let e = 1, s = this._textLines.length; e < s; e++){\n            const r = this.getLineWidth(e);\n            r > t && (t = r);\n        }\n        return t;\n    }\n    _renderTextLine(t, e, s, r, n, o) {\n        this._renderChars(t, e, s, r, n, o);\n    }\n    _renderTextLinesBackground(t) {\n        if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\")) return;\n        const e = t.fillStyle, s = this._getLeftOffset();\n        let r = this._getTopOffset();\n        for(let n = 0, o = this._textLines.length; n < o; n++){\n            const a = this.getHeightOfLine(n);\n            if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\", n)) {\n                r += a;\n                continue;\n            }\n            const c = this._textLines[n].length, l = this._getLineLeftOffset(n);\n            let h, u, d = 0, f = 0, g = this.getValueOfPropertyAt(n, 0, \"textBackgroundColor\");\n            for(let p = 0; p < c; p++){\n                const m = this.__charBounds[n][p];\n                u = this.getValueOfPropertyAt(n, p, \"textBackgroundColor\"), this.path ? (t.save(), t.translate(m.renderLeft, m.renderTop), t.rotate(m.angle), t.fillStyle = u, u && t.fillRect(-m.width / 2, -a / this.lineHeight * (1 - this._fontSizeFraction), m.width, a / this.lineHeight), t.restore()) : u !== g ? (h = s + l + f, this.direction === \"rtl\" && (h = this.width - h - d), t.fillStyle = g, g && t.fillRect(h, r, d, a / this.lineHeight), f = m.left, d = m.width, g = u) : d += m.kernedWidth;\n            }\n            u && !this.path && (h = s + l + f, this.direction === \"rtl\" && (h = this.width - h - d), t.fillStyle = u, t.fillRect(h, r, d, a / this.lineHeight)), r += a;\n        }\n        t.fillStyle = e, this._removeShadow(t);\n    }\n    _measureChar(t, e, s, r) {\n        const n = zs.getFontCache(e), o = this._getFontDeclaration(e), a = s + t, c = s && o === this._getFontDeclaration(r), l = e.fontSize / this.CACHE_FONT_SIZE;\n        let h, u, d, f;\n        if (s && n[s] !== void 0 && (d = n[s]), n[t] !== void 0 && (f = h = n[t]), c && n[a] !== void 0 && (u = n[a], f = u - d), h === void 0 || d === void 0 || u === void 0) {\n            const g = function() {\n                return Gi || (Gi = Wt({\n                    width: 0,\n                    height: 0\n                }).getContext(\"2d\")), Gi;\n            }();\n            this._setTextStyles(g, e, !0), h === void 0 && (f = h = g.measureText(t).width, n[t] = h), d === void 0 && c && s && (d = g.measureText(s).width, n[s] = d), c && u === void 0 && (u = g.measureText(a).width, n[a] = u, f = u - d);\n        }\n        return {\n            width: h * l,\n            kernedWidth: f * l\n        };\n    }\n    getHeightOfChar(t, e) {\n        return this.getValueOfPropertyAt(t, e, \"fontSize\");\n    }\n    measureLine(t) {\n        const e = this._measureLine(t);\n        return this.charSpacing !== 0 && (e.width -= this._getWidthOfCharSpacing()), e.width < 0 && (e.width = 0), e;\n    }\n    _measureLine(t) {\n        let e, s, r = 0;\n        const n = this.pathSide === Z, o = this.path, a = this._textLines[t], c = a.length, l = new Array(c);\n        this.__charBounds[t] = l;\n        for(let h = 0; h < c; h++){\n            const u = a[h];\n            s = this._getGraphemeBox(u, t, h, e), l[h] = s, r += s.kernedWidth, e = u;\n        }\n        if (l[c] = {\n            left: s ? s.left + s.width : 0,\n            width: 0,\n            kernedWidth: 0,\n            height: this.fontSize,\n            deltaY: 0\n        }, o && o.segmentsInfo) {\n            let h = 0;\n            const u = o.segmentsInfo[o.segmentsInfo.length - 1].length;\n            switch(this.textAlign){\n                case L:\n                    h = n ? u - r : 0;\n                    break;\n                case j:\n                    h = (u - r) / 2;\n                    break;\n                case Z:\n                    h = n ? 0 : u - r;\n            }\n            h += this.pathStartOffset * (n ? -1 : 1);\n            for(let d = n ? c - 1 : 0; n ? d >= 0 : d < c; n ? d-- : d++)s = l[d], h > u ? h %= u : h < 0 && (h += u), this._setGraphemeOnPath(h, s), h += s.kernedWidth;\n        }\n        return {\n            width: r,\n            numOfSpaces: 0\n        };\n    }\n    _setGraphemeOnPath(t, e) {\n        const s = t + e.kernedWidth / 2, r = this.path, n = Vc(r.path, s, r.segmentsInfo);\n        e.renderLeft = n.x - r.pathOffset.x, e.renderTop = n.y - r.pathOffset.y, e.angle = n.angle + (this.pathSide === Z ? Math.PI : 0);\n    }\n    _getGraphemeBox(t, e, s, r, n) {\n        const o = this.getCompleteStyleDeclaration(e, s), a = r ? this.getCompleteStyleDeclaration(e, s - 1) : {}, c = this._measureChar(t, o, r, a);\n        let l, h = c.kernedWidth, u = c.width;\n        this.charSpacing !== 0 && (l = this._getWidthOfCharSpacing(), u += l, h += l);\n        const d = {\n            width: u,\n            left: 0,\n            height: o.fontSize,\n            kernedWidth: h,\n            deltaY: o.deltaY\n        };\n        if (s > 0 && !n) {\n            const f = this.__charBounds[e][s - 1];\n            d.left = f.left + f.width + c.kernedWidth - c.width;\n        }\n        return d;\n    }\n    getHeightOfLine(t) {\n        if (this.__lineHeights[t]) return this.__lineHeights[t];\n        let e = this.getHeightOfChar(t, 0);\n        for(let s = 1, r = this._textLines[t].length; s < r; s++)e = Math.max(this.getHeightOfChar(t, s), e);\n        return this.__lineHeights[t] = e * this.lineHeight * this._fontSizeMult;\n    }\n    calcTextHeight() {\n        let t, e = 0;\n        for(let s = 0, r = this._textLines.length; s < r; s++)t = this.getHeightOfLine(s), e += s === r - 1 ? t / this.lineHeight : t;\n        return e;\n    }\n    _getLeftOffset() {\n        return this.direction === \"ltr\" ? -this.width / 2 : this.width / 2;\n    }\n    _getTopOffset() {\n        return -this.height / 2;\n    }\n    _renderTextCommon(t, e) {\n        t.save();\n        let s = 0;\n        const r = this._getLeftOffset(), n = this._getTopOffset();\n        for(let o = 0, a = this._textLines.length; o < a; o++){\n            const c = this.getHeightOfLine(o), l = c / this.lineHeight, h = this._getLineLeftOffset(o);\n            this._renderTextLine(e, t, this._textLines[o], r + h, n + s + l, o), s += c;\n        }\n        t.restore();\n    }\n    _renderTextFill(t) {\n        (this.fill || this.styleHas(rt)) && this._renderTextCommon(t, \"fillText\");\n    }\n    _renderTextStroke(t) {\n        (this.stroke && this.strokeWidth !== 0 || !this.isEmptyStyles()) && (this.shadow && !this.shadow.affectStroke && this._removeShadow(t), t.save(), this._setLineDash(t, this.strokeDashArray), t.beginPath(), this._renderTextCommon(t, \"strokeText\"), t.closePath(), t.restore());\n    }\n    _renderChars(t, e, s, r, n, o) {\n        const a = this.getHeightOfLine(o), c = this.textAlign.includes(Ht), l = this.path, h = !c && this.charSpacing === 0 && this.isEmptyStyles(o) && !l, u = this.direction === \"ltr\", d = this.direction === \"ltr\" ? 1 : -1, f = e.direction;\n        let g, p, m, b, S, w = \"\", k = 0;\n        if (e.save(), f !== this.direction && (e.canvas.setAttribute(\"dir\", u ? \"ltr\" : \"rtl\"), e.direction = u ? \"ltr\" : \"rtl\", e.textAlign = u ? L : Z), n -= a * this._fontSizeFraction / this.lineHeight, h) return this._renderChar(t, e, o, 0, s.join(\"\"), r, n), void e.restore();\n        for(let O = 0, x = s.length - 1; O <= x; O++)b = O === x || this.charSpacing || l, w += s[O], m = this.__charBounds[o][O], k === 0 ? (r += d * (m.kernedWidth - m.width), k += m.width) : k += m.kernedWidth, c && !b && this._reSpaceAndTab.test(s[O]) && (b = !0), b || (g = g || this.getCompleteStyleDeclaration(o, O), p = this.getCompleteStyleDeclaration(o, O + 1), b = wi(g, p, !1)), b && (l ? (e.save(), e.translate(m.renderLeft, m.renderTop), e.rotate(m.angle), this._renderChar(t, e, o, O, w, -k / 2, 0), e.restore()) : (S = r, this._renderChar(t, e, o, O, w, S, n)), w = \"\", g = p, r += d * k, k = 0);\n        e.restore();\n    }\n    _applyPatternGradientTransformText(t) {\n        const e = this.width + this.strokeWidth, s = this.height + this.strokeWidth, r = Wt({\n            width: e,\n            height: s\n        }), n = r.getContext(\"2d\");\n        return r.width = e, r.height = s, n.beginPath(), n.moveTo(0, 0), n.lineTo(e, 0), n.lineTo(e, s), n.lineTo(0, s), n.closePath(), n.translate(e / 2, s / 2), n.fillStyle = t.toLive(n), this._applyPatternGradientTransform(n, t), n.fill(), n.createPattern(r, \"no-repeat\");\n    }\n    handleFiller(t, e, s) {\n        let r, n;\n        return Ct(s) ? s.gradientUnits === \"percentage\" || s.gradientTransform || s.patternTransform ? (r = -this.width / 2, n = -this.height / 2, t.translate(r, n), t[e] = this._applyPatternGradientTransformText(s), {\n            offsetX: r,\n            offsetY: n\n        }) : (t[e] = s.toLive(t), this._applyPatternGradientTransform(t, s)) : (t[e] = s, {\n            offsetX: 0,\n            offsetY: 0\n        });\n    }\n    _setStrokeStyles(t, e) {\n        let { stroke: s, strokeWidth: r } = e;\n        return t.lineWidth = r, t.lineCap = this.strokeLineCap, t.lineDashOffset = this.strokeDashOffset, t.lineJoin = this.strokeLineJoin, t.miterLimit = this.strokeMiterLimit, this.handleFiller(t, \"strokeStyle\", s);\n    }\n    _setFillStyles(t, e) {\n        let { fill: s } = e;\n        return this.handleFiller(t, \"fillStyle\", s);\n    }\n    _renderChar(t, e, s, r, n, o, a) {\n        const c = this._getStyleDeclaration(s, r), l = this.getCompleteStyleDeclaration(s, r), h = t === \"fillText\" && l.fill, u = t === \"strokeText\" && l.stroke && l.strokeWidth;\n        if (u || h) {\n            if (e.save(), e.font = this._getFontDeclaration(l), c.textBackgroundColor && this._removeShadow(e), c.deltaY && (a += c.deltaY), h) {\n                const d = this._setFillStyles(e, l);\n                e.fillText(n, o - d.offsetX, a - d.offsetY);\n            }\n            if (u) {\n                const d = this._setStrokeStyles(e, l);\n                e.strokeText(n, o - d.offsetX, a - d.offsetY);\n            }\n            e.restore();\n        }\n    }\n    setSuperscript(t, e) {\n        this._setScript(t, e, this.superscript);\n    }\n    setSubscript(t, e) {\n        this._setScript(t, e, this.subscript);\n    }\n    _setScript(t, e, s) {\n        const r = this.get2DCursorLocation(t, !0), n = this.getValueOfPropertyAt(r.lineIndex, r.charIndex, \"fontSize\"), o = this.getValueOfPropertyAt(r.lineIndex, r.charIndex, \"deltaY\"), a = {\n            fontSize: n * s.size,\n            deltaY: o + n * s.baseline\n        };\n        this.setSelectionStyles(a, t, e);\n    }\n    _getLineLeftOffset(t) {\n        const e = this.getLineWidth(t), s = this.width - e, r = this.textAlign, n = this.direction, o = this.isEndOfWrapping(t);\n        let a = 0;\n        return r === Ht || r === Gs && !o || r === Vs && !o || r === ni && !o ? 0 : (r === j && (a = s / 2), r === Z && (a = s), r === Gs && (a = s / 2), r === Vs && (a = s), n === \"rtl\" && (r === Z || r === Ht || r === Vs ? a = 0 : r === L || r === ni ? a = -s : r !== j && r !== Gs || (a = -s / 2)), a);\n    }\n    _clearCache() {\n        this._forceClearCache = !1, this.__lineWidths = [], this.__lineHeights = [], this.__charBounds = [];\n    }\n    getLineWidth(t) {\n        if (this.__lineWidths[t] !== void 0) return this.__lineWidths[t];\n        const { width: e } = this.measureLine(t);\n        return this.__lineWidths[t] = e, e;\n    }\n    _getWidthOfCharSpacing() {\n        return this.charSpacing !== 0 ? this.fontSize * this.charSpacing / 1e3 : 0;\n    }\n    getValueOfPropertyAt(t, e, s) {\n        var r;\n        return (r = this._getStyleDeclaration(t, e)[s]) !== null && r !== void 0 ? r : this[s];\n    }\n    _renderTextDecoration(t, e) {\n        if (!this[e] && !this.styleHas(e)) return;\n        let s = this._getTopOffset();\n        const r = this._getLeftOffset(), n = this.path, o = this._getWidthOfCharSpacing(), a = this.offsets[e];\n        for(let c = 0, l = this._textLines.length; c < l; c++){\n            const h = this.getHeightOfLine(c);\n            if (!this[e] && !this.styleHas(e, c)) {\n                s += h;\n                continue;\n            }\n            const u = this._textLines[c], d = h / this.lineHeight, f = this._getLineLeftOffset(c);\n            let g, p, m = 0, b = 0, S = this.getValueOfPropertyAt(c, 0, e), w = this.getValueOfPropertyAt(c, 0, rt);\n            const k = s + d * (1 - this._fontSizeFraction);\n            let O = this.getHeightOfChar(c, 0), x = this.getValueOfPropertyAt(c, 0, \"deltaY\");\n            for(let M = 0, E = u.length; M < E; M++){\n                const R = this.__charBounds[c][M];\n                g = this.getValueOfPropertyAt(c, M, e), p = this.getValueOfPropertyAt(c, M, rt);\n                const tt = this.getHeightOfChar(c, M), F = this.getValueOfPropertyAt(c, M, \"deltaY\");\n                if (n && g && p) t.save(), t.fillStyle = w, t.translate(R.renderLeft, R.renderTop), t.rotate(R.angle), t.fillRect(-R.kernedWidth / 2, a * tt + F, R.kernedWidth, this.fontSize / 15), t.restore();\n                else if ((g !== S || p !== w || tt !== O || F !== x) && b > 0) {\n                    let B = r + f + m;\n                    this.direction === \"rtl\" && (B = this.width - B - b), S && w && (t.fillStyle = w, t.fillRect(B, k + a * O + x, b, this.fontSize / 15)), m = R.left, b = R.width, S = g, w = p, O = tt, x = F;\n                } else b += R.kernedWidth;\n            }\n            let I = r + f + m;\n            this.direction === \"rtl\" && (I = this.width - I - b), t.fillStyle = p, g && p && t.fillRect(I, k + a * O + x, b - o, this.fontSize / 15), s += h;\n        }\n        this._removeShadow(t);\n    }\n    _getFontDeclaration() {\n        let { fontFamily: t = this.fontFamily, fontStyle: e = this.fontStyle, fontWeight: s = this.fontWeight, fontSize: r = this.fontSize } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = arguments.length > 1 ? arguments[1] : void 0;\n        const o = t.includes(\"'\") || t.includes('\"') || t.includes(\",\") || ct.genericFonts.includes(t.toLowerCase()) ? t : '\"'.concat(t, '\"');\n        return [\n            e,\n            s,\n            \"\".concat(n ? this.CACHE_FONT_SIZE : r, \"px\"),\n            o\n        ].join(\" \");\n    }\n    render(t) {\n        this.visible && (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen() || (this._forceClearCache && this.initDimensions(), super.render(t)));\n    }\n    graphemeSplit(t) {\n        return xi(t);\n    }\n    _splitTextIntoLines(t) {\n        const e = t.split(this._reNewline), s = new Array(e.length), r = [\n            `\n`\n        ];\n        let n = [];\n        for(let o = 0; o < e.length; o++)s[o] = this.graphemeSplit(e[o]), n = n.concat(s[o], r);\n        return n.pop(), {\n            _unwrappedLines: s,\n            lines: e,\n            graphemeText: n,\n            graphemeLines: s\n        };\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return v(v({}, super.toObject([\n            ...il,\n            ...t\n        ])), {}, {\n            styles: Ec(this.styles, this.text)\n        }, this.path ? {\n            path: this.path.toObject()\n        } : {});\n    }\n    set(t, e) {\n        const { textLayoutProperties: s } = this.constructor;\n        super.set(t, e);\n        let r = !1, n = !1;\n        if (typeof t == \"object\") for(const o in t)o === \"path\" && this.setPathInfo(), r = r || s.includes(o), n = n || o === \"path\";\n        else r = s.includes(t), n = t === \"path\";\n        return n && this.setPathInfo(), r && this.initialized && (this.initDimensions(), this.setCoords()), this;\n    }\n    complexity() {\n        return 1;\n    }\n    static async fromElement(t, e, s) {\n        const r = fe(t, ct.ATTRIBUTE_NAMES, s), n = v(v({}, e), r), { textAnchor: o = L, textDecoration: a = \"\", dx: c = 0, dy: l = 0, top: h = 0, left: u = 0, fontSize: d = En, strokeWidth: f = 1 } = n, g = G(n, Od), p = new this((t.textContent || \"\").replace(/^\\s+|\\s+$|\\n+/g, \"\").replace(/\\s+/g, \" \"), v({\n            left: u + c,\n            top: h + l,\n            underline: a.includes(\"underline\"),\n            overline: a.includes(\"overline\"),\n            linethrough: a.includes(\"line-through\"),\n            strokeWidth: 0,\n            fontSize: d\n        }, g)), m = p.getScaledHeight() / p.height, b = ((p.height + p.strokeWidth) * p.lineHeight - p.height) * m, S = p.getScaledHeight() + b;\n        let w = 0;\n        return o === j && (w = p.getScaledWidth() / 2), o === Z && (w = p.getScaledWidth()), p.set({\n            left: p.left - w,\n            top: p.top - (S - p.fontSize * (0.07 + p._fontSizeFraction)) / p.lineHeight,\n            strokeWidth: f\n        }), p;\n    }\n    static fromObject(t) {\n        return this._fromObject(v(v({}, t), {}, {\n            styles: Pc(t.styles || {}, t.text)\n        }), {\n            extraParam: \"text\"\n        });\n    }\n}\ny(ct, \"textLayoutProperties\", rl), y(ct, \"cacheProperties\", [\n    ...de,\n    ...il\n]), y(ct, \"ownDefaults\", xd), y(ct, \"type\", \"Text\"), y(ct, \"genericFonts\", [\n    \"serif\",\n    \"sans-serif\",\n    \"monospace\",\n    \"cursive\",\n    \"fantasy\",\n    \"system-ui\",\n    \"ui-serif\",\n    \"ui-sans-serif\",\n    \"ui-monospace\",\n    \"ui-rounded\",\n    \"math\",\n    \"emoji\",\n    \"fangsong\"\n]), y(ct, \"ATTRIBUTE_NAMES\", De.concat(\"x\", \"y\", \"dx\", \"dy\", \"font-family\", \"font-style\", \"font-weight\", \"font-size\", \"letter-spacing\", \"text-decoration\", \"text-anchor\")), kc(ct, [\n    class extends ac {\n        _toSVG() {\n            const i = this._getSVGLeftTopOffsets(), t = this._getSVGTextAndBg(i.textTop, i.textLeft);\n            return this._wrapSVGTextAndBg(t);\n        }\n        toSVG(i) {\n            return this._createBaseSVGMarkup(this._toSVG(), {\n                reviver: i,\n                noStyle: !0,\n                withShadow: !0\n            });\n        }\n        _getSVGLeftTopOffsets() {\n            return {\n                textLeft: -this.width / 2,\n                textTop: -this.height / 2,\n                lineTop: this.getHeightOfLine(0)\n            };\n        }\n        _wrapSVGTextAndBg(i) {\n            let { textBgRects: t, textSpans: e } = i;\n            const s = this.getSvgTextDecoration(this);\n            return [\n                t.join(\"\"),\n                '\t\t<text xml:space=\"preserve\" ',\n                this.fontFamily ? 'font-family=\"'.concat(this.fontFamily.replace(Cd, \"'\"), '\" ') : \"\",\n                this.fontSize ? 'font-size=\"'.concat(this.fontSize, '\" ') : \"\",\n                this.fontStyle ? 'font-style=\"'.concat(this.fontStyle, '\" ') : \"\",\n                this.fontWeight ? 'font-weight=\"'.concat(this.fontWeight, '\" ') : \"\",\n                s ? 'text-decoration=\"'.concat(s, '\" ') : \"\",\n                this.direction === \"rtl\" ? 'direction=\"'.concat(this.direction, '\" ') : \"\",\n                'style=\"',\n                this.getSvgStyles(!0),\n                '\"',\n                this.addPaintOrder(),\n                \" >\",\n                e.join(\"\"),\n                `</text>\n`\n            ];\n        }\n        _getSVGTextAndBg(i, t) {\n            const e = [], s = [];\n            let r, n = i;\n            this.backgroundColor && s.push(...Vi(this.backgroundColor, -this.width / 2, -this.height / 2, this.width, this.height));\n            for(let o = 0, a = this._textLines.length; o < a; o++)r = this._getLineLeftOffset(o), this.direction === \"rtl\" && (r += this.width), (this.textBackgroundColor || this.styleHas(\"textBackgroundColor\", o)) && this._setSVGTextLineBg(s, o, t + r, n), this._setSVGTextLineText(e, o, t + r, n), n += this.getHeightOfLine(o);\n            return {\n                textSpans: e,\n                textBgRects: s\n            };\n        }\n        _createTextCharSpan(i, t, e, s) {\n            const r = this.getSvgSpanStyles(t, i !== i.trim() || !!i.match(wd)), n = r ? 'style=\"'.concat(r, '\"') : \"\", o = t.deltaY, a = o ? ' dy=\"'.concat(V(o, A.NUM_FRACTION_DIGITS), '\" ') : \"\";\n            return '<tspan x=\"'.concat(V(e, A.NUM_FRACTION_DIGITS), '\" y=\"').concat(V(s, A.NUM_FRACTION_DIGITS), '\" ').concat(a).concat(n, \">\").concat(jc(i), \"</tspan>\");\n        }\n        _setSVGTextLineText(i, t, e, s) {\n            const r = this.getHeightOfLine(t), n = this.textAlign.includes(Ht), o = this._textLines[t];\n            let a, c, l, h, u, d = \"\", f = 0;\n            s += r * (1 - this._fontSizeFraction) / this.lineHeight;\n            for(let g = 0, p = o.length - 1; g <= p; g++)u = g === p || this.charSpacing, d += o[g], l = this.__charBounds[t][g], f === 0 ? (e += l.kernedWidth - l.width, f += l.width) : f += l.kernedWidth, n && !u && this._reSpaceAndTab.test(o[g]) && (u = !0), u || (a = a || this.getCompleteStyleDeclaration(t, g), c = this.getCompleteStyleDeclaration(t, g + 1), u = wi(a, c, !0)), u && (h = this._getStyleDeclaration(t, g), i.push(this._createTextCharSpan(d, h, e, s)), d = \"\", a = c, this.direction === \"rtl\" ? e -= f : e += f, f = 0);\n        }\n        _setSVGTextLineBg(i, t, e, s) {\n            const r = this._textLines[t], n = this.getHeightOfLine(t) / this.lineHeight;\n            let o, a = 0, c = 0, l = this.getValueOfPropertyAt(t, 0, \"textBackgroundColor\");\n            for(let h = 0; h < r.length; h++){\n                const { left: u, width: d, kernedWidth: f } = this.__charBounds[t][h];\n                o = this.getValueOfPropertyAt(t, h, \"textBackgroundColor\"), o !== l ? (l && i.push(...Vi(l, e + c, s, a, n)), c = u, a = d, l = o) : a += f;\n            }\n            o && i.push(...Vi(l, e + c, s, a, n));\n        }\n        _getSVGLineTopOffset(i) {\n            let t, e = 0;\n            for(t = 0; t < i; t++)e += this.getHeightOfLine(t);\n            const s = this.getHeightOfLine(t);\n            return {\n                lineTop: e,\n                offset: (this._fontSizeMult - this._fontSizeFraction) * s / (this.lineHeight * this._fontSizeMult)\n            };\n        }\n        getSvgStyles(i) {\n            return \"\".concat(super.getSvgStyles(i), \" white-space: pre;\");\n        }\n        getSvgSpanStyles(i, t) {\n            const { fontFamily: e, strokeWidth: s, stroke: r, fill: n, fontSize: o, fontStyle: a, fontWeight: c, deltaY: l } = i, h = this.getSvgTextDecoration(i);\n            return [\n                r ? Ks(mt, r) : \"\",\n                s ? \"stroke-width: \".concat(s, \"; \") : \"\",\n                e ? \"font-family: \".concat(e.includes(\"'\") || e.includes('\"') ? e : \"'\".concat(e, \"'\"), \"; \") : \"\",\n                o ? \"font-size: \".concat(o, \"px; \") : \"\",\n                a ? \"font-style: \".concat(a, \"; \") : \"\",\n                c ? \"font-weight: \".concat(c, \"; \") : \"\",\n                h && \"text-decoration: \".concat(h, \"; \"),\n                n ? Ks(rt, n) : \"\",\n                l ? \"baseline-shift: \".concat(-l, \"; \") : \"\",\n                t ? \"white-space: pre; \" : \"\"\n            ].join(\"\");\n        }\n        getSvgTextDecoration(i) {\n            return [\n                \"overline\",\n                \"underline\",\n                \"line-through\"\n            ].filter((t)=>i[t.replace(\"-\", \"\")]).join(\" \");\n        }\n    }\n]), C.setClass(ct), C.setSVGClass(ct);\nclass kd {\n    constructor(t){\n        y(this, \"target\", void 0), y(this, \"__mouseDownInPlace\", !1), y(this, \"__dragStartFired\", !1), y(this, \"__isDraggingOver\", !1), y(this, \"__dragStartSelection\", void 0), y(this, \"__dragImageDisposer\", void 0), y(this, \"_dispose\", void 0), this.target = t;\n        const e = [\n            this.target.on(\"dragenter\", this.dragEnterHandler.bind(this)),\n            this.target.on(\"dragover\", this.dragOverHandler.bind(this)),\n            this.target.on(\"dragleave\", this.dragLeaveHandler.bind(this)),\n            this.target.on(\"dragend\", this.dragEndHandler.bind(this)),\n            this.target.on(\"drop\", this.dropHandler.bind(this))\n        ];\n        this._dispose = ()=>{\n            e.forEach((s)=>s()), this._dispose = void 0;\n        };\n    }\n    isPointerOverSelection(t) {\n        const e = this.target, s = e.getSelectionStartFromPointer(t);\n        return e.isEditing && s >= e.selectionStart && s <= e.selectionEnd && e.selectionStart < e.selectionEnd;\n    }\n    start(t) {\n        return this.__mouseDownInPlace = this.isPointerOverSelection(t);\n    }\n    isActive() {\n        return this.__mouseDownInPlace;\n    }\n    end(t) {\n        const e = this.isActive();\n        return e && !this.__dragStartFired && (this.target.setCursorByClick(t), this.target.initDelayedCursor(!0)), this.__mouseDownInPlace = !1, this.__dragStartFired = !1, this.__isDraggingOver = !1, e;\n    }\n    getDragStartSelection() {\n        return this.__dragStartSelection;\n    }\n    setDragImage(t, e) {\n        var s;\n        let { selectionStart: r, selectionEnd: n } = e;\n        const o = this.target, a = o.canvas, c = new _(o.flipX ? -1 : 1, o.flipY ? -1 : 1), l = o._getCursorBoundaries(r), h = new _(l.left + l.leftOffset, l.top + l.topOffset).multiply(c).transform(o.calcTransformMatrix()), u = a.getScenePoint(t).subtract(h), d = o.getCanvasRetinaScaling(), f = o.getBoundingRect(), g = h.subtract(new _(f.left, f.top)), p = a.viewportTransform, m = g.add(u).transform(p, !0), b = o.backgroundColor, S = Kn(o.styles);\n        o.backgroundColor = \"\";\n        const w = {\n            stroke: \"transparent\",\n            fill: \"transparent\",\n            textBackgroundColor: \"transparent\"\n        };\n        o.setSelectionStyles(w, 0, r), o.setSelectionStyles(w, n, o.text.length), o.dirty = !0;\n        const k = o.toCanvasElement({\n            enableRetinaScaling: a.enableRetinaScaling,\n            viewportTransform: !0\n        });\n        o.backgroundColor = b, o.styles = S, o.dirty = !0, ii(k, {\n            position: \"fixed\",\n            left: \"\".concat(-k.width, \"px\"),\n            border: pt,\n            width: \"\".concat(k.width / d, \"px\"),\n            height: \"\".concat(k.height / d, \"px\")\n        }), this.__dragImageDisposer && this.__dragImageDisposer(), this.__dragImageDisposer = ()=>{\n            k.remove();\n        }, At(t.target || this.target.hiddenTextarea).body.appendChild(k), (s = t.dataTransfer) === null || s === void 0 || s.setDragImage(k, m.x, m.y);\n    }\n    onDragStart(t) {\n        this.__dragStartFired = !0;\n        const e = this.target, s = this.isActive();\n        if (s && t.dataTransfer) {\n            const r = this.__dragStartSelection = {\n                selectionStart: e.selectionStart,\n                selectionEnd: e.selectionEnd\n            }, n = e._text.slice(r.selectionStart, r.selectionEnd).join(\"\"), o = v({\n                text: e.text,\n                value: n\n            }, r);\n            t.dataTransfer.setData(\"text/plain\", n), t.dataTransfer.setData(\"application/fabric\", JSON.stringify({\n                value: n,\n                styles: e.getSelectionStyles(r.selectionStart, r.selectionEnd, !0)\n            })), t.dataTransfer.effectAllowed = \"copyMove\", this.setDragImage(t, o);\n        }\n        return e.abortCursorAnimation(), s;\n    }\n    canDrop(t) {\n        if (this.target.editable && !this.target.getActiveControl() && !t.defaultPrevented) {\n            if (this.isActive() && this.__dragStartSelection) {\n                const e = this.target.getSelectionStartFromPointer(t), s = this.__dragStartSelection;\n                return e < s.selectionStart || e > s.selectionEnd;\n            }\n            return !0;\n        }\n        return !1;\n    }\n    targetCanDrop(t) {\n        return this.target.canDrop(t);\n    }\n    dragEnterHandler(t) {\n        let { e } = t;\n        const s = this.targetCanDrop(e);\n        !this.__isDraggingOver && s && (this.__isDraggingOver = !0);\n    }\n    dragOverHandler(t) {\n        const { e } = t, s = this.targetCanDrop(e);\n        !this.__isDraggingOver && s ? this.__isDraggingOver = !0 : this.__isDraggingOver && !s && (this.__isDraggingOver = !1), this.__isDraggingOver && (e.preventDefault(), t.canDrop = !0, t.dropTarget = this.target);\n    }\n    dragLeaveHandler() {\n        (this.__isDraggingOver || this.isActive()) && (this.__isDraggingOver = !1);\n    }\n    dropHandler(t) {\n        var e;\n        const { e: s } = t, r = s.defaultPrevented;\n        this.__isDraggingOver = !1, s.preventDefault();\n        let n = (e = s.dataTransfer) === null || e === void 0 ? void 0 : e.getData(\"text/plain\");\n        if (n && !r) {\n            const o = this.target, a = o.canvas;\n            let c = o.getSelectionStartFromPointer(s);\n            const { styles: l } = s.dataTransfer.types.includes(\"application/fabric\") ? JSON.parse(s.dataTransfer.getData(\"application/fabric\")) : {}, h = n[Math.max(0, n.length - 1)], u = 0;\n            if (this.__dragStartSelection) {\n                const d = this.__dragStartSelection.selectionStart, f = this.__dragStartSelection.selectionEnd;\n                c > d && c <= f ? c = d : c > f && (c -= f - d), o.removeChars(d, f), delete this.__dragStartSelection;\n            }\n            o._reNewline.test(h) && (o._reNewline.test(o._text[c]) || c === o._text.length) && (n = n.trimEnd()), t.didDrop = !0, t.dropTarget = o, o.insertChars(n, l, c), a.setActiveObject(o), o.enterEditing(s), o.selectionStart = Math.min(c + u, o._text.length), o.selectionEnd = Math.min(o.selectionStart + n.length, o._text.length), o.hiddenTextarea.value = o.text, o._updateTextarea(), o.hiddenTextarea.focus(), o.fire(Ur, {\n                index: c + u,\n                action: \"drop\"\n            }), a.fire(\"text:changed\", {\n                target: o\n            }), a.contextTopDirty = !0, a.requestRenderAll();\n        }\n    }\n    dragEndHandler(t) {\n        let { e } = t;\n        if (this.isActive() && this.__dragStartFired && this.__dragStartSelection) {\n            var s;\n            const r = this.target, n = this.target.canvas, { selectionStart: o, selectionEnd: a } = this.__dragStartSelection, c = ((s = e.dataTransfer) === null || s === void 0 ? void 0 : s.dropEffect) || pt;\n            c === pt ? (r.selectionStart = o, r.selectionEnd = a, r._updateTextarea(), r.hiddenTextarea.focus()) : (r.clearContextTop(), c === \"move\" && (r.removeChars(o, a), r.selectionStart = r.selectionEnd = o, r.hiddenTextarea && (r.hiddenTextarea.value = r.text), r._updateTextarea(), r.fire(Ur, {\n                index: o,\n                action: \"dragend\"\n            }), n.fire(\"text:changed\", {\n                target: r\n            }), n.requestRenderAll()), r.exitEditing());\n        }\n        this.__dragImageDisposer && this.__dragImageDisposer(), delete this.__dragImageDisposer, delete this.__dragStartSelection, this.__isDraggingOver = !1;\n    }\n    dispose() {\n        this._dispose && this._dispose();\n    }\n}\nconst Ho = /[ \\n\\.,;!\\?\\-]/;\nclass Md extends ct {\n    constructor(){\n        super(...arguments), y(this, \"_currentCursorOpacity\", 1);\n    }\n    initBehavior() {\n        this._tick = this._tick.bind(this), this._onTickComplete = this._onTickComplete.bind(this), this.updateSelectionOnMouseMove = this.updateSelectionOnMouseMove.bind(this);\n    }\n    onDeselect(t) {\n        return this.isEditing && this.exitEditing(), this.selected = !1, super.onDeselect(t);\n    }\n    _animateCursor(t) {\n        let { toValue: e, duration: s, delay: r, onComplete: n } = t;\n        return Un({\n            startValue: this._currentCursorOpacity,\n            endValue: e,\n            duration: s,\n            delay: r,\n            onComplete: n,\n            abort: ()=>!this.canvas || this.selectionStart !== this.selectionEnd,\n            onChange: (o)=>{\n                this._currentCursorOpacity = o, this.renderCursorOrSelection();\n            }\n        });\n    }\n    _tick(t) {\n        this._currentTickState = this._animateCursor({\n            toValue: 0,\n            duration: this.cursorDuration / 2,\n            delay: Math.max(t || 0, 100),\n            onComplete: this._onTickComplete\n        });\n    }\n    _onTickComplete() {\n        var t;\n        (t = this._currentTickCompleteState) === null || t === void 0 || t.abort(), this._currentTickCompleteState = this._animateCursor({\n            toValue: 1,\n            duration: this.cursorDuration,\n            onComplete: this._tick\n        });\n    }\n    initDelayedCursor(t) {\n        this.abortCursorAnimation(), this._tick(t ? 0 : this.cursorDelay);\n    }\n    abortCursorAnimation() {\n        let t = !1;\n        [\n            this._currentTickState,\n            this._currentTickCompleteState\n        ].forEach((e)=>{\n            e && !e.isDone() && (t = !0, e.abort());\n        }), this._currentCursorOpacity = 1, t && this.clearContextTop();\n    }\n    restartCursorIfNeeded() {\n        [\n            this._currentTickState,\n            this._currentTickCompleteState\n        ].some((t)=>!t || t.isDone()) && this.initDelayedCursor();\n    }\n    selectAll() {\n        return this.selectionStart = 0, this.selectionEnd = this._text.length, this._fireSelectionChanged(), this._updateTextarea(), this;\n    }\n    getSelectedText() {\n        return this._text.slice(this.selectionStart, this.selectionEnd).join(\"\");\n    }\n    findWordBoundaryLeft(t) {\n        let e = 0, s = t - 1;\n        if (this._reSpace.test(this._text[s])) for(; this._reSpace.test(this._text[s]);)e++, s--;\n        for(; /\\S/.test(this._text[s]) && s > -1;)e++, s--;\n        return t - e;\n    }\n    findWordBoundaryRight(t) {\n        let e = 0, s = t;\n        if (this._reSpace.test(this._text[s])) for(; this._reSpace.test(this._text[s]);)e++, s++;\n        for(; /\\S/.test(this._text[s]) && s < this._text.length;)e++, s++;\n        return t + e;\n    }\n    findLineBoundaryLeft(t) {\n        let e = 0, s = t - 1;\n        for(; !/\\n/.test(this._text[s]) && s > -1;)e++, s--;\n        return t - e;\n    }\n    findLineBoundaryRight(t) {\n        let e = 0, s = t;\n        for(; !/\\n/.test(this._text[s]) && s < this._text.length;)e++, s++;\n        return t + e;\n    }\n    searchWordBoundary(t, e) {\n        const s = this._text;\n        let r = t > 0 && this._reSpace.test(s[t]) && (e === -1 || !Pn.test(s[t - 1])) ? t - 1 : t, n = s[r];\n        for(; r > 0 && r < s.length && !Ho.test(n);)r += e, n = s[r];\n        return e === -1 && Ho.test(n) && r++, r;\n    }\n    selectWord(t) {\n        t = t || this.selectionStart;\n        const e = this.searchWordBoundary(t, -1), s = Math.max(e, this.searchWordBoundary(t, 1));\n        this.selectionStart = e, this.selectionEnd = s, this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection();\n    }\n    selectLine(t) {\n        t = t || this.selectionStart;\n        const e = this.findLineBoundaryLeft(t), s = this.findLineBoundaryRight(t);\n        return this.selectionStart = e, this.selectionEnd = s, this._fireSelectionChanged(), this._updateTextarea(), this;\n    }\n    enterEditing(t) {\n        !this.isEditing && this.editable && (this.enterEditingImpl(), this.fire(\"editing:entered\", t ? {\n            e: t\n        } : void 0), this._fireSelectionChanged(), this.canvas && (this.canvas.fire(\"text:editing:entered\", {\n            target: this,\n            e: t\n        }), this.canvas.requestRenderAll()));\n    }\n    enterEditingImpl() {\n        this.canvas && (this.canvas.calcOffset(), this.canvas.textEditingManager.exitTextEditing()), this.isEditing = !0, this.initHiddenTextarea(), this.hiddenTextarea.focus(), this.hiddenTextarea.value = this.text, this._updateTextarea(), this._saveEditingProps(), this._setEditingProps(), this._textBeforeEdit = this.text, this._tick();\n    }\n    updateSelectionOnMouseMove(t) {\n        if (this.getActiveControl()) return;\n        const e = this.hiddenTextarea;\n        At(e).activeElement !== e && e.focus();\n        const s = this.getSelectionStartFromPointer(t), r = this.selectionStart, n = this.selectionEnd;\n        (s === this.__selectionStartOnMouseDown && r !== n || r !== s && n !== s) && (s > this.__selectionStartOnMouseDown ? (this.selectionStart = this.__selectionStartOnMouseDown, this.selectionEnd = s) : (this.selectionStart = s, this.selectionEnd = this.__selectionStartOnMouseDown), this.selectionStart === r && this.selectionEnd === n || (this._fireSelectionChanged(), this._updateTextarea(), this.renderCursorOrSelection()));\n    }\n    _setEditingProps() {\n        this.hoverCursor = \"text\", this.canvas && (this.canvas.defaultCursor = this.canvas.moveCursor = \"text\"), this.borderColor = this.editingBorderColor, this.hasControls = this.selectable = !1, this.lockMovementX = this.lockMovementY = !0;\n    }\n    fromStringToGraphemeSelection(t, e, s) {\n        const r = s.slice(0, t), n = this.graphemeSplit(r).length;\n        if (t === e) return {\n            selectionStart: n,\n            selectionEnd: n\n        };\n        const o = s.slice(t, e);\n        return {\n            selectionStart: n,\n            selectionEnd: n + this.graphemeSplit(o).length\n        };\n    }\n    fromGraphemeToStringSelection(t, e, s) {\n        const r = s.slice(0, t).join(\"\").length;\n        return t === e ? {\n            selectionStart: r,\n            selectionEnd: r\n        } : {\n            selectionStart: r,\n            selectionEnd: r + s.slice(t, e).join(\"\").length\n        };\n    }\n    _updateTextarea() {\n        if (this.cursorOffsetCache = {}, this.hiddenTextarea) {\n            if (!this.inCompositionMode) {\n                const t = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);\n                this.hiddenTextarea.selectionStart = t.selectionStart, this.hiddenTextarea.selectionEnd = t.selectionEnd;\n            }\n            this.updateTextareaPosition();\n        }\n    }\n    updateFromTextArea() {\n        if (!this.hiddenTextarea) return;\n        this.cursorOffsetCache = {};\n        const t = this.hiddenTextarea;\n        this.text = t.value, this.set(\"dirty\", !0), this.initDimensions(), this.setCoords();\n        const e = this.fromStringToGraphemeSelection(t.selectionStart, t.selectionEnd, t.value);\n        this.selectionEnd = this.selectionStart = e.selectionEnd, this.inCompositionMode || (this.selectionStart = e.selectionStart), this.updateTextareaPosition();\n    }\n    updateTextareaPosition() {\n        if (this.selectionStart === this.selectionEnd) {\n            const t = this._calcTextareaPosition();\n            this.hiddenTextarea.style.left = t.left, this.hiddenTextarea.style.top = t.top;\n        }\n    }\n    _calcTextareaPosition() {\n        if (!this.canvas) return {\n            left: \"1px\",\n            top: \"1px\"\n        };\n        const t = this.inCompositionMode ? this.compositionStart : this.selectionStart, e = this._getCursorBoundaries(t), s = this.get2DCursorLocation(t), r = s.lineIndex, n = s.charIndex, o = this.getValueOfPropertyAt(r, n, \"fontSize\") * this.lineHeight, a = e.leftOffset, c = this.getCanvasRetinaScaling(), l = this.canvas.upperCanvasEl, h = l.width / c, u = l.height / c, d = h - o, f = u - o, g = new _(e.left + a, e.top + e.topOffset + o).transform(this.calcTransformMatrix()).transform(this.canvas.viewportTransform).multiply(new _(l.clientWidth / h, l.clientHeight / u));\n        return g.x < 0 && (g.x = 0), g.x > d && (g.x = d), g.y < 0 && (g.y = 0), g.y > f && (g.y = f), g.x += this.canvas._offset.left, g.y += this.canvas._offset.top, {\n            left: \"\".concat(g.x, \"px\"),\n            top: \"\".concat(g.y, \"px\"),\n            fontSize: \"\".concat(o, \"px\"),\n            charHeight: o\n        };\n    }\n    _saveEditingProps() {\n        this._savedProps = {\n            hasControls: this.hasControls,\n            borderColor: this.borderColor,\n            lockMovementX: this.lockMovementX,\n            lockMovementY: this.lockMovementY,\n            hoverCursor: this.hoverCursor,\n            selectable: this.selectable,\n            defaultCursor: this.canvas && this.canvas.defaultCursor,\n            moveCursor: this.canvas && this.canvas.moveCursor\n        };\n    }\n    _restoreEditingProps() {\n        this._savedProps && (this.hoverCursor = this._savedProps.hoverCursor, this.hasControls = this._savedProps.hasControls, this.borderColor = this._savedProps.borderColor, this.selectable = this._savedProps.selectable, this.lockMovementX = this._savedProps.lockMovementX, this.lockMovementY = this._savedProps.lockMovementY, this.canvas && (this.canvas.defaultCursor = this._savedProps.defaultCursor || this.canvas.defaultCursor, this.canvas.moveCursor = this._savedProps.moveCursor || this.canvas.moveCursor), delete this._savedProps);\n    }\n    _exitEditing() {\n        const t = this.hiddenTextarea;\n        this.selected = !1, this.isEditing = !1, t && (t.blur && t.blur(), t.parentNode && t.parentNode.removeChild(t)), this.hiddenTextarea = null, this.abortCursorAnimation(), this.selectionStart !== this.selectionEnd && this.clearContextTop();\n    }\n    exitEditingImpl() {\n        this._exitEditing(), this.selectionEnd = this.selectionStart, this._restoreEditingProps(), this._forceClearCache && (this.initDimensions(), this.setCoords());\n    }\n    exitEditing() {\n        const t = this._textBeforeEdit !== this.text;\n        return this.exitEditingImpl(), this.fire(\"editing:exited\"), t && this.fire($r), this.canvas && (this.canvas.fire(\"text:editing:exited\", {\n            target: this\n        }), t && this.canvas.fire(\"object:modified\", {\n            target: this\n        })), this;\n    }\n    _removeExtraneousStyles() {\n        for(const t in this.styles)this._textLines[t] || delete this.styles[t];\n    }\n    removeStyleFromTo(t, e) {\n        const { lineIndex: s, charIndex: r } = this.get2DCursorLocation(t, !0), { lineIndex: n, charIndex: o } = this.get2DCursorLocation(e, !0);\n        if (s !== n) {\n            if (this.styles[s]) for(let a = r; a < this._unwrappedTextLines[s].length; a++)delete this.styles[s][a];\n            if (this.styles[n]) for(let a = o; a < this._unwrappedTextLines[n].length; a++){\n                const c = this.styles[n][a];\n                c && (this.styles[s] || (this.styles[s] = {}), this.styles[s][r + a - o] = c);\n            }\n            for(let a = s + 1; a <= n; a++)delete this.styles[a];\n            this.shiftLineStyles(n, s - n);\n        } else if (this.styles[s]) {\n            const a = this.styles[s], c = o - r;\n            for(let l = r; l < o; l++)delete a[l];\n            for(const l in this.styles[s]){\n                const h = parseInt(l, 10);\n                h >= o && (a[h - c] = a[l], delete a[l]);\n            }\n        }\n    }\n    shiftLineStyles(t, e) {\n        const s = Object.assign({}, this.styles);\n        for(const r in this.styles){\n            const n = parseInt(r, 10);\n            n > t && (this.styles[n + e] = s[n], s[n - e] || delete this.styles[n]);\n        }\n    }\n    insertNewlineStyleObject(t, e, s, r) {\n        const n = {}, o = this._unwrappedTextLines[t].length, a = o === e;\n        let c = !1;\n        s || (s = 1), this.shiftLineStyles(t, s);\n        const l = this.styles[t] ? this.styles[t][e === 0 ? e : e - 1] : void 0;\n        for(const u in this.styles[t]){\n            const d = parseInt(u, 10);\n            d >= e && (c = !0, n[d - e] = this.styles[t][u], a && e === 0 || delete this.styles[t][u]);\n        }\n        let h = !1;\n        for(c && !a && (this.styles[t + s] = n, h = !0), (h || o > e) && s--; s > 0;)r && r[s - 1] ? this.styles[t + s] = {\n            0: v({}, r[s - 1])\n        } : l ? this.styles[t + s] = {\n            0: v({}, l)\n        } : delete this.styles[t + s], s--;\n        this._forceClearCache = !0;\n    }\n    insertCharStyleObject(t, e, s, r) {\n        this.styles || (this.styles = {});\n        const n = this.styles[t], o = n ? v({}, n) : {};\n        s || (s = 1);\n        for(const c in o){\n            const l = parseInt(c, 10);\n            l >= e && (n[l + s] = o[l], o[l - s] || delete n[l]);\n        }\n        if (this._forceClearCache = !0, r) {\n            for(; s--;)Object.keys(r[s]).length && (this.styles[t] || (this.styles[t] = {}), this.styles[t][e + s] = v({}, r[s]));\n            return;\n        }\n        if (!n) return;\n        const a = n[e ? e - 1 : 1];\n        for(; a && s--;)this.styles[t][e + s] = v({}, a);\n    }\n    insertNewStyleBlock(t, e, s) {\n        const r = this.get2DCursorLocation(e, !0), n = [\n            0\n        ];\n        let o, a = 0;\n        for(let c = 0; c < t.length; c++)t[c] === `\n` ? (a++, n[a] = 0) : n[a]++;\n        for(n[0] > 0 && (this.insertCharStyleObject(r.lineIndex, r.charIndex, n[0], s), s = s && s.slice(n[0] + 1)), a && this.insertNewlineStyleObject(r.lineIndex, r.charIndex + n[0], a), o = 1; o < a; o++)n[o] > 0 ? this.insertCharStyleObject(r.lineIndex + o, 0, n[o], s) : s && this.styles[r.lineIndex + o] && s[0] && (this.styles[r.lineIndex + o][0] = s[0]), s = s && s.slice(n[o] + 1);\n        n[o] > 0 && this.insertCharStyleObject(r.lineIndex + o, 0, n[o], s);\n    }\n    removeChars(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t + 1;\n        this.removeStyleFromTo(t, e), this._text.splice(t, e - t), this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n    }\n    insertChars(t, e, s) {\n        let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : s;\n        r > s && this.removeStyleFromTo(s, r);\n        const n = this.graphemeSplit(t);\n        this.insertNewStyleBlock(n, s, e), this._text = [\n            ...this._text.slice(0, s),\n            ...n,\n            ...this._text.slice(r)\n        ], this.text = this._text.join(\"\"), this.set(\"dirty\", !0), this.initDimensions(), this.setCoords(), this._removeExtraneousStyles();\n    }\n    setSelectionStartEndWithShift(t, e, s) {\n        s <= t ? (e === t ? this._selectionDirection = L : this._selectionDirection === Z && (this._selectionDirection = L, this.selectionEnd = t), this.selectionStart = s) : s > t && s < e ? this._selectionDirection === Z ? this.selectionEnd = s : this.selectionStart = s : (e === t ? this._selectionDirection = Z : this._selectionDirection === L && (this._selectionDirection = Z, this.selectionStart = e), this.selectionEnd = s);\n    }\n}\nclass Id extends Md {\n    initHiddenTextarea() {\n        const t = this.canvas && At(this.canvas.getElement()) || Cs(), e = t.createElement(\"textarea\");\n        Object.entries({\n            autocapitalize: \"off\",\n            autocorrect: \"off\",\n            autocomplete: \"off\",\n            spellcheck: \"false\",\n            \"data-fabric\": \"textarea\",\n            wrap: \"off\"\n        }).map((o)=>{\n            let [a, c] = o;\n            return e.setAttribute(a, c);\n        });\n        const { top: s, left: r, fontSize: n } = this._calcTextareaPosition();\n        e.style.cssText = \"position: absolute; top: \".concat(s, \"; left: \").concat(r, \"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: \").concat(n, \";\"), (this.hiddenTextareaContainer || t.body).appendChild(e), Object.entries({\n            blur: \"blur\",\n            keydown: \"onKeyDown\",\n            keyup: \"onKeyUp\",\n            input: \"onInput\",\n            copy: \"copy\",\n            cut: \"copy\",\n            paste: \"paste\",\n            compositionstart: \"onCompositionStart\",\n            compositionupdate: \"onCompositionUpdate\",\n            compositionend: \"onCompositionEnd\"\n        }).map((o)=>{\n            let [a, c] = o;\n            return e.addEventListener(a, this[c].bind(this));\n        }), this.hiddenTextarea = e;\n    }\n    blur() {\n        this.abortCursorAnimation();\n    }\n    onKeyDown(t) {\n        if (!this.isEditing) return;\n        const e = this.direction === \"rtl\" ? this.keysMapRtl : this.keysMap;\n        if (t.keyCode in e) this[e[t.keyCode]](t);\n        else {\n            if (!(t.keyCode in this.ctrlKeysMapDown) || !t.ctrlKey && !t.metaKey) return;\n            this[this.ctrlKeysMapDown[t.keyCode]](t);\n        }\n        t.stopImmediatePropagation(), t.preventDefault(), t.keyCode >= 33 && t.keyCode <= 40 ? (this.inCompositionMode = !1, this.clearContextTop(), this.renderCursorOrSelection()) : this.canvas && this.canvas.requestRenderAll();\n    }\n    onKeyUp(t) {\n        !this.isEditing || this._copyDone || this.inCompositionMode ? this._copyDone = !1 : t.keyCode in this.ctrlKeysMapUp && (t.ctrlKey || t.metaKey) && (this[this.ctrlKeysMapUp[t.keyCode]](t), t.stopImmediatePropagation(), t.preventDefault(), this.canvas && this.canvas.requestRenderAll());\n    }\n    onInput(t) {\n        const e = this.fromPaste;\n        if (this.fromPaste = !1, t && t.stopPropagation(), !this.isEditing) return;\n        const s = ()=>{\n            this.updateFromTextArea(), this.fire(Ur), this.canvas && (this.canvas.fire(\"text:changed\", {\n                target: this\n            }), this.canvas.requestRenderAll());\n        };\n        if (this.hiddenTextarea.value === \"\") return this.styles = {}, void s();\n        const r = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText, n = this._text.length, o = r.length, a = this.selectionStart, c = this.selectionEnd, l = a !== c;\n        let h, u, d, f, g = o - n;\n        const p = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value), m = a > p.selectionStart;\n        l ? (u = this._text.slice(a, c), g += c - a) : o < n && (u = m ? this._text.slice(c + g, c) : this._text.slice(a, a - g));\n        const b = r.slice(p.selectionEnd - g, p.selectionEnd);\n        if (u && u.length && (b.length && (h = this.getSelectionStyles(a, a + 1, !1), h = b.map(()=>h[0])), l ? (d = a, f = c) : m ? (d = c - u.length, f = c) : (d = c, f = c + u.length), this.removeStyleFromTo(d, f)), b.length) {\n            const { copyPasteData: S } = $t();\n            e && b.join(\"\") === S.copiedText && !A.disableStyleCopyPaste && (h = S.copiedTextStyle), this.insertNewStyleBlock(b, a, h);\n        }\n        s();\n    }\n    onCompositionStart() {\n        this.inCompositionMode = !0;\n    }\n    onCompositionEnd() {\n        this.inCompositionMode = !1;\n    }\n    onCompositionUpdate(t) {\n        let { target: e } = t;\n        const { selectionStart: s, selectionEnd: r } = e;\n        this.compositionStart = s, this.compositionEnd = r, this.updateTextareaPosition();\n    }\n    copy() {\n        if (this.selectionStart === this.selectionEnd) return;\n        const { copyPasteData: t } = $t();\n        t.copiedText = this.getSelectedText(), A.disableStyleCopyPaste ? t.copiedTextStyle = void 0 : t.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, !0), this._copyDone = !0;\n    }\n    paste() {\n        this.fromPaste = !0;\n    }\n    _getWidthBeforeCursor(t, e) {\n        let s, r = this._getLineLeftOffset(t);\n        return e > 0 && (s = this.__charBounds[t][e - 1], r += s.left + s.width), r;\n    }\n    getDownCursorOffset(t, e) {\n        const s = this._getSelectionForOffset(t, e), r = this.get2DCursorLocation(s), n = r.lineIndex;\n        if (n === this._textLines.length - 1 || t.metaKey || t.keyCode === 34) return this._text.length - s;\n        const o = r.charIndex, a = this._getWidthBeforeCursor(n, o), c = this._getIndexOnLine(n + 1, a);\n        return this._textLines[n].slice(o).length + c + 1 + this.missingNewlineOffset(n);\n    }\n    _getSelectionForOffset(t, e) {\n        return t.shiftKey && this.selectionStart !== this.selectionEnd && e ? this.selectionEnd : this.selectionStart;\n    }\n    getUpCursorOffset(t, e) {\n        const s = this._getSelectionForOffset(t, e), r = this.get2DCursorLocation(s), n = r.lineIndex;\n        if (n === 0 || t.metaKey || t.keyCode === 33) return -s;\n        const o = r.charIndex, a = this._getWidthBeforeCursor(n, o), c = this._getIndexOnLine(n - 1, a), l = this._textLines[n].slice(0, o), h = this.missingNewlineOffset(n - 1);\n        return -this._textLines[n - 1].length + c - l.length + (1 - h);\n    }\n    _getIndexOnLine(t, e) {\n        const s = this._textLines[t];\n        let r, n, o = this._getLineLeftOffset(t), a = 0;\n        for(let c = 0, l = s.length; c < l; c++)if (r = this.__charBounds[t][c].width, o += r, o > e) {\n            n = !0;\n            const h = o - r, u = o, d = Math.abs(h - e);\n            a = Math.abs(u - e) < d ? c : c - 1;\n            break;\n        }\n        return n || (a = s.length - 1), a;\n    }\n    moveCursorDown(t) {\n        this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorUpOrDown(\"Down\", t);\n    }\n    moveCursorUp(t) {\n        this.selectionStart === 0 && this.selectionEnd === 0 || this._moveCursorUpOrDown(\"Up\", t);\n    }\n    _moveCursorUpOrDown(t, e) {\n        const s = this[\"get\".concat(t, \"CursorOffset\")](e, this._selectionDirection === Z);\n        if (e.shiftKey ? this.moveCursorWithShift(s) : this.moveCursorWithoutShift(s), s !== 0) {\n            const r = this.text.length;\n            this.selectionStart = ze(0, this.selectionStart, r), this.selectionEnd = ze(0, this.selectionEnd, r), this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea();\n        }\n    }\n    moveCursorWithShift(t) {\n        const e = this._selectionDirection === L ? this.selectionStart + t : this.selectionEnd + t;\n        return this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, e), t !== 0;\n    }\n    moveCursorWithoutShift(t) {\n        return t < 0 ? (this.selectionStart += t, this.selectionEnd = this.selectionStart) : (this.selectionEnd += t, this.selectionStart = this.selectionEnd), t !== 0;\n    }\n    moveCursorLeft(t) {\n        this.selectionStart === 0 && this.selectionEnd === 0 || this._moveCursorLeftOrRight(\"Left\", t);\n    }\n    _move(t, e, s) {\n        let r;\n        if (t.altKey) r = this[\"findWordBoundary\".concat(s)](this[e]);\n        else {\n            if (!t.metaKey && t.keyCode !== 35 && t.keyCode !== 36) return this[e] += s === \"Left\" ? -1 : 1, !0;\n            r = this[\"findLineBoundary\".concat(s)](this[e]);\n        }\n        return r !== void 0 && this[e] !== r && (this[e] = r, !0);\n    }\n    _moveLeft(t, e) {\n        return this._move(t, e, \"Left\");\n    }\n    _moveRight(t, e) {\n        return this._move(t, e, \"Right\");\n    }\n    moveCursorLeftWithoutShift(t) {\n        let e = !0;\n        return this._selectionDirection = L, this.selectionEnd === this.selectionStart && this.selectionStart !== 0 && (e = this._moveLeft(t, \"selectionStart\")), this.selectionEnd = this.selectionStart, e;\n    }\n    moveCursorLeftWithShift(t) {\n        return this._selectionDirection === Z && this.selectionStart !== this.selectionEnd ? this._moveLeft(t, \"selectionEnd\") : this.selectionStart !== 0 ? (this._selectionDirection = L, this._moveLeft(t, \"selectionStart\")) : void 0;\n    }\n    moveCursorRight(t) {\n        this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length || this._moveCursorLeftOrRight(\"Right\", t);\n    }\n    _moveCursorLeftOrRight(t, e) {\n        const s = \"moveCursor\".concat(t).concat(e.shiftKey ? \"WithShift\" : \"WithoutShift\");\n        this._currentCursorOpacity = 1, this[s](e) && (this.abortCursorAnimation(), this.initDelayedCursor(), this._fireSelectionChanged(), this._updateTextarea());\n    }\n    moveCursorRightWithShift(t) {\n        return this._selectionDirection === L && this.selectionStart !== this.selectionEnd ? this._moveRight(t, \"selectionStart\") : this.selectionEnd !== this._text.length ? (this._selectionDirection = Z, this._moveRight(t, \"selectionEnd\")) : void 0;\n    }\n    moveCursorRightWithoutShift(t) {\n        let e = !0;\n        return this._selectionDirection = Z, this.selectionStart === this.selectionEnd ? (e = this._moveRight(t, \"selectionStart\"), this.selectionEnd = this.selectionStart) : this.selectionStart = this.selectionEnd, e;\n    }\n}\nconst Ni = (i)=>!!i.button;\nclass Dd extends Id {\n    constructor(){\n        super(...arguments), y(this, \"draggableTextDelegate\", void 0);\n    }\n    initBehavior() {\n        this.on(\"mousedown\", this._mouseDownHandler), this.on(\"mousedown:before\", this._mouseDownHandlerBefore), this.on(\"mouseup\", this.mouseUpHandler), this.on(\"mousedblclick\", this.doubleClickHandler), this.on(\"tripleclick\", this.tripleClickHandler), this.__lastClickTime = +/* @__PURE__ */ new Date(), this.__lastLastClickTime = +/* @__PURE__ */ new Date(), this.__lastPointer = {}, this.on(\"mousedown\", this.onMouseDown), this.draggableTextDelegate = new kd(this), super.initBehavior();\n    }\n    shouldStartDragging() {\n        return this.draggableTextDelegate.isActive();\n    }\n    onDragStart(t) {\n        return this.draggableTextDelegate.onDragStart(t);\n    }\n    canDrop(t) {\n        return this.draggableTextDelegate.canDrop(t);\n    }\n    onMouseDown(t) {\n        if (!this.canvas) return;\n        this.__newClickTime = +/* @__PURE__ */ new Date();\n        const e = t.pointer;\n        this.isTripleClick(e) && (this.fire(\"tripleclick\", t), on(t.e)), this.__lastLastClickTime = this.__lastClickTime, this.__lastClickTime = this.__newClickTime, this.__lastPointer = e, this.__lastSelected = this.selected && !this.getActiveControl();\n    }\n    isTripleClick(t) {\n        return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === t.x && this.__lastPointer.y === t.y;\n    }\n    doubleClickHandler(t) {\n        this.isEditing && this.selectWord(this.getSelectionStartFromPointer(t.e));\n    }\n    tripleClickHandler(t) {\n        this.isEditing && this.selectLine(this.getSelectionStartFromPointer(t.e));\n    }\n    _mouseDownHandler(t) {\n        let { e } = t;\n        this.canvas && this.editable && !Ni(e) && !this.getActiveControl() && (this.draggableTextDelegate.start(e) || (this.canvas.textEditingManager.register(this), this.selected && (this.inCompositionMode = !1, this.setCursorByClick(e)), this.isEditing && (this.__selectionStartOnMouseDown = this.selectionStart, this.selectionStart === this.selectionEnd && this.abortCursorAnimation(), this.renderCursorOrSelection())));\n    }\n    _mouseDownHandlerBefore(t) {\n        let { e } = t;\n        this.canvas && this.editable && !Ni(e) && (this.selected = this === this.canvas._activeObject);\n    }\n    mouseUpHandler(t) {\n        let { e, transform: s } = t;\n        const r = this.draggableTextDelegate.end(e);\n        if (this.canvas) {\n            this.canvas.textEditingManager.unregister(this);\n            const n = this.canvas._activeObject;\n            if (n && n !== this) return;\n        }\n        !this.editable || this.group && !this.group.interactive || s && s.actionPerformed || Ni(e) || r || (this.__lastSelected && !this.getActiveControl() ? (this.selected = !1, this.__lastSelected = !1, this.enterEditing(e), this.selectionStart === this.selectionEnd ? this.initDelayedCursor(!0) : this.renderCursorOrSelection()) : this.selected = !0);\n    }\n    setCursorByClick(t) {\n        const e = this.getSelectionStartFromPointer(t), s = this.selectionStart, r = this.selectionEnd;\n        t.shiftKey ? this.setSelectionStartEndWithShift(s, r, e) : (this.selectionStart = e, this.selectionEnd = e), this.isEditing && (this._fireSelectionChanged(), this._updateTextarea());\n    }\n    getSelectionStartFromPointer(t) {\n        const e = this.canvas.getScenePoint(t).transform(St(this.calcTransformMatrix())).add(new _(-this._getLeftOffset(), -this._getTopOffset()));\n        let s = 0, r = 0, n = 0;\n        for(let l = 0; l < this._textLines.length && s <= e.y; l++)s += this.getHeightOfLine(l), n = l, l > 0 && (r += this._textLines[l - 1].length + this.missingNewlineOffset(l - 1));\n        let o = Math.abs(this._getLineLeftOffset(n));\n        const a = this._textLines[n].length, c = this.__charBounds[n];\n        for(let l = 0; l < a; l++){\n            const h = o + c[l].kernedWidth;\n            if (e.x <= h) {\n                Math.abs(e.x - h) <= Math.abs(e.x - o) && r++;\n                break;\n            }\n            o = h, r++;\n        }\n        return Math.min(this.flipX ? a - r : r, this._text.length);\n    }\n}\nconst _r = \"moveCursorUp\", Sr = \"moveCursorDown\", Tr = \"moveCursorLeft\", xr = \"moveCursorRight\", wr = \"exitEditing\", jd = v({\n    selectionStart: 0,\n    selectionEnd: 0,\n    selectionColor: \"rgba(17,119,255,0.3)\",\n    isEditing: !1,\n    editable: !0,\n    editingBorderColor: \"rgba(102,153,255,0.25)\",\n    cursorWidth: 2,\n    cursorColor: \"\",\n    cursorDelay: 1e3,\n    cursorDuration: 600,\n    caching: !0,\n    hiddenTextareaContainer: null,\n    keysMap: {\n        9: wr,\n        27: wr,\n        33: _r,\n        34: Sr,\n        35: xr,\n        36: Tr,\n        37: Tr,\n        38: _r,\n        39: xr,\n        40: Sr\n    },\n    keysMapRtl: {\n        9: wr,\n        27: wr,\n        33: _r,\n        34: Sr,\n        35: Tr,\n        36: xr,\n        37: xr,\n        38: _r,\n        39: Tr,\n        40: Sr\n    },\n    ctrlKeysMapDown: {\n        65: \"selectAll\"\n    },\n    ctrlKeysMapUp: {\n        67: \"copy\",\n        88: \"cut\"\n    }\n}, {\n    _selectionDirection: null,\n    _reSpace: /\\s|\\r?\\n/,\n    inCompositionMode: !1\n});\nclass oe extends Dd {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), oe.ownDefaults);\n    }\n    get type() {\n        const t = super.type;\n        return t === \"itext\" ? \"i-text\" : t;\n    }\n    constructor(t, e){\n        super(t, v(v({}, oe.ownDefaults), e)), this.initBehavior();\n    }\n    _set(t, e) {\n        return this.isEditing && this._savedProps && t in this._savedProps ? (this._savedProps[t] = e, this) : (t === \"canvas\" && (this.canvas instanceof vn && this.canvas.textEditingManager.remove(this), e instanceof vn && e.textEditingManager.add(this)), super._set(t, e));\n    }\n    setSelectionStart(t) {\n        t = Math.max(t, 0), this._updateAndFire(\"selectionStart\", t);\n    }\n    setSelectionEnd(t) {\n        t = Math.min(t, this.text.length), this._updateAndFire(\"selectionEnd\", t);\n    }\n    _updateAndFire(t, e) {\n        this[t] !== e && (this._fireSelectionChanged(), this[t] = e), this._updateTextarea();\n    }\n    _fireSelectionChanged() {\n        this.fire(\"selection:changed\"), this.canvas && this.canvas.fire(\"text:selection:changed\", {\n            target: this\n        });\n    }\n    initDimensions() {\n        this.isEditing && this.initDelayedCursor(), super.initDimensions();\n    }\n    getSelectionStyles() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.selectionStart || 0, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selectionEnd, s = arguments.length > 2 ? arguments[2] : void 0;\n        return super.getSelectionStyles(t, e, s);\n    }\n    setSelectionStyles(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selectionStart || 0, s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.selectionEnd;\n        return super.setSelectionStyles(t, e, s);\n    }\n    get2DCursorLocation() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.selectionStart, e = arguments.length > 1 ? arguments[1] : void 0;\n        return super.get2DCursorLocation(t, e);\n    }\n    render(t) {\n        super.render(t), this.cursorOffsetCache = {}, this.renderCursorOrSelection();\n    }\n    toCanvasElement(t) {\n        const e = this.isEditing;\n        this.isEditing = !1;\n        const s = super.toCanvasElement(t);\n        return this.isEditing = e, s;\n    }\n    renderCursorOrSelection() {\n        if (!this.isEditing) return;\n        const t = this.clearContextTop(!0);\n        if (!t) return;\n        const e = this._getCursorBoundaries();\n        this.selectionStart !== this.selectionEnd || this.inCompositionMode ? this.renderSelection(t, e) : this.renderCursor(t, e), this.canvas.contextTopDirty = !0, t.restore();\n    }\n    _getCursorBoundaries() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.selectionStart, e = arguments.length > 1 ? arguments[1] : void 0;\n        const s = this._getLeftOffset(), r = this._getTopOffset(), n = this._getCursorBoundariesOffsets(t, e);\n        return {\n            left: s,\n            top: r,\n            leftOffset: n.left,\n            topOffset: n.top\n        };\n    }\n    _getCursorBoundariesOffsets(t, e) {\n        return e ? this.__getCursorBoundariesOffsets(t) : this.cursorOffsetCache && \"top\" in this.cursorOffsetCache ? this.cursorOffsetCache : this.cursorOffsetCache = this.__getCursorBoundariesOffsets(t);\n    }\n    __getCursorBoundariesOffsets(t) {\n        let e = 0, s = 0;\n        const { charIndex: r, lineIndex: n } = this.get2DCursorLocation(t);\n        for(let l = 0; l < n; l++)e += this.getHeightOfLine(l);\n        const o = this._getLineLeftOffset(n), a = this.__charBounds[n][r];\n        a && (s = a.left), this.charSpacing !== 0 && r === this._textLines[n].length && (s -= this._getWidthOfCharSpacing());\n        const c = {\n            top: e,\n            left: o + (s > 0 ? s : 0)\n        };\n        return this.direction === \"rtl\" && (this.textAlign === Z || this.textAlign === Ht || this.textAlign === Vs ? c.left *= -1 : this.textAlign === L || this.textAlign === ni ? c.left = o - (s > 0 ? s : 0) : this.textAlign !== j && this.textAlign !== Gs || (c.left = o - (s > 0 ? s : 0))), c;\n    }\n    renderCursorAt(t) {\n        this._renderCursor(this.canvas.contextTop, this._getCursorBoundaries(t, !0), t);\n    }\n    renderCursor(t, e) {\n        this._renderCursor(t, e, this.selectionStart);\n    }\n    getCursorRenderingData() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.selectionStart, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getCursorBoundaries(t);\n        const s = this.get2DCursorLocation(t), r = s.lineIndex, n = s.charIndex > 0 ? s.charIndex - 1 : 0, o = this.getValueOfPropertyAt(r, n, \"fontSize\"), a = this.getObjectScaling().x * this.canvas.getZoom(), c = this.cursorWidth / a, l = this.getValueOfPropertyAt(r, n, \"deltaY\"), h = e.topOffset + (1 - this._fontSizeFraction) * this.getHeightOfLine(r) / this.lineHeight - o * (1 - this._fontSizeFraction);\n        return {\n            color: this.cursorColor || this.getValueOfPropertyAt(r, n, \"fill\"),\n            opacity: this._currentCursorOpacity,\n            left: e.left + e.leftOffset - c / 2,\n            top: h + e.top + l,\n            width: c,\n            height: o\n        };\n    }\n    _renderCursor(t, e, s) {\n        const { color: r, opacity: n, left: o, top: a, width: c, height: l } = this.getCursorRenderingData(s, e);\n        t.fillStyle = r, t.globalAlpha = n, t.fillRect(o, a, c, l);\n    }\n    renderSelection(t, e) {\n        const s = {\n            selectionStart: this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,\n            selectionEnd: this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd\n        };\n        this._renderSelection(t, s, e);\n    }\n    renderDragSourceEffect() {\n        const t = this.draggableTextDelegate.getDragStartSelection();\n        this._renderSelection(this.canvas.contextTop, t, this._getCursorBoundaries(t.selectionStart, !0));\n    }\n    renderDropTargetEffect(t) {\n        const e = this.getSelectionStartFromPointer(t);\n        this.renderCursorAt(e);\n    }\n    _renderSelection(t, e, s) {\n        const r = e.selectionStart, n = e.selectionEnd, o = this.textAlign.includes(Ht), a = this.get2DCursorLocation(r), c = this.get2DCursorLocation(n), l = a.lineIndex, h = c.lineIndex, u = a.charIndex < 0 ? 0 : a.charIndex, d = c.charIndex < 0 ? 0 : c.charIndex;\n        for(let f = l; f <= h; f++){\n            const g = this._getLineLeftOffset(f) || 0;\n            let p = this.getHeightOfLine(f), m = 0, b = 0, S = 0;\n            if (f === l && (b = this.__charBounds[l][u].left), f >= l && f < h) S = o && !this.isEndOfWrapping(f) ? this.width : this.getLineWidth(f) || 5;\n            else if (f === h) if (d === 0) S = this.__charBounds[h][d].left;\n            else {\n                const I = this._getWidthOfCharSpacing();\n                S = this.__charBounds[h][d - 1].left + this.__charBounds[h][d - 1].width - I;\n            }\n            m = p, (this.lineHeight < 1 || f === h && this.lineHeight > 1) && (p /= this.lineHeight);\n            let w = s.left + g + b, k = p, O = 0;\n            const x = S - b;\n            this.inCompositionMode ? (t.fillStyle = this.compositionColor || \"black\", k = 1, O = p) : t.fillStyle = this.selectionColor, this.direction === \"rtl\" && (this.textAlign === Z || this.textAlign === Ht || this.textAlign === Vs ? w = this.width - w - x : this.textAlign === L || this.textAlign === ni ? w = s.left + g - S : this.textAlign !== j && this.textAlign !== Gs || (w = s.left + g - S)), t.fillRect(w, s.top + s.topOffset + O, x, k), s.topOffset += m;\n        }\n    }\n    getCurrentCharFontSize() {\n        const t = this._getCurrentCharIndex();\n        return this.getValueOfPropertyAt(t.l, t.c, \"fontSize\");\n    }\n    getCurrentCharColor() {\n        const t = this._getCurrentCharIndex();\n        return this.getValueOfPropertyAt(t.l, t.c, rt);\n    }\n    _getCurrentCharIndex() {\n        const t = this.get2DCursorLocation(this.selectionStart, !0), e = t.charIndex > 0 ? t.charIndex - 1 : 0;\n        return {\n            l: t.lineIndex,\n            c: e\n        };\n    }\n    dispose() {\n        this.exitEditingImpl(), this.draggableTextDelegate.dispose(), super.dispose();\n    }\n}\ny(oe, \"ownDefaults\", jd), y(oe, \"type\", \"IText\"), C.setClass(oe), C.setClass(oe, \"i-text\");\nclass Le extends oe {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Le.ownDefaults);\n    }\n    constructor(t, e){\n        super(t, v(v({}, Le.ownDefaults), e));\n    }\n    static createControls() {\n        return {\n            controls: Oc()\n        };\n    }\n    initDimensions() {\n        this.initialized && (this.isEditing && this.initDelayedCursor(), this._clearCache(), this.dynamicMinWidth = 0, this._styleMap = this._generateStyleMap(this._splitText()), this.dynamicMinWidth > this.width && this._set(\"width\", this.dynamicMinWidth), this.textAlign.includes(Ht) && this.enlargeSpaces(), this.height = this.calcTextHeight());\n    }\n    _generateStyleMap(t) {\n        let e = 0, s = 0, r = 0;\n        const n = {};\n        for(let o = 0; o < t.graphemeLines.length; o++)t.graphemeText[r] === `\n` && o > 0 ? (s = 0, r++, e++) : !this.splitByGrapheme && this._reSpaceAndTab.test(t.graphemeText[r]) && o > 0 && (s++, r++), n[o] = {\n            line: e,\n            offset: s\n        }, r += t.graphemeLines[o].length, s += t.graphemeLines[o].length;\n        return n;\n    }\n    styleHas(t, e) {\n        if (this._styleMap && !this.isWrapping) {\n            const s = this._styleMap[e];\n            s && (e = s.line);\n        }\n        return super.styleHas(t, e);\n    }\n    isEmptyStyles(t) {\n        if (!this.styles) return !0;\n        let e, s = 0, r = t + 1, n = !1;\n        const o = this._styleMap[t], a = this._styleMap[t + 1];\n        o && (t = o.line, s = o.offset), a && (r = a.line, n = r === t, e = a.offset);\n        const c = t === void 0 ? this.styles : {\n            line: this.styles[t]\n        };\n        for(const l in c)for(const h in c[l]){\n            const u = parseInt(h, 10);\n            if (u >= s && (!n || u < e)) for(const d in c[l][h])return !1;\n        }\n        return !0;\n    }\n    _getStyleDeclaration(t, e) {\n        if (this._styleMap && !this.isWrapping) {\n            const s = this._styleMap[t];\n            if (!s) return {};\n            t = s.line, e = s.offset + e;\n        }\n        return super._getStyleDeclaration(t, e);\n    }\n    _setStyleDeclaration(t, e, s) {\n        const r = this._styleMap[t];\n        super._setStyleDeclaration(r.line, r.offset + e, s);\n    }\n    _deleteStyleDeclaration(t, e) {\n        const s = this._styleMap[t];\n        super._deleteStyleDeclaration(s.line, s.offset + e);\n    }\n    _getLineStyle(t) {\n        const e = this._styleMap[t];\n        return !!this.styles[e.line];\n    }\n    _setLineStyle(t) {\n        const e = this._styleMap[t];\n        super._setLineStyle(e.line);\n    }\n    _wrapText(t, e) {\n        this.isWrapping = !0;\n        const s = this.getGraphemeDataForRender(t), r = [];\n        for(let n = 0; n < s.wordsData.length; n++)r.push(...this._wrapLine(n, e, s));\n        return this.isWrapping = !1, r;\n    }\n    getGraphemeDataForRender(t) {\n        const e = this.splitByGrapheme, s = e ? \"\" : \" \";\n        let r = 0;\n        return {\n            wordsData: t.map((n, o)=>{\n                let a = 0;\n                const c = e ? this.graphemeSplit(n) : this.wordSplit(n);\n                return c.length === 0 ? [\n                    {\n                        word: [],\n                        width: 0\n                    }\n                ] : c.map((l)=>{\n                    const h = e ? [\n                        l\n                    ] : this.graphemeSplit(l), u = this._measureWord(h, o, a);\n                    return r = Math.max(u, r), a += h.length + s.length, {\n                        word: h,\n                        width: u\n                    };\n                });\n            }),\n            largestWordWidth: r\n        };\n    }\n    _measureWord(t, e) {\n        let s, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, n = 0;\n        for(let o = 0, a = t.length; o < a; o++)n += this._getGraphemeBox(t[o], e, o + r, s, !0).kernedWidth, s = t[o];\n        return n;\n    }\n    wordSplit(t) {\n        return t.split(this._wordJoiners);\n    }\n    _wrapLine(t, e, s) {\n        let { largestWordWidth: r, wordsData: n } = s, o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n        const a = this._getWidthOfCharSpacing(), c = this.splitByGrapheme, l = [], h = c ? \"\" : \" \";\n        let u = 0, d = [], f = 0, g = 0, p = !0;\n        e -= o;\n        const m = Math.max(e, r, this.dynamicMinWidth), b = n[t];\n        let S;\n        for(f = 0, S = 0; S < b.length; S++){\n            const { word: w, width: k } = b[S];\n            f += w.length, u += g + k - a, u > m && !p ? (l.push(d), d = [], u = k, p = !0) : u += a, p || c || d.push(h), d = d.concat(w), g = c ? 0 : this._measureWord([\n                h\n            ], t, f), f++, p = !1;\n        }\n        return S && l.push(d), r + o > this.dynamicMinWidth && (this.dynamicMinWidth = r - a + o), l;\n    }\n    isEndOfWrapping(t) {\n        return !this._styleMap[t + 1] || this._styleMap[t + 1].line !== this._styleMap[t].line;\n    }\n    missingNewlineOffset(t, e) {\n        return this.splitByGrapheme && !e ? this.isEndOfWrapping(t) ? 1 : 0 : 1;\n    }\n    _splitTextIntoLines(t) {\n        const e = super._splitTextIntoLines(t), s = this._wrapText(e.lines, this.width), r = new Array(s.length);\n        for(let n = 0; n < s.length; n++)r[n] = s[n].join(\"\");\n        return e.lines = r, e.graphemeLines = s, e;\n    }\n    getMinWidth() {\n        return Math.max(this.minWidth, this.dynamicMinWidth);\n    }\n    _removeExtraneousStyles() {\n        const t = /* @__PURE__ */ new Map();\n        for(const e in this._styleMap){\n            const s = parseInt(e, 10);\n            if (this._textLines[s]) {\n                const r = this._styleMap[e].line;\n                t.set(\"\".concat(r), !0);\n            }\n        }\n        for(const e in this.styles)t.has(e) || delete this.styles[e];\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        return super.toObject([\n            \"minWidth\",\n            \"splitByGrapheme\",\n            ...t\n        ]);\n    }\n}\ny(Le, \"type\", \"Textbox\"), y(Le, \"textLayoutProperties\", [\n    ...oe.textLayoutProperties,\n    \"width\"\n]), y(Le, \"ownDefaults\", {\n    minWidth: 20,\n    dynamicMinWidth: 2,\n    lockScalingFlip: !0,\n    noScaleCache: !1,\n    _wordJoiners: /[ \\t\\r]/,\n    splitByGrapheme: !1\n}), C.setClass(Le);\nclass Yo extends Ci {\n    shouldPerformLayout(t) {\n        return !!t.target.clipPath && super.shouldPerformLayout(t);\n    }\n    shouldLayoutClipPath() {\n        return !1;\n    }\n    calcLayoutResult(t, e) {\n        const { target: s } = t, { clipPath: r, group: n } = s;\n        if (!r || !this.shouldPerformLayout(t)) return;\n        const { width: o, height: a } = Gt(Fc(s, r)), c = new _(o, a);\n        if (r.absolutePositioned) return {\n            center: ae(r.getRelativeCenterPoint(), void 0, n ? n.calcTransformMatrix() : void 0),\n            size: c\n        };\n        {\n            const l = r.getRelativeCenterPoint().transform(s.calcOwnMatrix(), !0);\n            if (this.shouldPerformLayout(t)) {\n                const { center: h = new _(), correction: u = new _() } = this.calcBoundingBox(e, t) || {};\n                return {\n                    center: h.add(l),\n                    correction: u.subtract(l),\n                    size: c\n                };\n            }\n            return {\n                center: s.getRelativeCenterPoint().add(l),\n                size: c\n            };\n        }\n    }\n}\ny(Yo, \"type\", \"clip-path\"), C.setClass(Yo);\nclass Vo extends Ci {\n    getInitialSize(t, e) {\n        let { target: s } = t, { size: r } = e;\n        return new _(s.width || r.x, s.height || r.y);\n    }\n}\ny(Vo, \"type\", \"fixed\"), C.setClass(Vo);\nclass Ed extends Zs {\n    subscribeTargets(t) {\n        const e = t.target;\n        t.targets.reduce((s, r)=>(r.parent && s.add(r.parent), s), /* @__PURE__ */ new Set()).forEach((s)=>{\n            s.layoutManager.subscribeTargets({\n                target: s,\n                targets: [\n                    e\n                ]\n            });\n        });\n    }\n    unsubscribeTargets(t) {\n        const e = t.target, s = e.getObjects();\n        t.targets.reduce((r, n)=>(n.parent && r.add(n.parent), r), /* @__PURE__ */ new Set()).forEach((r)=>{\n            !s.some((n)=>n.parent === r) && r.layoutManager.unsubscribeTargets({\n                target: r,\n                targets: [\n                    e\n                ]\n            });\n        });\n    }\n}\nclass Ot extends Nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), Ot.ownDefaults);\n    }\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        super(), Object.assign(this, Ot.ownDefaults), this.setOptions(e);\n        const { left: s, top: r, layoutManager: n } = e;\n        this.groupInit(t, {\n            left: s,\n            top: r,\n            layoutManager: n ?? new Ed()\n        });\n    }\n    _shouldSetNestedCoords() {\n        return !0;\n    }\n    __objectSelectionMonitor() {}\n    multiSelectAdd() {\n        for(var t = arguments.length, e = new Array(t), s = 0; s < t; s++)e[s] = arguments[s];\n        this.multiSelectionStacking === \"selection-order\" ? this.add(...e) : e.forEach((r)=>{\n            const n = this._objects.findIndex((a)=>a.isInFrontOf(r)), o = n === -1 ? this.size() : n;\n            this.insertAt(o, r);\n        });\n    }\n    canEnterGroup(t) {\n        return this.getObjects().some((e)=>e.isDescendantOf(t) || t.isDescendantOf(e)) ? (Te(\"error\", \"ActiveSelection: circular object trees are not supported, this call has no effect\"), !1) : super.canEnterGroup(t);\n    }\n    enterGroup(t, e) {\n        t.parent && t.parent === t.group ? t.parent._exitGroup(t) : t.group && t.parent !== t.group && t.group.remove(t), this._enterGroup(t, e);\n    }\n    exitGroup(t, e) {\n        this._exitGroup(t, e), t.parent && t.parent._enterGroup(t, !0);\n    }\n    _onAfterObjectsChange(t, e) {\n        super._onAfterObjectsChange(t, e);\n        const s = /* @__PURE__ */ new Set();\n        e.forEach((r)=>{\n            const { parent: n } = r;\n            n && s.add(n);\n        }), t === Zn ? s.forEach((r)=>{\n            r._onAfterObjectsChange(ei, e);\n        }) : s.forEach((r)=>{\n            r._set(\"dirty\", !0);\n        });\n    }\n    onDeselect() {\n        return this.removeAll(), !1;\n    }\n    toString() {\n        return \"#<ActiveSelection: (\".concat(this.complexity(), \")>\");\n    }\n    shouldCache() {\n        return !1;\n    }\n    isOnACache() {\n        return !1;\n    }\n    _renderControls(t, e, s) {\n        t.save(), t.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n        const r = v(v({\n            hasControls: !1\n        }, s), {}, {\n            forActiveSelection: !0\n        });\n        for(let n = 0; n < this._objects.length; n++)this._objects[n]._renderControls(t, r);\n        super._renderControls(t, e), t.restore();\n    }\n}\ny(Ot, \"type\", \"ActiveSelection\"), y(Ot, \"ownDefaults\", {\n    multiSelectionStacking: \"canvas-stacking\"\n}), C.setClass(Ot), C.setClass(Ot, \"activeSelection\");\nclass Pd {\n    constructor(){\n        y(this, \"resources\", {});\n    }\n    applyFilters(t, e, s, r, n) {\n        const o = n.getContext(\"2d\");\n        if (!o) return;\n        o.drawImage(e, 0, 0, s, r);\n        const a = {\n            sourceWidth: s,\n            sourceHeight: r,\n            imageData: o.getImageData(0, 0, s, r),\n            originalEl: e,\n            originalImageData: o.getImageData(0, 0, s, r),\n            canvasEl: n,\n            ctx: o,\n            filterBackend: this\n        };\n        t.forEach((l)=>{\n            l.applyTo(a);\n        });\n        const { imageData: c } = a;\n        return c.width === s && c.height === r || (n.width = c.width, n.height = c.height), o.putImageData(c, 0, 0), a;\n    }\n}\nclass ol {\n    constructor(){\n        let { tileSize: t = A.textureSize } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        y(this, \"aPosition\", new Float32Array([\n            0,\n            0,\n            0,\n            1,\n            1,\n            0,\n            1,\n            1\n        ])), y(this, \"resources\", {}), this.tileSize = t, this.setupGLContext(t, t), this.captureGPUInfo();\n    }\n    setupGLContext(t, e) {\n        this.dispose(), this.createWebGLCanvas(t, e);\n    }\n    createWebGLCanvas(t, e) {\n        const s = Wt({\n            width: t,\n            height: e\n        }), r = s.getContext(\"webgl\", {\n            alpha: !0,\n            premultipliedAlpha: !1,\n            depth: !1,\n            stencil: !1,\n            antialias: !1\n        });\n        r && (r.clearColor(0, 0, 0, 0), this.canvas = s, this.gl = r);\n    }\n    applyFilters(t, e, s, r, n, o) {\n        const a = this.gl, c = n.getContext(\"2d\");\n        if (!a || !c) return;\n        let l;\n        o && (l = this.getCachedTexture(o, e));\n        const h = {\n            originalWidth: e.width || e.naturalWidth || 0,\n            originalHeight: e.height || e.naturalHeight || 0,\n            sourceWidth: s,\n            sourceHeight: r,\n            destinationWidth: s,\n            destinationHeight: r,\n            context: a,\n            sourceTexture: this.createTexture(a, s, r, l ? void 0 : e),\n            targetTexture: this.createTexture(a, s, r),\n            originalTexture: l || this.createTexture(a, s, r, l ? void 0 : e),\n            passes: t.length,\n            webgl: !0,\n            aPosition: this.aPosition,\n            programCache: this.programCache,\n            pass: 0,\n            filterBackend: this,\n            targetCanvas: n\n        }, u = a.createFramebuffer();\n        return a.bindFramebuffer(a.FRAMEBUFFER, u), t.forEach((d)=>{\n            d && d.applyTo(h);\n        }), function(d) {\n            const f = d.targetCanvas, g = f.width, p = f.height, m = d.destinationWidth, b = d.destinationHeight;\n            g === m && p === b || (f.width = m, f.height = b);\n        }(h), this.copyGLTo2D(a, h), a.bindTexture(a.TEXTURE_2D, null), a.deleteTexture(h.sourceTexture), a.deleteTexture(h.targetTexture), a.deleteFramebuffer(u), c.setTransform(1, 0, 0, 1, 0, 0), h;\n    }\n    dispose() {\n        this.canvas && (this.canvas = null, this.gl = null), this.clearWebGLCaches();\n    }\n    clearWebGLCaches() {\n        this.programCache = {}, this.textureCache = {};\n    }\n    createTexture(t, e, s, r, n) {\n        const { NEAREST: o, TEXTURE_2D: a, RGBA: c, UNSIGNED_BYTE: l, CLAMP_TO_EDGE: h, TEXTURE_MAG_FILTER: u, TEXTURE_MIN_FILTER: d, TEXTURE_WRAP_S: f, TEXTURE_WRAP_T: g } = t, p = t.createTexture();\n        return t.bindTexture(a, p), t.texParameteri(a, u, n || o), t.texParameteri(a, d, n || o), t.texParameteri(a, f, h), t.texParameteri(a, g, h), r ? t.texImage2D(a, 0, c, c, l, r) : t.texImage2D(a, 0, c, e, s, 0, c, l, null), p;\n    }\n    getCachedTexture(t, e, s) {\n        const { textureCache: r } = this;\n        if (r[t]) return r[t];\n        {\n            const n = this.createTexture(this.gl, e.width, e.height, e, s);\n            return n && (r[t] = n), n;\n        }\n    }\n    evictCachesForKey(t) {\n        this.textureCache[t] && (this.gl.deleteTexture(this.textureCache[t]), delete this.textureCache[t]);\n    }\n    copyGLTo2D(t, e) {\n        const s = t.canvas, r = e.targetCanvas, n = r.getContext(\"2d\");\n        if (!n) return;\n        n.translate(0, r.height), n.scale(1, -1);\n        const o = s.height - r.height;\n        n.drawImage(s, 0, o, r.width, r.height, 0, 0, r.width, r.height);\n    }\n    copyGLTo2DPutImageData(t, e) {\n        const s = e.targetCanvas.getContext(\"2d\"), r = e.destinationWidth, n = e.destinationHeight, o = r * n * 4;\n        if (!s) return;\n        const a = new Uint8Array(this.imageBuffer, 0, o), c = new Uint8ClampedArray(this.imageBuffer, 0, o);\n        t.readPixels(0, 0, r, n, t.RGBA, t.UNSIGNED_BYTE, a);\n        const l = new ImageData(c, r, n);\n        s.putImageData(l, 0, 0);\n    }\n    captureGPUInfo() {\n        if (this.gpuInfo) return this.gpuInfo;\n        const t = this.gl, e = {\n            renderer: \"\",\n            vendor: \"\"\n        };\n        if (!t) return e;\n        const s = t.getExtension(\"WEBGL_debug_renderer_info\");\n        if (s) {\n            const r = t.getParameter(s.UNMASKED_RENDERER_WEBGL), n = t.getParameter(s.UNMASKED_VENDOR_WEBGL);\n            r && (e.renderer = r.toLowerCase()), n && (e.vendor = n.toLowerCase());\n        }\n        return this.gpuInfo = e, e;\n    }\n}\nlet Ui;\nfunction Ad() {\n    const { WebGLProbe: i } = $t();\n    return i.queryWebGL(kt()), A.enableGLFiltering && i.isSupported(A.textureSize) ? new ol({\n        tileSize: A.textureSize\n    }) : new Pd();\n}\nfunction $i() {\n    return !Ui && (!(arguments.length > 0 && arguments[0] !== void 0) || arguments[0]) && (Ui = Ad()), Ui;\n}\nconst Fd = [\n    \"filters\",\n    \"resizeFilter\",\n    \"src\",\n    \"crossOrigin\",\n    \"type\"\n], al = [\n    \"cropX\",\n    \"cropY\"\n];\nclass wt extends nt {\n    static getDefaults() {\n        return v(v({}, super.getDefaults()), wt.ownDefaults);\n    }\n    constructor(t, e){\n        super(), y(this, \"_lastScaleX\", 1), y(this, \"_lastScaleY\", 1), y(this, \"_filterScalingX\", 1), y(this, \"_filterScalingY\", 1), this.filters = [], Object.assign(this, wt.ownDefaults), this.setOptions(e), this.cacheKey = \"texture\".concat(we()), this.setElement(typeof t == \"string\" ? (this.canvas && At(this.canvas.getElement()) || Cs()).getElementById(t) : t, e);\n    }\n    getElement() {\n        return this._element;\n    }\n    setElement(t) {\n        var e;\n        let s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._element = t, this._originalElement = t, this._setWidthHeight(s), (e = t.classList) === null || e === void 0 || e.add(wt.CSS_CANVAS), this.filters.length !== 0 && this.applyFilters(), this.resizeFilter && this.applyResizeFilters();\n    }\n    removeTexture(t) {\n        const e = $i(!1);\n        e instanceof ol && e.evictCachesForKey(t);\n    }\n    dispose() {\n        super.dispose(), this.removeTexture(this.cacheKey), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), this._cacheContext = null, [\n            \"_originalElement\",\n            \"_element\",\n            \"_filteredEl\",\n            \"_cacheCanvas\"\n        ].forEach((t)=>{\n            const e = this[t];\n            e && $t().dispose(e), this[t] = void 0;\n        });\n    }\n    getCrossOrigin() {\n        return this._originalElement && (this._originalElement.crossOrigin || null);\n    }\n    getOriginalSize() {\n        const t = this.getElement();\n        return t ? {\n            width: t.naturalWidth || t.width,\n            height: t.naturalHeight || t.height\n        } : {\n            width: 0,\n            height: 0\n        };\n    }\n    _stroke(t) {\n        if (!this.stroke || this.strokeWidth === 0) return;\n        const e = this.width / 2, s = this.height / 2;\n        t.beginPath(), t.moveTo(-e, -s), t.lineTo(e, -s), t.lineTo(e, s), t.lineTo(-e, s), t.lineTo(-e, -s), t.closePath();\n    }\n    toObject() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        const e = [];\n        return this.filters.forEach((s)=>{\n            s && e.push(s.toObject());\n        }), v(v({}, super.toObject([\n            ...al,\n            ...t\n        ])), {}, {\n            src: this.getSrc(),\n            crossOrigin: this.getCrossOrigin(),\n            filters: e\n        }, this.resizeFilter ? {\n            resizeFilter: this.resizeFilter.toObject()\n        } : {});\n    }\n    hasCrop() {\n        return !!this.cropX || !!this.cropY || this.width < this._element.width || this.height < this._element.height;\n    }\n    _toSVG() {\n        const t = [], e = this._element, s = -this.width / 2, r = -this.height / 2;\n        let n = [], o = [], a = \"\", c = \"\";\n        if (!e) return [];\n        if (this.hasCrop()) {\n            const l = we();\n            n.push('<clipPath id=\"imageCrop_' + l + `\">\n`, '\t<rect x=\"' + s + '\" y=\"' + r + '\" width=\"' + this.width + '\" height=\"' + this.height + `\" />\n`, `</clipPath>\n`), a = ' clip-path=\"url(#imageCrop_' + l + ')\" ';\n        }\n        if (this.imageSmoothing || (c = ' image-rendering=\"optimizeSpeed\"'), t.push(\"\t<image \", \"COMMON_PARTS\", 'xlink:href=\"'.concat(this.getSvgSrc(!0), '\" x=\"').concat(s - this.cropX, '\" y=\"').concat(r - this.cropY, '\" width=\"').concat(e.width || e.naturalWidth, '\" height=\"').concat(e.height || e.naturalHeight, '\"').concat(c).concat(a, `></image>\n`)), this.stroke || this.strokeDashArray) {\n            const l = this.fill;\n            this.fill = null, o = [\n                '\t<rect x=\"'.concat(s, '\" y=\"').concat(r, '\" width=\"').concat(this.width, '\" height=\"').concat(this.height, '\" style=\"').concat(this.getSvgStyles(), `\" />\n`)\n            ], this.fill = l;\n        }\n        return n = this.paintFirst !== rt ? n.concat(o, t) : n.concat(t, o), n;\n    }\n    getSrc(t) {\n        const e = t ? this._element : this._originalElement;\n        return e ? e.toDataURL ? e.toDataURL() : this.srcFromAttribute ? e.getAttribute(\"src\") || \"\" : e.src : this.src || \"\";\n    }\n    getSvgSrc(t) {\n        return this.getSrc(t);\n    }\n    setSrc(t) {\n        let { crossOrigin: e, signal: s } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return Ys(t, {\n            crossOrigin: e,\n            signal: s\n        }).then((r)=>{\n            e !== void 0 && this.set({\n                crossOrigin: e\n            }), this.setElement(r);\n        });\n    }\n    toString() {\n        return '#<Image: { src: \"'.concat(this.getSrc(), '\" }>');\n    }\n    applyResizeFilters() {\n        const t = this.resizeFilter, e = this.minimumScaleTrigger, s = this.getTotalObjectScaling(), r = s.x, n = s.y, o = this._filteredEl || this._originalElement;\n        if (this.group && this.set(\"dirty\", !0), !t || r > e && n > e) return this._element = o, this._filterScalingX = 1, this._filterScalingY = 1, this._lastScaleX = r, void (this._lastScaleY = n);\n        const a = Wt(o), { width: c, height: l } = o;\n        this._element = a, this._lastScaleX = t.scaleX = r, this._lastScaleY = t.scaleY = n, $i().applyFilters([\n            t\n        ], o, c, l, this._element), this._filterScalingX = a.width / this._originalElement.width, this._filterScalingY = a.height / this._originalElement.height;\n    }\n    applyFilters() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.filters || [];\n        if (t = t.filter((n)=>n && !n.isNeutralState()), this.set(\"dirty\", !0), this.removeTexture(\"\".concat(this.cacheKey, \"_filtered\")), t.length === 0) return this._element = this._originalElement, this._filteredEl = void 0, this._filterScalingX = 1, void (this._filterScalingY = 1);\n        const e = this._originalElement, s = e.naturalWidth || e.width, r = e.naturalHeight || e.height;\n        if (this._element === this._originalElement) {\n            const n = Wt({\n                width: s,\n                height: r\n            });\n            this._element = n, this._filteredEl = n;\n        } else this._filteredEl && (this._element = this._filteredEl, this._filteredEl.getContext(\"2d\").clearRect(0, 0, s, r), this._lastScaleX = 1, this._lastScaleY = 1);\n        $i().applyFilters(t, this._originalElement, s, r, this._element, this.cacheKey), this._originalElement.width === this._element.width && this._originalElement.height === this._element.height || (this._filterScalingX = this._element.width / this._originalElement.width, this._filterScalingY = this._element.height / this._originalElement.height);\n    }\n    _render(t) {\n        t.imageSmoothingEnabled = this.imageSmoothing, this.isMoving !== !0 && this.resizeFilter && this._needsResize() && this.applyResizeFilters(), this._stroke(t), this._renderPaintInOrder(t);\n    }\n    drawCacheOnCanvas(t) {\n        t.imageSmoothingEnabled = this.imageSmoothing, super.drawCacheOnCanvas(t);\n    }\n    shouldCache() {\n        return this.needsItsOwnCache();\n    }\n    _renderFill(t) {\n        const e = this._element;\n        if (!e) return;\n        const s = this._filterScalingX, r = this._filterScalingY, n = this.width, o = this.height, a = Math.max(this.cropX, 0), c = Math.max(this.cropY, 0), l = e.naturalWidth || e.width, h = e.naturalHeight || e.height, u = a * s, d = c * r, f = Math.min(n * s, l - u), g = Math.min(o * r, h - d), p = -n / 2, m = -o / 2, b = Math.min(n, l / s - a), S = Math.min(o, h / r - c);\n        e && t.drawImage(e, u, d, f, g, p, m, b, S);\n    }\n    _needsResize() {\n        const t = this.getTotalObjectScaling();\n        return t.x !== this._lastScaleX || t.y !== this._lastScaleY;\n    }\n    _resetWidthHeight() {\n        this.set(this.getOriginalSize());\n    }\n    _setWidthHeight() {\n        let { width: t, height: e } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const s = this.getOriginalSize();\n        this.width = t || s.width, this.height = e || s.height;\n    }\n    parsePreserveAspectRatioAttribute() {\n        const t = qa(this.preserveAspectRatio || \"\"), e = this.width, s = this.height, r = {\n            width: e,\n            height: s\n        };\n        let n, o = this._element.width, a = this._element.height, c = 1, l = 1, h = 0, u = 0, d = 0, f = 0;\n        return !t || t.alignX === pt && t.alignY === pt ? (c = e / o, l = s / a) : (t.meetOrSlice === \"meet\" && (c = l = Lc(this._element, r), n = (e - o * c) / 2, t.alignX === \"Min\" && (h = -n), t.alignX === \"Max\" && (h = n), n = (s - a * l) / 2, t.alignY === \"Min\" && (u = -n), t.alignY === \"Max\" && (u = n)), t.meetOrSlice === \"slice\" && (c = l = Bc(this._element, r), n = o - e / c, t.alignX === \"Mid\" && (d = n / 2), t.alignX === \"Max\" && (d = n), n = a - s / l, t.alignY === \"Mid\" && (f = n / 2), t.alignY === \"Max\" && (f = n), o = e / c, a = s / l)), {\n            width: o,\n            height: a,\n            scaleX: c,\n            scaleY: l,\n            offsetLeft: h,\n            offsetTop: u,\n            cropX: d,\n            cropY: f\n        };\n    }\n    static fromObject(t, e) {\n        let { filters: s, resizeFilter: r, src: n, crossOrigin: o, type: a } = t, c = G(t, Fd);\n        return Promise.all([\n            Ys(n, v(v({}, e), {}, {\n                crossOrigin: o\n            })),\n            s && bs(s, e),\n            r && bs([\n                r\n            ], e),\n            cr(c, e)\n        ]).then((l)=>{\n            let [h, u = [], [d] = [], f = {}] = l;\n            return new this(h, v(v({}, c), {}, {\n                src: n,\n                filters: u,\n                resizeFilter: d\n            }, f));\n        });\n    }\n    static fromURL(t) {\n        let { crossOrigin: e = null, signal: s } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = arguments.length > 2 ? arguments[2] : void 0;\n        return Ys(t, {\n            crossOrigin: e,\n            signal: s\n        }).then((n)=>new this(n, r));\n    }\n    static async fromElement(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = arguments.length > 2 ? arguments[2] : void 0;\n        const r = fe(t, this.ATTRIBUTE_NAMES, s);\n        return this.fromURL(r[\"xlink:href\"], e, r).catch((n)=>(Te(\"log\", \"Unable to parse Image\", n), null));\n    }\n}\ny(wt, \"type\", \"Image\"), y(wt, \"cacheProperties\", [\n    ...de,\n    ...al\n]), y(wt, \"ownDefaults\", {\n    strokeWidth: 0,\n    srcFromAttribute: !1,\n    minimumScaleTrigger: 0.5,\n    cropX: 0,\n    cropY: 0,\n    imageSmoothing: !0\n}), y(wt, \"CSS_CANVAS\", \"canvas-img\"), y(wt, \"ATTRIBUTE_NAMES\", [\n    ...De,\n    \"x\",\n    \"y\",\n    \"width\",\n    \"height\",\n    \"preserveAspectRatio\",\n    \"xlink:href\",\n    \"crossOrigin\",\n    \"image-rendering\"\n]), C.setClass(wt), C.setSVGClass(wt);\n_i([\n    \"pattern\",\n    \"defs\",\n    \"symbol\",\n    \"metadata\",\n    \"clipPath\",\n    \"mask\",\n    \"desc\"\n]);\nconst cl = Xa, Go = (i)=>function(t, e, s) {\n        const { points: r, pathOffset: n } = s;\n        return new _(r[i]).subtract(n).transform(J(s.getViewportTransform(), s.calcTransformMatrix()));\n    }, ll = (i, t, e, s)=>{\n    const { target: r, pointIndex: n } = t, o = r, a = ae(new _(e, s), void 0, o.calcOwnMatrix());\n    return o.points[n] = a.add(o.pathOffset), o.setDimensions(), !0;\n}, hl = (i, t)=>function(e, s, r, n) {\n        const o = s.target, a = new _(o.points[(i > 0 ? i : o.points.length) - 1]), c = a.subtract(o.pathOffset).transform(o.calcOwnMatrix()), l = t(e, v(v({}, s), {}, {\n            pointIndex: i\n        }), r, n), h = a.subtract(o.pathOffset).transform(o.calcOwnMatrix()).subtract(c);\n        return o.left -= h.x, o.top -= h.y, l;\n    }, No = (i)=>Ie(cl, hl(i, ll)), bn = (i, t, e)=>{\n    const { path: s, pathOffset: r } = i, n = s[t];\n    return new _(n[e] - r.x, n[e + 1] - r.y).transform(J(i.getViewportTransform(), i.calcTransformMatrix()));\n};\nfunction Rd(i, t, e) {\n    const { commandIndex: s, pointIndex: r } = this;\n    return bn(e, s, r);\n}\nfunction Ld(i, t, e, s) {\n    const { target: r } = t, { commandIndex: n, pointIndex: o } = this, a = ((c, l, h, u, d)=>{\n        const { path: f, pathOffset: g } = c, p = f[(u > 0 ? u : f.length) - 1], m = new _(p[d], p[d + 1]), b = m.subtract(g).transform(c.calcOwnMatrix()), S = ae(new _(l, h), void 0, c.calcOwnMatrix());\n        f[u][d] = S.x + g.x, f[u][d + 1] = S.y + g.y, c.setDimensions();\n        const w = m.subtract(c.pathOffset).transform(c.calcOwnMatrix()).subtract(b);\n        return c.left -= w.x, c.top -= w.y, c.set(\"dirty\", !0), !0;\n    })(r, e, s, n, o);\n    return Hn(this.actionName, v(v({}, Yn(i, t, e, s)), {}, {\n        commandIndex: n,\n        pointIndex: o\n    })), a;\n}\nclass ul extends U {\n    constructor(t){\n        super(t);\n    }\n    render(t, e, s, r, n) {\n        const o = v(v({}, r), {}, {\n            cornerColor: this.controlFill,\n            cornerStrokeColor: this.controlStroke,\n            transparentCorners: !this.controlFill\n        });\n        super.render(t, e, s, o, n);\n    }\n}\nclass Bd extends ul {\n    constructor(t){\n        super(t);\n    }\n    render(t, e, s, r, n) {\n        const { path: o } = n, { commandIndex: a, pointIndex: c, connectToCommandIndex: l, connectToPointIndex: h } = this;\n        t.save(), t.strokeStyle = this.controlStroke, this.connectionDashArray && t.setLineDash(this.connectionDashArray);\n        const [u] = o[a], d = bn(n, l, h);\n        if (u === \"Q\") {\n            const f = bn(n, a, c + 2);\n            t.moveTo(f.x, f.y), t.lineTo(e, s);\n        } else t.moveTo(e, s);\n        t.lineTo(d.x, d.y), t.stroke(), t.restore(), super.render(t, e, s, r, n);\n    }\n}\nconst Cr = (i, t, e, s, r, n)=>new (e ? Bd : ul)(v(v({\n        commandIndex: i,\n        pointIndex: t,\n        actionName: \"modifyPath\",\n        positionHandler: Rd,\n        actionHandler: Ld,\n        connectToCommandIndex: r,\n        connectToPointIndex: n\n    }, s), e ? s.controlPointStyle : s.pointStyle));\nvar Ds = Object.freeze({\n    __proto__: null,\n    changeWidth: hn,\n    createObjectDefaultControls: qn,\n    createPathControls: function(i) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const e = {};\n        let s = \"M\";\n        return i.path.forEach((r, n)=>{\n            const o = r[0];\n            switch(o !== \"Z\" && (e[\"c_\".concat(n, \"_\").concat(o)] = Cr(n, r.length - 2, !1, t)), o){\n                case \"C\":\n                    e[\"c_\".concat(n, \"_C_CP_1\")] = Cr(n, 1, !0, t, n - 1, /* @__PURE__ */ ((a)=>a === \"C\" ? 5 : a === \"Q\" ? 3 : 1)(s)), e[\"c_\".concat(n, \"_C_CP_2\")] = Cr(n, 3, !0, t, n, 5);\n                    break;\n                case \"Q\":\n                    e[\"c_\".concat(n, \"_Q_CP_1\")] = Cr(n, 1, !0, t, n, 3);\n            }\n            s = o;\n        }), e;\n    },\n    createPolyActionHandler: No,\n    createPolyControls: function(i) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const e = {};\n        for(let s = 0; s < (typeof i == \"number\" ? i : i.points.length); s++)e[\"p\".concat(s)] = new U(v({\n            actionName: cl,\n            positionHandler: Go(s),\n            actionHandler: No(s)\n        }, t));\n        return e;\n    },\n    createPolyPositionHandler: Go,\n    createResizeControls: Cc,\n    createTextboxDefaultControls: Oc,\n    dragHandler: oc,\n    factoryPolyActionHandler: hl,\n    getLocalPoint: bi,\n    polyActionHandler: ll,\n    renderCircleControl: fc,\n    renderSquareControl: gc,\n    rotationStyleHandler: pc,\n    rotationWithSnapping: mc,\n    scaleCursorStyleHandler: Ze,\n    scaleOrSkewActionName: Bs,\n    scaleSkewCursorStyleHandler: Fe,\n    scalingEqually: Ls,\n    scalingX: bc,\n    scalingXOrSkewingY: un,\n    scalingY: _c,\n    scalingYOrSkewingX: dn,\n    skewCursorStyleHandler: Sc,\n    skewHandlerX: xc,\n    skewHandlerY: wc,\n    wrapWithFireEvent: Ie,\n    wrapWithFixedAnchor: Ge\n});\nconst ki = (i)=>i.webgl !== void 0, to = \"precision highp float\", Wd = `\n    `.concat(to, `;\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`), Xd = [\n    \"type\"\n], zd = [\n    \"type\"\n], Hd = new RegExp(to, \"g\");\nclass it {\n    get type() {\n        return this.constructor.type;\n    }\n    constructor(){\n        let t = G(arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, Xd);\n        Object.assign(this, this.constructor.defaults, t);\n    }\n    getFragmentSource() {\n        return Wd;\n    }\n    getVertexSource() {\n        return `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n    }\n    createProgram(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getFragmentSource(), s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getVertexSource();\n        const { WebGLProbe: { GLPrecision: r = \"highp\" } } = $t();\n        r !== \"highp\" && (e = e.replace(Hd, to.replace(\"highp\", r)));\n        const n = t.createShader(t.VERTEX_SHADER), o = t.createShader(t.FRAGMENT_SHADER), a = t.createProgram();\n        if (!n || !o || !a) throw new Yt(\"Vertex, fragment shader or program creation error\");\n        if (t.shaderSource(n, s), t.compileShader(n), !t.getShaderParameter(n, t.COMPILE_STATUS)) throw new Yt(\"Vertex shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(n)));\n        if (t.shaderSource(o, e), t.compileShader(o), !t.getShaderParameter(o, t.COMPILE_STATUS)) throw new Yt(\"Fragment shader compile error for \".concat(this.type, \": \").concat(t.getShaderInfoLog(o)));\n        if (t.attachShader(a, n), t.attachShader(a, o), t.linkProgram(a), !t.getProgramParameter(a, t.LINK_STATUS)) throw new Yt('Shader link error for \"'.concat(this.type, '\" ').concat(t.getProgramInfoLog(a)));\n        const c = this.getUniformLocations(t, a) || {};\n        return c.uStepW = t.getUniformLocation(a, \"uStepW\"), c.uStepH = t.getUniformLocation(a, \"uStepH\"), {\n            program: a,\n            attributeLocations: this.getAttributeLocations(t, a),\n            uniformLocations: c\n        };\n    }\n    getAttributeLocations(t, e) {\n        return {\n            aPosition: t.getAttribLocation(e, \"aPosition\")\n        };\n    }\n    getUniformLocations(t, e) {\n        const s = this.constructor.uniformLocations, r = {};\n        for(let n = 0; n < s.length; n++)r[s[n]] = t.getUniformLocation(e, s[n]);\n        return r;\n    }\n    sendAttributeData(t, e, s) {\n        const r = e.aPosition, n = t.createBuffer();\n        t.bindBuffer(t.ARRAY_BUFFER, n), t.enableVertexAttribArray(r), t.vertexAttribPointer(r, 2, t.FLOAT, !1, 0, 0), t.bufferData(t.ARRAY_BUFFER, s, t.STATIC_DRAW);\n    }\n    _setupFrameBuffer(t) {\n        const e = t.context;\n        if (t.passes > 1) {\n            const s = t.destinationWidth, r = t.destinationHeight;\n            t.sourceWidth === s && t.sourceHeight === r || (e.deleteTexture(t.targetTexture), t.targetTexture = t.filterBackend.createTexture(e, s, r)), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t.targetTexture, 0);\n        } else e.bindFramebuffer(e.FRAMEBUFFER, null), e.finish();\n    }\n    _swapTextures(t) {\n        t.passes--, t.pass++;\n        const e = t.targetTexture;\n        t.targetTexture = t.sourceTexture, t.sourceTexture = e;\n    }\n    isNeutralState(t) {\n        return !1;\n    }\n    applyTo(t) {\n        ki(t) ? (this._setupFrameBuffer(t), this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n    }\n    applyTo2d(t) {}\n    getCacheKey() {\n        return this.type;\n    }\n    retrieveShader(t) {\n        const e = this.getCacheKey();\n        return t.programCache[e] || (t.programCache[e] = this.createProgram(t.context)), t.programCache[e];\n    }\n    applyToWebGL(t) {\n        const e = t.context, s = this.retrieveShader(t);\n        t.pass === 0 && t.originalTexture ? e.bindTexture(e.TEXTURE_2D, t.originalTexture) : e.bindTexture(e.TEXTURE_2D, t.sourceTexture), e.useProgram(s.program), this.sendAttributeData(e, s.attributeLocations, t.aPosition), e.uniform1f(s.uniformLocations.uStepW, 1 / t.sourceWidth), e.uniform1f(s.uniformLocations.uStepH, 1 / t.sourceHeight), this.sendUniformData(e, s.uniformLocations), e.viewport(0, 0, t.destinationWidth, t.destinationHeight), e.drawArrays(e.TRIANGLE_STRIP, 0, 4);\n    }\n    bindAdditionalTexture(t, e, s) {\n        t.activeTexture(s), t.bindTexture(t.TEXTURE_2D, e), t.activeTexture(t.TEXTURE0);\n    }\n    unbindAdditionalTexture(t, e) {\n        t.activeTexture(e), t.bindTexture(t.TEXTURE_2D, null), t.activeTexture(t.TEXTURE0);\n    }\n    sendUniformData(t, e) {}\n    createHelpLayer(t) {\n        if (!t.helpLayer) {\n            const { sourceWidth: e, sourceHeight: s } = t, r = Wt({\n                width: e,\n                height: s\n            });\n            t.helpLayer = r;\n        }\n    }\n    toObject() {\n        const t = Object.keys(this.constructor.defaults || {});\n        return v({\n            type: this.type\n        }, t.reduce((e, s)=>(e[s] = this[s], e), {}));\n    }\n    toJSON() {\n        return this.toObject();\n    }\n    static async fromObject(t, e) {\n        return new this(G(t, zd));\n    }\n}\ny(it, \"type\", \"BaseFilter\"), y(it, \"uniformLocations\", []);\nconst Yd = {\n    multiply: `gl_FragColor.rgb *= uColor.rgb;\n`,\n    screen: `gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n`,\n    add: `gl_FragColor.rgb += uColor.rgb;\n`,\n    difference: `gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n`,\n    subtract: `gl_FragColor.rgb -= uColor.rgb;\n`,\n    lighten: `gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n`,\n    darken: `gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n`,\n    exclusion: `gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n`,\n    overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n    tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `\n};\nclass Or extends it {\n    getCacheKey() {\n        return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n        return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          `.concat(Yd[this.mode], `\n        }\n      }\n      `);\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = new W(this.color).getSource(), r = this.alpha, n = s[0] * r, o = s[1] * r, a = s[2] * r, c = 1 - r;\n        for(let l = 0; l < e.length; l += 4){\n            const h = e[l], u = e[l + 1], d = e[l + 2];\n            let f, g, p;\n            switch(this.mode){\n                case \"multiply\":\n                    f = h * n / 255, g = u * o / 255, p = d * a / 255;\n                    break;\n                case \"screen\":\n                    f = 255 - (255 - h) * (255 - n) / 255, g = 255 - (255 - u) * (255 - o) / 255, p = 255 - (255 - d) * (255 - a) / 255;\n                    break;\n                case \"add\":\n                    f = h + n, g = u + o, p = d + a;\n                    break;\n                case \"difference\":\n                    f = Math.abs(h - n), g = Math.abs(u - o), p = Math.abs(d - a);\n                    break;\n                case \"subtract\":\n                    f = h - n, g = u - o, p = d - a;\n                    break;\n                case \"darken\":\n                    f = Math.min(h, n), g = Math.min(u, o), p = Math.min(d, a);\n                    break;\n                case \"lighten\":\n                    f = Math.max(h, n), g = Math.max(u, o), p = Math.max(d, a);\n                    break;\n                case \"overlay\":\n                    f = n < 128 ? 2 * h * n / 255 : 255 - 2 * (255 - h) * (255 - n) / 255, g = o < 128 ? 2 * u * o / 255 : 255 - 2 * (255 - u) * (255 - o) / 255, p = a < 128 ? 2 * d * a / 255 : 255 - 2 * (255 - d) * (255 - a) / 255;\n                    break;\n                case \"exclusion\":\n                    f = n + h - 2 * n * h / 255, g = o + u - 2 * o * u / 255, p = a + d - 2 * a * d / 255;\n                    break;\n                case \"tint\":\n                    f = n + h * c, g = o + u * c, p = a + d * c;\n            }\n            e[l] = f, e[l + 1] = g, e[l + 2] = p;\n        }\n    }\n    sendUniformData(t, e) {\n        const s = new W(this.color).getSource();\n        s[0] = this.alpha * s[0] / 255, s[1] = this.alpha * s[1] / 255, s[2] = this.alpha * s[2] / 255, s[3] = this.alpha, t.uniform4fv(e.uColor, s);\n    }\n}\ny(Or, \"defaults\", {\n    color: \"#F95C63\",\n    mode: \"multiply\",\n    alpha: 1\n}), y(Or, \"type\", \"BlendColor\"), y(Or, \"uniformLocations\", [\n    \"uColor\"\n]), C.setClass(Or);\nconst Vd = {\n    multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n    mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `\n}, Gd = [\n    \"type\",\n    \"image\"\n];\nclass kr extends it {\n    getCacheKey() {\n        return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n        return Vd[this.mode];\n    }\n    getVertexSource() {\n        return `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    `;\n    }\n    applyToWebGL(t) {\n        const e = t.context, s = this.createTexture(t.filterBackend, this.image);\n        this.bindAdditionalTexture(e, s, e.TEXTURE1), super.applyToWebGL(t), this.unbindAdditionalTexture(e, e.TEXTURE1);\n    }\n    createTexture(t, e) {\n        return t.getCachedTexture(e.cacheKey, e.getElement());\n    }\n    calculateMatrix() {\n        const t = this.image, { width: e, height: s } = t.getElement();\n        return [\n            1 / t.scaleX,\n            0,\n            0,\n            0,\n            1 / t.scaleY,\n            0,\n            -t.left / e,\n            -t.top / s,\n            1\n        ];\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e, width: s, height: r }, filterBackend: { resources: n } } = t;\n        const o = this.image;\n        n.blendImage || (n.blendImage = kt());\n        const a = n.blendImage, c = a.getContext(\"2d\");\n        a.width !== s || a.height !== r ? (a.width = s, a.height = r) : c.clearRect(0, 0, s, r), c.setTransform(o.scaleX, 0, 0, o.scaleY, o.left, o.top), c.drawImage(o.getElement(), 0, 0, s, r);\n        const l = c.getImageData(0, 0, s, r).data;\n        for(let h = 0; h < e.length; h += 4){\n            const u = e[h], d = e[h + 1], f = e[h + 2], g = e[h + 3], p = l[h], m = l[h + 1], b = l[h + 2], S = l[h + 3];\n            switch(this.mode){\n                case \"multiply\":\n                    e[h] = u * p / 255, e[h + 1] = d * m / 255, e[h + 2] = f * b / 255, e[h + 3] = g * S / 255;\n                    break;\n                case \"mask\":\n                    e[h + 3] = S;\n            }\n        }\n    }\n    sendUniformData(t, e) {\n        const s = this.calculateMatrix();\n        t.uniform1i(e.uImage, 1), t.uniformMatrix3fv(e.uTransformMatrix, !1, s);\n    }\n    toObject() {\n        return v(v({}, super.toObject()), {}, {\n            image: this.image && this.image.toObject()\n        });\n    }\n    static async fromObject(t, e) {\n        let { type: s, image: r } = t, n = G(t, Gd);\n        return wt.fromObject(r, e).then((o)=>new this(v(v({}, n), {}, {\n                image: o\n            })));\n    }\n}\ny(kr, \"type\", \"BlendImage\"), y(kr, \"defaults\", {\n    mode: \"multiply\",\n    alpha: 1\n}), y(kr, \"uniformLocations\", [\n    \"uTransformMatrix\",\n    \"uImage\"\n]), C.setClass(kr);\nclass Mr extends it {\n    getFragmentSource() {\n        return `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        float weight = 1.0 - abs(percent);\n        color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n        total += weight;\n      }\n      gl_FragColor = color / total;\n    }\n  `;\n    }\n    applyTo(t) {\n        ki(t) ? (this.aspectRatio = t.sourceWidth / t.sourceHeight, t.passes++, this._setupFrameBuffer(t), this.horizontal = !0, this.applyToWebGL(t), this._swapTextures(t), this._setupFrameBuffer(t), this.horizontal = !1, this.applyToWebGL(t), this._swapTextures(t)) : this.applyTo2d(t);\n    }\n    applyTo2d(t) {\n        t.imageData = this.simpleBlur(t);\n    }\n    simpleBlur(t) {\n        let { ctx: e, imageData: s, filterBackend: { resources: r } } = t;\n        const { width: n, height: o } = s;\n        r.blurLayer1 || (r.blurLayer1 = kt(), r.blurLayer2 = kt());\n        const a = r.blurLayer1, c = r.blurLayer2;\n        a.width === n && a.height === o || (c.width = a.width = n, c.height = a.height = o);\n        const l = a.getContext(\"2d\"), h = c.getContext(\"2d\"), u = 15, d = 0.06 * this.blur * 0.5;\n        let f, g, p, m;\n        for(l.putImageData(s, 0, 0), h.clearRect(0, 0, n, o), m = -15; m <= u; m++)f = (Math.random() - 0.5) / 4, g = m / u, p = d * g * n + f, h.globalAlpha = 1 - Math.abs(g), h.drawImage(a, p, f), l.drawImage(c, 0, 0), h.globalAlpha = 1, h.clearRect(0, 0, c.width, c.height);\n        for(m = -15; m <= u; m++)f = (Math.random() - 0.5) / 4, g = m / u, p = d * g * o + f, h.globalAlpha = 1 - Math.abs(g), h.drawImage(a, f, p), l.drawImage(c, 0, 0), h.globalAlpha = 1, h.clearRect(0, 0, c.width, c.height);\n        e.drawImage(a, 0, 0);\n        const b = e.getImageData(0, 0, a.width, a.height);\n        return l.globalAlpha = 1, l.clearRect(0, 0, a.width, a.height), b;\n    }\n    sendUniformData(t, e) {\n        const s = this.chooseRightDelta();\n        t.uniform2fv(e.uDelta, s);\n    }\n    isNeutralState() {\n        return this.blur === 0;\n    }\n    chooseRightDelta() {\n        let t = 1;\n        const e = [\n            0,\n            0\n        ];\n        this.horizontal ? this.aspectRatio > 1 && (t = 1 / this.aspectRatio) : this.aspectRatio < 1 && (t = this.aspectRatio);\n        const s = t * this.blur * 0.12;\n        return this.horizontal ? e[0] = s : e[1] = s, e;\n    }\n}\ny(Mr, \"type\", \"Blur\"), y(Mr, \"defaults\", {\n    blur: 0\n}), y(Mr, \"uniformLocations\", [\n    \"uDelta\"\n]), C.setClass(Mr);\nclass Ir extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = Math.round(255 * this.brightness);\n        for(let r = 0; r < e.length; r += 4)e[r] += s, e[r + 1] += s, e[r + 2] += s;\n    }\n    isNeutralState() {\n        return this.brightness === 0;\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uBrightness, this.brightness);\n    }\n}\ny(Ir, \"type\", \"Brightness\"), y(Ir, \"defaults\", {\n    brightness: 0\n}), y(Ir, \"uniformLocations\", [\n    \"uBrightness\"\n]), C.setClass(Ir);\nconst dl = {\n    matrix: [\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0\n    ],\n    colorsOnly: !0\n};\nclass ts extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n    }\n    applyTo2d(t) {\n        const e = t.imageData.data, s = this.matrix, r = this.colorsOnly;\n        for(let n = 0; n < e.length; n += 4){\n            const o = e[n], a = e[n + 1], c = e[n + 2];\n            if (e[n] = o * s[0] + a * s[1] + c * s[2] + 255 * s[4], e[n + 1] = o * s[5] + a * s[6] + c * s[7] + 255 * s[9], e[n + 2] = o * s[10] + a * s[11] + c * s[12] + 255 * s[14], !r) {\n                const l = e[n + 3];\n                e[n] += l * s[3], e[n + 1] += l * s[8], e[n + 2] += l * s[13], e[n + 3] = o * s[15] + a * s[16] + c * s[17] + l * s[18] + 255 * s[19];\n            }\n        }\n    }\n    sendUniformData(t, e) {\n        const s = this.matrix, r = [\n            s[0],\n            s[1],\n            s[2],\n            s[3],\n            s[5],\n            s[6],\n            s[7],\n            s[8],\n            s[10],\n            s[11],\n            s[12],\n            s[13],\n            s[15],\n            s[16],\n            s[17],\n            s[18]\n        ], n = [\n            s[4],\n            s[9],\n            s[14],\n            s[19]\n        ];\n        t.uniformMatrix4fv(e.uColorMatrix, !1, r), t.uniform4fv(e.uConstants, n);\n    }\n    toObject() {\n        return v(v({}, super.toObject()), {}, {\n            matrix: [\n                ...this.matrix\n            ]\n        });\n    }\n}\nfunction Ne(i, t) {\n    var e;\n    const s = (y(e = class extends ts {\n        toObject() {\n            return {\n                type: this.type,\n                colorsOnly: this.colorsOnly\n            };\n        }\n    }, \"type\", i), y(e, \"defaults\", {\n        colorsOnly: !1,\n        matrix: t\n    }), e);\n    return C.setClass(s, i), s;\n}\ny(ts, \"type\", \"ColorMatrix\"), y(ts, \"defaults\", dl), y(ts, \"uniformLocations\", [\n    \"uColorMatrix\",\n    \"uConstants\"\n]), C.setClass(ts);\nNe(\"Brownie\", [\n    0.5997,\n    0.34553,\n    -0.27082,\n    0,\n    0.186,\n    -0.0377,\n    0.86095,\n    0.15059,\n    0,\n    -0.1449,\n    0.24113,\n    -0.07441,\n    0.44972,\n    0,\n    -0.02965,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"Vintage\", [\n    0.62793,\n    0.32021,\n    -0.03965,\n    0,\n    0.03784,\n    0.02578,\n    0.64411,\n    0.03259,\n    0,\n    0.02926,\n    0.0466,\n    -0.08512,\n    0.52416,\n    0,\n    0.02023,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"Kodachrome\", [\n    1.12855,\n    -0.39673,\n    -0.03992,\n    0,\n    0.24991,\n    -0.16404,\n    1.08352,\n    -0.05498,\n    0,\n    0.09698,\n    -0.16786,\n    -0.56034,\n    1.60148,\n    0,\n    0.13972,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"Technicolor\", [\n    1.91252,\n    -0.85453,\n    -0.09155,\n    0,\n    0.04624,\n    -0.30878,\n    1.76589,\n    -0.10601,\n    0,\n    -0.27589,\n    -0.2311,\n    -0.75018,\n    1.84759,\n    0,\n    0.12137,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"Polaroid\", [\n    1.438,\n    -0.062,\n    -0.062,\n    0,\n    0,\n    -0.122,\n    1.378,\n    -0.122,\n    0,\n    0,\n    -0.016,\n    -0.016,\n    1.483,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"Sepia\", [\n    0.393,\n    0.769,\n    0.189,\n    0,\n    0,\n    0.349,\n    0.686,\n    0.168,\n    0,\n    0,\n    0.272,\n    0.534,\n    0.131,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nNe(\"BlackWhite\", [\n    1.5,\n    1.5,\n    1.5,\n    0,\n    -1,\n    1.5,\n    1.5,\n    1.5,\n    0,\n    -1,\n    1.5,\n    1.5,\n    1.5,\n    0,\n    -1,\n    0,\n    0,\n    0,\n    1,\n    0\n]);\nclass Uo extends it {\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        super(t), this.subFilters = t.subFilters || [];\n    }\n    applyTo(t) {\n        ki(t) && (t.passes += this.subFilters.length - 1), this.subFilters.forEach((e)=>{\n            e.applyTo(t);\n        });\n    }\n    toObject() {\n        return {\n            type: this.type,\n            subFilters: this.subFilters.map((t)=>t.toObject())\n        };\n    }\n    isNeutralState() {\n        return !this.subFilters.some((t)=>!t.isNeutralState());\n    }\n    static fromObject(t, e) {\n        return Promise.all((t.subFilters || []).map((s)=>C.getClass(s.type).fromObject(s, e))).then((s)=>new this({\n                subFilters: s\n            }));\n    }\n}\ny(Uo, \"type\", \"Composed\"), C.setClass(Uo);\nclass Dr extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n    }\n    isNeutralState() {\n        return this.contrast === 0;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = Math.floor(255 * this.contrast), r = 259 * (s + 255) / (255 * (259 - s));\n        for(let n = 0; n < e.length; n += 4)e[n] = r * (e[n] - 128) + 128, e[n + 1] = r * (e[n + 1] - 128) + 128, e[n + 2] = r * (e[n + 2] - 128) + 128;\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uContrast, this.contrast);\n    }\n}\ny(Dr, \"type\", \"Contrast\"), y(Dr, \"defaults\", {\n    contrast: 0\n}), y(Dr, \"uniformLocations\", [\n    \"uContrast\"\n]), C.setClass(Dr);\nconst Nd = {\n    Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n    Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n    Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n    Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n    Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n    Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n    Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n    Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `\n};\nclass jr extends it {\n    getCacheKey() {\n        return \"\".concat(this.type, \"_\").concat(Math.sqrt(this.matrix.length), \"_\").concat(this.opaque ? 1 : 0);\n    }\n    getFragmentSource() {\n        return Nd[this.getCacheKey()];\n    }\n    applyTo2d(t) {\n        const e = t.imageData, s = e.data, r = this.matrix, n = Math.round(Math.sqrt(r.length)), o = Math.floor(n / 2), a = e.width, c = e.height, l = t.ctx.createImageData(a, c), h = l.data, u = this.opaque ? 1 : 0;\n        let d, f, g, p, m, b, S, w, k, O, x, I, M;\n        for(x = 0; x < c; x++)for(O = 0; O < a; O++){\n            for(m = 4 * (x * a + O), d = 0, f = 0, g = 0, p = 0, M = 0; M < n; M++)for(I = 0; I < n; I++)S = x + M - o, b = O + I - o, S < 0 || S >= c || b < 0 || b >= a || (w = 4 * (S * a + b), k = r[M * n + I], d += s[w] * k, f += s[w + 1] * k, g += s[w + 2] * k, u || (p += s[w + 3] * k));\n            h[m] = d, h[m + 1] = f, h[m + 2] = g, h[m + 3] = u ? s[m + 3] : p;\n        }\n        t.imageData = l;\n    }\n    sendUniformData(t, e) {\n        t.uniform1fv(e.uMatrix, this.matrix);\n    }\n    toObject() {\n        return v(v({}, super.toObject()), {}, {\n            opaque: this.opaque,\n            matrix: [\n                ...this.matrix\n            ]\n        });\n    }\n}\ny(jr, \"type\", \"Convolute\"), y(jr, \"defaults\", {\n    opaque: !1,\n    matrix: [\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0\n    ]\n}), y(jr, \"uniformLocations\", [\n    \"uMatrix\",\n    \"uOpaque\",\n    \"uHalfSize\",\n    \"uSize\"\n]), C.setClass(jr);\nconst fl = \"Gamma\";\nclass Er extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n    }\n    constructor(){\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        super(t), this.gamma = t.gamma || this.constructor.defaults.gamma.concat();\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = this.gamma, r = 1 / s[0], n = 1 / s[1], o = 1 / s[2];\n        this.rgbValues || (this.rgbValues = {\n            r: new Uint8Array(256),\n            g: new Uint8Array(256),\n            b: new Uint8Array(256)\n        });\n        const a = this.rgbValues;\n        for(let c = 0; c < 256; c++)a.r[c] = 255 * Math.pow(c / 255, r), a.g[c] = 255 * Math.pow(c / 255, n), a.b[c] = 255 * Math.pow(c / 255, o);\n        for(let c = 0; c < e.length; c += 4)e[c] = a.r[e[c]], e[c + 1] = a.g[e[c + 1]], e[c + 2] = a.b[e[c + 2]];\n    }\n    sendUniformData(t, e) {\n        t.uniform3fv(e.uGamma, this.gamma);\n    }\n    isNeutralState() {\n        const { gamma: t } = this;\n        return t[0] === 1 && t[1] === 1 && t[2] === 1;\n    }\n    toObject() {\n        return {\n            type: fl,\n            gamma: this.gamma.concat()\n        };\n    }\n}\ny(Er, \"type\", fl), y(Er, \"defaults\", {\n    gamma: [\n        1,\n        1,\n        1\n    ]\n}), y(Er, \"uniformLocations\", [\n    \"uGamma\"\n]), C.setClass(Er);\nconst Ud = {\n    average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n    lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n    luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `\n};\nclass Pr extends it {\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        for(let s, r = 0; r < e.length; r += 4){\n            const n = e[r], o = e[r + 1], a = e[r + 2];\n            switch(this.mode){\n                case \"average\":\n                    s = (n + o + a) / 3;\n                    break;\n                case \"lightness\":\n                    s = (Math.min(n, o, a) + Math.max(n, o, a)) / 2;\n                    break;\n                case \"luminosity\":\n                    s = 0.21 * n + 0.72 * o + 0.07 * a;\n            }\n            e[r + 2] = e[r + 1] = e[r] = s;\n        }\n    }\n    getCacheKey() {\n        return \"\".concat(this.type, \"_\").concat(this.mode);\n    }\n    getFragmentSource() {\n        return Ud[this.mode];\n    }\n    sendUniformData(t, e) {\n        t.uniform1i(e.uMode, 1);\n    }\n    isNeutralState() {\n        return !1;\n    }\n}\ny(Pr, \"type\", \"Grayscale\"), y(Pr, \"defaults\", {\n    mode: \"average\"\n}), y(Pr, \"uniformLocations\", [\n    \"uMode\"\n]), C.setClass(Pr);\nconst $d = v(v({}, dl), {}, {\n    rotation: 0\n});\nclass qi extends ts {\n    calculateMatrix() {\n        const t = this.rotation * Math.PI, e = Lt(t), s = Bt(t), r = 1 / 3, n = Math.sqrt(r) * s, o = 1 - e;\n        this.matrix = [\n            e + o / 3,\n            r * o - n,\n            r * o + n,\n            0,\n            0,\n            r * o + n,\n            e + r * o,\n            r * o - n,\n            0,\n            0,\n            r * o - n,\n            r * o + n,\n            e + r * o,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ];\n    }\n    isNeutralState() {\n        return this.rotation === 0;\n    }\n    applyTo(t) {\n        this.calculateMatrix(), super.applyTo(t);\n    }\n    toObject() {\n        return {\n            type: this.type,\n            rotation: this.rotation\n        };\n    }\n}\ny(qi, \"type\", \"HueRotation\"), y(qi, \"defaults\", $d), C.setClass(qi);\nclass Ar extends it {\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        for(let s = 0; s < e.length; s += 4)e[s] = 255 - e[s], e[s + 1] = 255 - e[s + 1], e[s + 2] = 255 - e[s + 2], this.alpha && (e[s + 3] = 255 - e[s + 3]);\n    }\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n    }\n    isNeutralState() {\n        return !this.invert;\n    }\n    sendUniformData(t, e) {\n        t.uniform1i(e.uInvert, Number(this.invert)), t.uniform1i(e.uAlpha, Number(this.alpha));\n    }\n}\ny(Ar, \"type\", \"Invert\"), y(Ar, \"defaults\", {\n    alpha: !1,\n    invert: !0\n}), y(Ar, \"uniformLocations\", [\n    \"uInvert\",\n    \"uAlpha\"\n]), C.setClass(Ar);\nclass Fr extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = this.noise;\n        for(let r = 0; r < e.length; r += 4){\n            const n = (0.5 - Math.random()) * s;\n            e[r] += n, e[r + 1] += n, e[r + 2] += n;\n        }\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uNoise, this.noise / 255), t.uniform1f(e.uSeed, Math.random());\n    }\n    isNeutralState() {\n        return this.noise === 0;\n    }\n}\ny(Fr, \"type\", \"Noise\"), y(Fr, \"defaults\", {\n    noise: 0\n}), y(Fr, \"uniformLocations\", [\n    \"uNoise\",\n    \"uSeed\"\n]), C.setClass(Fr);\nclass Rr extends it {\n    applyTo2d(t) {\n        let { imageData: { data: e, width: s, height: r } } = t;\n        for(let n = 0; n < r; n += this.blocksize)for(let o = 0; o < s; o += this.blocksize){\n            const a = 4 * n * s + 4 * o, c = e[a], l = e[a + 1], h = e[a + 2], u = e[a + 3];\n            for(let d = n; d < Math.min(n + this.blocksize, r); d++)for(let f = o; f < Math.min(o + this.blocksize, s); f++){\n                const g = 4 * d * s + 4 * f;\n                e[g] = c, e[g + 1] = l, e[g + 2] = h, e[g + 3] = u;\n            }\n        }\n    }\n    isNeutralState() {\n        return this.blocksize === 1;\n    }\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uBlocksize, this.blocksize);\n    }\n}\ny(Rr, \"type\", \"Pixelate\"), y(Rr, \"defaults\", {\n    blocksize: 4\n}), y(Rr, \"uniformLocations\", [\n    \"uBlocksize\"\n]), C.setClass(Rr);\nclass Lr extends it {\n    getFragmentSource() {\n        return `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = 255 * this.distance, r = new W(this.color).getSource(), n = [\n            r[0] - s,\n            r[1] - s,\n            r[2] - s\n        ], o = [\n            r[0] + s,\n            r[1] + s,\n            r[2] + s\n        ];\n        for(let a = 0; a < e.length; a += 4){\n            const c = e[a], l = e[a + 1], h = e[a + 2];\n            c > n[0] && l > n[1] && h > n[2] && c < o[0] && l < o[1] && h < o[2] && (e[a + 3] = 0);\n        }\n    }\n    sendUniformData(t, e) {\n        const s = new W(this.color).getSource(), r = this.distance, n = [\n            0 + s[0] / 255 - r,\n            0 + s[1] / 255 - r,\n            0 + s[2] / 255 - r,\n            1\n        ], o = [\n            s[0] / 255 + r,\n            s[1] / 255 + r,\n            s[2] / 255 + r,\n            1\n        ];\n        t.uniform4fv(e.uLow, n), t.uniform4fv(e.uHigh, o);\n    }\n}\ny(Lr, \"type\", \"RemoveColor\"), y(Lr, \"defaults\", {\n    color: \"#FFFFFF\",\n    distance: 0.02,\n    useAlpha: !1\n}), y(Lr, \"uniformLocations\", [\n    \"uLow\",\n    \"uHigh\"\n]), C.setClass(Lr);\nclass Br extends it {\n    sendUniformData(t, e) {\n        t.uniform2fv(e.uDelta, this.horizontal ? [\n            1 / this.width,\n            0\n        ] : [\n            0,\n            1 / this.height\n        ]), t.uniform1fv(e.uTaps, this.taps);\n    }\n    getFilterWindow() {\n        const t = this.tempScale;\n        return Math.ceil(this.lanczosLobes / t);\n    }\n    getCacheKey() {\n        const t = this.getFilterWindow();\n        return \"\".concat(this.type, \"_\").concat(t);\n    }\n    getFragmentSource() {\n        const t = this.getFilterWindow();\n        return this.generateShader(t);\n    }\n    getTaps() {\n        const t = this.lanczosCreate(this.lanczosLobes), e = this.tempScale, s = this.getFilterWindow(), r = new Array(s);\n        for(let n = 1; n <= s; n++)r[n - 1] = t(n * e);\n        return r;\n    }\n    generateShader(t) {\n        const e = new Array(t);\n        for(let s = 1; s <= t; s++)e[s - 1] = \"\".concat(s, \".0 * uDelta\");\n        return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[`.concat(t, `];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        `).concat(e.map((s, r)=>`\n              color += texture2D(uTexture, vTexCoord + `.concat(s, \") * uTaps[\").concat(r, \"] + texture2D(uTexture, vTexCoord - \").concat(s, \") * uTaps[\").concat(r, `];\n              sum += 2.0 * uTaps[`).concat(r, `];\n            `)).join(`\n`), `\n        gl_FragColor = color / sum;\n      }\n    `);\n    }\n    applyToForWebgl(t) {\n        t.passes++, this.width = t.sourceWidth, this.horizontal = !0, this.dW = Math.round(this.width * this.scaleX), this.dH = t.sourceHeight, this.tempScale = this.dW / this.width, this.taps = this.getTaps(), t.destinationWidth = this.dW, super.applyTo(t), t.sourceWidth = t.destinationWidth, this.height = t.sourceHeight, this.horizontal = !1, this.dH = Math.round(this.height * this.scaleY), this.tempScale = this.dH / this.height, this.taps = this.getTaps(), t.destinationHeight = this.dH, super.applyTo(t), t.sourceHeight = t.destinationHeight;\n    }\n    applyTo(t) {\n        ki(t) ? this.applyToForWebgl(t) : this.applyTo2d(t);\n    }\n    isNeutralState() {\n        return this.scaleX === 1 && this.scaleY === 1;\n    }\n    lanczosCreate(t) {\n        return (e)=>{\n            if (e >= t || e <= -t) return 0;\n            if (e < 11920929e-14 && e > -11920929e-14) return 1;\n            const s = (e *= Math.PI) / t;\n            return Math.sin(e) / e * Math.sin(s) / s;\n        };\n    }\n    applyTo2d(t) {\n        const e = t.imageData, s = this.scaleX, r = this.scaleY;\n        this.rcpScaleX = 1 / s, this.rcpScaleY = 1 / r;\n        const n = e.width, o = e.height, a = Math.round(n * s), c = Math.round(o * r);\n        let l;\n        l = this.resizeType === \"sliceHack\" ? this.sliceByTwo(t, n, o, a, c) : this.resizeType === \"hermite\" ? this.hermiteFastResize(t, n, o, a, c) : this.resizeType === \"bilinear\" ? this.bilinearFiltering(t, n, o, a, c) : this.resizeType === \"lanczos\" ? this.lanczosResize(t, n, o, a, c) : new ImageData(a, c), t.imageData = l;\n    }\n    sliceByTwo(t, e, s, r, n) {\n        const o = t.imageData, a = 0.5;\n        let c = !1, l = !1, h = e * a, u = s * a;\n        const d = t.filterBackend.resources;\n        let f = 0, g = 0;\n        const p = e;\n        let m = 0;\n        d.sliceByTwo || (d.sliceByTwo = kt());\n        const b = d.sliceByTwo;\n        (b.width < 1.5 * e || b.height < s) && (b.width = 1.5 * e, b.height = s);\n        const S = b.getContext(\"2d\");\n        for(S.clearRect(0, 0, 1.5 * e, s), S.putImageData(o, 0, 0), r = Math.floor(r), n = Math.floor(n); !c || !l;)e = h, s = u, r < Math.floor(h * a) ? h = Math.floor(h * a) : (h = r, c = !0), n < Math.floor(u * a) ? u = Math.floor(u * a) : (u = n, l = !0), S.drawImage(b, f, g, e, s, p, m, h, u), f = p, g = m, m += u;\n        return S.getImageData(f, g, r, n);\n    }\n    lanczosResize(t, e, s, r, n) {\n        const o = t.imageData.data, a = t.ctx.createImageData(r, n), c = a.data, l = this.lanczosCreate(this.lanczosLobes), h = this.rcpScaleX, u = this.rcpScaleY, d = 2 / this.rcpScaleX, f = 2 / this.rcpScaleY, g = Math.ceil(h * this.lanczosLobes / 2), p = Math.ceil(u * this.lanczosLobes / 2), m = {}, b = {\n            x: 0,\n            y: 0\n        }, S = {\n            x: 0,\n            y: 0\n        };\n        return function w(k) {\n            let O, x, I, M, E, R, tt, F, B, $, yt;\n            for(b.x = (k + 0.5) * h, S.x = Math.floor(b.x), O = 0; O < n; O++){\n                for(b.y = (O + 0.5) * u, S.y = Math.floor(b.y), E = 0, R = 0, tt = 0, F = 0, B = 0, x = S.x - g; x <= S.x + g; x++)if (!(x < 0 || x >= e)) {\n                    $ = Math.floor(1e3 * Math.abs(x - b.x)), m[$] || (m[$] = {});\n                    for(let dt = S.y - p; dt <= S.y + p; dt++)dt < 0 || dt >= s || (yt = Math.floor(1e3 * Math.abs(dt - b.y)), m[$][yt] || (m[$][yt] = l(Math.sqrt(Math.pow($ * d, 2) + Math.pow(yt * f, 2)) / 1e3)), I = m[$][yt], I > 0 && (M = 4 * (dt * e + x), E += I, R += I * o[M], tt += I * o[M + 1], F += I * o[M + 2], B += I * o[M + 3]));\n                }\n                M = 4 * (O * r + k), c[M] = R / E, c[M + 1] = tt / E, c[M + 2] = F / E, c[M + 3] = B / E;\n            }\n            return ++k < r ? w(k) : a;\n        }(0);\n    }\n    bilinearFiltering(t, e, s, r, n) {\n        let o, a, c, l, h, u, d, f, g, p, m, b, S, w = 0;\n        const k = this.rcpScaleX, O = this.rcpScaleY, x = 4 * (e - 1), I = t.imageData.data, M = t.ctx.createImageData(r, n), E = M.data;\n        for(d = 0; d < n; d++)for(f = 0; f < r; f++)for(h = Math.floor(k * f), u = Math.floor(O * d), g = k * f - h, p = O * d - u, S = 4 * (u * e + h), m = 0; m < 4; m++)o = I[S + m], a = I[S + 4 + m], c = I[S + x + m], l = I[S + x + 4 + m], b = o * (1 - g) * (1 - p) + a * g * (1 - p) + c * p * (1 - g) + l * g * p, E[w++] = b;\n        return M;\n    }\n    hermiteFastResize(t, e, s, r, n) {\n        const o = this.rcpScaleX, a = this.rcpScaleY, c = Math.ceil(o / 2), l = Math.ceil(a / 2), h = t.imageData.data, u = t.ctx.createImageData(r, n), d = u.data;\n        for(let f = 0; f < n; f++)for(let g = 0; g < r; g++){\n            const p = 4 * (g + f * r);\n            let m = 0, b = 0, S = 0, w = 0, k = 0, O = 0, x = 0;\n            const I = (f + 0.5) * a;\n            for(let M = Math.floor(f * a); M < (f + 1) * a; M++){\n                const E = Math.abs(I - (M + 0.5)) / l, R = (g + 0.5) * o, tt = E * E;\n                for(let F = Math.floor(g * o); F < (g + 1) * o; F++){\n                    let B = Math.abs(R - (F + 0.5)) / c;\n                    const $ = Math.sqrt(tt + B * B);\n                    $ > 1 && $ < -1 || (m = 2 * $ * $ * $ - 3 * $ * $ + 1, m > 0 && (B = 4 * (F + M * e), x += m * h[B + 3], S += m, h[B + 3] < 255 && (m = m * h[B + 3] / 250), w += m * h[B], k += m * h[B + 1], O += m * h[B + 2], b += m));\n                }\n            }\n            d[p] = w / b, d[p + 1] = k / b, d[p + 2] = O / b, d[p + 3] = x / S;\n        }\n        return u;\n    }\n}\ny(Br, \"type\", \"Resize\"), y(Br, \"defaults\", {\n    resizeType: \"hermite\",\n    scaleX: 1,\n    scaleY: 1,\n    lanczosLobes: 3\n}), y(Br, \"uniformLocations\", [\n    \"uDelta\",\n    \"uTaps\"\n]), C.setClass(Br);\nclass Wr extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = -this.saturation;\n        for(let r = 0; r < e.length; r += 4){\n            const n = e[r], o = e[r + 1], a = e[r + 2], c = Math.max(n, o, a);\n            e[r] += c !== n ? (c - n) * s : 0, e[r + 1] += c !== o ? (c - o) * s : 0, e[r + 2] += c !== a ? (c - a) * s : 0;\n        }\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uSaturation, -this.saturation);\n    }\n    isNeutralState() {\n        return this.saturation === 0;\n    }\n}\ny(Wr, \"type\", \"Saturation\"), y(Wr, \"defaults\", {\n    saturation: 0\n}), y(Wr, \"uniformLocations\", [\n    \"uSaturation\"\n]), C.setClass(Wr);\nclass Xr extends it {\n    getFragmentSource() {\n        return `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n    }\n    applyTo2d(t) {\n        let { imageData: { data: e } } = t;\n        const s = -this.vibrance;\n        for(let r = 0; r < e.length; r += 4){\n            const n = e[r], o = e[r + 1], a = e[r + 2], c = Math.max(n, o, a), l = (n + o + a) / 3, h = 2 * Math.abs(c - l) / 255 * s;\n            e[r] += c !== n ? (c - n) * h : 0, e[r + 1] += c !== o ? (c - o) * h : 0, e[r + 2] += c !== a ? (c - a) * h : 0;\n        }\n    }\n    sendUniformData(t, e) {\n        t.uniform1f(e.uVibrance, -this.vibrance);\n    }\n    isNeutralState() {\n        return this.vibrance === 0;\n    }\n}\ny(Xr, \"type\", \"Vibrance\"), y(Xr, \"defaults\", {\n    vibrance: 0\n}), y(Xr, \"uniformLocations\", [\n    \"uVibrance\"\n]), C.setClass(Xr);\nfunction qt(i, t, e, s, r) {\n    const c = r.canvas.viewportTransform;\n    i.save(), this.controlOrientation === \"left\" ? i.translate(r.left + c[4], r.top + c[5] + r.height / 2) : i.translate(r.left + r.width + c[4], r.top + c[5] + r.height / 2), i.rotate(sd.degreesToRadians(90 + r.angle)), i.lineWidth = 6, i.lineCap = \"round\", i.strokeStyle = \"white\", i.beginPath(), i.moveTo(-6, 0), i.lineTo(6, 0), i.stroke(), i.lineWidth = 4, i.strokeStyle = \"black\", i.beginPath(), i.moveTo(-6, 0), i.lineTo(6, 0), i.stroke(), i.restore();\n}\nconst It = 1, vt = \"rgba(255, 255, 255,1.0)\", $o = [\n    \"Image\",\n    \"Text\",\n    \"Video\",\n    \"Audio\",\n    \"Caption\",\n    \"Template\",\n    \"Composition\",\n    \"Illustration\",\n    \"Shape\"\n], qd = [\n    \"image\",\n    \"text\",\n    \"video\",\n    \"audio\",\n    \"caption\",\n    \"template\",\n    \"composition\",\n    \"illustration\",\n    \"shape\"\n], Kd = {\n    left: -0.5,\n    top: -0.5,\n    center: 0,\n    bottom: 0.5,\n    right: 0.5\n}, P = (i)=>typeof i == \"string\" ? Kd[i] : i - 0.5, He = \"center\", ur = \"left\", Q0 = \"top\", tb = \"bottom\", dr = \"right\", eb = \"none\";\nfunction fr(i) {\n    return P(i.originX) === P(He) && P(i.originY) === P(He);\n}\nfunction Mi(i) {\n    return (t, e, s, r)=>{\n        const { target: n, originX: o, originY: a } = e, c = n.getRelativeCenterPoint(), l = n.translateToOriginPoint(c, o, a), h = i(t, e, s, r);\n        return n.setPositionByOrigin(l, e.originX, e.originY), h;\n    };\n}\nconst qo = 3, Jd = 4, gl = 188, Zd = 60, Qd = 1e3 / Zd;\nfunction D(i, t = 1, e = 1) {\n    const s = gl * t;\n    return i * (60 / 1e3) * s / e;\n}\nfunction Y(i, t = 1, e = 1) {\n    const s = gl * t;\n    return i / s * Qd * e;\n}\nfunction sb(i, t = 1) {\n    return D(i, t);\n}\nconst pl = (i)=>Object.keys(i).reduce((t, e)=>{\n        const { display: s, playbackRate: r } = i[e];\n        return Math.max(t, s.to / (r || 1));\n    }, 0), { wrapWithFireEvent: tf, getLocalPoint: ef } = Ds, sf = (i, t, e, s)=>{\n    const r = ef(t, t.originX, t.originY, e, s);\n    if (P(t.originX) === P(He) || P(t.originX) === P(dr) && r.x < 0 || P(t.originX) === P(ur) && r.x > 0) {\n        let { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = fr(t) ? 2 : 1, c = n.width, l = Math.ceil(Math.abs(r.x * a / n.scaleX) - o);\n        if (t.corner === \"mr\") {\n            const u = n.trim.to, d = l - c, f = Y(d, n.tScale, n.playbackRate), g = u + f;\n            if (g > n.duration) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.to = g;\n        } else {\n            if (n.left < 0) return !1;\n            const u = c - l;\n            if (n.left + u < 0) {\n                const b = D(n.duration, n.tScale, n.playbackRate), S = n.width + n.left;\n                if (S <= b) {\n                    n.set(\"width\", S);\n                    const w = Y(b - S, n.tScale, n.playbackRate);\n                    return n.trim.from = w, !0;\n                }\n                return !1;\n            }\n            const f = l - c, g = n.trim.from, p = Y(f, n.tScale, n.playbackRate), m = g - p;\n            if (m < 0) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.from = m, n.onResize && n.onResize();\n        }\n        return c !== n.width;\n    }\n    return !1;\n}, _n = tf(\"resizing\", Mi(sf)), { wrapWithFireEvent: rf, getLocalPoint: nf, wrapWithFixedAnchor: of } = Ds, af = (i, t, e, s)=>{\n    const r = nf(t, t.originX, t.originY, e, s);\n    if (P(t.originX) === P(He) || P(t.originX) === P(dr) && r.x < 0 || P(t.originX) === P(ur) && r.x > 0) {\n        const { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = fr(t) ? 2 : 1, c = n.width, l = Math.ceil(Math.abs(r.x * a / n.scaleX) - o), h = t.corner === \"ml\";\n        if (n.left < 0) return !1;\n        if (h) {\n            const u = c - l;\n            if (n.left + u < 0) return n.set(\"width\", n.width + n.left), !0;\n        }\n        return n.set(\"width\", Math.max(l, 0)), c !== n.width;\n    }\n    return !1;\n}, Sn = rf(\"resizing\", of(af)), { wrapWithFireEvent: cf, getLocalPoint: lf } = Ds, hf = (i, t, e, s)=>{\n    const r = lf(t, t.originX, t.originY, e, s);\n    if (P(t.originX) === P(He) || P(t.originX) === P(dr) && r.x < 0 || P(t.originX) === P(ur) && r.x > 0) {\n        const { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = fr(t) ? 2 : 1, c = n.width, l = Math.ceil(Math.abs(r.x * a / n.scaleX) - o), h = Y(l, n.tScale, n.playbackRate);\n        return h >= 1500 || h < 500 ? !1 : (n.set(\"width\", Math.max(l, 0)), n.set(\"duration\", h), c !== n.width);\n    }\n    return !1;\n}, Tn = cf(\"resizing\", Mi(hf)), { wrapWithFireEvent: uf, getLocalPoint: df } = Ds, ff = (i, t, e, s)=>{\n    const r = df(t, t.originX, t.originY, e, s);\n    if (P(t.originX) === P(He) || P(t.originX) === P(dr) && r.x < 0 || P(t.originX) === P(ur) && r.x > 0) {\n        let { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = fr(t) ? 2 : 1, c = n.width, l = Math.ceil(Math.abs(r.x * a / n.scaleX) - o);\n        if (t.corner === \"mr\") {\n            const u = n.trim.to, d = l - c, f = Y(d, n.tScale, n.playbackRate), g = u + f;\n            if (g > n.duration) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.to = g;\n        } else {\n            if (n.left < 0) return !1;\n            const u = c - l;\n            if (n.left + u < 0) return !1;\n            const f = l - c, g = n.trim.from, p = Y(f, n.tScale, n.playbackRate), m = g - p;\n            if (m < 0) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.from = m;\n        }\n        return c !== n.width;\n    }\n    return !1;\n}, Ko = uf(\"resizing\", Mi(ff)), { scaleSkewCursorStyleHandler: Kt } = Ds, js = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            actionHandler: Sn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            render: qt,\n            controlOrientation: \"right\"\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            actionHandler: Sn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            render: qt,\n            controlOrientation: \"left\"\n        })\n    }), gf = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            render: qt,\n            actionHandler: Ko,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"right\"\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            render: qt,\n            actionHandler: Ko,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"left\"\n        })\n    }), pf = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            render: qt,\n            actionHandler: _n,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"right\"\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            render: qt,\n            actionHandler: _n,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"left\"\n        })\n    }), mf = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            render: qt,\n            actionHandler: xn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"right\"\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            render: qt,\n            actionHandler: xn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            controlOrientation: \"left\"\n        })\n    }), ml = ()=>({\n        mr: new U({\n            x: 0.5,\n            y: 0,\n            actionHandler: Tn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            render: qt,\n            controlOrientation: \"right\"\n        }),\n        ml: new U({\n            x: -0.5,\n            y: 0,\n            actionHandler: Tn,\n            cursorStyleHandler: Kt,\n            actionName: \"resizing\",\n            render: qt,\n            controlOrientation: \"left\"\n        })\n    }), vf = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet gr = (i = 21)=>{\n    let t = \"\", e = crypto.getRandomValues(new Uint8Array(i |= 0));\n    for(; i--;)t += vf[e[i] & 63];\n    return t;\n};\nfunction Ws(i = 16) {\n    const t = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", e = t.charAt(Math.floor(Math.random() * t.length));\n    let s = gr(i - 1);\n    return s = s.replace(/[^a-zA-Z0-9]/g, \"\").slice(0, i - 1), e + s;\n}\nconst { wrapWithFireEvent: yf, getLocalPoint: bf } = Ds, _f = (i, t, e, s)=>{\n    const r = bf(t, t.originX, t.originY, e, s);\n    if (P(t.originX) === P(He) || P(t.originX) === P(dr) && r.x < 0 || P(t.originX) === P(ur) && r.x > 0) {\n        let { target: n } = t, o = n.strokeWidth / (n.strokeUniform ? n.scaleX : 1), a = fr(t) ? 2 : 1, c = n.width, l = Math.ceil(Math.abs(r.x * a / n.scaleX) - o);\n        if (t.corner === \"mr\") {\n            const u = n.trim.to, d = l - c, f = Y(d, n.tScale, n.playbackRate), g = u + f;\n            if (g > n.duration) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.to = g;\n        } else {\n            if (n.left < 0) return !1;\n            const u = c - l;\n            if (n.left + u < 0) {\n                const b = D(n.duration, n.tScale, n.playbackRate), S = n.width + n.left;\n                if (S <= b) {\n                    n.set(\"width\", S);\n                    const w = Y(b - S, n.tScale, n.playbackRate);\n                    return n.trim.from = w, !0;\n                }\n                return !1;\n            }\n            const f = l - c, g = n.trim.from, p = Y(f, n.tScale, n.playbackRate), m = g - p;\n            if (m < 0) return !1;\n            n.set(\"width\", Math.max(l, 0)), n.trim.from = m, n.onResize && n.onResize();\n        }\n        return c !== n.width;\n    }\n    return !1;\n}, xn = yf(\"resizing\", Mi(_f)), es = class es extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"image\");\n        T(this, \"src\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, es.ownDefaults), this.id = e.id, this.src = e.src, this.display = e.display, this.tScale = e.tScale;\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...es.ownDefaults\n        };\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, this.rx), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n    setSrc(e) {\n        this.src = e;\n    }\n};\nT(es, \"type\", \"Image\"), T(es, \"ownDefaults\", {\n    rx: 8,\n    ry: 8,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\",\n    fill: \"#27272a\"\n});\nlet Qs = es;\nC.setClass(Qs, \"Image\");\nclass _t extends X {\n    constructor(e){\n        super(e);\n        T(this, \"id\");\n        T(this, \"resourceId\", \"\");\n        T(this, \"tScale\");\n        T(this, \"isSelected\", !1);\n        T(this, \"display\");\n        T(this, \"trim\");\n        T(this, \"duration\");\n        T(this, \"src\");\n        this.id = e.id, this.tScale = e.tScale, this.objectCaching = !1, this.rx = 8, this.ry = 8, this.display = e.display, this.trim = e.trim, this.duration = e.duration, this.fill = \"#27272a\";\n    }\n    static createControls() {\n        return {\n            controls: mf()\n        };\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, this.rx), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n    onResizeSnap() {}\n    setSrc(e) {\n        this.src = e;\n    }\n}\nT(_t, \"type\", \"Video\");\nC.setClass(_t, \"Video\");\nconst ss = class ss extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"audio\");\n        T(this, \"isSelected\", !1);\n        T(this, \"trim\");\n        T(this, \"src\");\n        T(this, \"duration\");\n        Object.assign(this, ss.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.trim = e.trim, this.src = e.src, this.duration = e.duration;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...ss.ownDefaults\n        };\n    }\n    static createControls() {\n        return {\n            controls: pf()\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom Audio to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n    setSrc(e) {\n        this.src = e;\n    }\n};\nT(ss, \"type\", \"Audio\"), T(ss, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet ft = ss;\nC.setClass(ft, \"Audio\");\nconst rs = class rs extends X {\n    constructor(e){\n        super(e);\n        T(this, \"isSelected\", !1);\n        T(this, \"text\");\n        Object.assign(this, rs.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.text = e.text;\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...rs.ownDefaults\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n};\nT(rs, \"type\", \"Text\"), T(rs, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet tr = rs;\nC.setClass(tr, \"Text\");\nconst Sf = {\n    selectable: !1,\n    evented: !1,\n    strokeWidth: 0,\n    stroke: \"transparent\"\n}, is = class is extends X {\n    constructor(e){\n        super(e);\n        T(this, \"id\");\n        T(this, \"accepts\", [\n            \"audio\",\n            \"video\",\n            \"image\",\n            \"text\",\n            \"caption\",\n            \"template\"\n        ]);\n        T(this, \"metadata\");\n        T(this, \"items\", []);\n        T(this, \"magnetic\");\n        T(this, \"static\");\n        Object.assign(this, is.ownDefaults), this.id = e.id, this.accepts = e.accepts || [], this.items = e.items || [], this.magnetic = e.magnetic, this.static = e.static, this.metadata = e.metadata, this.fill = \"rgba(34, 34, 37, 0.8)\";\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...is.ownDefaults\n        };\n    }\n    updateCoords(e) {\n        this.width = e;\n    }\n};\nT(is, \"ownDefaults\", Sf), T(is, \"type\", \"Track\");\nlet ue = is;\nC.setClass(ue, \"Track\");\nconst Tf = {\n    top: {\n        top: 35,\n        guide: 2,\n        bottom: 3\n    },\n    center: {\n        top: 3,\n        guide: 2,\n        bottom: 3\n    },\n    bottom: {\n        top: 3,\n        guide: 2,\n        bottom: 35\n    }\n}, xf = (i, t)=>{\n    const e = Tf[i];\n    return i === \"top\" ? {\n        top: t - (e.guide + e.bottom),\n        guide: e.guide,\n        bottom: e.bottom\n    } : i === \"center\" ? {\n        top: e.top,\n        guide: e.guide,\n        bottom: e.bottom\n    } : {\n        top: e == null ? void 0 : e.top,\n        guide: e == null ? void 0 : e.guide,\n        bottom: t - ((e == null ? void 0 : e.guide) + (e == null ? void 0 : e.top))\n    };\n}, ns = class ns extends Nt {\n    constructor(e){\n        const s = xf(e.kind, e.height), r = new X({\n            top: 0,\n            left: 0,\n            strokeWidth: 0,\n            fill: \"transparent\",\n            selectable: !0,\n            height: s.top,\n            width: e.width\n        }), n = new X({\n            top: s.top,\n            left: 0,\n            strokeWidth: 0,\n            fill: \"transparent\",\n            selectable: !0,\n            height: s.guide,\n            width: e.width\n        }), o = new X({\n            top: s.top + s.guide,\n            left: 0,\n            strokeWidth: 0,\n            fill: \"transparent\",\n            selectable: !0,\n            height: s.bottom,\n            width: e.width\n        });\n        super([\n            r,\n            n,\n            o\n        ], e);\n        T(this, \"guide\");\n        T(this, \"topGuide\");\n        T(this, \"bottomGuide\");\n        T(this, \"metadata\");\n        T(this, \"accepts\", []);\n        T(this, \"kind\");\n        T(this, \"activeGuideFill\");\n        Object.assign(this, ns.ownDefaults), this.guide = n, this.topGuide = r, this.bottomGuide = o, this.id = e.id, this.metadata = e.metadata, this.tScale = e.tScale, this.kind = e.kind, this.activeGuideFill = e.activeGuideFill || vt;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...ns.ownDefaults\n        };\n    }\n    updateCoords(e) {\n        this.scaleToWidth(e), this.set(\"scaleY\", 1);\n    }\n    setSelected(e) {\n        e ? this.guide.set(\"fill\", this.activeGuideFill) : this.guide.set(\"fill\", \"transparent\");\n    }\n};\nT(ns, \"type\", \"Helper\"), T(ns, \"ownDefaults\", {\n    selectable: !1,\n    evented: !1\n});\nlet Ss = ns;\nC.setClass(Ss, \"Helper\");\nconst os = class os extends X {\n    constructor(e){\n        super(e);\n        T(this, \"guideItemId\");\n        T(this, \"distXToActCenter\");\n        T(this, \"trackItemType\");\n        T(this, \"defaultPos\");\n        T(this, \"draggedObject\");\n        Object.assign(this, os.ownDefaults), this.id = e.id;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...os.ownDefaults\n        };\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, this.rx), e.lineWidth = It, e.setLineDash(this.strokeDashArray), e.strokeStyle = vt, e.stroke(), e.restore();\n    }\n};\nT(os, \"type\", \"Placeholder\"), T(os, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    strokeWidth: 0,\n    fill: \"rgba(255, 211, 42,0.1)\",\n    stroke: \"rgba(255, 211, 42,1.0)\",\n    selectable: !1,\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\",\n    strokeDashArray: [\n        5,\n        1\n    ],\n    evented: !1\n});\nlet er = os;\nC.setClass(er, \"Placeholder\");\nconst as = class as extends X {\n    constructor(e){\n        super(e);\n        T(this, \"duration\");\n        T(this, \"fromId\");\n        T(this, \"toId\");\n        T(this, \"kind\", \"none\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, as.ownDefaults), this.id = e.id, this.centeredScaling = !0, this.strokeWidth = 0, this.tScale = e.tScale, this.duration = e.duration, this.fromId = e.fromId, this.toId = e.toId, this.kind = e.kind, this.strokeDashArray = e.strokeDashArray || [];\n    }\n    static createControls() {\n        return {\n            controls: ml()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...as.ownDefaults\n        };\n    }\n    updateCoords() {}\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    updateSelected(e) {\n        const s = this.isSelected ? vt : \"rgba(255, 255, 255,0.15)\";\n        e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, this.rx), e.lineWidth = It, e.setLineDash(this.strokeDashArray), e.strokeStyle = s, e.stroke(), e.restore();\n    }\n};\nT(as, \"type\", \"Transition\"), T(as, \"ownDefaults\", {\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 1.5,\n    fill: \"rgba(0,0,0, 0.5)\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\",\n    lockMovementX: !0,\n    lockMovementY: !0,\n    duration: 1500,\n    rx: 8,\n    ry: 8\n});\nlet Jt = as;\nC.setClass(Jt, \"Transition\");\nconst cs = class cs extends X {\n    constructor(e){\n        super(e);\n        T(this, \"isSelected\", !1);\n        T(this, \"text\");\n        Object.assign(this, cs.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.text = e.text;\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...cs.ownDefaults\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n};\nT(cs, \"type\", \"Caption\"), T(cs, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet sr = cs;\nC.setClass(sr, \"Caption\");\nconst ls = class ls extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"template\");\n        T(this, \"isSelected\", !1);\n        T(this, \"trim\");\n        Object.assign(this, ls.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.trim = e.trim;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...ls.ownDefaults\n        };\n    }\n    static createControls() {\n        return {\n            controls: gf()\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom Audio to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n};\nT(ls, \"type\", \"Template\"), T(ls, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet Vt = ls;\nC.setClass(Vt, \"Template\");\nfunction wf(i) {\n    const t = Math.floor(i / 1e3), e = Math.floor(t / 60), s = t % 60, r = String(e).padStart(2, \"0\"), n = String(s).padStart(2, \"0\");\n    return `${r}:${n}`;\n}\nconst hs = class hs extends X {\n    constructor(e){\n        super(e);\n        T(this, \"duration\");\n        T(this, \"fromId\");\n        T(this, \"toId\");\n        T(this, \"isSelected\", !1);\n        T(this, \"name\");\n        T(this, \"durationString\");\n        T(this, \"itemType\");\n        Object.assign(this, hs.ownDefaults), this.id = e.id, this.fill = \"#27272a\", this.name = e.type.toUpperCase(), this.durationString = wf(e.duration), this.itemType = e.type;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...hs.ownDefaults\n        };\n    }\n    _render(e) {\n        e.save(), super._render(e), e.beginPath(), e.rect(-this.width / 2, -this.height / 2, this.width, this.height), e.clip(), this.drawTextIdentity(e), e.restore();\n    }\n    drawTextIdentity(e) {\n        e.font = \"600 12px 'Geist variable'\", e.textAlign = \"left\";\n        const s = e.measureText(this.name).width, r = e.measureText(this.durationString).width, n = 8, o = 4, a = 4 - this.height / 2, c = 20, l = 4, h = 4 - this.width / 2, u = s + n * 2;\n        this.drawRoundedRect(e, h, a, u, c, l), e.fillStyle = \"#f4f4f5\", e.fillText(this.name, h + n, a + 14);\n        const d = h + u + o, f = r + n * 2;\n        this.drawRoundedRect(e, d, a, f, c, l), e.fillStyle = \"#f4f4f5\", e.fillText(this.durationString, d + n, a + 14);\n    }\n    drawRoundedRect(e, s, r, n, o, a) {\n        e.fillStyle = \"rgba(0, 0, 0, 0.5)\", e.roundRect ? (e.beginPath(), e.roundRect(s, r, n, o, a), e.fill()) : e.fillRect(s, r, n, o);\n    }\n};\nT(hs, \"type\", \"PreviewTrackItem\"), T(hs, \"ownDefaults\", {\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\",\n    rx: 4,\n    ry: 4\n});\nlet Oe = hs;\nC.setClass(Oe, \"PreviewTrackItem\");\nclass Cf {\n    constructor(){\n        T(this, \"___eventListeners\", {});\n        T(this, \"___activeObjects\", []);\n    }\n    resize(t, { force: e } = {\n        force: !1\n    }) {\n        var s;\n        this.lowerCanvasEl && (this.setDimensions(t), e && this.renderTracks(), (s = this.onResizeCanvas) == null || s.call(this, {\n            width: this.width,\n            height: this.height\n        }));\n    }\n    pauseEventListeners() {\n        this.___eventListeners = this.__eventListeners, this.__eventListeners = {};\n        const t = this.getActiveObjects();\n        this.discardActiveObject(), this.___activeObjects = t;\n    }\n    resumeEventListeners() {\n        this.__eventListeners = this.___eventListeners, this.___eventListeners = {};\n        const t = this.___activeObjects;\n        if (!t.length) return this.requestRenderAll(), !1;\n        if (t.length === 1) this.setActiveObject(t[0]);\n        else {\n            const e = new Ot(t);\n            this.setActiveObject(e);\n        }\n        this.requestRenderAll();\n    }\n    updateCachingActiveObjects(t) {\n        const e = this.___activeObjects;\n        this.___activeObjects = e.map((s)=>{\n            const r = t.find((n)=>n.id === s.id);\n            return r || s;\n        });\n    }\n}\nfunction rr(i, t) {\n    return i.map((e)=>({\n            ...e,\n            items: e.items.filter((s)=>!t.includes(s))\n        }));\n}\nconst us = class us extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"composition\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, us.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display;\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...us.ownDefaults\n        };\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n};\nT(us, \"type\", \"Composition\"), T(us, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet oi = us;\nC.setClass(oi, \"Composition\");\nconst ds = class ds extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"illustration\");\n        T(this, \"src\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, ds.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.src = e.src;\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...ds.ownDefaults\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n    setSrc(e) {\n        this.src = e, this.set({\n            dirty: !0\n        });\n    }\n};\nT(ds, \"type\", \"Illustration\"), T(ds, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet ai = ds;\nC.setClass(ai, \"Illustration\");\nconst fs = class fs extends X {\n    constructor(e){\n        super(e);\n        T(this, \"itemType\", \"shape\");\n        T(this, \"src\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, fs.ownDefaults), this.id = e.id, this.borderColor = \"transparent\", this.stroke = \"transparent\", this.strokeWidth = 0, this.tScale = e.tScale, this.display = e.display, this.src = e.src;\n    }\n    static createControls() {\n        return {\n            controls: js()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...fs.ownDefaults\n        };\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.updateSelected(e);\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, 6), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n    setSrc(e) {\n        this.src = e, this.set({\n            dirty: !0\n        });\n    }\n};\nT(fs, \"type\", \"Shape\"), T(fs, \"ownDefaults\", {\n    rx: 6,\n    ry: 6,\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 0,\n    fill: \"#27272a\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\"\n});\nlet ci = fs;\nC.setClass(ci, \"Shape\");\nconst Of = (i, t)=>{\n    var a;\n    const e = D(i.display.from, t.tScale), s = D(i.duration, t.tScale, i.playbackRate), r = t.sizesMap.video, n = C.getClass(\"Video\") || _t;\n    return new n({\n        width: s,\n        height: r,\n        id: i.id,\n        tScale: t.tScale,\n        fill: \"#333333\",\n        resourceId: (a = i.metadata) == null ? void 0 : a.resourceId,\n        duration: i.duration,\n        top: 10,\n        left: e,\n        display: i.display,\n        trim: i.trim,\n        src: i.details.src,\n        metadata: i.metadata\n    });\n}, kf = (i, t)=>{\n    const e = i.display, s = D(e.from, t.tScale), r = D(e.to - e.from, t.tScale), n = t.sizesMap.text, o = C.getClass(\"Text\") || tr;\n    return new o({\n        width: r,\n        height: n,\n        id: i.id,\n        display: e,\n        top: 10,\n        left: s,\n        text: i.details.text,\n        tScale: t.tScale\n    });\n}, Mf = (i, t)=>{\n    const e = i.display, s = D(e.from, t.tScale), r = D(e.to - e.from, t.tScale), n = t.sizesMap.caption, o = C.getClass(\"Caption\") || sr;\n    return new o({\n        width: r,\n        height: n,\n        id: i.id,\n        display: e,\n        top: 10,\n        left: s,\n        text: i.details.text,\n        tScale: t.tScale\n    });\n}, If = (i, t)=>{\n    const e = D(i.display.from, t.tScale), s = D(i.display.to - (i.display.from || 5e3), t.tScale), r = t.sizesMap.image, n = C.getClass(\"Image\") || Qs;\n    return new n({\n        width: s,\n        height: r,\n        id: i.id,\n        src: i.details.src,\n        tScale: t.tScale,\n        top: 10,\n        left: e,\n        display: i.display\n    });\n}, Df = (i, t)=>{\n    const e = i.display, s = D(e.from, t.tScale), r = D(e.to - e.from, t.tScale, i.playbackRate), n = t.sizesMap.audio, o = C.getClass(\"Audio\") || ft;\n    return new o({\n        width: r,\n        height: n,\n        top: 10,\n        left: s,\n        id: i.id,\n        display: e,\n        trim: i.trim || {\n            from: 0,\n            to: i.duration\n        },\n        duration: i.duration,\n        src: i.details.src,\n        tScale: t.tScale\n    });\n}, jf = (i, t)=>{\n    const e = i.display, s = D(e.from, t.tScale), r = D(e.to - e.from, t.tScale), n = 42, o = C.getClass(\"Template\") || Vt;\n    return new o({\n        width: r,\n        height: n,\n        top: 10,\n        left: s,\n        id: i.id,\n        display: e,\n        duration: e.to - e.from,\n        tScale: t.tScale,\n        trim: i.trim || i.display\n    });\n}, Ef = (i, t)=>{\n    const e = i.display, s = D(e.from, t.tScale), r = D(e.to - e.from, t.tScale), n = 32, o = C.getClass(\"Composition\") || oi;\n    return new o({\n        width: r,\n        height: n,\n        id: i.id,\n        display: e,\n        top: 10,\n        left: s,\n        duration: e.to - e.from,\n        tScale: t.tScale\n    });\n}, Pf = (i, t)=>{\n    const e = D(i.display.from, t.tScale), s = D(i.display.to - (i.display.from || 5e3), t.tScale), r = t.sizesMap.illustration, n = C.getClass(\"Illustration\") || ai;\n    return new n({\n        width: s,\n        height: r,\n        id: i.id,\n        src: i.details.src,\n        tScale: t.tScale,\n        top: 10,\n        left: e,\n        display: i.display\n    });\n}, Af = (i, t)=>{\n    const e = D(i.display.from, t.tScale), s = D(i.display.to - (i.display.from || 5e3), t.tScale), r = t.sizesMap.shape, n = C.getClass(\"Shape\") || ci;\n    return new n({\n        width: s,\n        height: r,\n        id: i.id,\n        src: i.details.src,\n        tScale: t.tScale,\n        top: 10,\n        left: e,\n        display: i.display\n    });\n}, Ff = (i, t)=>{\n    if (i.type === \"caption\") return Mf(i, t);\n    if (i.type === \"text\") return kf(i, t);\n    if (i.type === \"image\") return If(i, t);\n    if (i.type === \"video\") return Of(i, t);\n    if (i.type === \"audio\") return Df(i, t);\n    if (i.type === \"template\") return jf(i, t);\n    if (i.type === \"shape\") return Af(i, t);\n    if (i.type === \"illustration\") return Pf(i, t);\n    if (i.type === \"composition\") return Ef(i, t);\n};\nvar vl = typeof global == \"object\" && global && global.Object === Object && global, Rf = typeof self == \"object\" && self && self.Object === Object && self, Xt = vl || Rf || Function(\"return this\")(), Mt = Xt.Symbol, yl = Object.prototype, Lf = yl.hasOwnProperty, Bf = yl.toString, Rs = Mt ? Mt.toStringTag : void 0;\nfunction Wf(i) {\n    var t = Lf.call(i, Rs), e = i[Rs];\n    try {\n        i[Rs] = void 0;\n        var s = !0;\n    } catch  {}\n    var r = Bf.call(i);\n    return s && (t ? i[Rs] = e : delete i[Rs]), r;\n}\nvar Xf = Object.prototype, zf = Xf.toString;\nfunction Hf(i) {\n    return zf.call(i);\n}\nvar Yf = \"[object Null]\", Vf = \"[object Undefined]\", Jo = Mt ? Mt.toStringTag : void 0;\nfunction Es(i) {\n    return i == null ? i === void 0 ? Vf : Yf : Jo && Jo in Object(i) ? Wf(i) : Hf(i);\n}\nfunction ke(i) {\n    return i != null && typeof i == \"object\";\n}\nvar Gf = \"[object Symbol]\";\nfunction Ii(i) {\n    return typeof i == \"symbol\" || ke(i) && Es(i) == Gf;\n}\nfunction Nf(i, t) {\n    for(var e = -1, s = i == null ? 0 : i.length, r = Array(s); ++e < s;)r[e] = t(i[e], e, i);\n    return r;\n}\nvar Zt = Array.isArray, Zo = Mt ? Mt.prototype : void 0, Qo = Zo ? Zo.toString : void 0;\nfunction bl(i) {\n    if (typeof i == \"string\") return i;\n    if (Zt(i)) return Nf(i, bl) + \"\";\n    if (Ii(i)) return Qo ? Qo.call(i) : \"\";\n    var t = i + \"\";\n    return t == \"0\" && 1 / i == -1 / 0 ? \"-0\" : t;\n}\nvar Uf = /\\s/;\nfunction $f(i) {\n    for(var t = i.length; t-- && Uf.test(i.charAt(t)););\n    return t;\n}\nvar qf = /^\\s+/;\nfunction Kf(i) {\n    return i && i.slice(0, $f(i) + 1).replace(qf, \"\");\n}\nfunction Qt(i) {\n    var t = typeof i;\n    return i != null && (t == \"object\" || t == \"function\");\n}\nvar ta = NaN, Jf = /^[-+]0x[0-9a-f]+$/i, Zf = /^0b[01]+$/i, Qf = /^0o[0-7]+$/i, tg = parseInt;\nfunction ea(i) {\n    if (typeof i == \"number\") return i;\n    if (Ii(i)) return ta;\n    if (Qt(i)) {\n        var t = typeof i.valueOf == \"function\" ? i.valueOf() : i;\n        i = Qt(t) ? t + \"\" : t;\n    }\n    if (typeof i != \"string\") return i === 0 ? i : +i;\n    i = Kf(i);\n    var e = Zf.test(i);\n    return e || Qf.test(i) ? tg(i.slice(2), e ? 2 : 8) : Jf.test(i) ? ta : +i;\n}\nfunction eg(i) {\n    return i;\n}\nvar sg = \"[object AsyncFunction]\", rg = \"[object Function]\", ig = \"[object GeneratorFunction]\", ng = \"[object Proxy]\";\nfunction _l(i) {\n    if (!Qt(i)) return !1;\n    var t = Es(i);\n    return t == rg || t == ig || t == sg || t == ng;\n}\nvar Ki = Xt[\"__core-js_shared__\"], sa = function() {\n    var i = /[^.]+$/.exec(Ki && Ki.keys && Ki.keys.IE_PROTO || \"\");\n    return i ? \"Symbol(src)_1.\" + i : \"\";\n}();\nfunction og(i) {\n    return !!sa && sa in i;\n}\nvar ag = Function.prototype, cg = ag.toString;\nfunction Ue(i) {\n    if (i != null) {\n        try {\n            return cg.call(i);\n        } catch  {}\n        try {\n            return i + \"\";\n        } catch  {}\n    }\n    return \"\";\n}\nvar lg = /[\\\\^$.*+?()[\\]{}|]/g, hg = /^\\[object .+?Constructor\\]$/, ug = Function.prototype, dg = Object.prototype, fg = ug.toString, gg = dg.hasOwnProperty, pg = RegExp(\"^\" + fg.call(gg).replace(lg, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nfunction mg(i) {\n    if (!Qt(i) || og(i)) return !1;\n    var t = _l(i) ? pg : hg;\n    return t.test(Ue(i));\n}\nfunction vg(i, t) {\n    return i == null ? void 0 : i[t];\n}\nfunction $e(i, t) {\n    var e = vg(i, t);\n    return mg(e) ? e : void 0;\n}\nvar wn = $e(Xt, \"WeakMap\"), ra = Object.create, yg = /* @__PURE__ */ function() {\n    function i() {}\n    return function(t) {\n        if (!Qt(t)) return {};\n        if (ra) return ra(t);\n        i.prototype = t;\n        var e = new i();\n        return i.prototype = void 0, e;\n    };\n}();\nfunction bg(i, t, e) {\n    switch(e.length){\n        case 0:\n            return i.call(t);\n        case 1:\n            return i.call(t, e[0]);\n        case 2:\n            return i.call(t, e[0], e[1]);\n        case 3:\n            return i.call(t, e[0], e[1], e[2]);\n    }\n    return i.apply(t, e);\n}\nvar _g = 800, Sg = 16, Tg = Date.now;\nfunction xg(i) {\n    var t = 0, e = 0;\n    return function() {\n        var s = Tg(), r = Sg - (s - e);\n        if (e = s, r > 0) {\n            if (++t >= _g) return arguments[0];\n        } else t = 0;\n        return i.apply(void 0, arguments);\n    };\n}\nfunction wg(i) {\n    return function() {\n        return i;\n    };\n}\nvar li = function() {\n    try {\n        var i = $e(Object, \"defineProperty\");\n        return i({}, \"\", {}), i;\n    } catch  {}\n}(), Cg = li ? function(i, t) {\n    return li(i, \"toString\", {\n        configurable: !0,\n        enumerable: !1,\n        value: wg(t),\n        writable: !0\n    });\n} : eg, Og = xg(Cg);\nfunction kg(i, t) {\n    for(var e = -1, s = i == null ? 0 : i.length; ++e < s && t(i[e], e, i) !== !1;);\n    return i;\n}\nvar Mg = 9007199254740991, Ig = /^(?:0|[1-9]\\d*)$/;\nfunction eo(i, t) {\n    var e = typeof i;\n    return t = t ?? Mg, !!t && (e == \"number\" || e != \"symbol\" && Ig.test(i)) && i > -1 && i % 1 == 0 && i < t;\n}\nfunction Dg(i, t, e) {\n    t == \"__proto__\" && li ? li(i, t, {\n        configurable: !0,\n        enumerable: !0,\n        value: e,\n        writable: !0\n    }) : i[t] = e;\n}\nfunction so(i, t) {\n    return i === t || i !== i && t !== t;\n}\nvar jg = Object.prototype, Eg = jg.hasOwnProperty;\nfunction Sl(i, t, e) {\n    var s = i[t];\n    (!(Eg.call(i, t) && so(s, e)) || e === void 0 && !(t in i)) && Dg(i, t, e);\n}\nvar ia = Math.max;\nfunction Pg(i, t, e) {\n    return t = ia(t === void 0 ? i.length - 1 : t, 0), function() {\n        for(var s = arguments, r = -1, n = ia(s.length - t, 0), o = Array(n); ++r < n;)o[r] = s[t + r];\n        r = -1;\n        for(var a = Array(t + 1); ++r < t;)a[r] = s[r];\n        return a[t] = e(o), bg(i, this, a);\n    };\n}\nvar Ag = 9007199254740991;\nfunction ro(i) {\n    return typeof i == \"number\" && i > -1 && i % 1 == 0 && i <= Ag;\n}\nfunction Fg(i) {\n    return i != null && ro(i.length) && !_l(i);\n}\nvar Rg = Object.prototype;\nfunction Tl(i) {\n    var t = i && i.constructor, e = typeof t == \"function\" && t.prototype || Rg;\n    return i === e;\n}\nfunction Lg(i, t) {\n    for(var e = -1, s = Array(i); ++e < i;)s[e] = t(e);\n    return s;\n}\nvar Bg = \"[object Arguments]\";\nfunction na(i) {\n    return ke(i) && Es(i) == Bg;\n}\nvar xl = Object.prototype, Wg = xl.hasOwnProperty, Xg = xl.propertyIsEnumerable, io = na(/* @__PURE__ */ function() {\n    return arguments;\n}()) ? na : function(i) {\n    return ke(i) && Wg.call(i, \"callee\") && !Xg.call(i, \"callee\");\n};\nfunction zg() {\n    return !1;\n}\nvar wl = typeof exports == \"object\" && exports && !exports.nodeType && exports, oa = wl && \"object\" == \"object\" && module && !module.nodeType && module, Hg = oa && oa.exports === wl, aa = Hg ? Xt.Buffer : void 0, Yg = aa ? aa.isBuffer : void 0, hi = Yg || zg, Vg = \"[object Arguments]\", Gg = \"[object Array]\", Ng = \"[object Boolean]\", Ug = \"[object Date]\", $g = \"[object Error]\", qg = \"[object Function]\", Kg = \"[object Map]\", Jg = \"[object Number]\", Zg = \"[object Object]\", Qg = \"[object RegExp]\", tp = \"[object Set]\", ep = \"[object String]\", sp = \"[object WeakMap]\", rp = \"[object ArrayBuffer]\", ip = \"[object DataView]\", np = \"[object Float32Array]\", op = \"[object Float64Array]\", ap = \"[object Int8Array]\", cp = \"[object Int16Array]\", lp = \"[object Int32Array]\", hp = \"[object Uint8Array]\", up = \"[object Uint8ClampedArray]\", dp = \"[object Uint16Array]\", fp = \"[object Uint32Array]\", H = {};\nH[np] = H[op] = H[ap] = H[cp] = H[lp] = H[hp] = H[up] = H[dp] = H[fp] = !0;\nH[Vg] = H[Gg] = H[rp] = H[Ng] = H[ip] = H[Ug] = H[$g] = H[qg] = H[Kg] = H[Jg] = H[Zg] = H[Qg] = H[tp] = H[ep] = H[sp] = !1;\nfunction gp(i) {\n    return ke(i) && ro(i.length) && !!H[Es(i)];\n}\nfunction no(i) {\n    return function(t) {\n        return i(t);\n    };\n}\nvar Cl = typeof exports == \"object\" && exports && !exports.nodeType && exports, Ns = Cl && \"object\" == \"object\" && module && !module.nodeType && module, pp = Ns && Ns.exports === Cl, Ji = pp && vl.process, Ts = function() {\n    try {\n        var i = Ns && Ns.require && Ns.require(\"util\").types;\n        return i || Ji && Ji.binding && Ji.binding(\"util\");\n    } catch  {}\n}(), ca = Ts && Ts.isTypedArray, Ol = ca ? no(ca) : gp, mp = Object.prototype, vp = mp.hasOwnProperty;\nfunction yp(i, t) {\n    var e = Zt(i), s = !e && io(i), r = !e && !s && hi(i), n = !e && !s && !r && Ol(i), o = e || s || r || n, a = o ? Lg(i.length, String) : [], c = a.length;\n    for(var l in i)vp.call(i, l) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.\n    (l == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n    r && (l == \"offset\" || l == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n    n && (l == \"buffer\" || l == \"byteLength\" || l == \"byteOffset\") || // Skip index properties.\n    eo(l, c))) && a.push(l);\n    return a;\n}\nfunction kl(i, t) {\n    return function(e) {\n        return i(t(e));\n    };\n}\nvar bp = kl(Object.keys, Object), _p = Object.prototype, Sp = _p.hasOwnProperty;\nfunction Tp(i) {\n    if (!Tl(i)) return bp(i);\n    var t = [];\n    for(var e in Object(i))Sp.call(i, e) && e != \"constructor\" && t.push(e);\n    return t;\n}\nfunction xp(i) {\n    return Fg(i) ? yp(i) : Tp(i);\n}\nvar wp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, Cp = /^\\w*$/;\nfunction Op(i, t) {\n    if (Zt(i)) return !1;\n    var e = typeof i;\n    return e == \"number\" || e == \"symbol\" || e == \"boolean\" || i == null || Ii(i) ? !0 : Cp.test(i) || !wp.test(i) || t != null && i in Object(t);\n}\nvar ir = $e(Object, \"create\");\nfunction kp() {\n    this.__data__ = ir ? ir(null) : {}, this.size = 0;\n}\nfunction Mp(i) {\n    var t = this.has(i) && delete this.__data__[i];\n    return this.size -= t ? 1 : 0, t;\n}\nvar Ip = \"__lodash_hash_undefined__\", Dp = Object.prototype, jp = Dp.hasOwnProperty;\nfunction Ep(i) {\n    var t = this.__data__;\n    if (ir) {\n        var e = t[i];\n        return e === Ip ? void 0 : e;\n    }\n    return jp.call(t, i) ? t[i] : void 0;\n}\nvar Pp = Object.prototype, Ap = Pp.hasOwnProperty;\nfunction Fp(i) {\n    var t = this.__data__;\n    return ir ? t[i] !== void 0 : Ap.call(t, i);\n}\nvar Rp = \"__lodash_hash_undefined__\";\nfunction Lp(i, t) {\n    var e = this.__data__;\n    return this.size += this.has(i) ? 0 : 1, e[i] = ir && t === void 0 ? Rp : t, this;\n}\nfunction Ye(i) {\n    var t = -1, e = i == null ? 0 : i.length;\n    for(this.clear(); ++t < e;){\n        var s = i[t];\n        this.set(s[0], s[1]);\n    }\n}\nYe.prototype.clear = kp;\nYe.prototype.delete = Mp;\nYe.prototype.get = Ep;\nYe.prototype.has = Fp;\nYe.prototype.set = Lp;\nfunction Bp() {\n    this.__data__ = [], this.size = 0;\n}\nfunction Di(i, t) {\n    for(var e = i.length; e--;)if (so(i[e][0], t)) return e;\n    return -1;\n}\nvar Wp = Array.prototype, Xp = Wp.splice;\nfunction zp(i) {\n    var t = this.__data__, e = Di(t, i);\n    if (e < 0) return !1;\n    var s = t.length - 1;\n    return e == s ? t.pop() : Xp.call(t, e, 1), --this.size, !0;\n}\nfunction Hp(i) {\n    var t = this.__data__, e = Di(t, i);\n    return e < 0 ? void 0 : t[e][1];\n}\nfunction Yp(i) {\n    return Di(this.__data__, i) > -1;\n}\nfunction Vp(i, t) {\n    var e = this.__data__, s = Di(e, i);\n    return s < 0 ? (++this.size, e.push([\n        i,\n        t\n    ])) : e[s][1] = t, this;\n}\nfunction ge(i) {\n    var t = -1, e = i == null ? 0 : i.length;\n    for(this.clear(); ++t < e;){\n        var s = i[t];\n        this.set(s[0], s[1]);\n    }\n}\nge.prototype.clear = Bp;\nge.prototype.delete = zp;\nge.prototype.get = Hp;\nge.prototype.has = Yp;\nge.prototype.set = Vp;\nvar nr = $e(Xt, \"Map\");\nfunction Gp() {\n    this.size = 0, this.__data__ = {\n        hash: new Ye(),\n        map: new (nr || ge)(),\n        string: new Ye()\n    };\n}\nfunction Np(i) {\n    var t = typeof i;\n    return t == \"string\" || t == \"number\" || t == \"symbol\" || t == \"boolean\" ? i !== \"__proto__\" : i === null;\n}\nfunction ji(i, t) {\n    var e = i.__data__;\n    return Np(t) ? e[typeof t == \"string\" ? \"string\" : \"hash\"] : e.map;\n}\nfunction Up(i) {\n    var t = ji(this, i).delete(i);\n    return this.size -= t ? 1 : 0, t;\n}\nfunction $p(i) {\n    return ji(this, i).get(i);\n}\nfunction qp(i) {\n    return ji(this, i).has(i);\n}\nfunction Kp(i, t) {\n    var e = ji(this, i), s = e.size;\n    return e.set(i, t), this.size += e.size == s ? 0 : 1, this;\n}\nfunction pe(i) {\n    var t = -1, e = i == null ? 0 : i.length;\n    for(this.clear(); ++t < e;){\n        var s = i[t];\n        this.set(s[0], s[1]);\n    }\n}\npe.prototype.clear = Gp;\npe.prototype.delete = Up;\npe.prototype.get = $p;\npe.prototype.has = qp;\npe.prototype.set = Kp;\nvar Jp = \"Expected a function\";\nfunction oo(i, t) {\n    if (typeof i != \"function\" || t != null && typeof t != \"function\") throw new TypeError(Jp);\n    var e = function() {\n        var s = arguments, r = t ? t.apply(this, s) : s[0], n = e.cache;\n        if (n.has(r)) return n.get(r);\n        var o = i.apply(this, s);\n        return e.cache = n.set(r, o) || n, o;\n    };\n    return e.cache = new (oo.Cache || pe)(), e;\n}\noo.Cache = pe;\nvar Zp = 500;\nfunction Qp(i) {\n    var t = oo(i, function(s) {\n        return e.size === Zp && e.clear(), s;\n    }), e = t.cache;\n    return t;\n}\nvar tm = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, em = /\\\\(\\\\)?/g, sm = Qp(function(i) {\n    var t = [];\n    return i.charCodeAt(0) === 46 && t.push(\"\"), i.replace(tm, function(e, s, r, n) {\n        t.push(r ? n.replace(em, \"$1\") : s || e);\n    }), t;\n});\nfunction rm(i) {\n    return i == null ? \"\" : bl(i);\n}\nfunction Ei(i, t) {\n    return Zt(i) ? i : Op(i, t) ? [\n        i\n    ] : sm(rm(i));\n}\nfunction ao(i) {\n    if (typeof i == \"string\" || Ii(i)) return i;\n    var t = i + \"\";\n    return t == \"0\" && 1 / i == -1 / 0 ? \"-0\" : t;\n}\nfunction im(i, t) {\n    t = Ei(t, i);\n    for(var e = 0, s = t.length; i != null && e < s;)i = i[ao(t[e++])];\n    return e && e == s ? i : void 0;\n}\nfunction Ml(i, t) {\n    for(var e = -1, s = t.length, r = i.length; ++e < s;)i[r + e] = t[e];\n    return i;\n}\nvar la = Mt ? Mt.isConcatSpreadable : void 0;\nfunction nm(i) {\n    return Zt(i) || io(i) || !!(la && i && i[la]);\n}\nfunction om(i, t, e, s, r) {\n    var n = -1, o = i.length;\n    for(e || (e = nm), r || (r = []); ++n < o;){\n        var a = i[n];\n        e(a) ? Ml(r, a) : r[r.length] = a;\n    }\n    return r;\n}\nfunction co(i) {\n    var t = i == null ? 0 : i.length;\n    return t ? om(i) : [];\n}\nfunction am(i) {\n    return Og(Pg(i, void 0, co), i + \"\");\n}\nvar cm = kl(Object.getPrototypeOf, Object);\nfunction lm() {\n    this.__data__ = new ge(), this.size = 0;\n}\nfunction hm(i) {\n    var t = this.__data__, e = t.delete(i);\n    return this.size = t.size, e;\n}\nfunction um(i) {\n    return this.__data__.get(i);\n}\nfunction dm(i) {\n    return this.__data__.has(i);\n}\nvar fm = 200;\nfunction gm(i, t) {\n    var e = this.__data__;\n    if (e instanceof ge) {\n        var s = e.__data__;\n        if (!nr || s.length < fm - 1) return s.push([\n            i,\n            t\n        ]), this.size = ++e.size, this;\n        e = this.__data__ = new pe(s);\n    }\n    return e.set(i, t), this.size = e.size, this;\n}\nfunction le(i) {\n    var t = this.__data__ = new ge(i);\n    this.size = t.size;\n}\nle.prototype.clear = lm;\nle.prototype.delete = hm;\nle.prototype.get = um;\nle.prototype.has = dm;\nle.prototype.set = gm;\nvar Il = typeof exports == \"object\" && exports && !exports.nodeType && exports, ha = Il && \"object\" == \"object\" && module && !module.nodeType && module, pm = ha && ha.exports === Il, ua = pm ? Xt.Buffer : void 0;\nua && ua.allocUnsafe;\nfunction mm(i, t) {\n    return i.slice();\n}\nfunction vm(i, t) {\n    for(var e = -1, s = i == null ? 0 : i.length, r = 0, n = []; ++e < s;){\n        var o = i[e];\n        t(o, e, i) && (n[r++] = o);\n    }\n    return n;\n}\nfunction ym() {\n    return [];\n}\nvar bm = Object.prototype, _m = bm.propertyIsEnumerable, da = Object.getOwnPropertySymbols, Sm = da ? function(i) {\n    return i == null ? [] : (i = Object(i), vm(da(i), function(t) {\n        return _m.call(i, t);\n    }));\n} : ym;\nfunction Tm(i, t, e) {\n    var s = t(i);\n    return Zt(i) ? s : Ml(s, e(i));\n}\nfunction Cn(i) {\n    return Tm(i, xp, Sm);\n}\nvar On = $e(Xt, \"DataView\"), kn = $e(Xt, \"Promise\"), Mn = $e(Xt, \"Set\"), fa = \"[object Map]\", xm = \"[object Object]\", ga = \"[object Promise]\", pa = \"[object Set]\", ma = \"[object WeakMap]\", va = \"[object DataView]\", wm = Ue(On), Cm = Ue(nr), Om = Ue(kn), km = Ue(Mn), Mm = Ue(wn), Pt = Es;\n(On && Pt(new On(new ArrayBuffer(1))) != va || nr && Pt(new nr()) != fa || kn && Pt(kn.resolve()) != ga || Mn && Pt(new Mn()) != pa || wn && Pt(new wn()) != ma) && (Pt = function(i) {\n    var t = Es(i), e = t == xm ? i.constructor : void 0, s = e ? Ue(e) : \"\";\n    if (s) switch(s){\n        case wm:\n            return va;\n        case Cm:\n            return fa;\n        case Om:\n            return ga;\n        case km:\n            return pa;\n        case Mm:\n            return ma;\n    }\n    return t;\n});\nvar Im = Object.prototype, Dm = Im.hasOwnProperty;\nfunction jm(i) {\n    var t = i.length, e = new i.constructor(t);\n    return t && typeof i[0] == \"string\" && Dm.call(i, \"index\") && (e.index = i.index, e.input = i.input), e;\n}\nvar ui = Xt.Uint8Array;\nfunction lo(i) {\n    var t = new i.constructor(i.byteLength);\n    return new ui(t).set(new ui(i)), t;\n}\nfunction Em(i, t) {\n    var e = lo(i.buffer);\n    return new i.constructor(e, i.byteOffset, i.byteLength);\n}\nvar Pm = /\\w*$/;\nfunction Am(i) {\n    var t = new i.constructor(i.source, Pm.exec(i));\n    return t.lastIndex = i.lastIndex, t;\n}\nvar ya = Mt ? Mt.prototype : void 0, ba = ya ? ya.valueOf : void 0;\nfunction Fm(i) {\n    return ba ? Object(ba.call(i)) : {};\n}\nfunction Rm(i, t) {\n    var e = lo(i.buffer);\n    return new i.constructor(e, i.byteOffset, i.length);\n}\nvar Lm = \"[object Boolean]\", Bm = \"[object Date]\", Wm = \"[object Map]\", Xm = \"[object Number]\", zm = \"[object RegExp]\", Hm = \"[object Set]\", Ym = \"[object String]\", Vm = \"[object Symbol]\", Gm = \"[object ArrayBuffer]\", Nm = \"[object DataView]\", Um = \"[object Float32Array]\", $m = \"[object Float64Array]\", qm = \"[object Int8Array]\", Km = \"[object Int16Array]\", Jm = \"[object Int32Array]\", Zm = \"[object Uint8Array]\", Qm = \"[object Uint8ClampedArray]\", tv = \"[object Uint16Array]\", ev = \"[object Uint32Array]\";\nfunction sv(i, t, e) {\n    var s = i.constructor;\n    switch(t){\n        case Gm:\n            return lo(i);\n        case Lm:\n        case Bm:\n            return new s(+i);\n        case Nm:\n            return Em(i);\n        case Um:\n        case $m:\n        case qm:\n        case Km:\n        case Jm:\n        case Zm:\n        case Qm:\n        case tv:\n        case ev:\n            return Rm(i);\n        case Wm:\n            return new s();\n        case Xm:\n        case Ym:\n            return new s(i);\n        case zm:\n            return Am(i);\n        case Hm:\n            return new s();\n        case Vm:\n            return Fm(i);\n    }\n}\nfunction rv(i) {\n    return typeof i.constructor == \"function\" && !Tl(i) ? yg(cm(i)) : {};\n}\nvar iv = \"[object Map]\";\nfunction nv(i) {\n    return ke(i) && Pt(i) == iv;\n}\nvar _a = Ts && Ts.isMap, ov = _a ? no(_a) : nv, av = \"[object Set]\";\nfunction cv(i) {\n    return ke(i) && Pt(i) == av;\n}\nvar Sa = Ts && Ts.isSet, lv = Sa ? no(Sa) : cv, Dl = \"[object Arguments]\", hv = \"[object Array]\", uv = \"[object Boolean]\", dv = \"[object Date]\", fv = \"[object Error]\", jl = \"[object Function]\", gv = \"[object GeneratorFunction]\", pv = \"[object Map]\", mv = \"[object Number]\", El = \"[object Object]\", vv = \"[object RegExp]\", yv = \"[object Set]\", bv = \"[object String]\", _v = \"[object Symbol]\", Sv = \"[object WeakMap]\", Tv = \"[object ArrayBuffer]\", xv = \"[object DataView]\", wv = \"[object Float32Array]\", Cv = \"[object Float64Array]\", Ov = \"[object Int8Array]\", kv = \"[object Int16Array]\", Mv = \"[object Int32Array]\", Iv = \"[object Uint8Array]\", Dv = \"[object Uint8ClampedArray]\", jv = \"[object Uint16Array]\", Ev = \"[object Uint32Array]\", z = {};\nz[Dl] = z[hv] = z[Tv] = z[xv] = z[uv] = z[dv] = z[wv] = z[Cv] = z[Ov] = z[kv] = z[Mv] = z[pv] = z[mv] = z[El] = z[vv] = z[yv] = z[bv] = z[_v] = z[Iv] = z[Dv] = z[jv] = z[Ev] = !0;\nz[fv] = z[jl] = z[Sv] = !1;\nfunction Nr(i, t, e, s, r, n) {\n    var o;\n    if (o !== void 0) return o;\n    if (!Qt(i)) return i;\n    var a = Zt(i);\n    if (a) o = jm(i);\n    else {\n        var c = Pt(i), l = c == jl || c == gv;\n        if (hi(i)) return mm(i);\n        if (c == El || c == Dl || l && !r) o = l ? {} : rv(i);\n        else {\n            if (!z[c]) return r ? i : {};\n            o = sv(i, c);\n        }\n    }\n    n || (n = new le());\n    var h = n.get(i);\n    if (h) return h;\n    n.set(i, o), lv(i) ? i.forEach(function(f) {\n        o.add(Nr(f, t, e, f, i, n));\n    }) : ov(i) && i.forEach(function(f, g) {\n        o.set(g, Nr(f, t, e, g, i, n));\n    });\n    var u = Cn, d = a ? void 0 : u(i);\n    return kg(d || i, function(f, g) {\n        d && (g = f, f = i[g]), Sl(o, g, Nr(f, t, e, g, i, n));\n    }), o;\n}\nvar Pv = 1, Av = 4;\nfunction Ut(i) {\n    return Nr(i, Pv | Av);\n}\nvar Fv = \"__lodash_hash_undefined__\";\nfunction Rv(i) {\n    return this.__data__.set(i, Fv), this;\n}\nfunction Lv(i) {\n    return this.__data__.has(i);\n}\nfunction di(i) {\n    var t = -1, e = i == null ? 0 : i.length;\n    for(this.__data__ = new pe(); ++t < e;)this.add(i[t]);\n}\ndi.prototype.add = di.prototype.push = Rv;\ndi.prototype.has = Lv;\nfunction Bv(i, t) {\n    for(var e = -1, s = i == null ? 0 : i.length; ++e < s;)if (t(i[e], e, i)) return !0;\n    return !1;\n}\nfunction Wv(i, t) {\n    return i.has(t);\n}\nvar Xv = 1, zv = 2;\nfunction Pl(i, t, e, s, r, n) {\n    var o = e & Xv, a = i.length, c = t.length;\n    if (a != c && !(o && c > a)) return !1;\n    var l = n.get(i), h = n.get(t);\n    if (l && h) return l == t && h == i;\n    var u = -1, d = !0, f = e & zv ? new di() : void 0;\n    for(n.set(i, t), n.set(t, i); ++u < a;){\n        var g = i[u], p = t[u];\n        if (s) var m = o ? s(p, g, u, t, i, n) : s(g, p, u, i, t, n);\n        if (m !== void 0) {\n            if (m) continue;\n            d = !1;\n            break;\n        }\n        if (f) {\n            if (!Bv(t, function(b, S) {\n                if (!Wv(f, S) && (g === b || r(g, b, e, s, n))) return f.push(S);\n            })) {\n                d = !1;\n                break;\n            }\n        } else if (!(g === p || r(g, p, e, s, n))) {\n            d = !1;\n            break;\n        }\n    }\n    return n.delete(i), n.delete(t), d;\n}\nfunction Hv(i) {\n    var t = -1, e = Array(i.size);\n    return i.forEach(function(s, r) {\n        e[++t] = [\n            r,\n            s\n        ];\n    }), e;\n}\nfunction Yv(i) {\n    var t = -1, e = Array(i.size);\n    return i.forEach(function(s) {\n        e[++t] = s;\n    }), e;\n}\nvar Vv = 1, Gv = 2, Nv = \"[object Boolean]\", Uv = \"[object Date]\", $v = \"[object Error]\", qv = \"[object Map]\", Kv = \"[object Number]\", Jv = \"[object RegExp]\", Zv = \"[object Set]\", Qv = \"[object String]\", ty = \"[object Symbol]\", ey = \"[object ArrayBuffer]\", sy = \"[object DataView]\", Ta = Mt ? Mt.prototype : void 0, Zi = Ta ? Ta.valueOf : void 0;\nfunction ry(i, t, e, s, r, n, o) {\n    switch(e){\n        case sy:\n            if (i.byteLength != t.byteLength || i.byteOffset != t.byteOffset) return !1;\n            i = i.buffer, t = t.buffer;\n        case ey:\n            return !(i.byteLength != t.byteLength || !n(new ui(i), new ui(t)));\n        case Nv:\n        case Uv:\n        case Kv:\n            return so(+i, +t);\n        case $v:\n            return i.name == t.name && i.message == t.message;\n        case Jv:\n        case Qv:\n            return i == t + \"\";\n        case qv:\n            var a = Hv;\n        case Zv:\n            var c = s & Vv;\n            if (a || (a = Yv), i.size != t.size && !c) return !1;\n            var l = o.get(i);\n            if (l) return l == t;\n            s |= Gv, o.set(i, t);\n            var h = Pl(a(i), a(t), s, r, n, o);\n            return o.delete(i), h;\n        case ty:\n            if (Zi) return Zi.call(i) == Zi.call(t);\n    }\n    return !1;\n}\nvar iy = 1, ny = Object.prototype, oy = ny.hasOwnProperty;\nfunction ay(i, t, e, s, r, n) {\n    var o = e & iy, a = Cn(i), c = a.length, l = Cn(t), h = l.length;\n    if (c != h && !o) return !1;\n    for(var u = c; u--;){\n        var d = a[u];\n        if (!(o ? d in t : oy.call(t, d))) return !1;\n    }\n    var f = n.get(i), g = n.get(t);\n    if (f && g) return f == t && g == i;\n    var p = !0;\n    n.set(i, t), n.set(t, i);\n    for(var m = o; ++u < c;){\n        d = a[u];\n        var b = i[d], S = t[d];\n        if (s) var w = o ? s(S, b, d, t, i, n) : s(b, S, d, i, t, n);\n        if (!(w === void 0 ? b === S || r(b, S, e, s, n) : w)) {\n            p = !1;\n            break;\n        }\n        m || (m = d == \"constructor\");\n    }\n    if (p && !m) {\n        var k = i.constructor, O = t.constructor;\n        k != O && \"constructor\" in i && \"constructor\" in t && !(typeof k == \"function\" && k instanceof k && typeof O == \"function\" && O instanceof O) && (p = !1);\n    }\n    return n.delete(i), n.delete(t), p;\n}\nvar cy = 1, xa = \"[object Arguments]\", wa = \"[object Array]\", zr = \"[object Object]\", ly = Object.prototype, Ca = ly.hasOwnProperty;\nfunction hy(i, t, e, s, r, n) {\n    var o = Zt(i), a = Zt(t), c = o ? wa : Pt(i), l = a ? wa : Pt(t);\n    c = c == xa ? zr : c, l = l == xa ? zr : l;\n    var h = c == zr, u = l == zr, d = c == l;\n    if (d && hi(i)) {\n        if (!hi(t)) return !1;\n        o = !0, h = !1;\n    }\n    if (d && !h) return n || (n = new le()), o || Ol(i) ? Pl(i, t, e, s, r, n) : ry(i, t, c, e, s, r, n);\n    if (!(e & cy)) {\n        var f = h && Ca.call(i, \"__wrapped__\"), g = u && Ca.call(t, \"__wrapped__\");\n        if (f || g) {\n            var p = f ? i.value() : i, m = g ? t.value() : t;\n            return n || (n = new le()), r(p, m, e, s, n);\n        }\n    }\n    return d ? (n || (n = new le()), ay(i, t, e, s, r, n)) : !1;\n}\nfunction Al(i, t, e, s, r) {\n    return i === t ? !0 : i == null || t == null || !ke(i) && !ke(t) ? i !== i && t !== t : hy(i, t, e, s, Al, r);\n}\nfunction uy(i, t) {\n    return i != null && t in Object(i);\n}\nfunction dy(i, t, e) {\n    t = Ei(t, i);\n    for(var s = -1, r = t.length, n = !1; ++s < r;){\n        var o = ao(t[s]);\n        if (!(n = i != null && e(i, o))) break;\n        i = i[o];\n    }\n    return n || ++s != r ? n : (r = i == null ? 0 : i.length, !!r && ro(r) && eo(o, r) && (Zt(i) || io(i)));\n}\nfunction fy(i, t) {\n    return i != null && dy(i, t, uy);\n}\nvar Qi = function() {\n    return Xt.Date.now();\n}, gy = \"Expected a function\", py = Math.max, my = Math.min;\nfunction vy(i, t, e) {\n    var s, r, n, o, a, c, l = 0, h = !1, u = !1, d = !0;\n    if (typeof i != \"function\") throw new TypeError(gy);\n    t = ea(t) || 0, Qt(e) && (h = !!e.leading, u = \"maxWait\" in e, n = u ? py(ea(e.maxWait) || 0, t) : n, d = \"trailing\" in e ? !!e.trailing : d);\n    function f(x) {\n        var I = s, M = r;\n        return s = r = void 0, l = x, o = i.apply(M, I), o;\n    }\n    function g(x) {\n        return l = x, a = setTimeout(b, t), h ? f(x) : o;\n    }\n    function p(x) {\n        var I = x - c, M = x - l, E = t - I;\n        return u ? my(E, n - M) : E;\n    }\n    function m(x) {\n        var I = x - c, M = x - l;\n        return c === void 0 || I >= t || I < 0 || u && M >= n;\n    }\n    function b() {\n        var x = Qi();\n        if (m(x)) return S(x);\n        a = setTimeout(b, p(x));\n    }\n    function S(x) {\n        return a = void 0, d && s ? f(x) : (s = r = void 0, o);\n    }\n    function w() {\n        a !== void 0 && clearTimeout(a), l = 0, s = c = r = a = void 0;\n    }\n    function k() {\n        return a === void 0 ? o : S(Qi());\n    }\n    function O() {\n        var x = Qi(), I = m(x);\n        if (s = arguments, r = this, c = x, I) {\n            if (a === void 0) return g(c);\n            if (u) return clearTimeout(a), a = setTimeout(b, t), f(c);\n        }\n        return a === void 0 && (a = setTimeout(b, t)), o;\n    }\n    return O.cancel = w, O.flush = k, O;\n}\nfunction yy(i, t) {\n    return Al(i, t);\n}\nfunction by(i, t, e, s) {\n    if (!Qt(i)) return i;\n    t = Ei(t, i);\n    for(var r = -1, n = t.length, o = n - 1, a = i; a != null && ++r < n;){\n        var c = ao(t[r]), l = e;\n        if (c === \"__proto__\" || c === \"constructor\" || c === \"prototype\") return i;\n        if (r != o) {\n            var h = a[c];\n            l = void 0, l === void 0 && (l = Qt(h) ? h : eo(t[r + 1]) ? [] : {});\n        }\n        Sl(a, c, l), a = a[c];\n    }\n    return i;\n}\nfunction _y(i, t, e) {\n    for(var s = -1, r = t.length, n = {}; ++s < r;){\n        var o = t[s], a = im(i, o);\n        e(a, o) && by(n, Ei(o, i), a);\n    }\n    return n;\n}\nfunction Sy(i, t) {\n    return _y(i, t, function(e, s) {\n        return fy(i, s);\n    });\n}\nvar Ty = am(function(i, t) {\n    return i == null ? {} : Sy(i, t);\n}), xy = \"Expected a function\";\nfunction wy(i, t, e) {\n    var s = !0, r = !0;\n    if (typeof i != \"function\") throw new TypeError(xy);\n    return Qt(e) && (s = \"leading\" in e ? !!e.leading : s, r = \"trailing\" in e ? !!e.trailing : r), vy(i, t, {\n        leading: s,\n        maxWait: t,\n        trailing: r\n    });\n}\nconst Cy = (i, t)=>{\n    if (i.length !== t.length) return !1;\n    const e = new Set(i.map((r)=>r.id)), s = new Set(t.map((r)=>r.id));\n    if (e.size !== s.size) return !1;\n    for (const r of e)if (!s.has(r)) return !1;\n    return !0;\n}, xs = (i)=>{\n    const { trackItemIds: t, transitionsMap: e, trackItemsMap: s } = i, r = /* @__PURE__ */ new Map();\n    Object.values(e).forEach((c)=>{\n        var u, d;\n        if (c.kind === \"none\") return;\n        const { fromId: l, toId: h } = c;\n        r.has(l) || r.set(l, []), r.has(h) || r.set(h, []), (u = r.get(l)) == null || u.push(c), (d = r.get(h)) == null || d.push(c);\n    });\n    const n = [], o = /* @__PURE__ */ new Set(), a = (c)=>{\n        const l = [];\n        let h = c;\n        for(; h && !o.has(h);){\n            o.add(h);\n            const u = s[h];\n            l.push(u);\n            const d = Object.values(e).find((f)=>f.fromId === h && f.kind !== \"none\");\n            if (!d) break;\n            l.push(d), h = d.toId;\n        }\n        return l;\n    };\n    for (const c of t)if (!o.has(c) && (!r.has(c) || !Object.values(e).some((l)=>l.toId === c && l.kind !== \"none\"))) {\n        const l = a(c);\n        l.length > 0 && n.push(l);\n    }\n    return n.forEach((c)=>{\n        c.sort((l, h)=>\"display\" in l && \"display\" in h ? l.display.from - h.display.from : 0);\n    }), n;\n};\nfunction Oy(i, t, e, s, r) {\n    const n = i[0].canvas, o = Object.keys(s), a = {}, c = [];\n    return i.forEach((l)=>{\n        const h = t.filter((u)=>l.items.includes(u.id)).map((u)=>{\n            if (r.includes(u.id)) {\n                const d = n.getObjects().find((f)=>f.id === `${u.id}-placeholder`);\n                return (d == null ? void 0 : d.opacity) === 1 && (u.left = (d == null ? void 0 : d.left) || u.left), u;\n            } else return u;\n        }).sort((u, d)=>u.left - d.left);\n        for(let u = 0; u < h.length - 1; u++){\n            const d = h[u];\n            let f = d.left;\n            const g = h[u + 1];\n            let p = g.left;\n            if (o.includes(d.id) && (f = s[d.id].left), o.includes(g.id) && (p = s[g.id].left), Math.abs(f + d.width - p) <= 1) {\n                const m = `${d.id}-${g.id}`;\n                if (e.hasOwnProperty(m)) {\n                    const S = e[m];\n                    a[m] = S;\n                } else {\n                    const S = {\n                        id: m,\n                        duration: 1500,\n                        fromId: d.id,\n                        toId: g.id,\n                        kind: \"none\",\n                        trackId: l.id,\n                        type: \"transition\"\n                    };\n                    a[m] = S;\n                }\n                c.push(m);\n            }\n        }\n    }), {\n        newTransitionIds: c,\n        newTransitionsMap: a\n    };\n}\nconst _e = (i, t)=>{\n    const e = t.findIndex((h)=>h.id === i), s = t[e - 1], r = t[e + 1], n = t.filter((h)=>h.type === \"transition\"), o = n.indexOf(s), c = n.slice(0, o).reduce((h, u)=>h + (u.duration || 0), 0);\n    let l = 0;\n    return s && !r ? l = (s.duration || 0) / 2 : r && !s ? l = (r.duration || 0) / 2 : s && r && (l = (r.duration || 0) / 2 + (s.duration || 0) / 2), {\n        durationDiff: l,\n        offsetTransitions: c\n    };\n}, ho = (i)=>{\n    const { trackItemIds: t, transitionsMap: e, trackItemsMap: s } = i, r = /* @__PURE__ */ new Map();\n    Object.values(e).forEach((l)=>{\n        var f, g;\n        const { fromId: h, toId: u, kind: d } = l;\n        d !== \"none\" && (r.has(h) || r.set(h, []), r.has(u) || r.set(u, []), (f = r.get(h)) == null || f.push(l), (g = r.get(u)) == null || g.push(l));\n    });\n    const n = [], o = /* @__PURE__ */ new Set(), a = (l)=>{\n        const h = [];\n        let u = l;\n        for(; u && !o.has(u);){\n            o.add(u);\n            const d = s[u];\n            h.push(d);\n            const f = Object.values(e).find((g)=>g.fromId === u && g.kind !== \"none\");\n            if (!f) break;\n            h.push(f), u = f.toId;\n        }\n        return h;\n    }, c = Object.values(e).filter((l)=>l.kind !== \"none\");\n    for (const l of t)if (!o.has(l) && (!r.has(l) || !c.some((h)=>h.toId === l))) {\n        const h = a(l);\n        h.length > 0 && n.push(h);\n    }\n    return n.forEach((l)=>{\n        l.sort((h, u)=>\"display\" in h && \"display\" in u ? h.display.from - u.display.from : 0);\n    }), n;\n};\nclass ky {\n    addTrackItem(t) {\n        const e = Ff(t, {\n            tScale: this.tScale,\n            sizesMap: this.sizesMap\n        });\n        this.add(e);\n    }\n    alignItemsToTrack() {\n        this.pauseEventListeners();\n        const t = new Map(this.getObjects(\"Track\").map((r)=>[\n                r.id,\n                r\n            ])), e = this.getTrackItems(), s = this.getObjects(\"Transition\");\n        this.trackItemIds.forEach((r)=>{\n            const n = this.tracks.find((c)=>c.items.includes(r));\n            if (!n) return;\n            const o = t.get(n.id), a = this.getTrackItems().find((c)=>c.id === r);\n            a && o && (a.isMain = o.magnetic, this.trackItemsMap[r].isMain = o.magnetic, a.set({\n                top: o.top\n            }), a.setCoords());\n        }), t.forEach((r)=>{\n            r.items = e.filter((n)=>n.top === r.top).map((n)=>n.id);\n        }), s.forEach((r)=>{\n            const n = r.fromId, o = e.find((a)=>a.id === n);\n            o && (r.set({\n                top: o.top\n            }), r.setCoords());\n        }), this.resumeEventListeners();\n    }\n    updateTrackItemsToHistory() {\n        this.pauseEventListeners(), this.trackItemIds.forEach((t)=>{\n            const e = this.tracks.find((c)=>c.items.includes(t)), s = this.getObjects().find((c)=>c.id === (e == null ? void 0 : e.id)).top, r = this.trackItemsMap[t], n = this.getObjects().find((c)=>c.id === t), o = D(r.display.from, this.tScale), a = D(r.display.to - r.display.from, this.tScale, r.playbackRate);\n            if (n.set({\n                left: o,\n                width: a,\n                top: s\n            }), n instanceof _t || n instanceof ft) {\n                const c = n.display.to - n.display.from;\n                n.setDuration ? n.setDuration(c) : n.set({\n                    duration: c\n                }), r.trim = n.trim, r.display = n.display;\n            }\n            n.setCoords();\n        }), this.requestRenderAll(), this.resumeEventListeners();\n    }\n    deleteTrackItemToHistory(t) {\n        this.getObjects().filter((e)=>t.includes(e.id)).map((e)=>this.remove(e)), this.alignItemsToTrack(), this.requestRenderAll();\n    }\n    uodateTrackItemIdsOrdering() {\n        const t = this.getTrackItems();\n        t.sort((e, s)=>e.top - s.top), this.trackItemIds = t.map((e)=>e.id).reverse();\n    }\n    selectTrackItemByIds(t) {\n        const e = this.getActiveObjects().map((n)=>n.id);\n        if (yy(e, t)) return;\n        const r = this.getObjects(...$o, \"Transition\").filter((n)=>t.includes(n.id));\n        if (!r.length) this.discardActiveObject();\n        else if (r.length === 1) this.setActiveObject(r[0]);\n        else {\n            const n = new Ot(r);\n            this.setActiveObject(n);\n        }\n        this.requestRenderAll();\n    }\n    synchronizeTrackItemsState() {\n        this.pauseEventListeners();\n        const t = this.getTrackItems(), e = {}, s = ho({\n            trackItemIds: this.trackItemIds,\n            transitionsMap: this.transitionsMap,\n            trackItemsMap: this.trackItemsMap\n        });\n        t.forEach((r)=>{\n            const { id: n, left: o, width: a } = r, c = this.trackItemsMap[n], l = this.transitionGroups.find((h)=>h.find((u)=>u.id === n)) || [];\n            if (l.length === 1) {\n                const h = Y(o, this.tScale), u = Y(a, this.tScale, r.playbackRate), d = {\n                    from: h,\n                    to: h + u\n                }, f = {\n                    display: d\n                };\n                (r instanceof _t || r instanceof ft || r instanceof Vt) && (f.trim = r.trim, f.duration = d.to - d.from), r.display = d, e[n] = {\n                    ...c,\n                    ...f\n                };\n            } else {\n                const h = l.findIndex((f)=>f.id === n), u = l[h - 1], d = l[h + 1];\n                if (u && !d) {\n                    const f = _e(n, l), g = Y(o, this.tScale) + u.duration / 2 + f.offsetTransitions, p = Y(a, this.tScale, r.playbackRate) + (u.duration || 0) / 2, m = {\n                        from: g,\n                        to: g + p\n                    }, b = {\n                        display: m\n                    };\n                    (r instanceof _t || r instanceof ft || r instanceof Vt) && (b.trim = r.trim), r.display = m, e[n] = {\n                        ...c,\n                        ...b\n                    };\n                } else if (d && !u) {\n                    const f = Y(o, this.tScale), g = Y(a, this.tScale, r.playbackRate), p = {\n                        from: f,\n                        to: f + g + (d.duration || 0) / 2\n                    }, m = {\n                        display: p\n                    };\n                    (r instanceof _t || r instanceof ft || r instanceof Vt) && (m.trim = r.trim), r.display = p, e[n] = {\n                        ...c,\n                        ...m\n                    };\n                } else if (u && d) {\n                    const f = Y(o, this.tScale), g = s.find((O)=>O.find((x)=>x.id === r.id)), b = (g == null ? void 0 : g.filter((O)=>O.type === \"transition\").map((O)=>this.getObjects().find((x)=>x.id === O.id))).filter((O)=>O.top === r.top).filter((O)=>O.left + O.width <= r.left).reduce((O, x)=>O + (x.duration || 0), 0), S = Y(a, this.tScale, r.playbackRate), w = {\n                        from: f + b + (u.duration || 0) / 2,\n                        to: f + b + S + (d.duration || 0) / 2 + (u.duration || 0)\n                    }, k = {\n                        display: w\n                    };\n                    (r instanceof _t || r instanceof ft || r instanceof Vt) && (k.trim = r.trim), r.display = w, e[n] = {\n                        ...c,\n                        ...k\n                    };\n                }\n            }\n        }), this.trackItemsMap = {\n            ...this.trackItemsMap,\n            ...e\n        }, this.resumeEventListeners();\n    }\n    deleteTrackItemById(t) {\n        const e = t, s = this.getObjects().filter((a)=>t.includes(a.id)), r = rr(this.tracks, e), n = {};\n        Object.keys(this.trackItemsMap).forEach((a)=>{\n            e.includes(a) || (n[a] = this.trackItemsMap[a]);\n        });\n        const o = this.trackItemIds.filter((a)=>!e.includes(a));\n        this.tracks = r, this.trackItemsMap = n, this.trackItemIds = o, this.discardActiveObject(), this.remove(...s), this.renderTracks(), this.alignItemsToTrack();\n    }\n    deleteActiveTrackItem() {\n        const t = this.getActiveObjects();\n        if (!t.length) return !1;\n        const e = t.map((o)=>o.id), s = rr(this.tracks, e), r = {};\n        Object.keys(this.trackItemsMap).forEach((o)=>{\n            e.includes(o) || (r[o] = this.trackItemsMap[o]);\n        });\n        const n = this.trackItemIds.filter((o)=>!e.includes(o));\n        this.tracks = s, this.trackItemsMap = r, this.trackItemIds = n, this.discardActiveObject(), this.remove(...t), this.setActiveIds([]), this.renderTracks(), this.alignItemsToTrack(), this.updateState({\n            updateHistory: !0,\n            kind: \"remove\"\n        });\n    }\n    /*\n   * This method updates the coordinates of all track items in the timeline.\n   */ updateTrackItemCoords(t) {\n        const e = t ? this.getActiveObjects().map((s)=>s.id) : [];\n        this.trackItemIds.forEach((s)=>{\n            if (e.includes(s)) return;\n            const r = this.transitionGroups.find((c)=>c.find((l)=>l.id === s)) || [];\n            if ((r == null ? void 0 : r.length) === 1) {\n                const c = this.getObjects().find((d)=>d.id === s), l = this.trackItemsMap[s], h = D(l.display.from, this.tScale), u = D(l.display.to - l.display.from, this.tScale, l.playbackRate);\n                c.set({\n                    left: h,\n                    width: u\n                }), c.setCoords();\n                return;\n            }\n            const n = r.findIndex((c)=>c.id === s), o = r[n - 1], a = r[n + 1];\n            if (o && !a) {\n                const c = this.getObjects().find((f)=>f.id === s), l = this.trackItemsMap[s], h = _e(s, r), u = D(l.display.from - (o.duration || 0) / 2 - h.offsetTransitions, this.tScale), d = D(l.display.to - l.display.from - (o.duration || 0) / 2, this.tScale, l.playbackRate);\n                c.set({\n                    left: u,\n                    width: d\n                }), c.setCoords();\n                return;\n            }\n            if (a && !o) {\n                const c = this.getObjects().find((d)=>d.id === s), l = this.trackItemsMap[s], h = D(l.display.from, this.tScale), u = D(l.display.to - l.display.from - (a.duration || 0) / 2, this.tScale, l.playbackRate);\n                c.set({\n                    left: h,\n                    width: u\n                }), c.setCoords();\n                return;\n            }\n            if (o && a) {\n                const c = this.getObjects().find((f)=>f.id === s), l = this.trackItemsMap[s], h = _e(s, r), u = D(l.display.from - (o.duration || 0) / 2 - h.offsetTransitions, this.tScale), d = D(l.display.to - l.display.from - (a.duration || 0) / 2 - (o.duration || 0) / 2, this.tScale, l.playbackRate);\n                c.set({\n                    left: u,\n                    width: d\n                }), c.setCoords();\n                return;\n            }\n        });\n    }\n    // Restore track items sizes that are not affected by transitions\n    refreshTrackItemsForTransitions() {\n        const t = this.getActiveObjects().map((l)=>l.id);\n        this.pauseEventListeners();\n        const e = this.getObjects(\"Track\"), s = this.getObjects(\"Video\", \"Image\"), r = this.getObjects(\"Transition\"), n = s.concat(r), o = Object.keys(this.positionAfterTransform);\n        e.forEach((l)=>{\n            o.forEach((h)=>{\n                if (l.items.includes(h)) {\n                    const u = this.getObjects().find((d)=>d.id === h);\n                    t.includes(h) || (this.positionAfterTransform[h].left = u.left);\n                }\n            });\n        });\n        const { newTransitionsMap: a } = Oy(e, s, this.transitionsMap, this.positionAfterTransform, t), c = xs({\n            trackItemIds: this.trackItemIds,\n            transitionsMap: a,\n            trackItemsMap: this.trackItemsMap\n        });\n        s.forEach((l)=>{\n            const h = l.id, u = c.find((m)=>m.find((b)=>b.id === h)) || [], d = this.transitionGroups.find((m)=>m.find((b)=>b.id === h)) || [];\n            if (Cy(d, u)) return;\n            const f = u.findIndex((m)=>m.id === h), g = u[f - 1], p = u[f + 1];\n            if (g && !p) {\n                const m = _e(h, d), b = _e(h, u), S = D(m.durationDiff - b.durationDiff, this.tScale);\n                l.set({\n                    width: l.width + S\n                });\n            } else if (p && !g) {\n                const m = _e(h, d), b = _e(h, u);\n                if (m.durationDiff > 0) {\n                    const S = D(m.durationDiff - b.durationDiff, this.tScale);\n                    l.set({\n                        width: l.width + S\n                    }), u.forEach((w)=>{\n                        if (w.id !== l.id) {\n                            const k = n.find((O)=>O.id === w.id);\n                            k == null || k.set({\n                                left: k.left + S\n                            }), k == null || k.setCoords();\n                        }\n                    });\n                }\n            } else if (g && p) console.warn(\"invalid spot\");\n            else {\n                const m = _e(h, d), b = D(m.durationDiff, this.tScale);\n                l.set({\n                    width: l.width + b\n                });\n            }\n        }), this.resumeEventListeners();\n    }\n    getTrackItems() {\n        return this.getObjects(...$o);\n    }\n    setTrackItemCoords() {\n        this.getTrackItems().forEach((t)=>{\n            t.setCoords();\n        });\n    }\n    setActiveTrackItemCoords() {\n        this.getActiveObjects().forEach((e)=>e.setCoords());\n    }\n}\nconst Je = {\n    text: 32,\n    image: 40,\n    video: 40,\n    audio: 32,\n    main: 40\n}, Oa = (i)=>{\n    switch(i){\n        case \"text\":\n            return Je.text;\n        case \"image\":\n            return Je.image;\n        case \"video\":\n            return Je.video;\n        case \"audio\":\n            return Je.audio;\n        case \"helperTop\":\n            return 1e3;\n        case \"helperBottom\":\n            return 1e3;\n        case \"helperCenter\":\n            return 8;\n        case \"main\":\n            return Je.main;\n        default:\n            return Je.text;\n    }\n};\nclass My {\n    findOrCreateTrack(t, { trackId: e, trackIndex: s }) {\n        if (e) {\n            const n = this.tracks.find((o)=>o.id === e);\n            if (n) return n.items.push(t.id), e;\n        }\n        const r = {\n            id: gr(),\n            items: [\n                t.id\n            ],\n            type: t.type,\n            accepts: this.acceptsMap[t.type],\n            magnetic: !1,\n            static: !1\n        };\n        return s !== void 0 ? this.tracks.splice(s, 0, r) : this.tracks.push(r), this.renderTracks(), r.id;\n    }\n    removeTracks() {\n        this.getObjects(\"Track\", \"Helper\").forEach((e)=>this.remove(e));\n    }\n    renderTracks() {\n        this.filterEmptyTracks(), this.removeTracks();\n        const t = this.width, e = this.tracks.flatMap((a)=>[\n                a,\n                {\n                    id: `helper-${a.id}`,\n                    type: \"helper\",\n                    items: [],\n                    accepts: []\n                }\n            ]).slice(0, -1);\n        let s = -970;\n        const r = C.getClass(\"Helper\") || Ss, n = new r({\n            top: s,\n            selectable: !1,\n            evented: !1,\n            tScale: this.tScale,\n            id: \"helper-line-top\",\n            width: t,\n            kind: \"top\",\n            height: 1e3,\n            metadata: {}\n        });\n        s += Oa(\"helperTop\"), this.insertAt(0, n), e.forEach((a, c)=>{\n            if (a.type === \"helper\") {\n                const l = Oa(\"helperCenter\"), h = new r({\n                    id: a.id,\n                    top: s,\n                    tScale: this.tScale,\n                    width: t,\n                    height: l,\n                    metadata: {\n                        order: (c + 1) / 2\n                    },\n                    kind: \"center\"\n                });\n                s += l, this.insertAt(0, h);\n            } else {\n                const l = this.sizesMap[a.type], h = C.getClass(\"Track\") || ue, u = new h({\n                    id: a.id,\n                    top: s,\n                    left: 0,\n                    height: l,\n                    width: t,\n                    tScale: this.tScale,\n                    accepts: this.acceptsMap[a.type] || [],\n                    items: a.items,\n                    magnetic: a.magnetic,\n                    static: a.static\n                });\n                s += l, this.insertAt(0, u);\n            }\n        });\n        const o = new r({\n            id: \"helper-line-bottom\",\n            top: s,\n            selectable: !1,\n            evented: !1,\n            tScale: this.tScale,\n            width: t,\n            kind: \"bottom\",\n            height: 1e3,\n            metadata: {}\n        });\n        this.insertAt(0, o);\n    }\n    filterEmptyTracks() {\n        const t = /* @__PURE__ */ new Set();\n        this.tracks = this.tracks.filter((e)=>(e.items.length || e.static) && !t.has(e.id) ? (t.add(e.id), !0) : !1);\n    }\n    refreshTrackLayout() {\n        const t = this.bounding.width + this.spacing.right;\n        this.getObjects(\"Track\", \"Helper\").forEach((e)=>{\n            e.updateCoords(t), e.setCoords();\n        });\n    }\n    adjustMagneticTrack() {\n        this.pauseEventListeners();\n        const t = this.tracks.filter((e)=>e.magnetic);\n        t.length > 0 && t.forEach((e)=>{\n            const s = e.accepts || [], r = this.getObjects(...s).filter((o)=>e.items.includes(o.id)).sort((o, a)=>o.left - a.left);\n            let n = 0;\n            r.forEach((o)=>{\n                o.left = n, n += o.width;\n            });\n        }), this.resumeEventListeners();\n    }\n}\nfunction Fl(i) {\n    const t = this, e = i.target, s = i.transform;\n    if (s.action === \"resizing\") {\n        const r = t.getObjects().filter((h)=>h !== e && ![\n                \"Track\",\n                \"Helper\",\n                \"Transition\",\n                \"Placeholder\"\n            ].includes(h.type)), n = 10, o = e.left, a = e.width * e.scaleX, c = o + a;\n        let l = !1;\n        r.forEach((h)=>{\n            if (l) return;\n            const u = h.getBoundingRect(), d = u.left, f = u.left + u.width;\n            if (s.corner === \"mr\") {\n                const g = Math.abs(c - f), p = Math.abs(c - d);\n                if (g < n) if (e instanceof _t || e instanceof ft) {\n                    const m = f - e.left, b = m - a, S = Y(b, e.tScale, e.playbackRate), w = e.trim.to + S;\n                    w <= e.duration && (e.set({\n                        width: m,\n                        scaleX: 1\n                    }), e.trim.to = w, e.onResizeSnap && e.onResizeSnap(), l = !0);\n                } else e.set({\n                    width: f - e.left,\n                    scaleX: 1\n                }), e.onResizeSnap && e.onResizeSnap(), l = !0;\n                else if (p < n) if (e instanceof _t || e instanceof ft) {\n                    const m = d - e.left, b = m - a, S = Y(b, e.tScale, e.playbackRate), w = e.trim.to + S;\n                    w <= e.duration && (e.set({\n                        width: m,\n                        scaleX: 1\n                    }), e.trim.to = w, e.onResizeSnap && e.onResizeSnap(), l = !0);\n                } else e.set({\n                    width: d - e.left,\n                    scaleX: 1\n                }), e.onResizeSnap && e.onResizeSnap(), l = !0;\n            } else if (s.corner === \"ml\") {\n                const g = Math.abs(o - d), p = Math.abs(o - f);\n                if (g < n) if (e instanceof _t || e instanceof ft || e instanceof Vt) {\n                    const m = c - d, b = m - a, S = Y(b, e.tScale, e.playbackRate), w = e.trim.from - S;\n                    w >= 0 && (e.set({\n                        left: d,\n                        width: m,\n                        scaleX: 1\n                    }), e.trim.from = w, e.onResizeSnap && e.onResizeSnap(), l = !0);\n                } else e.set({\n                    left: d,\n                    width: c - d,\n                    scaleX: 1\n                }), e.onResizeSnap && e.onResizeSnap(), l = !0;\n                else if (p < n) if (e instanceof _t || e instanceof ft || e instanceof Vt) {\n                    const m = c - f, b = m - a, S = Y(b, e.tScale, e.playbackRate), w = e.trim.from - S;\n                    w >= 0 && (e.set({\n                        left: f,\n                        width: m,\n                        scaleX: 1\n                    }), e.trim.from = w, e.onResizeSnap && e.onResizeSnap(), l = !0);\n                } else e.set({\n                    left: f,\n                    width: c - f,\n                    scaleX: 1\n                }), e.onResizeSnap && e.onResizeSnap(), l = !0;\n            }\n        }), l && (e.setCoords(), t.requestRenderAll());\n    }\n}\nfunction Iy(i) {\n    i.on(\"object:resizing\", Fl.bind(i));\n}\nfunction Dy(i) {\n    i.off(\"object:resizing\", Fl.bind(i));\n}\nconst Us = 100, tn = 0, Hr = 5, ka = 3, jy = 25, vs = {\n    scrollInterval: null\n};\nfunction Ma(i) {\n    const t = jy - ka, e = (Us - i) / Us;\n    return ka + t * e;\n}\nfunction Ey(i, t) {\n    vs.scrollInterval && clearInterval(vs.scrollInterval);\n    const e = t.target, s = e.getBoundingRect();\n    vs.scrollInterval = setInterval(()=>{\n        const r = i.viewportTransform, n = i.getViewportPoint(t.e);\n        if (n.x > i.width - Us && e.left + s.width < i.bounding.width) {\n            const o = Ma(i.width - n.x);\n            e.set(\"left\", e.left + o), i.setViewportPos(r[4] - o, r[5]);\n        }\n        if (n.x < Us && e.left > 0 && r[4] < Us) {\n            const o = Ma(n.x);\n            e.set(\"left\", e.left - o), i.setViewportPos(r[4] + o, r[5]);\n        }\n        n.y > i.height - tn && e.top + s.height < i.bounding.height + 80 && (e.set(\"top\", e.top + Hr), i.setViewportPos(r[4], r[5] - Hr)), n.y < tn && e.top > -80 && -r[5] > tn && (e.set(\"top\", e.top - Hr), i.setViewportPos(r[4], r[5] + Hr)), e.setCoords(), i.requestRenderAll();\n    }, 16);\n}\nfunction Py() {\n    vs.scrollInterval && (clearInterval(vs.scrollInterval), vs.scrollInterval = null);\n}\nfunction Rl() {\n    Py();\n}\nfunction Ll(i) {\n    Ey(this, i);\n}\nfunction Ay(i) {\n    i.on(\"mouse:up\", Rl), i.on(\"object:moving\", Ll.bind(i));\n}\nfunction Fy(i) {\n    i.off(\"mouse:up\", Rl), i.off(\"object:moving\", Ll.bind(i));\n}\nfunction Bl(i) {\n    const t = i.target, e = i.target.canvas;\n    if (i.action === \"resizing\" && t instanceof Jt && e) {\n        const s = t.id, r = e.getObjects(\"Transition\").find((n)=>n.id === s);\n        if (r && r instanceof Jt) {\n            const n = Ut(this.transitionsMap), o = {\n                ...n,\n                [s]: {\n                    ...n[s],\n                    width: r.width,\n                    duration: r.duration\n                }\n            };\n            this.transitionsMap = o, this.updateState();\n        }\n    }\n}\nfunction Ry(i) {\n    i.on(\"object:modified\", Bl);\n}\nfunction Ly(i) {\n    i.off(\"object:modified\", Bl);\n}\nconst Wl = {\n    canvas: null,\n    enableGuideRedraw: !0,\n    isPointerOverHelperTrack: !1,\n    draggingOverTrack: null,\n    placeholderMovingObjects: [],\n    primaryMovingObjects: [],\n    secondaryMovingObjects: [],\n    objectInitialPositions: {},\n    originTrack: {},\n    trackToItemsMap: {},\n    activeTrackToItemsMap: {},\n    trackTopToIdMap: {},\n    trackTops: [],\n    activeObjects: [],\n    primaryTracks: {},\n    secondaryTracks: {},\n    isDragOver: !1,\n    initialTrackPoints: [],\n    updateItemsInTrack: null,\n    orderNormalTrack: !1\n}, Q = ()=>Wl, at = (i)=>{\n    Object.assign(Wl, i);\n}, Ia = 10, Pi = (i, t)=>{\n    t.forEach((e)=>e.isAlignmentAuxiliary && i.remove(e));\n}, Xl = (i, t)=>{\n    const e = [], s = [];\n    return t.getObjects().filter((r)=>r.visible).forEach((r)=>{\n        if (i.find((o)=>o.id === r.id) || r.isAlignmentAuxiliary) return;\n        const n = r.getBoundingRect();\n        e.push(ja(n.left, n.width, n.top, n.height)), s.push(ja(n.top, n.height, n.left, n.width));\n    }), {\n        vertical: e.flat(),\n        horizontal: []\n    };\n}, zl = (i, t)=>{\n    const e = [], s = [];\n    i.vertical.forEach((a)=>{\n        t.vertical.forEach((c)=>{\n            const l = Math.abs(a.val - c.guide);\n            l < Ia && e.push({\n                lineGuide: a.val,\n                diff: l,\n                orientation: \"V\",\n                snap: c.snap,\n                offset: c.offset,\n                targetDim: {\n                    start: a.start,\n                    end: a.end\n                }\n            });\n        });\n    }), i.horizontal.forEach((a)=>{\n        t.horizontal.forEach((c)=>{\n            const l = Math.abs(a.val - c.guide);\n            l < Ia && s.push({\n                lineGuide: a.val,\n                diff: l,\n                orientation: \"H\",\n                snap: c.snap,\n                offset: c.offset,\n                targetDim: {\n                    start: a.start,\n                    end: a.end\n                }\n            });\n        });\n    });\n    const r = [], n = e.sort((a, c)=>a.diff - c.diff)[0], o = s.sort((a, c)=>a.diff - c.diff)[0];\n    return n && r.push({\n        lineGuide: n.lineGuide,\n        offset: n.offset,\n        orientation: \"V\",\n        snap: n.snap,\n        targetDim: n.targetDim\n    }), o && r.push({\n        lineGuide: o.lineGuide,\n        offset: o.offset,\n        orientation: \"H\",\n        snap: o.snap,\n        targetDim: o.targetDim\n    }), r;\n}, Hl = (i, t, e)=>{\n    i.forEach((s)=>{\n        const r = By(e.getZoom());\n        s.orientation === \"H\" ? e.add(Da([\n            0,\n            s.lineGuide - r.strokeWidth / 2,\n            2e3,\n            s.lineGuide - r.strokeWidth / 2\n        ], {\n            ...r,\n            stroke: e.guideLineColor\n        })) : s.orientation === \"V\" && e.add(Da([\n            s.lineGuide - r.strokeWidth / 2,\n            0,\n            s.lineGuide - r.strokeWidth / 2,\n            2e3\n        ], {\n            ...r,\n            stroke: e.guideLineColor\n        }));\n    });\n}, By = (i)=>({\n        strokeWidth: 2 / i\n    }), Da = (i, t)=>new Se(i, {\n        ...t,\n        strokeLineCap: \"square\",\n        excludeFromExport: !0,\n        isAlignmentAuxiliary: !0,\n        selectable: !1,\n        objectCaching: !1\n    }), Yl = (i)=>{\n    const t = i.getBoundingRect();\n    return {\n        vertical: [\n            {\n                guide: Math.round(t.left),\n                offset: Math.round(i.left - t.left),\n                snap: \"start\"\n            },\n            {\n                guide: Math.round(t.left + t.width),\n                offset: Math.round(i.left - t.left - t.width),\n                snap: \"end\"\n            }\n        ],\n        horizontal: [\n            {\n                guide: Math.round(t.top),\n                offset: Math.round(i.top - t.top),\n                snap: \"start\"\n            },\n            {\n                guide: Math.round(t.top + t.height),\n                offset: Math.round(i.top - t.top - t.height),\n                snap: \"end\"\n            }\n        ]\n    };\n}, ja = (i, t, e, s)=>[\n        i,\n        i + t\n    ].map((n)=>({\n            val: n,\n            start: e,\n            end: e + s\n        })), Vl = (i, t)=>{\n    i.remove(...t), t = [];\n}, Gl = (i)=>{\n    i.forEach((t)=>t.setSelected(!1));\n}, Ea = (i)=>i instanceof Ss, Wy = (i)=>Object.assign({}, {\n        left: 16,\n        right: 80\n    }, i), Xy = [\n    \"touchstart\",\n    \"touchmove\",\n    \"touchend\"\n], zy = (i)=>Xy.includes(i.type) || i.pointerType === \"touch\";\nfunction Nl(i) {\n    const t = this;\n    if (!t) return;\n    const s = Q().enableGuideRedraw, r = t.getScenePoint(i.e), n = t.getObjects(\"Helper\", \"Track\"), o = n.find((g)=>{\n        const p = g.getBoundingRect();\n        return r.x >= p.left && r.x <= p.left + p.width && r.y >= p.top && r.y <= p.top + p.height;\n    });\n    at({\n        draggingOverTrack: o\n    }), n.forEach((g)=>{\n        Ea(g) && (g === o ? g.setSelected(!0) : g.setSelected(!1));\n    }), Ea(o) ? at({\n        isPointerOverHelperTrack: !0\n    }) : at({\n        isPointerOverHelperTrack: !1\n    });\n    const a = t.getObjects(), c = i.target, l = c.getBoundingRect();\n    c.setCoords();\n    const h = [\n        c,\n        ...t.getActiveObjects(),\n        ...t.getObjects(\"Track\", \"Helper\", \"Transition\", \"Placeholder\")\n    ], u = Xl(h, t), d = Yl(c), f = zl(u, d);\n    s && (Pi(t, a), f.length && Hl(f, l, t), at({\n        enableGuideRedraw: !1\n    }), setTimeout(()=>at({\n            enableGuideRedraw: !0\n        }), 50)), f.forEach((g)=>{\n        g.orientation === \"V\" ? c.left = g.lineGuide + g.offset : c.top = g.lineGuide + g.offset;\n    });\n}\nfunction Ul(i) {\n    const t = i.target.canvas;\n    t && (Pi(t, t.getObjects()), Gl(t.getObjects(\"Helper\")), at({\n        draggingOverTrack: null,\n        isPointerOverHelperTrack: !1\n    }));\n}\nfunction $l(i) {\n    var a;\n    const t = this, e = t.getObjects(), s = i.target, r = i.transform, n = (a = t._currentTransform) == null ? void 0 : a.corner, o = s.getBoundingRect();\n    if (r.action === \"resizing\") {\n        const c = [\n            s,\n            ...t.getActiveObjects(),\n            ...t.getObjects(\"Track\", \"Helper\", \"Transition\", \"Placeholder\")\n        ], l = Xl(c, t), h = l.vertical.filter((f)=>{\n            const g = f.val;\n            if (n === \"ml\") return g <= o.left;\n            if (n === \"mr\") return g >= o.left + o.width;\n        });\n        l.vertical = h;\n        const u = Yl(s), d = zl(l, u);\n        Pi(t, e), d.length && Hl(d, o, t);\n    }\n}\nfunction Hy(i) {\n    i.on(\"object:moving\", Nl.bind(i)), i.on(\"object:modified\", Ul.bind(i)), i.on(\"object:resizing\", $l.bind(i));\n}\nfunction Yy(i) {\n    i.off(\"object:moving\", Nl.bind(i)), i.off(\"object:modified\", Ul.bind(i)), i.off(\"object:resizing\", $l.bind(i));\n}\nfunction In(i, t, e) {\n    const s = i.indexOf(t), r = i.indexOf(e);\n    return s === -1 || r === -1 ? null : r - s;\n}\nfunction ql(i, t) {\n    const e = t.sort((r, n)=>r.tempIndex - n.tempIndex), s = [];\n    for (const r of e)r.tempIndex < 0 && s.push(r);\n    s.push(i);\n    for (const r of e)r.tempIndex >= 0 && s.push(r);\n    return s;\n}\nfunction Kl(i) {\n    const t = Q(), e = t.canvas;\n    at({\n        activeTrackToItemsMap: {},\n        primaryTracks: {},\n        secondaryTracks: {},\n        trackTops: [],\n        trackToItemsMap: {},\n        activeObjects: [],\n        trackTopToIdMap: {},\n        isDragOver: !1,\n        initialTrackPoints: [],\n        updateItemsInTrack: null\n    }), e.trackIdAfterTransform = \"\", e.positionAfterTransform = {};\n    const s = e.getActiveObject(), r = s instanceof Ot ? s.getObjects() : [\n        s\n    ];\n    at({\n        activeObjects: r\n    });\n    const n = e.getScenePoint(i.e), o = e.getObjects(\"Track\"), a = e.getActiveObjects().map((u)=>u.id);\n    let l = o.filter((u)=>{\n        const d = u.items;\n        return a.some((f)=>d.includes(f));\n    }).find((u)=>{\n        const d = u.getBoundingRect();\n        return n.x >= d.left && n.x <= d.left + d.width && n.y >= d.top && n.y <= d.top + d.height;\n    });\n    at({\n        originTrack: l\n    });\n    const h = e.getObjects(\"Video\", \"Image\", \"Audio\", \"Text\", \"Element\", \"Template\");\n    o.forEach((u)=>{\n        const d = h.filter((f)=>u.items.includes(f.id));\n        t.trackToItemsMap[u.id] = d, t.trackTopToIdMap[u.top] = u.id, t.trackTops.push(u.top);\n    }), t.trackTops.sort((u, d)=>u - d), r.forEach((u)=>{\n        const d = o.find((g)=>g.items.includes(u.id));\n        if (!d) return;\n        const f = d.id;\n        t.activeTrackToItemsMap[f] ? t.activeTrackToItemsMap[f].push(u) : t.activeTrackToItemsMap[f] = [\n            u\n        ];\n    }), t.primaryMovingObjects = r.filter((u)=>{\n        const d = u.getBoundingRect();\n        return n.y >= d.top && n.y <= d.top + d.height && !(u instanceof Jt);\n    }), t.primaryMovingObjects.length !== 0 && (t.primaryMovingObjects.forEach((u)=>{\n        const d = u.getBoundingRect().top, f = t.trackTopToIdMap[d];\n        if (t.primaryTracks[f]) t.primaryTracks[f].objects.push(u);\n        else {\n            const g = In(t.trackTops, l == null ? void 0 : l.top, d);\n            t.primaryTracks[f] = {\n                objects: [\n                    u\n                ],\n                index: g\n            };\n        }\n    }), t.primaryMovingObjects = t.primaryMovingObjects.sort((u, d)=>u.left - d.left), t.secondaryMovingObjects = r.filter((u)=>!t.primaryMovingObjects.includes(u)), t.secondaryMovingObjects.forEach((u)=>{\n        const d = u.getBoundingRect().top, f = t.trackTopToIdMap[u.getBoundingRect().top];\n        if (t.secondaryTracks[f]) t.secondaryTracks[f].objects.push(u);\n        else {\n            const g = In(t.trackTops, l.top, d);\n            t.secondaryTracks[f] = {\n                objects: [\n                    u\n                ],\n                index: g\n            };\n        }\n    }), l && (e.trackOriginBeforeTransform = l.id), s && (e.positionBeforeTransform = {\n        top: s.top,\n        left: s.left\n    }), i.transform.action === \"drag\" && (t.placeholderMovingObjects = t.primaryMovingObjects.map((u)=>{\n        const d = u.getBoundingRect();\n        t.objectInitialPositions[u.id] = {\n            top: d.top,\n            left: d.left\n        };\n        const f = new er({\n            id: `${u.id}-placeholder`,\n            left: d.left,\n            top: d.top,\n            width: d.width,\n            height: d.height\n        });\n        return f.draggedObject = u, f;\n    }), e.add(...t.placeholderMovingObjects)));\n}\nfunction Vy(i) {\n    i.on(\"before:transform\", Kl.bind(i));\n}\nfunction Gy(i) {\n    i.off(\"before:transform\", Kl.bind(i));\n}\nconst gs = class gs extends X {\n    constructor(e){\n        super(e);\n        T(this, \"duration\");\n        T(this, \"fromId\");\n        T(this, \"toId\");\n        T(this, \"itemType\", \"none\");\n        T(this, \"isSelected\", !1);\n        Object.assign(this, gs.ownDefaults), this.id = e.id;\n    }\n    static createControls() {\n        return {\n            controls: ml()\n        };\n    }\n    static getDefaults() {\n        return {\n            ...super.getDefaults(),\n            ...gs.ownDefaults\n        };\n    }\n    updateCoords() {\n        const e = this.canvas;\n        if (!e) return;\n        const s = e.getObjects().find((o)=>o.id === this.fromId);\n        if (!s) return;\n        const r = D(this.duration, this.tScale), n = s.left + s.width - r / 2;\n        this.set({\n            width: r,\n            left: n\n        });\n    }\n    // add custom text to the track item\n    _render(e) {\n        super._render(e), this.drawTextIdentity(e), this.updateSelected(e);\n    }\n    drawTextIdentity(e) {\n        const s = new Path2D(\"M3 5.30359C3 3.93159 4.659 3.24359 5.629 4.21359L11.997 10.5826L10.583 11.9966L5 6.41359V17.5856L10.586 11.9996L10.583 11.9966L11.997 10.5826L12 10.5856L18.371 4.21459C19.341 3.24459 21 3.93159 21 5.30359V18.6956C21 20.0676 19.341 20.7556 18.371 19.7856L12 13.5L13.414 11.9996L19 17.5866V6.41359L13.414 11.9996L13.421 12.0056L12.006 13.4206L12 13.4136L5.629 19.7846C4.659 20.7546 3 20.0676 3 18.6956V5.30359Z\");\n        e.save(), e.translate(-12, -12), e.fillStyle = \"#ffffff\", e.fill(s), e.restore();\n    }\n    setSelected(e) {\n        this.isSelected = e, this.set({\n            dirty: !0\n        });\n    }\n    updateSelected(e) {\n        this.isSelected && (e.save(), e.beginPath(), e.roundRect(-this.width / 2, -this.height / 2, this.width, this.height, this.rx), e.lineWidth = It, e.strokeStyle = vt, e.stroke(), e.restore());\n    }\n};\nT(gs, \"type\", \"TransitionGuide\"), T(gs, \"ownDefaults\", {\n    objectCaching: !1,\n    borderColor: \"transparent\",\n    stroke: \"transparent\",\n    strokeWidth: 1.5,\n    fill: \"rgba(0,0,0, 0.85)\",\n    borderOpacityWhenMoving: 1,\n    hoverCursor: \"default\",\n    lockMovementX: !0,\n    lockMovementY: !0,\n    duration: 1500,\n    rx: 8,\n    ry: 8\n});\nlet or = gs;\nconst Ny = [\n    \"text\",\n    \"image\",\n    \"video\",\n    \"audio\",\n    \"caption\",\n    \"template\"\n];\nfunction Jl() {\n    const i = Q();\n    Vl(this, i.placeholderMovingObjects);\n}\nfunction Uy(i) {\n    const t = i.target.left;\n    i.target.left = Math.max(t, 0);\n}\nfunction Zl(i, t) {\n    return i.find((s)=>{\n        const r = s.getBoundingRect();\n        return t.left < r.left + r.width && t.left + t.width - 1 > r.left && t.top < r.top + r.height && t.top + t.height > r.top;\n    });\n}\nfunction $y(i, t) {\n    const s = i.canvas.getActiveObject(), r = s.left + s.width / 2, n = t.left + t.width / 2;\n    return r < n ? t.left - s.width : (r > n, t.left + t.width);\n}\nconst qy = (i, t, e)=>!(e < 0 || Zl(i, {\n        ...t.getBoundingRect(),\n        left: e\n    })), Ql = (i)=>{\n    const e = Q().draggingOverTrack;\n    return i instanceof Oe ? e && e.accepts.includes(i.itemType) : e && e.accepts.includes(i.type);\n};\nfunction Ky(i) {\n    Q().isPointerOverHelperTrack ? i.opacity = 0 : i.opacity = 1;\n}\nfunction Jy() {\n    const i = Q(), t = i.primaryMovingObjects[0];\n    return {\n        top: i.objectInitialPositions[t.id].top,\n        left: i.objectInitialPositions[t.id].left\n    };\n}\nfunction Zy(i) {\n    const t = i.getBoundingRect(), e = Q(), s = e.draggingOverTrack;\n    if (e.primaryMovingObjects.map((n)=>n.id).includes(i.id)) {\n        const o = e.primaryMovingObjects[0].getBoundingRect();\n        return {\n            top: s.top,\n            left: o.left\n        };\n    }\n    return {\n        top: s.top,\n        left: t.left\n    };\n}\nfunction Qy(i, t, e, s) {\n    const n = i.canvas.getActiveObjects().map((h)=>h.id), o = $y(i, t), a = e.filter((h)=>!n.includes(h.id)), c = qy(a, i, o), l = Q();\n    if (l.orderNormalTrack = !0, !c || s.x - 20 < 0) {\n        const h = l.draggingOverTrack;\n        return {\n            left: l.initialTrackPoints.reduce((d, f)=>Math.abs(f - s.x) < Math.abs(d - s.x) ? f : d),\n            top: h.top\n        };\n    }\n    return {\n        left: o,\n        top: t.top\n    };\n}\nconst t0 = (i, t)=>{\n    i.forEach((e, s)=>{\n        e.set({\n            left: t[s]\n        });\n    });\n}, th = wy((i)=>{\n    const t = i.target.canvas;\n    Uy(i);\n    const e = Q(), s = e.draggingOverTrack;\n    if (s) {\n        const a = e.primaryMovingObjects[0];\n        Ny.includes(a.type) && e.placeholderMovingObjects.forEach((c)=>{\n            c.visible = !0;\n        });\n    } else {\n        e.placeholderMovingObjects.forEach((a)=>{\n            a.visible = !1;\n        });\n        return;\n    }\n    const r = e.placeholderMovingObjects.map((a)=>a.draggedObject), n = (e.trackToItemsMap[s.id] || []).filter((a)=>!r.includes(a)), o = Ql(e.primaryMovingObjects[0]);\n    if (s.magnetic && o) {\n        e.updateItemsInTrack ? e.updateItemsInTrack !== s.id && (e.updateItemsInTrack = s.id, e.initialTrackPoints = []) : (e.updateItemsInTrack = s.id, e.initialTrackPoints = []), e.initialTrackPoints.length === 0 && (e.updateItemsInTrack = s.id, e.initialTrackPoints = Pa(e, s));\n        let a = 0;\n        for (const [c, l] of e.initialTrackPoints.entries()){\n            const h = l, u = e.initialTrackPoints[c + 1], d = e.initialTrackPoints[c - 1], f = u - h, g = h - d;\n            if (!u) a = h;\n            else if (h <= i.pointer.x && h + f / 2 >= i.pointer.x) {\n                a = h;\n                break;\n            } else if (h - g / 2 <= i.pointer.x && i.pointer.x <= h) {\n                a = h;\n                break;\n            }\n        }\n        e.placeholderMovingObjects.forEach((c)=>{\n            c.opacity = 1, c.left = a, c.top = s.top, a += c.width;\n        }), e.placeholderMovingObjects.forEach((c)=>{\n            const l = c.draggedObject;\n            t.positionAfterTransform[l.id] = {\n                top: c.top,\n                left: c.left\n            };\n        }), t.trackIdAfterTransform = e.trackTopToIdMap[s.top];\n    } else {\n        e.orderNormalTrack = !1, e.updateItemsInTrack && e.updateItemsInTrack !== s.id && (t.getObjects().find((f)=>f.id === e.updateItemsInTrack).magnetic ? e0(t, e) : t.updateTrackItemCoords(!0), e.updateItemsInTrack = null, e.initialTrackPoints = []), e.initialTrackPoints.length === 0 && s instanceof ue && (e.updateItemsInTrack = s.id, e.initialTrackPoints = Pa(e, s));\n        const a = n.find((d)=>Zl(r, d.getBoundingRect())), c = [], h = e.primaryMovingObjects.sort((d, f)=>d.left - f.left), u = h[0];\n        h.forEach((d, f)=>{\n            if (!h[f - 1]) return;\n            const g = d.left - u.left;\n            c.push(g);\n        }), e.placeholderMovingObjects.forEach((d, f)=>{\n            const g = d.draggedObject;\n            if (g instanceof or) {\n                d.visible = !1;\n                return;\n            }\n            g.setCoords(), Ky(d);\n            let p = n0(g, n, i.pointer, a);\n            if (g instanceof Oe && p.isInvalidDrop && e.draggingOverTrack instanceof ue) {\n                d.opacity = 0;\n                const m = i.pointer, b = [\n                    ...t.viewportTransform\n                ], S = m.y - b[5];\n                i0(t, S);\n            } else e.primaryMovingObjects.length > 1 ? (t.trackIdAfterTransform = e.trackTopToIdMap[p.top], t.positionAfterTransform[g.id] = {\n                top: p.top,\n                left: p.left + (c[f - 1] || 0)\n            }, d.left = p.left + (c[f - 1] || 0), d.top = p.top) : (t.trackIdAfterTransform = e.trackTopToIdMap[p.top], t.positionAfterTransform[g.id] = {\n                top: p.top,\n                left: p.left\n            }, d.left = p.left, d.top = p.top);\n        });\n    }\n}), Pa = (i, t)=>{\n    const e = i.canvas, s = [];\n    t.items.forEach((l)=>{\n        const h = e.getObjects().find((u)=>u.id === l);\n        h && s.push(h);\n    });\n    const r = i.activeObjects.map((l)=>l.id), o = s.filter((l)=>!r.includes(l.id)).sort((l, h)=>l.left - h.left);\n    let a = 0;\n    const c = [];\n    return t.magnetic ? s0(o, a, c) : r0(t, c, e), c;\n};\nfunction e0(i, t) {\n    const e = [];\n    i.getObjects().find((a)=>a.id === t.updateItemsInTrack).items.forEach((a)=>{\n        const c = i.getObjects().find((l)=>l.id === a);\n        c && e.push(c);\n    });\n    const r = t.activeObjects.map((a)=>a.id), o = e.filter((a)=>!r.includes(a.id)).sort((a, c)=>a.left - c.left);\n    t.initialTrackPoints.length > o.length && t0(o, t.initialTrackPoints);\n}\nfunction s0(i, t, e) {\n    var l;\n    const s = Q(), r = (l = i[0]) == null ? void 0 : l.canvas, n = s.draggingOverTrack, o = s.primaryMovingObjects.map((h)=>h.id);\n    if (!r) return;\n    const a = r.transitionIds.filter((h)=>r.transitionsMap[h].kind !== \"none\");\n    i.forEach((h)=>{\n        h.set({\n            left: t\n        }), t += h.width, a.find((d)=>r.transitionsMap[d].toId === h.id) || e.push(h.left);\n    });\n    const c = i[i.length - 1];\n    if (e.push(((c == null ? void 0 : c.left) || 0) + ((c == null ? void 0 : c.width) || 0)), n != null && n.items.includes(o[0])) {\n        const h = r.getActiveObject(), u = [\n            ...e\n        ];\n        if (h) {\n            const d = u.findIndex((f)=>f > (h == null ? void 0 : h.left));\n            d !== -1 && e.splice(d, 0, h.left);\n        }\n    }\n}\nfunction r0(i, t, e) {\n    const s = i.items, r = {}, n = {}, o = e.getActiveObjects().map((l)=>l.id);\n    Object.values(e.trackItemsMap).forEach((l)=>{\n        s.includes(l.id) && (r[l.id] = l);\n    });\n    const a = e.getObjects(\"Transition\").filter((l)=>l.top === i.top).map((l)=>l.id);\n    Object.values(e.transitionsMap).forEach((l)=>{\n        a.includes(l.id) && (n[l.id] = l);\n    });\n    const c = ho({\n        trackItemIds: Ut(s),\n        transitionsMap: Ut(n),\n        trackItemsMap: Ut(r)\n    });\n    t.push(0), c.forEach((l)=>{\n        if (l.length === 1) {\n            const h = e.getObjects().find((u)=>u.id === l[0].id);\n            o.includes(h.id) || t.push(h.left + h.width);\n        } else {\n            const h = l[l.length - 1], u = e.getObjects().find((d)=>d.id === h.id);\n            t.push(u.width + u.left);\n        }\n    });\n}\nfunction i0(i, t) {\n    i.getObjects(\"Helper\").reduce((r, n)=>Math.abs(n.top - t) < Math.abs(r.top - t) ? n : r).setSelected(!0);\n}\nconst n0 = (i, t, e, s)=>{\n    const r = Ql(i);\n    return !r && i instanceof Oe ? {\n        top: 0,\n        left: 0,\n        isInvalidDrop: !0\n    } : r ? s ? i instanceof Oe ? {\n        top: 0,\n        left: 0,\n        isInvalidDrop: !0\n    } : Qy(i, s, t, e) : Zy(i) : Jy();\n};\nfunction o0(i) {\n    i.on(\"mouse:up\", Jl.bind(i)), i.on(\"object:moving\", th);\n}\nfunction a0(i) {\n    i.off(\"mouse:up\", Jl.bind(i)), i.off(\"object:moving\", th);\n}\nconst c0 = (i)=>{\n    Q().canvas.fire(\"track:create\", i);\n}, l0 = (i)=>{\n    Q().canvas.fire(\"track-items:moved\", i);\n}, eh = (i)=>{\n    var a, c, l;\n    const t = (a = i.target) == null ? void 0 : a.canvas;\n    if (!t) return;\n    const e = Q(), s = t.getActiveObject();\n    if (!s || !t.positionBeforeTransform) return;\n    const r = t.getScenePoint(i.e), o = t.getObjects(\"Track\", \"Helper\").find((h)=>{\n        const u = h.getBoundingRect();\n        return r.x >= u.left && r.x <= u.left + u.width && r.y >= u.top && r.y <= u.top + u.height;\n    });\n    if (i.action === \"resizing\") {\n        const h = (e.trackToItemsMap[(c = e.originTrack) == null ? void 0 : c.id] || []).filter((d)=>d !== s);\n        s.setCoords();\n        const u = sh(h, s.getBoundingRect());\n        return t.fire(\"track-items:resized\", {\n            trackId: (l = e.originTrack) == null ? void 0 : l.id,\n            trackItemIds: [\n                s.id\n            ],\n            isOverlapped: !!u\n        }), !1;\n    }\n    if (!o) return s == null || s.set(t.positionBeforeTransform), s == null || s.setCoords(), !1;\n    if (o instanceof Ss) {\n        let h;\n        switch(o.kind){\n            case \"top\":\n                h = 0;\n                break;\n            case \"center\":\n                h = o.metadata.order || 0;\n                break;\n            case \"bottom\":\n                h = -1;\n                break;\n            default:\n                return;\n        }\n        const u = {\n            isSecondaryOverlapped: !1,\n            secondaryTracks: e.secondaryTracks,\n            primaryTracks: e.primaryTracks,\n            primaryPositions: {\n                trackIndex: h,\n                trackId: t.trackIdAfterTransform,\n                positions: t.positionAfterTransform\n            }\n        };\n        c0(u);\n    } else if (o instanceof ue) {\n        const u = {\n            isSecondaryOverlapped: u0(),\n            secondaryTracks: e.secondaryTracks,\n            primaryTracks: e.primaryTracks,\n            primaryPositions: {\n                trackId: t.trackIdAfterTransform,\n                positions: t.positionAfterTransform\n            }\n        };\n        l0(u);\n    }\n};\nfunction h0() {\n    const i = Q(), t = i.canvas, [e] = i.primaryMovingObjects, s = e.id, r = t.positionAfterTransform[s], n = e.getBoundingRect().top, o = r.top - n, a = {};\n    return i.secondaryMovingObjects.forEach((c)=>{\n        const l = c.getBoundingRect().top + o, h = i.trackTopToIdMap[l], u = In(i.trackTops, i.originTrack.top, l);\n        a[h] ? a[h].objects.push(c) : a[h] = {\n            objects: [\n                c\n            ],\n            index: u\n        };\n    }), a;\n}\nfunction u0() {\n    const i = h0(), t = Q();\n    return Object.keys(i).some((e)=>{\n        const s = t.trackToItemsMap[e], r = i[e].objects;\n        return !s || !s.length ? !0 : s.filter((n)=>!r.includes(n)).some((n)=>sh(r, n.getBoundingRect()));\n    });\n}\nfunction sh(i, t) {\n    return i.find((s)=>{\n        const r = s.getBoundingRect();\n        return t.left < r.left + r.width && t.left + t.width > r.left && t.top < r.top + r.height && t.top + t.height > r.top;\n    });\n}\nconst d0 = (i)=>{\n    i.on(\"object:modified\", eh);\n}, f0 = (i)=>{\n    i.off(\"object:modified\", eh);\n}, rh = \"drag\", g0 = `${rh}:start`, ih = `${rh}:end`, nh = \"timeline\", p0 = `${nh}:boundingChanged`, m0 = `${nh}:seek`, v0 = \"add:audio\", y0 = \"add:video\", b0 = \"add:image\", _0 = \"add:text\", S0 = [\n    \"transition\",\n    \"image\",\n    \"video\",\n    \"audio\",\n    \"caption\",\n    \"text\"\n];\nlet et, Xs, ws = [];\nfunction T0(i, t) {\n    let e = 1 / 0, s = null;\n    const r = new _(i.x, i.y);\n    return t.forEach((n)=>{\n        const o = Math.sqrt(Math.pow(n.left - r.x, 2) + Math.pow(n.top - r.y, 2));\n        o < e && (e = o, s = n);\n    }), s;\n}\nconst x0 = ({ width: i, height: t, id: e, left: s, top: r, type: n, duration: o })=>{\n    if (n === \"transition\") return new or({\n        top: 0,\n        left: 0,\n        height: 48,\n        width: 48,\n        id: \"TransitionGuide\"\n    });\n    const a = C.getClass(\"PreviewTrackItem\") || Oe;\n    return new a({\n        top: r,\n        left: s,\n        height: t,\n        width: i,\n        id: e,\n        type: n,\n        duration: o\n    });\n};\nfunction oh(i) {\n    var f;\n    const t = (f = i.e.dataTransfer) == null ? void 0 : f.types[0];\n    if (!t) return;\n    const e = JSON.parse(t), s = e.type;\n    if (!S0.includes(s)) return;\n    const r = e.duration || 5e3, n = this;\n    n.discardActiveObject(), n.setActiveIds([]);\n    const o = D(r, this.tScale), a = this.sizesMap[s];\n    et = x0({\n        width: o,\n        height: a,\n        id: \"TransitionGuide\",\n        left: 0,\n        top: 0,\n        type: s,\n        duration: r\n    }), et.visible = !1, s === \"transition\" && (ws = n.getObjects(\"Transition\"), ws.forEach((g)=>{\n        g.visible = !0;\n    }));\n    const c = Q();\n    n.trackIdAfterTransform = \"\", n.positionAfterTransform = {};\n    const l = et, h = [\n        et\n    ];\n    at({\n        activeTrackToItemsMap: {},\n        primaryTracks: {},\n        secondaryTracks: {},\n        trackTops: [],\n        trackToItemsMap: {},\n        activeObjects: [],\n        trackTopToIdMap: {},\n        isDragOver: !1\n    }), at({\n        activeObjects: h\n    });\n    const u = n.getObjects(\"Track\"), d = n.getTrackItems();\n    u.forEach((g)=>{\n        const p = d.filter((m)=>g.items.includes(m.id));\n        c.trackToItemsMap[g.id] = p, c.trackTopToIdMap[g.top] = g.id, c.trackTops.push(g.top);\n    }), c.trackTops.sort((g, p)=>g - p), c.primaryMovingObjects = h, c.primaryMovingObjects = c.primaryMovingObjects.sort((g, p)=>g.left - p.left), l && (n.positionBeforeTransform = {\n        top: l.top,\n        left: l.left\n    }), c.placeholderMovingObjects = c.primaryMovingObjects.map((g)=>{\n        const p = g.getBoundingRect();\n        c.objectInitialPositions[g.id] = {\n            top: p.top,\n            left: p.left\n        };\n        const m = new er({\n            id: `${g.id}-placeholder`,\n            left: p.left,\n            top: p.top,\n            width: p.width,\n            height: p.height\n        });\n        return m.visible = !1, m.draggedObject = g, m;\n    }), n.add(...c.placeholderMovingObjects), n.add(et), (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(g0);\n}\nconst ah = (i)=>{\n    const t = Q();\n    Vl(i, t.placeholderMovingObjects), i && (Pi(i, i.getObjects()), Gl(i.getObjects(\"Helper\")));\n};\nfunction ch() {\n    if (ah(this), at({\n        draggingOverTrack: null,\n        isPointerOverHelperTrack: !1\n    }), !et) return;\n    (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(ih);\n    const i = this;\n    ws.forEach((t)=>{\n        t.strokeDashArray = [], t.setSelected(!1), t.kind === \"none\" && (t.visible = !1);\n    }), i.getObjects(\"Helper\", \"Track\").forEach((t)=>{\n        t.setSelected && t.setSelected(!1);\n    }), i.remove(et);\n}\nfunction lh(i) {\n    const t = Q(), e = t.placeholderMovingObjects[0];\n    if (e.visible || (et.visible = !0, e.visible = !0), t.activeObjects[0] instanceof or && (e.visible = !1), !et) return !1;\n    i.e.preventDefault();\n    const s = this, r = s.getViewportPoint(i.e), n = [\n        ...this.viewportTransform\n    ];\n    et.set({\n        left: r.x - 16 - n[4],\n        top: r.y - n[5] - et.height / 2\n    });\n    const o = T0(r, ws);\n    o && (Xs = o, o.strokeDashArray = [\n        5,\n        1\n    ], o.setSelected(!0)), ws.forEach((c)=>{\n        c !== o && c.setSelected(!1);\n    }), at({\n        isDragOver: !0\n    }), et.setCoords();\n    const a = {\n        target: et,\n        action: \"drag\",\n        originX: \"center\",\n        originY: \"center\",\n        offsetX: r.x - et.left,\n        offsetY: r.y - et.top,\n        scaleX: et.scaleX,\n        scaleY: et.scaleY\n    };\n    s.fire(\"object:moving\", {\n        target: et,\n        e: i.e,\n        pointer: r,\n        transform: a\n    }), s.requestRenderAll();\n}\nfunction hh(i) {\n    var o;\n    const t = this;\n    ah(t);\n    const e = Q(), s = e.draggingOverTrack;\n    at({\n        draggingOverTrack: null,\n        isPointerOverHelperTrack: !1\n    });\n    const r = (o = i.e.dataTransfer) == null ? void 0 : o.types[0], n = JSON.parse(i.e.dataTransfer.getData(r));\n    if (n.type !== \"transition\") {\n        const a = e.activeObjects[0], c = Y(a.left, t.tScale);\n        if (s instanceof ue) if (e.placeholderMovingObjects[0].opacity !== 0) {\n            const h = en(s, this.getObjects(\"Track\"));\n            if (s.magnetic) {\n                const u = e.initialTrackPoints[e.initialTrackPoints.length - 1], d = Y(u, t.tScale);\n                Yr(n, h, d);\n            } else Yr(n, h, c);\n        } else {\n            const h = i.viewportPoint, u = [\n                ...t.viewportTransform\n            ], d = h.y - u[5], g = t.getObjects(\"Helper\").reduce((m, b)=>Math.abs(b.top - d) < Math.abs(m.top - d) ? b : m), p = en(g, this.getObjects(\"Track\"));\n            Yr(n, p, c, !0);\n        }\n        else {\n            const l = en(s, this.getObjects(\"Track\"));\n            Yr(n, l, c, !0);\n        }\n        this.remove(a), this.requestRenderAll();\n        return;\n    }\n    if (et) {\n        if (Xs) {\n            const a = Xs.id, c = Ty(n, [\n                \"kind\",\n                \"direction\"\n            ]);\n            Object.keys(c).forEach((S)=>{\n                S === \"kind\" ? Xs.kind = c[S] : Xs[S] = c[S];\n            });\n            const l = Ut(this.trackItemIds), h = Ut(this.transitionsMap), u = Ut(this.trackItemsMap);\n            h[a] = {\n                ...h[a],\n                ...c\n            };\n            const d = xs({\n                trackItemIds: l,\n                transitionsMap: h,\n                trackItemsMap: u\n            }), g = h[a].fromId, p = d.find((S)=>S.find((w)=>w.id === g)) || [], m = w0(p), b = C0(this.trackItemsMap, m);\n            this.trackItemsMap = b, this.transitionsMap[a] = {\n                ...this.transitionsMap[a],\n                ...c\n            }, this.transitionGroups = xs({\n                trackItemIds: this.trackItemIds,\n                transitionsMap: this.transitionsMap,\n                trackItemsMap: this.trackItemsMap\n            }), this.updateTrackItemCoords(), this.adjustMagneticTrack(), this.calcBounding(), this.updateTransitions(), this.refreshTrackLayout(), this.updateState({\n                kind: \"add:transition\",\n                updateHistory: !0\n            });\n        }\n        ws.forEach((a)=>{\n            a.strokeDashArray = [], a.setSelected(!1), a.kind === \"none\" && (a.visible = !1);\n        }), t.remove(et), t.requestRenderAll(), (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(ih);\n    }\n}\nconst w0 = (i)=>{\n    const [t] = i, e = i.filter((r)=>r.type !== \"transition\");\n    let s = t.display.from;\n    return e.map((r)=>{\n        const n = r.display.to - r.display.from, o = {\n            from: s,\n            to: s + n\n        };\n        return s = o.to, {\n            ...r,\n            display: o\n        };\n    });\n}, C0 = (i, t)=>{\n    let e = i;\n    return t.forEach((s)=>{\n        e[s.id] = s;\n    }), e;\n}, en = (i, t)=>{\n    const e = t.sort((o, a)=>o.top - a.top);\n    if (e.length === 0) return 0;\n    const s = e[e.length - 1];\n    if (s.top + s.height <= i.top) return e.length;\n    const r = i.top;\n    return e.reduce((o, a, c)=>{\n        const l = Math.abs(a.top - r), h = Math.abs(e[o].top - r);\n        return l < h ? c : o;\n    }, 0);\n}, Yr = (i, t, e, s)=>{\n    i.type === \"image\" ? (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(b0, {\n        payload: {\n            ...i,\n            id: Ws(),\n            display: {\n                from: e\n            }\n        },\n        options: {\n            trackIndex: t,\n            isNewTrack: s\n        }\n    }) : i.type === \"video\" ? (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(y0, {\n        payload: {\n            ...i,\n            id: Ws(),\n            display: {\n                from: e\n            }\n        },\n        options: {\n            trackIndex: t,\n            isNewTrack: s\n        }\n    }) : i.type === \"audio\" ? (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(v0, {\n        payload: {\n            ...i,\n            id: Ws(),\n            display: {\n                from: e\n            }\n        },\n        options: {\n            trackIndex: t,\n            isNewTrack: s\n        }\n    }) : i.type === \"text\" && (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(_0, {\n        payload: {\n            ...i,\n            id: Ws(),\n            display: {\n                from: e\n            }\n        },\n        options: {\n            trackIndex: t,\n            isNewTrack: s\n        }\n    });\n};\nfunction O0(i) {\n    i.on(\"dragover\", lh), i.on(\"dragenter\", oh), i.on(\"dragleave\", ch), i.on(\"drop\", hh);\n}\nfunction k0(i) {\n    i.off(\"dragover\", lh), i.off(\"dragenter\", oh), i.off(\"dragleave\", ch), i.off(\"drop\", hh);\n}\nfunction uh(i) {\n    const t = this.height < this.bounding.height;\n    if (!(this.width < this.bounding.width) && !t) return;\n    const s = this.viewportTransform;\n    let r = s[4], n = s[5];\n    const o = 2;\n    i.e.shiftKey ? r = r - i.e.deltaY * o : (t && (n = n - i.e.deltaY * o), r = r - i.e.deltaX * o), this.setViewportPos(r, n);\n}\nfunction dh() {\n    const i = this, t = i.getActiveObject(), e = i.getActiveObjects(), s = e.map((n)=>n.id), r = e.filter((n)=>{\n        if (e.length === 1) return !0;\n        if (n.id && !(n instanceof Jt)) return !0;\n        if (n instanceof Jt && s.includes(n.fromId) && s.includes(n.toId)) return !0;\n    }).map((n)=>n.id);\n    t instanceof Ot ? (t.borderColor = \"rgba(0, 216, 214,0.75)\", t.hasControls = !1, t.hoverCursor = \"default\", t.borderScaleFactor = 1, t.padding = 0, t.getObjects().forEach((n)=>{\n        n.setSelected(!0);\n    })) : t == null || t.setSelected(!0), this.setActiveIds(r);\n}\nfunction fh(i) {\n    const t = this, e = t.getActiveObject();\n    e instanceof Ot && (e.borderColor = \"transparent\", e.hasControls = !1, e.hoverCursor = \"default\"), i.selected.forEach((n)=>{\n        n.setSelected(!0);\n    }), i.deselected.forEach((n)=>{\n        n.setSelected(!1);\n    });\n    const r = t.getActiveObjects().map((n)=>n.id);\n    this.setActiveIds(r);\n}\nfunction gh(i) {\n    i.deselected.forEach((t)=>{\n        t.setSelected(!1);\n    });\n}\nconst M0 = (i)=>{\n    i.on(\"selection:created\", dh), i.on(\"selection:updated\", fh), i.on(\"selection:cleared\", gh), i.on(\"mouse:wheel\", uh);\n}, I0 = (i)=>{\n    i.off(\"mouse:wheel\", uh), i.off(\"selection:created\", dh), i.off(\"selection:updated\", fh), i.off(\"selection:cleared\", gh);\n}, ph = ()=>{\n    var n, o;\n    const i = Q(), t = i.canvas, e = i.draggingOverTrack;\n    t.updateTrackItemCoords(!0);\n    const s = e == null ? void 0 : e.magnetic, r = new Set(i.activeObjects.map((a)=>a.id));\n    if (s) {\n        const a = e.id, l = i.trackToItemsMap[a].sort((p, m)=>p.left - m.left), h = i.placeholderMovingObjects, u = ((n = h[0]) == null ? void 0 : n.top) || 0, d = h.reduce((p, m)=>p + m.width, 0), f = Math.min(...h.map((p)=>p.left));\n        let g = 0;\n        l.forEach((p)=>{\n            r.has(p.id) || p.top === u && (Math.abs(f - g) < 1 && (g += d), p.left = g, g += p.width);\n        });\n    } else if (e instanceof ue && i.orderNormalTrack) {\n        const a = e.items, c = t.getTrackItems().filter((x)=>!r.has(x.id) && a.includes(x.id)), l = c.sort((x, I)=>x.left - I.left), h = i.placeholderMovingObjects[0], u = i.placeholderMovingObjects[i.placeholderMovingObjects.length - 1], d = h.left, f = u.left - h.left + u.width, g = l.find((x, I)=>{\n            if (x.left >= d - 1) return l[I];\n        }), p = D(((o = g == null ? void 0 : g.display) == null ? void 0 : o.from) || 0, t.tScale), m = c.map((x)=>x.id), b = {}, S = {};\n        Object.values(t.trackItemsMap).forEach((x)=>{\n            m.includes(x.id) && (b[x.id] = x);\n        });\n        const w = t.getObjects(\"Transition\").filter((x)=>x.top === c[0].top).map((x)=>x.id);\n        Object.values(t.transitionsMap).forEach((x)=>{\n            w.includes(x.id) && (S[x.id] = x);\n        });\n        const k = ho({\n            trackItemIds: Ut(c.map((x)=>x.id)),\n            transitionsMap: Ut(S),\n            trackItemsMap: Ut(b)\n        });\n        c.filter((x)=>x.left >= d - 1).forEach((x)=>{\n            const I = D(x.display.from, t.tScale), M = Object.values(t.transitionsMap).find((R)=>R.kind !== \"none\" && R.toId === x.id);\n            let E = 0;\n            k.forEach((R)=>{\n                if (R.map((F)=>F == null ? void 0 : F.id).includes(x.id)) {\n                    for (const F of R)if (F.type === \"transition\") if ((M == null ? void 0 : M.id) === F.id) {\n                        E = E + D(F.duration, t.tScale) / 2;\n                        break;\n                    } else E = E + D(F.duration, t.tScale);\n                    else if (F.id === x.id) break;\n                }\n            }), p <= d + f && (x.left = I + f - E + d - p);\n        });\n    }\n    t.alignTransitionsToTrack(!1);\n};\nfunction D0(i) {\n    i.on(\"object:moving\", ph);\n}\nfunction j0(i) {\n    i.off(\"object:moving\", ph);\n}\nlet Ft, uo = !1;\nfunction E0(i, t) {\n    const e = i.canvas;\n    if (qd.includes(i.type)) {\n        Ft || (Ft = i);\n        const s = i.top, r = i.height, n = i.left, o = i.width, a = t.x, c = t.y, l = Math.abs(c - (s + r / 2)) <= Jd;\n        Math.abs(a - n) <= qo && l || Math.abs(a - n - o) <= qo && l ? (e.hoverCornerItem = !0, i.hoverCursor = \"ew-resize\") : (e.hoverCornerItem = !1, i.hoverCursor = \"move\"), e.requestRenderAll();\n    }\n}\nfunction mh(i) {\n    const t = this, e = t.findTarget(i.e), s = t.getScenePoint(i.e);\n    e && (e.isSelected && Ft && (e.hoverCursor = \"default\"), E0(e, s));\n}\nfunction vh() {\n    Ft && (Ft.lockMovementX = !1, Ft.lockMovementY = !1, Ft = void 0);\n}\nfunction yh(i) {\n    Ft && (uo || Ft._renderControls(i.ctx));\n}\nfunction bh() {\n    Ft && (Ft = void 0, this.requestRenderAll());\n}\nfunction _h() {\n    uo = !0;\n}\nfunction Sh() {\n    uo = !1;\n}\nfunction P0(i) {\n    i.on(\"mouse:out\", bh.bind(i)), i.on(\"mouse:up\", vh.bind(i)), i.on(\"mouse:move\", mh.bind(i)), i.on(\"after:render\", yh.bind(i)), i.on(\"object:resizing\", _h.bind(i)), i.on(\"object:modified\", Sh.bind(i));\n}\nfunction A0(i) {\n    i.off(\"mouse:out\", bh.bind(i)), i.off(\"mouse:up\", vh.bind(i)), i.off(\"mouse:move\", mh.bind(i)), i.off(\"after:render\", yh.bind(i)), i.off(\"object:resizing\", _h.bind(i)), i.off(\"object:modified\", Sh.bind(i));\n}\nconst F0 = (i)=>{\n    at({\n        canvas: i\n    }), Ay(i), Iy(i), Ry(i), Hy(i), Vy(i), o0(i), d0(i), O0(i), M0(i), D0(i), P0(i);\n}, R0 = (i)=>{\n    at({\n        canvas: null\n    }), Fy(i), Dy(i), Ly(i), Yy(i), Gy(i), a0(i), f0(i), k0(i), I0(i), j0(i), A0(i);\n};\nclass L0 {\n    removeTransitions() {\n        const t = this.getObjects(\"Transition\");\n        this.remove(...t);\n    }\n    renderTransitions() {\n        this.removeTransitions(), this.transitionIds.forEach((t)=>{\n            const e = this.transitionsMap[t], s = e.fromId, r = e.toId, n = this.getObjects(), o = n.find((d)=>d.id === s), a = n.find((d)=>d.id === r);\n            if (!o || !a) return;\n            const c = D(e.duration, this.tScale), l = o.left + o.width - c / 2, h = o.height, u = new Jt({\n                id: e.id,\n                left: l,\n                top: o.top,\n                height: h,\n                width: c,\n                tScale: this.tScale,\n                duration: e.duration,\n                fromId: o.id,\n                toId: a.id,\n                kind: e.kind\n            });\n            e.kind === \"none\" && (u.visible = !1), u && this.add(u);\n        });\n    }\n    updateTrackTransitionsItemCoords() {\n        this.pauseEventListeners(), this.getObjects(\"Transition\").forEach((e)=>{\n            e.tScale = this.tScale, e.updateCoords(), e.setCoords();\n        }), this.resumeEventListeners();\n    }\n    alignTransitionsToTrack(t = !0) {\n        const e = t ? [] : this.getActiveObjects().map((s)=>s.id);\n        this.transitionIds.forEach((s)=>{\n            const r = this.getObjects(\"Transition\").find((n)=>n.id === s);\n            if (r instanceof Jt) {\n                const n = this.getObjects().find((c)=>c.id === r.fromId && !e.includes(c.id));\n                if (!n) return;\n                const o = D(r.duration, this.tScale), a = n.left + n.width - o / 2;\n                r.set({\n                    left: a,\n                    top: n.top\n                }), r.setCoords();\n            }\n        });\n    }\n    updateTransitions(t = !0) {\n        t && this.pauseEventListeners();\n        const e = this.getObjects(\"Track\"), s = this.getObjects(\"Video\", \"Image\");\n        this.removeTransitions();\n        const r = {}, n = [];\n        e.forEach((a)=>{\n            const c = s.filter((l)=>a.items.includes(l.id)).sort((l, h)=>l.left - h.left);\n            for(let l = 0; l < c.length - 1; l++){\n                const h = c[l], u = c[l + 1];\n                if (Math.abs(h.left + h.width - u.left) <= 1) {\n                    const d = `${h.id}-${u.id}`;\n                    if (this.transitionIds.includes(d)) {\n                        const g = this.transitionsMap[d];\n                        r[d] = g;\n                    } else {\n                        const g = {\n                            id: d,\n                            duration: 1500,\n                            fromId: h.id,\n                            toId: u.id,\n                            kind: \"none\",\n                            trackId: a.id,\n                            type: \"transition\"\n                        };\n                        r[d] = g;\n                    }\n                    n.push(d);\n                }\n            }\n        }), this.transitionIds = n, this.transitionsMap = r, this.renderTransitions();\n        const o = this.getObjects(\"Transition\");\n        this.updateCachingActiveObjects(o), this.transitionGroups = xs({\n            trackItemIds: this.trackItemIds,\n            transitionsMap: this.transitionsMap,\n            trackItemsMap: this.trackItemsMap\n        }), t && this.resumeEventListeners();\n    }\n}\nfunction Th(i) {\n    const { secondaryTracks: t, primaryTracks: e, primaryPositions: s } = i, { positions: r, trackIndex: n } = s, o = n === -1 ? this.tracks.length : n, [a] = Object.keys(e), c = this.tracks.find((p)=>p.id === a), l = e[a], h = {\n        id: Ws(),\n        items: l.objects.map((p)=>p.id),\n        type: c.type,\n        accepts: c.accepts\n    }, u = co(Object.keys(t).map((p)=>t[p].objects.map((m)=>m.id)));\n    let d = rr(this.tracks, [\n        ...Object.keys(r),\n        ...u\n    ]);\n    const f = [];\n    Object.keys(t).forEach((p)=>{\n        const { objects: m, index: b } = t[p], S = this.tracks.find((O)=>O.id === p), w = m.map((O)=>O.id).filter((O)=>!this.transitionIds.includes(O)), k = {\n            id: gr(),\n            items: w,\n            type: S.type,\n            accepts: S.accepts,\n            tempIndex: b\n        };\n        f.push(k);\n    });\n    const g = ql(h, f);\n    g.length && d.splice(o, 0, ...g), this.tracks = d, this.renderTracks(), this.refreshTrackLayout(), this.alignItemsToTrack(), this.uodateTrackItemIdsOrdering(), this.refreshTrackItemsForTransitions(), this.adjustMagneticTrack(), this.updateTransitions(!0), this.updateState({\n        updateHistory: !0,\n        kind: \"update\"\n    });\n}\nfunction xh(i) {\n    const { isSecondaryOverlapped: t, secondaryTracks: e, primaryTracks: s, primaryPositions: r } = i, { trackId: n, positions: o } = r, a = this.tracks.find((b)=>b.id === n), h = Q().primaryMovingObjects.sort((b, S)=>b.left - S.left);\n    h.forEach((b, S)=>{\n        h[S - 1] && b.left - h[S - 1].left;\n    });\n    const u = this.tracks.findIndex((b)=>b.id === n), d = co(Object.keys(e).map((b)=>e[b].objects.map((S)=>S.id)));\n    let f = rr(this.tracks, [\n        ...Object.keys(o),\n        ...d\n    ]);\n    Object.keys(s).forEach((b)=>{\n        this.pauseEventListeners();\n        const { objects: S } = s[b];\n        S.forEach((O)=>{\n            if (O.isMain && a != null && a.magnetic) return;\n            const x = o[O.id];\n            O.left = x == null ? void 0 : x.left;\n        }), this.resumeEventListeners();\n        const w = r.trackId, k = f.find((O)=>O.id === w);\n        k == null || k.items.push(...Object.keys(o)), this.tracks = f;\n    });\n    const g = this.tracks[u], p = [];\n    Object.keys(e).forEach((b)=>{\n        const { objects: S, index: w } = e[b], k = S.filter((I)=>I.type !== \"transition\").map((I)=>I.id), [O] = k, x = this.trackItemsMap[O];\n        if (t && x) {\n            const I = {\n                id: gr(),\n                items: k,\n                type: x.type,\n                accepts: this.acceptsMap[x.type],\n                tempIndex: w\n            };\n            p.push(I);\n        } else {\n            const I = f[u + w];\n            I == null || I.items.push(...k), this.tracks = f;\n        }\n    });\n    const m = ql(g, p);\n    m.length && f.splice(u, 1, ...m), this.tracks = f, this.renderTracks(), this.alignItemsToTrack(), this.uodateTrackItemIdsOrdering(), this.refreshTrackItemsForTransitions(), this.adjustMagneticTrack(), this.updateTransitions(!0), this.updateState({\n        updateHistory: !0,\n        kind: \"update\"\n    });\n}\nfunction wh({ trackItemIds: i, isOverlapped: t }) {\n    const [e] = i;\n    if (!e) return;\n    if (!this.getObjects(\"Transition\").find((r)=>r.id === e)) {\n        const r = this.tracks.find((n)=>n.items.includes(e));\n        if (t) {\n            const n = rr(this.tracks, i), o = {\n                id: gr(),\n                items: [\n                    e\n                ],\n                type: r.type,\n                accepts: r.accepts\n            }, a = this.tracks.findIndex((c)=>c.id === r.id);\n            n.splice(a, 0, o), this.tracks = n;\n        }\n    }\n    this.renderTracks(), this.alignItemsToTrack(), this.refreshTrackItemsForTransitions(), this.adjustMagneticTrack(), this.updateTransitions(!0), this.uodateTrackItemIdsOrdering(), this.updateState({\n        updateHistory: !0,\n        kind: \"update\"\n    });\n}\nlet Dn = {\n    x: 0,\n    y: 0\n};\nfunction B0(i) {\n    Dn = i.scenePoint;\n}\nfunction Ch(i) {\n    const t = i.scenePoint;\n    if ((Dn.x === t.x || Dn.y === t.y) && !i.target) {\n        const s = this.getElement().getBoundingClientRect(), r = this.viewportTransform, n = i.e.clientX - s.left - r[4], o = Y(n, this.scale.zoom);\n        (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(m0, {\n            payload: {\n                time: o\n            }\n        });\n    }\n}\nconst W0 = (i)=>{\n    i.on(\"track:create\", Th.bind(i)), i.on(\"track-items:resized\", wh.bind(i)), i.on(\"track-items:moved\", xh.bind(i)), i.on(\"mouse:up\", Ch.bind(i)), i.on(\"mouse:down\", B0.bind(i));\n};\nfunction X0(i) {\n    i.off(\"track:create\", Th.bind(i)), i.off(\"track-items:resized\", wh.bind(i)), i.off(\"track-items:moved\", xh.bind(i)), i.off(\"mouse:up\", Ch.bind(i));\n}\nfunction z0(i, t) {\n    return t.forEach((e)=>{\n        Object.getOwnPropertyNames(e.prototype).forEach((s)=>{\n            s !== \"constructor\" && Object.defineProperty(i.prototype, s, Object.getOwnPropertyDescriptor(e.prototype, s) || /* @__PURE__ */ Object.create(null));\n        });\n    }), i;\n}\nconst H0 = {\n    video: [\n        \"*\"\n    ],\n    image: [\n        \"*\"\n    ],\n    audio: [\n        \"*\"\n    ],\n    text: [\n        \"*\"\n    ],\n    caption: [\n        \"*\"\n    ],\n    template: [\n        \"*\"\n    ],\n    composition: [\n        \"*\"\n    ],\n    illustration: [\n        \"*\"\n    ],\n    shape: [\n        \"*\"\n    ]\n}, Y0 = {\n    video: 42,\n    image: 42,\n    audio: 42,\n    text: 42,\n    caption: 42,\n    template: 42,\n    illustration: 42,\n    composition: 42,\n    shape: 42\n}, V0 = [\n    \"video\",\n    \"image\",\n    \"audio\",\n    \"text\",\n    \"caption\",\n    \"template\",\n    \"illustration\",\n    \"composition\"\n], G0 = (i = {})=>{\n    const t = Object.assign({}, H0, i), e = {};\n    return Object.keys(t).forEach((s)=>{\n        const r = t[s];\n        e[s] = r.includes(\"*\") ? V0 : r;\n    }), e;\n}, N0 = (i = {})=>{\n    const t = Object.assign({}, Y0, i), e = {};\n    return i ? (Object.keys(t).forEach((s)=>{\n        const r = t[s];\n        e[s] = r;\n    }), e) : t;\n};\nlet Oh, kh, Mh, Ih, Dh, jh, Eh, Ph;\nconst U0 = (i)=>{\n    Oh = i.state.subscribeToActiveIds(({ activeIds: t })=>{\n        const e = i.activeIds;\n        if (t.length === 1 && e.length === 1) {\n            const s = t[0], r = e[0], o = i.state.getState().structure;\n            let a = \"\";\n            if (o.forEach((c)=>{\n                c.id === r && c.items.includes(s) && (a = c.id);\n            }), a !== \"\") return;\n            i.selectTrackItemByIds([\n                s\n            ]);\n        } else i.selectTrackItemByIds(t);\n    }), Ph = i.state.subscribeToTracks(({ tracks: t, changedTracks: e })=>{\n        e.length && (i.tracks = t, i.renderTracks(), i.refreshTrackLayout());\n    }), Eh = i.state.subscribeToUpdateAnimations(({ trackItemsMap: t, changedAnimationIds: e })=>{\n        if (e != null && e.length) {\n            const s = i.getTrackItems();\n            i.trackItemsMap = t, s.forEach((r)=>{\n                if (e.includes(r.id)) {\n                    const n = t[r.id].animations;\n                    n && r.set({\n                        animations: n\n                    });\n                }\n            });\n        }\n    }), jh = i.state.subscribeToUpdateTrackItemTiming(({ trackItemsMap: t, changedTrimIds: e, changedDisplayIds: s })=>{\n        if (e && i.getTrackItems().forEach((n)=>{\n            if (e.includes(n.id)) {\n                const o = t[n.id].trim;\n                o && n.set({\n                    trim: {\n                        from: o.from,\n                        to: o.to\n                    }\n                });\n            }\n        }), s) {\n            const r = i.getTrackItems();\n            i.pauseEventListeners(), r.forEach((n)=>{\n                if (s.includes(n.id)) {\n                    const o = t[n.id].display;\n                    o && n.set({\n                        display: o\n                    });\n                }\n            }), i.resumeEventListeners();\n        }\n        i.requestRenderAll();\n    }), Dh = i.state.subscribeToScale((t)=>{\n        i.setScale(t.scale);\n    }), Ih = i.state.subscribeToUpdateItemDetails((t)=>{\n        const e = i.getTrackItems();\n        if (e.length === 0) return;\n        const s = i.state.getState(), r = t.trackItemDetailsMap, n = s.trackItemsMap;\n        e.forEach((o)=>{\n            const a = r[o.id];\n            if (a) if (o instanceof _t || o instanceof Qs || o instanceof ft) {\n                if (a.type === \"video\" || a.type === \"image\" || a.type === \"audio\") {\n                    const c = n[o.id];\n                    if (o.src !== a.details.src && o.setSrc && o.setSrc(a.details.src), a.type === \"video\" || a.type === \"audio\") {\n                        const h = c.display.to - c.display.from, u = D(h, i.scale.zoom, c.playbackRate);\n                        o.set({\n                            duration: c.duration,\n                            display: c.display,\n                            trim: c.trim,\n                            width: u\n                        }), o.setCoords();\n                    }\n                }\n            } else (o instanceof tr || o instanceof sr) && (a.type === \"text\" || a.type === \"caption\") && o.set({\n                text: a.details.text\n            });\n        }), i.requestRenderAll();\n    }), Mh = i.state.subscribeToHistory((t)=>{\n        i.tracks = t.tracks, i.trackItemsMap = t.trackItemsMap, i.trackItemIds = t.trackItemIds, i.trackItemDetailsMap = t.trackItemDetailsMap, i.transitionIds = t.transitionIds, i.transitionsMap = t.transitionsMap, i.transitionGroups = xs({\n            trackItemIds: i.trackItemIds,\n            transitionsMap: i.transitionsMap,\n            trackItemsMap: i.trackItemsMap\n        }), i.renderTracks(), i.refreshTrackLayout(), i.updateTrackItemCoords(), i.alignItemsToTrack(), i.alignTransitionsToTrack(), i.adjustMagneticTrack(), i.updateTransitions(), i.calcBounding(), i.duration = pl(i.trackItemsMap);\n    }), kh = i.state.subscribeToAddOrRemoveItems(()=>{\n        const t = i.getTrackItems().map((n)=>n.id), e = i.state.getState(), s = e.trackItemIds, r = [];\n        t.forEach((n)=>{\n            s.includes(n) || r.push(n);\n        }), i.deleteTrackItemById(r), i.tracks = e.tracks, i.trackItemsMap = e.trackItemsMap, i.trackItemDetailsMap = e.trackItemDetailsMap, i.transitionIds = e.transitionIds, i.transitionsMap = e.transitionsMap, s.forEach((n)=>{\n            if (!t.includes(n)) {\n                const a = {\n                    ...e.trackItemsMap[n],\n                    details: {\n                        ...e.trackItemDetailsMap[n].details\n                    }\n                };\n                i.addTrackItem(a);\n            }\n        }), i.trackItemIds = e.trackItemIds, i.activeIds = e.activeIds, i.transitionGroups = xs({\n            trackItemIds: i.trackItemIds,\n            transitionsMap: i.transitionsMap,\n            trackItemsMap: i.trackItemsMap\n        }), i.renderTracks(), i.alignItemsToTrack(), i.updateTrackItemCoords(), i.calcBounding(), i.updateTransitions(), i.refreshTrackLayout(), i.selectTrackItemByIds(e.activeIds);\n    });\n}, $0 = (i)=>{\n    Oh.unsubscribe(), kh.unsubscribe(), Mh.unsubscribe(), Ih.unsubscribe(), Dh.unsubscribe(), jh.unsubscribe(), Eh.unsubscribe(), Ph.unsubscribe();\n}, Aa = (i, t)=>{\n    let e = !1;\n    const s = [];\n    return t.forEach((r)=>{\n        r.containsPoint(i) && (s.push(r), e = !0);\n    }), {\n        isOverObject: e,\n        overObjects: s\n    };\n};\nfunction q0(i) {\n    return JSON.parse(JSON.stringify(i));\n}\nclass K0 extends vn {\n    constructor(e, s){\n        var r;\n        super(e, s);\n        T(this, \"acceptsMap\");\n        T(this, \"sizesMap\", {});\n        // Declare properties from state\n        T(this, \"tracks\", []);\n        T(this, \"hoverCornerItem\", !1);\n        T(this, \"trackItemsMap\", {});\n        T(this, \"trackItemIds\", []);\n        T(this, \"transitionIds\", []);\n        T(this, \"transitionsMap\", {});\n        T(this, \"trackItemDetailsMap\", {});\n        T(this, \"scale\");\n        T(this, \"duration\");\n        T(this, \"bounding\");\n        T(this, \"onScroll\");\n        T(this, \"onResizeCanvas\");\n        T(this, \"tScale\");\n        T(this, \"state\");\n        T(this, \"activeIds\", []);\n        T(this, \"spacing\");\n        T(this, \"guideLineColor\");\n        T(this, \"transitionGroups\", []);\n        this.bounding = s.bounding || {\n            width: s.width || 0,\n            height: s.height || 0\n        }, this.tScale = ((r = s.scale) == null ? void 0 : r.zoom) || 1, this.state = s.state, this.onScroll = s.onScroll, this.onResizeCanvas = s.onResizeCanvas, this.acceptsMap = G0(s.acceptsMap), this.sizesMap = N0(s.sizesMap), this.spacing = Wy(s.spacing), this.positionAfterTransform = {}, this.initializeCanvasDefaults(), this.scale = s.scale, this.duration = s.duration, this.guideLineColor = s.guideLineColor || vt, this.initEventListeners();\n    }\n    static registerItems(e) {\n        Object.keys(e).forEach((s)=>{\n            C.setClass(e[s], s);\n        });\n    }\n    initializeCanvasDefaults() {\n        const e = this.viewportTransform;\n        e[4] = this.spacing.left, Object.assign(nt.ownDefaults, {\n            borderColor: \"transparent\",\n            cornerColor: \"white\",\n            cornerStrokeColor: \"transparent\",\n            strokeWidth: 0,\n            borderOpacityWhenMoving: 1,\n            borderScaleFactor: 1,\n            cornerSize: 8,\n            cornerStyle: \"rect\",\n            centeredScaling: !1,\n            centeredRotation: !0,\n            transparentCorners: !1\n        });\n    }\n    // detect if the mouse click does not land on any item -> clean the selection and generate another selection\n    __onMouseDown(e) {\n        const s = this.getScenePoint(e), r = this._activeObject, n = this.getActiveObjects();\n        if (n.length === 0) {\n            super.__onMouseDown(e);\n            return;\n        }\n        const { isOverObject: o } = Aa(s, n);\n        if (r && (r == null ? void 0 : r.findControl(this.getViewportPoint(e), zy(e)))) {\n            super.__onMouseDown(e);\n            return;\n        }\n        const a = this.getTrackItems(), c = this.getObjects(\"Transition\"), { isOverObject: l, overObjects: h } = Aa(s, [\n            ...c,\n            ...a\n        ]);\n        l ? o ? super.__onMouseDown(e) : (this.setActiveIds([\n            h[0].id\n        ]), super.__onMouseDown(e)) : (this.discardActiveObject(), this.requestRenderAll(), this.setActiveIds([]), this._groupSelector = {\n            x: s.x,\n            y: s.y,\n            deltaY: 0,\n            deltaX: 0\n        }, super.__onMouseDown(e));\n    }\n    _setupCurrentTransform(e, s, r) {\n        var n;\n        if (this.hoverCornerItem) {\n            const o = this.getScenePoint(e), { key: a = \"\", control: c } = s.getActiveControl() || {}, l = c && ((n = c.getActionHandler(e, s, c)) == null ? void 0 : n.bind(c)), h = this._getOriginFromCorner(s, a), u = {\n                target: s,\n                action: \"resizing\",\n                actionHandler: l,\n                actionPerformed: !1,\n                corner: a,\n                scaleX: s.scaleX,\n                scaleY: s.scaleY,\n                skewX: s.skewX,\n                skewY: s.skewY,\n                offsetX: o.x - s.left,\n                offsetY: o.y - s.top,\n                originX: h.x,\n                originY: h.y,\n                ex: o.x,\n                ey: o.y,\n                lastX: o.x,\n                lastY: o.y,\n                theta: s.angle * Math.PI / 180,\n                width: s.width,\n                height: s.height,\n                shiftKey: e.shiftKey,\n                altKey: !1,\n                original: {\n                    scaleX: s.scaleX,\n                    scaleY: s.scaleY,\n                    skewX: s.skewX,\n                    skewY: s.skewY,\n                    angle: s.angle,\n                    left: s.left,\n                    flipX: s.flipX,\n                    flipY: s.flipY,\n                    top: s.top,\n                    originX: h.x,\n                    originY: h.y\n                }\n            };\n            this._currentTransform = u, this.fire(\"before:transform\", {\n                e,\n                transform: u\n            });\n        } else super._setupCurrentTransform(e, s, r);\n    }\n    initEventListeners() {\n        W0(this), F0(this), U0(this);\n    }\n    setActiveIds(e) {\n        this.activeIds = e, this.state.updateState({\n            activeIds: q0(this.activeIds)\n        }, {\n            kind: \"layer:selection\",\n            updateHistory: !1\n        });\n    }\n    updateState(e = {\n        updateHistory: !1\n    }) {\n        this.filterEmptyTracks(), this.synchronizeTrackItemsState(), this.requestRenderAll(), this.duration = this.getDurationBasedOnTrackItemsPosition(), this.calcBounding(), this.refreshTrackLayout(), this.setTrackItemCoords();\n        const s = this.getUpdatedState();\n        this.state.updateState(s, e);\n    }\n    getUpdatedState() {\n        const e = this.getDurationBasedOnTrackItemsPosition();\n        return {\n            tracks: this.tracks,\n            trackItemIds: this.trackItemIds,\n            trackItemsMap: this.trackItemsMap,\n            transitionIds: this.transitionIds,\n            transitionsMap: this.transitionsMap,\n            scale: this.scale,\n            duration: e\n        };\n    }\n    getDurationBasedOnTrackItemsPosition() {\n        const e = this.getTrackItems().map((n)=>n.getBoundingRect()), s = e.reduce((n, o)=>n.left + n.width < o.left + o.width ? o : n, e[0]), r = s.left + s.width;\n        return Y(r, this.tScale);\n    }\n    notify(e = {\n        updateHistory: !1\n    }) {\n        const s = this.getUpdatedState();\n        this.state.updateState(s, e);\n    }\n    getState() {\n        const e = pl(this.trackItemsMap);\n        return {\n            tracks: this.tracks,\n            trackItemIds: this.trackItemIds,\n            trackItemsMap: this.trackItemsMap,\n            transitionIds: this.transitionIds,\n            transitionsMap: this.transitionsMap,\n            trackItemDetailsMap: this.trackItemDetailsMap,\n            scale: this.scale,\n            duration: e\n        };\n    }\n    purge() {\n        R0(this), X0(this), $0(), this.dispose();\n    }\n    scrollTo({ scrollLeft: e, scrollTop: s }) {\n        var o;\n        const r = [\n            ...this.viewportTransform\n        ];\n        let n = !1;\n        typeof e == \"number\" && (r[4] = -e + this.spacing.left, n = !0), typeof s == \"number\" && (r[5] = -s, n = !0), n && (this.viewportTransform = r, (o = this.getActiveObject()) == null || o.setCoords(), this.requestRenderAll());\n    }\n    setBounding(e) {\n        this.bounding = e;\n    }\n    calcBounding() {\n        const e = this.getObjects(\"Track\").filter((c)=>c.static), s = [\n            ...this.getTrackItems(),\n            ...e\n        ].reduce((c, l)=>{\n            const { top: h, height: u } = l.getBoundingRect();\n            return {\n                top: Math.min(c.top, h),\n                height: Math.max(c.height, h + u)\n            };\n        }, {\n            top: 1 / 0,\n            height: 0\n        }), r = [\n            ...this.getTrackItems()\n        ].reduce((c, l)=>{\n            const { left: h, width: u } = l.getBoundingRect();\n            return {\n                left: Math.min(c.left, h),\n                width: Math.max(c.width, h + u)\n            };\n        }, {\n            left: 1 / 0,\n            width: this.width\n        }), n = this.bounding.width, o = r.width, a = o - n;\n        if (a < 0) {\n            const c = this.getTrackItems(), l = this.getElement().clientWidth, h = c.reduce((u, d)=>d.left + d.width > u.left + u.width ? d : u, c[0]);\n            Math.abs(a) > l ? this.setViewportPos(-(o - l) - this.spacing.right, this.viewportTransform[5]) : h.left + h.width <= l ? this.setViewportPos(16, this.viewportTransform[5]) : this.setViewportPos(this.viewportTransform[4] - a, this.viewportTransform[5]);\n        }\n        this.bounding = {\n            ...s,\n            ...r\n        }, (0,_designcombo_events__WEBPACK_IMPORTED_MODULE_0__.dispatch)(p0, {\n            payload: {\n                bounding: {\n                    ...s,\n                    ...r\n                }\n            }\n        });\n    }\n    setViewportPos(e, s) {\n        var o;\n        const r = this.getViewportPos(e, s), n = this.viewportTransform;\n        n[4] = r.x, n[5] = r.y, this.requestRenderAll(), this.setActiveTrackItemCoords(), (o = this.onScroll) == null || o.call(this, {\n            scrollTop: r.y,\n            scrollLeft: r.x - this.spacing.left\n        });\n    }\n    getViewportPos(e, s) {\n        const r = this, n = this.bounding.width - 100 >= r.width ? this.spacing.right : 0, o = r.width - this.bounding.width - n, a = this.spacing.left, c = Math.max(o, Math.min(e, a));\n        if (this.bounding.height < this.height) return {\n            x: c,\n            y: 0\n        };\n        const l = r.height - this.bounding.height - 40, u = Math.max(l, Math.min(s, 0));\n        return {\n            x: c,\n            y: u\n        };\n    }\n    setScale(e) {\n        this.pauseEventListeners(), this.tScale = e.zoom, this.scale = e, this.getObjects(\"Video\", \"Image\", \"Text\", \"Audio\", \"Caption\", \"Template\").forEach((r)=>{\n            const n = this.transitionGroups.find((o)=>o.find((a)=>a.id === r.id)) || [];\n            if ((n == null ? void 0 : n.length) === 1) {\n                const o = D(r.display.from, this.tScale), a = D(r.display.to - r.display.from, this.tScale, r.playbackRate);\n                r.set({\n                    left: o,\n                    width: a,\n                    tScale: e.zoom\n                });\n            } else {\n                const o = n.findIndex((u)=>u.id === r.id), a = n[o - 1], c = n[o + 1], l = n.filter((u)=>u.type === \"transition\"), h = this.trackItemsMap[r.id];\n                if (a && !c) {\n                    const u = l.indexOf(a), f = l.slice(0, u).reduce((m, b)=>m + (b.duration || 0), 0), g = D(h.display.from - (a.duration || 0) / 2 - f, this.tScale), p = D(h.display.to - h.display.from - (a.duration || 0) / 2, this.tScale, h.playbackRate);\n                    r.set({\n                        left: g,\n                        width: p,\n                        tScale: e.zoom\n                    });\n                } else if (c && !a) {\n                    const u = D(h.display.from, this.tScale), d = D(h.display.to - h.display.from - (c.duration || 0) / 2, this.tScale, h.playbackRate);\n                    r.set({\n                        left: u,\n                        width: d,\n                        tScale: e.zoom\n                    });\n                } else if (a && c) {\n                    const u = D(h.display.from - (a.duration || 0) / 2, this.tScale), d = D(h.display.to - h.display.from - (c.duration || 0) / 2 - (a.duration || 0) / 2, this.tScale, r.playbackRate);\n                    r.set({\n                        left: u,\n                        width: d,\n                        tScale: e.zoom\n                    });\n                }\n            }\n            r.onScale && r.onScale(), r.setCoords();\n        }), this.requestRenderAll(), this.calcBounding(), this.refreshTrackLayout(), this.updateTransitions(!1), this.resumeEventListeners();\n    }\n}\nz0(K0, [\n    Cf,\n    My,\n    ky,\n    L0\n]);\nconst rb = {\n    audio: _n,\n    media: xn,\n    common: Sn,\n    transition: Tn\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@designcombo/timeline/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@designcombo/frames/dist/frames.js":
/*!*********************************************************!*\
  !*** ./node_modules/@designcombo/frames/dist/frames.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_AUDIO_CONF: () => (/* binding */ q),\n/* harmony export */   EventTool: () => (/* binding */ Ri),\n/* harmony export */   Log: () => (/* binding */ z),\n/* harmony export */   MP4Clip: () => (/* binding */ sn),\n/* harmony export */   adjustAudioDataVolume: () => (/* binding */ en),\n/* harmony export */   audioResample: () => (/* binding */ bi),\n/* harmony export */   autoReadStream: () => (/* binding */ fe),\n/* harmony export */   concatFloat32Array: () => (/* binding */ Me),\n/* harmony export */   concatPCMFragments: () => (/* binding */ mi),\n/* harmony export */   createEl: () => (/* binding */ Ve),\n/* harmony export */   decodeImg: () => (/* binding */ nn),\n/* harmony export */   extractPCM4AudioBuffer: () => (/* binding */ Oe),\n/* harmony export */   extractPCM4AudioData: () => (/* binding */ le),\n/* harmony export */   fastConcatMP4: () => (/* binding */ Xi),\n/* harmony export */   file2stream: () => (/* binding */ Wi),\n/* harmony export */   fixFMP4Duration: () => (/* binding */ an),\n/* harmony export */   mixinMP4AndAudio: () => (/* binding */ on),\n/* harmony export */   mixinPCM: () => (/* binding */ be),\n/* harmony export */   recodemux: () => (/* binding */ rn),\n/* harmony export */   renderTxt2Img: () => (/* binding */ We),\n/* harmony export */   renderTxt2ImgBitmap: () => (/* binding */ tn),\n/* harmony export */   ringSliceFloat32Array: () => (/* binding */ Si),\n/* harmony export */   workerTimer: () => (/* binding */ De)\n/* harmony export */ });\nvar He = Object.defineProperty;\nvar pe = (l)=>{\n    throw TypeError(l);\n};\nvar Ye = (l, r, h)=>r in l ? He(l, r, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: h\n    }) : l[r] = h;\nvar R = (l, r, h)=>Ye(l, typeof r != \"symbol\" ? r + \"\" : r, h), _e = (l, r, h)=>r.has(l) || pe(\"Cannot \" + h);\nvar m = (l, r, h)=>(_e(l, r, \"read from private field\"), h ? h.call(l) : r.get(l)), A = (l, r, h)=>r.has(l) ? pe(\"Cannot add the same private member more than once\") : r instanceof WeakSet ? r.add(l) : r.set(l, h), E = (l, r, h, a)=>(_e(l, r, \"write to private field\"), a ? a.call(l, h) : r.set(l, h), h);\nfunction Ve(l) {\n    return document.createElement(l);\n}\nfunction We(l, r) {\n    const h = Ve(\"pre\");\n    h.style.cssText = `margin: 0; ${r}; visibility: hidden; position: fixed;`, h.textContent = l, document.body.appendChild(h);\n    const { width: a, height: f } = h.getBoundingClientRect();\n    h.remove(), h.style.visibility = \"visible\";\n    const d = new Image();\n    d.width = a, d.height = f;\n    const p = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${a}\" height=\"${f}\">\n    <foreignObject width=\"100%\" height=\"100%\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">${h.outerHTML}</div>\n    </foreignObject>\n    </svg>\n  `.replace(/\\t/g, \"\").replace(/#/g, \"%23\");\n    return d.src = `data:image/svg+xml;charset=utf-8,${p}`, d;\n}\nasync function tn(l, r) {\n    const h = We(l, r);\n    await new Promise((d)=>{\n        h.onload = d;\n    });\n    const a = new OffscreenCanvas(h.width, h.height), f = a.getContext(\"2d\");\n    return f == null || f.drawImage(h, 0, 0, h.width, h.height), await createImageBitmap(a);\n}\nvar Be = (l)=>{\n    throw TypeError(l);\n}, Fe = (l, r, h)=>r.has(l) || Be(\"Cannot \" + h), I = (l, r, h)=>(Fe(l, r, \"read from private field\"), h ? h.call(l) : r.get(l)), N = (l, r, h)=>r.has(l) ? Be(\"Cannot add the same private member more than once\") : r instanceof WeakSet ? r.add(l) : r.set(l, h), M = (l, r, h, a)=>(Fe(l, r, \"write to private field\"), r.set(l, h), h);\nconst Ie = \"KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHUobil7aWYobj09PSIvIilyZXR1cm57cGFyZW50Om51bGwsbmFtZToiIn07Y29uc3QgZT1uLnNwbGl0KCIvIikuZmlsdGVyKGk9PmkubGVuZ3RoPjApO2lmKGUubGVuZ3RoPT09MCl0aHJvdyBFcnJvcigiSW52YWxpZCBwYXRoIik7Y29uc3QgYT1lW2UubGVuZ3RoLTFdLHI9Ii8iK2Uuc2xpY2UoMCwtMSkuam9pbigiLyIpO3JldHVybntuYW1lOmEscGFyZW50OnJ9fWFzeW5jIGZ1bmN0aW9uIHcobixlKXtjb25zdHtwYXJlbnQ6YSxuYW1lOnJ9PXUobik7aWYoYT09bnVsbClyZXR1cm4gYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KCk7Y29uc3QgaT1hLnNwbGl0KCIvIikuZmlsdGVyKHQ9PnQubGVuZ3RoPjApO3RyeXtsZXQgdD1hd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5nZXREaXJlY3RvcnkoKTtmb3IoY29uc3QgcyBvZiBpKXQ9YXdhaXQgdC5nZXREaXJlY3RvcnlIYW5kbGUocyx7Y3JlYXRlOmUuY3JlYXRlfSk7aWYoZS5pc0ZpbGUpcmV0dXJuIGF3YWl0IHQuZ2V0RmlsZUhhbmRsZShyLHtjcmVhdGU6ZS5jcmVhdGV9KX1jYXRjaCh0KXtpZih0Lm5hbWU9PT0iTm90Rm91bmRFcnJvciIpcmV0dXJuIG51bGw7dGhyb3cgdH19Y29uc3QgZj17fTtzZWxmLm9ubWVzc2FnZT1hc3luYyBuPT57dmFyIGk7Y29uc3R7ZXZ0VHlwZTplLGFyZ3M6YX09bi5kYXRhO2xldCByPWZbYS5maWxlSWRdO3RyeXtsZXQgdDtjb25zdCBzPVtdO2lmKGU9PT0icmVnaXN0ZXIiKXtjb25zdCBsPWF3YWl0IHcoYS5maWxlUGF0aCx7Y3JlYXRlOiEwLGlzRmlsZTohMH0pO2lmKGw9PW51bGwpdGhyb3cgRXJyb3IoYG5vdCBmb3VuZCBmaWxlOiAke2EuZmlsZUlkfWApO3I9YXdhaXQgbC5jcmVhdGVTeW5jQWNjZXNzSGFuZGxlKHttb2RlOmEubW9kZX0pLGZbYS5maWxlSWRdPXJ9ZWxzZSBpZihlPT09ImNsb3NlIilhd2FpdCByLmNsb3NlKCksZGVsZXRlIGZbYS5maWxlSWRdO2Vsc2UgaWYoZT09PSJ0cnVuY2F0ZSIpYXdhaXQgci50cnVuY2F0ZShhLm5ld1NpemUpO2Vsc2UgaWYoZT09PSJ3cml0ZSIpe2NvbnN0e2RhdGE6bCxvcHRzOm99PW4uZGF0YS5hcmdzO3Q9YXdhaXQgci53cml0ZShsLG8pfWVsc2UgaWYoZT09PSJyZWFkIil7Y29uc3R7b2Zmc2V0Omwsc2l6ZTpvfT1uLmRhdGEuYXJncyxnPW5ldyBVaW50OEFycmF5KG8pLGQ9YXdhaXQgci5yZWFkKGcse2F0Omx9KSxjPWcuYnVmZmVyO3Q9ZD09PW8/YzooKGk9Yy50cmFuc2Zlcik9PW51bGw/dm9pZCAwOmkuY2FsbChjLGQpKT8/Yy5zbGljZSgwLGQpLHMucHVzaCh0KX1lbHNlIGU9PT0iZ2V0U2l6ZSI/dD1hd2FpdCByLmdldFNpemUoKTplPT09ImZsdXNoIiYmYXdhaXQgci5mbHVzaCgpO3NlbGYucG9zdE1lc3NhZ2Uoe2V2dFR5cGU6ImNhbGxiYWNrIixjYklkOm4uZGF0YS5jYklkLHJldHVyblZhbDp0fSxzKX1jYXRjaCh0KXtjb25zdCBzPXQ7c2VsZi5wb3N0TWVzc2FnZSh7ZXZ0VHlwZToidGhyb3dFcnJvciIsY2JJZDpuLmRhdGEuY2JJZCxlcnJNc2c6cy5uYW1lKyI6ICIrcy5tZXNzYWdlK2AKYCtKU09OLnN0cmluZ2lmeShuLmRhdGEpfSl9fX0pKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZnMtd29ya2VyLUY0UldscWNfLmpzLm1hcAo=\", Ze = (l)=>Uint8Array.from(atob(l), (r)=>r.charCodeAt(0)), ge = typeof self < \"u\" && self.Blob && new Blob([\n    Ze(Ie)\n], {\n    type: \"text/javascript;charset=utf-8\"\n});\nfunction Xe(l) {\n    let r;\n    try {\n        if (r = ge && (self.URL || self.webkitURL).createObjectURL(ge), !r) throw \"\";\n        const h = new Worker(r, {\n            name: l == null ? void 0 : l.name\n        });\n        return h.addEventListener(\"error\", ()=>{\n            (self.URL || self.webkitURL).revokeObjectURL(r);\n        }), h;\n    } catch  {\n        return new Worker(\"data:text/javascript;base64,\" + Ie, {\n            name: l == null ? void 0 : l.name\n        });\n    } finally{\n        r && (self.URL || self.webkitURL).revokeObjectURL(r);\n    }\n}\nasync function je(l, r, h) {\n    const a = Ke();\n    return await a(\"register\", {\n        fileId: l,\n        filePath: r,\n        mode: h\n    }), {\n        read: async (f, d)=>await a(\"read\", {\n                fileId: l,\n                offset: f,\n                size: d\n            }),\n        write: async (f, d)=>await a(\"write\", {\n                fileId: l,\n                data: f,\n                opts: d\n            }, [\n                ArrayBuffer.isView(f) ? f.buffer : f\n            ]),\n        close: async ()=>await a(\"close\", {\n                fileId: l\n            }),\n        truncate: async (f)=>await a(\"truncate\", {\n                fileId: l,\n                newSize: f\n            }),\n        getSize: async ()=>await a(\"getSize\", {\n                fileId: l\n            }),\n        flush: async ()=>await a(\"flush\", {\n                fileId: l\n            })\n    };\n}\nconst Yt = [];\nlet ie = 0;\nfunction Ke() {\n    if (Yt.length < 3) {\n        const r = l();\n        return Yt.push(r), r;\n    } else {\n        const r = Yt[ie];\n        return ie = (ie + 1) % Yt.length, r;\n    }\n    function l() {\n        const r = new Xe();\n        let h = 0, a = {};\n        return r.onmessage = ({ data: f })=>{\n            var d, p;\n            f.evtType === \"callback\" ? (d = a[f.cbId]) == null || d.resolve(f.returnVal) : f.evtType === \"throwError\" && ((p = a[f.cbId]) == null || p.reject(Error(f.errMsg))), delete a[f.cbId];\n        }, async function(f, d, p = []) {\n            h += 1;\n            const n = new Promise((v, b)=>{\n                a[h] = {\n                    resolve: v,\n                    reject: b\n                };\n            });\n            return r.postMessage({\n                cbId: h,\n                evtType: f,\n                args: d\n            }, p), n;\n        };\n    }\n}\nfunction te(l) {\n    if (l === \"/\") return {\n        parent: null,\n        name: \"\"\n    };\n    const r = l.split(\"/\").filter((f)=>f.length > 0);\n    if (r.length === 0) throw Error(\"Invalid path\");\n    const h = r[r.length - 1], a = \"/\" + r.slice(0, -1).join(\"/\");\n    return {\n        name: h,\n        parent: a\n    };\n}\nasync function ot(l, r) {\n    const { parent: h, name: a } = te(l);\n    if (h == null) return await navigator.storage.getDirectory();\n    const f = h.split(\"/\").filter((d)=>d.length > 0);\n    try {\n        let d = await navigator.storage.getDirectory();\n        for (const p of f)d = await d.getDirectoryHandle(p, {\n            create: r.create\n        });\n        return r.isFile ? await d.getFileHandle(a, {\n            create: r.create\n        }) : await d.getDirectoryHandle(a, {\n            create: r.create\n        });\n    } catch (d) {\n        if (d.name === \"NotFoundError\") return null;\n        throw d;\n    }\n}\nasync function Ce(l) {\n    const { parent: r, name: h } = te(l);\n    if (r == null) {\n        const f = await navigator.storage.getDirectory();\n        for await (const d of f.keys())await f.removeEntry(d, {\n            recursive: !0\n        });\n        return;\n    }\n    const a = await ot(r, {\n        create: !1,\n        isFile: !1\n    });\n    a != null && await a.removeEntry(h, {\n        recursive: !0\n    });\n}\nfunction se(l, r) {\n    return `${l}/${r}`.replace(\"//\", \"/\");\n}\nfunction vt(l) {\n    return new ze(l);\n}\nvar H, Vt, At;\nclass ze {\n    constructor(r){\n        N(this, H), N(this, Vt), N(this, At), M(this, H, r);\n        const { parent: h, name: a } = te(r);\n        M(this, Vt, a), M(this, At, h);\n    }\n    get kind() {\n        return \"dir\";\n    }\n    get name() {\n        return I(this, Vt);\n    }\n    get path() {\n        return I(this, H);\n    }\n    get parent() {\n        return I(this, At) == null ? null : vt(I(this, At));\n    }\n    /**\n   * Creates the directory.\n   * return A promise that resolves when the directory is created.\n   */ async create() {\n        return await ot(I(this, H), {\n            create: !0,\n            isFile: !1\n        }), vt(I(this, H));\n    }\n    /**\n   * Checks if the directory exists.\n   * return A promise that resolves to true if the directory exists, otherwise false.\n   */ async exists() {\n        return await ot(I(this, H), {\n            create: !1,\n            isFile: !1\n        }) instanceof FileSystemDirectoryHandle;\n    }\n    /**\n   * Removes the directory.\n   * return A promise that resolves when the directory is removed.\n   */ async remove() {\n        for (const r of (await this.children()))try {\n            await r.remove();\n        } catch (h) {\n            console.warn(h);\n        }\n        try {\n            await Ce(I(this, H));\n        } catch (r) {\n            console.warn(r);\n        }\n    }\n    /**\n   * Retrieves the children of the directory.\n   * return A promise that resolves to an array of objects representing the children.\n   */ async children() {\n        const r = await ot(I(this, H), {\n            create: !1,\n            isFile: !1\n        });\n        if (r == null) return [];\n        const h = [];\n        for await (const a of r.values())h.push((a.kind === \"file\" ? _t : vt)(se(I(this, H), a.name)));\n        return h;\n    }\n    /**\n   * If the dest folder exists, copy the current directory into the dest folder;\n   * if the dest folder does not exist, rename the current directory to dest name.\n   */ async copyTo(r) {\n        if (!await this.exists()) throw Error(`dir ${this.path} not exists`);\n        const h = await r.exists() ? vt(se(r.path, this.name)) : r;\n        return await h.create(), await Promise.all((await this.children()).map((a)=>a.copyTo(h))), h;\n    }\n    /**\n   * move directory, copy then remove current\n   */ async moveTo(r) {\n        const h = await this.copyTo(r);\n        return await this.remove(), h;\n    }\n}\nH = /* @__PURE__ */ new WeakMap(), Vt = /* @__PURE__ */ new WeakMap(), At = /* @__PURE__ */ new WeakMap();\nconst ye = /* @__PURE__ */ new Map();\nfunction _t(l, r = \"rw\") {\n    if (r === \"rw\") {\n        const h = ye.get(l) ?? new jt(l, r);\n        return ye.set(l, h), h;\n    }\n    return new jt(l, r);\n}\nasync function Ct(l, r, h = {\n    overwrite: !0\n}) {\n    if (r instanceof jt) {\n        await Ct(l, await r.stream(), h);\n        return;\n    }\n    const a = await (l instanceof jt ? l : _t(l, \"rw\")).createWriter();\n    try {\n        if (h.overwrite && await a.truncate(0), r instanceof ReadableStream) {\n            const f = r.getReader();\n            for(;;){\n                const { done: d, value: p } = await f.read();\n                if (d) break;\n                await a.write(p);\n            }\n        } else await a.write(r);\n    } catch (f) {\n        throw f;\n    } finally{\n        await a.close();\n    }\n}\nlet Qe = 0;\nconst Je = ()=>++Qe;\nvar Y, Bt, Wt, Ft, Zt, it, Xt, It;\nconst $e = class Te {\n    constructor(r, h){\n        N(this, Y), N(this, Bt), N(this, Wt), N(this, Ft), N(this, Zt), N(this, it, 0), N(this, Xt, /* @__PURE__ */ (()=>{\n            let d = null;\n            return ()=>(M(this, it, I(this, it) + 1), d ?? (d = new Promise(async (p, n)=>{\n                    try {\n                        const v = await je(I(this, Zt), I(this, Y), I(this, Ft));\n                        p([\n                            v,\n                            async ()=>{\n                                M(this, it, I(this, it) - 1), !(I(this, it) > 0) && (d = null, await v.close());\n                            }\n                        ]);\n                    } catch (v) {\n                        n(v);\n                    }\n                })));\n        })()), N(this, It, !1), M(this, Zt, Je()), M(this, Y, r), M(this, Ft, {\n            r: \"read-only\",\n            rw: \"readwrite\",\n            \"rw-unsafe\": \"readwrite-unsafe\"\n        }[h]);\n        const { parent: a, name: f } = te(r);\n        M(this, Wt, f), M(this, Bt, a);\n    }\n    get kind() {\n        return \"file\";\n    }\n    get path() {\n        return I(this, Y);\n    }\n    get name() {\n        return I(this, Wt);\n    }\n    get parent() {\n        return I(this, Bt) == null ? null : vt(I(this, Bt));\n    }\n    /**\n   * Random write to file\n   */ async createWriter() {\n        if (I(this, Ft) === \"read-only\") throw Error(\"file is read-only\");\n        if (I(this, It)) throw Error(\"Other writer have not been closed\");\n        M(this, It, !0);\n        const r = new TextEncoder(), [h, a] = await I(this, Xt).call(this);\n        let f = await h.getSize(), d = !1;\n        return {\n            write: async (p, n = {})=>{\n                if (d) throw Error(\"Writer is closed\");\n                const v = typeof p == \"string\" ? r.encode(p) : p, b = n.at ?? f, y = v.byteLength;\n                return f = b + y, await h.write(v, {\n                    at: b\n                });\n            },\n            truncate: async (p)=>{\n                if (d) throw Error(\"Writer is closed\");\n                await h.truncate(p), f > p && (f = p);\n            },\n            flush: async ()=>{\n                if (d) throw Error(\"Writer is closed\");\n                await h.flush();\n            },\n            close: async ()=>{\n                if (d) throw Error(\"Writer is closed\");\n                d = !0, M(this, It, !1), await a();\n            }\n        };\n    }\n    /**\n   * Random access to file\n   */ async createReader() {\n        const [r, h] = await I(this, Xt).call(this);\n        let a = !1, f = 0;\n        return {\n            read: async (d, p = {})=>{\n                if (a) throw Error(\"Reader is closed\");\n                const n = p.at ?? f, v = await r.read(n, d);\n                return f = n + v.byteLength, v;\n            },\n            getSize: async ()=>{\n                if (a) throw Error(\"Reader is closed\");\n                return await r.getSize();\n            },\n            close: async ()=>{\n                a || (a = !0, await h());\n            }\n        };\n    }\n    async text() {\n        return new TextDecoder().decode(await this.arrayBuffer());\n    }\n    async arrayBuffer() {\n        const r = await ot(I(this, Y), {\n            create: !1,\n            isFile: !0\n        });\n        return r == null ? new ArrayBuffer(0) : (await r.getFile()).arrayBuffer();\n    }\n    async stream() {\n        const r = await this.getOriginFile();\n        return r == null ? new ReadableStream({\n            pull: (h)=>{\n                h.close();\n            }\n        }) : r.stream();\n    }\n    async getOriginFile() {\n        var r;\n        return (r = await ot(I(this, Y), {\n            create: !1,\n            isFile: !0\n        })) == null ? void 0 : r.getFile();\n    }\n    async getSize() {\n        const r = await ot(I(this, Y), {\n            create: !1,\n            isFile: !0\n        });\n        return r == null ? 0 : (await r.getFile()).size;\n    }\n    async exists() {\n        return await ot(I(this, Y), {\n            create: !1,\n            isFile: !0\n        }) instanceof FileSystemFileHandle;\n    }\n    async remove() {\n        if (I(this, it)) throw Error(\"exists unclosed reader/writer\");\n        await Ce(I(this, Y));\n    }\n    /**\n   * If the target is a file, use current overwrite the target;\n   * if the target is a folder, copy the current file into that folder.\n   */ async copyTo(r) {\n        if (!await this.exists()) throw Error(`file ${this.path} not exists`);\n        if (r instanceof Te) return _t(r.path) === this ? this : (await Ct(r.path, this), _t(r.path));\n        if (r instanceof ze) return await this.copyTo(_t(se(r.path, this.name)));\n        throw Error(\"Illegal target type\");\n    }\n    /**\n   * move file, copy then remove current\n   */ async moveTo(r) {\n        const h = await this.copyTo(r);\n        return await this.remove(), h;\n    }\n};\nY = /* @__PURE__ */ new WeakMap(), Bt = /* @__PURE__ */ new WeakMap(), Wt = /* @__PURE__ */ new WeakMap(), Ft = /* @__PURE__ */ new WeakMap(), Zt = /* @__PURE__ */ new WeakMap(), it = /* @__PURE__ */ new WeakMap(), Xt = /* @__PURE__ */ new WeakMap(), It = /* @__PURE__ */ new WeakMap();\nlet jt = $e;\nconst he = \"/.opfs-tools-temp-dir\";\nasync function Pe(l) {\n    try {\n        if (l.kind === \"file\") {\n            if (!await l.exists()) return !0;\n            const r = await l.createWriter();\n            await r.truncate(0), await r.close(), await l.remove();\n        } else await l.remove();\n        return !0;\n    } catch (r) {\n        return console.warn(r), !1;\n    }\n}\nfunction qe() {\n    setInterval(async ()=>{\n        for (const l of (await vt(he).children())){\n            const r = /^\\d+-(\\d+)$/.exec(l.name);\n            (r == null || Date.now() - Number(r[1]) > 2592e5) && await Pe(l);\n        }\n    }, 60 * 1e3);\n}\nconst re = [];\nlet me = !1;\nasync function ti() {\n    if (globalThis.localStorage == null) return;\n    const l = \"OPFS_TOOLS_EXPIRES_TMP_FILES\";\n    me || (me = !0, globalThis.addEventListener(\"unload\", ()=>{\n        re.length !== 0 && localStorage.setItem(l, `${localStorage.getItem(l) ?? \"\"},${re.join(\",\")}`);\n    }));\n    let r = localStorage.getItem(l) ?? \"\";\n    for (const h of r.split(\",\"))h.length !== 0 && await Pe(_t(`${he}/${h}`)) && (r = r.replace(h, \"\"));\n    localStorage.setItem(l, r.replace(/,{2,}/g, \",\"));\n}\n(async function() {\n    var l;\n    globalThis.__opfs_tools_tmpfile_init__ !== !0 && (globalThis.__opfs_tools_tmpfile_init__ = !0, !(globalThis.FileSystemDirectoryHandle == null || globalThis.FileSystemFileHandle == null || ((l = globalThis.navigator) == null ? void 0 : l.storage.getDirectory) == null) && (qe(), await ti()));\n})();\nfunction Kt() {\n    const l = `${Math.random().toString().slice(2)}-${Date.now()}`;\n    return re.push(l), _t(`${he}/${l}`);\n}\nfunction ei(l) {\n    return l instanceof Error ? String(l) : typeof l == \"object\" ? JSON.stringify(l, (r, h)=>h instanceof Error ? String(h) : h) : String(l);\n}\nfunction ii() {\n    const l = /* @__PURE__ */ new Date();\n    return `${l.getHours()}:${l.getMinutes()}:${l.getSeconds()}.${l.getMilliseconds()}`;\n}\nlet Le = 1;\nconst ke = Kt();\nlet gt = null;\nconst ve = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\"\n].reduce((l, r, h)=>Object.assign(l, {\n        [r]: (...a)=>{\n            Le <= h && (console[r](...a), gt == null || gt.write(`[${r}][${ii()}]  ${a.map((f)=>ei(f)).join(\" \")}\n`));\n        }\n    }), {}), Gt = /* @__PURE__ */ new Map(), z = {\n    setLogLevel: (l)=>{\n        Le = Gt.get(l) ?? 1;\n    },\n    ...ve,\n    create: (l)=>Object.fromEntries(Object.entries(ve).map(([r, h])=>[\n                r,\n                (...a)=>h(l, ...a)\n            ])),\n    async dump () {\n        return await si, await (gt == null ? void 0 : gt.flush()), await ke.text();\n    }\n};\nGt.set(z.debug, 0);\nGt.set(z.info, 1);\nGt.set(z.warn, 2);\nGt.set(z.error, 3);\nasync function ni() {\n    try {\n        gt = await ke.createWriter(), z.info(navigator.userAgent), z.info(\"date: \" + /* @__PURE__ */ new Date().toLocaleDateString());\n    } catch (l) {\n        if (!(l instanceof Error)) throw l;\n        if (l.message.includes(\"createSyncAccessHandle is not a function\")) console.warn(l);\n        else throw l;\n    }\n}\nconst si = globalThis.navigator == null ? null : ni(), ri = ()=>{\n    let l, r = 16.6;\n    self.onmessage = (h)=>{\n        h.data.event === \"start\" && (self.clearInterval(l), l = self.setInterval(()=>{\n            self.postMessage({});\n        }, r)), h.data.event === \"stop\" && self.clearInterval(l);\n    };\n}, ai = ()=>{\n    const l = new Blob([\n        `(${ri.toString()})()`\n    ]), r = URL.createObjectURL(l);\n    return new Worker(r);\n}, mt = /* @__PURE__ */ new Map();\nlet ae = 1, nt = null;\nglobalThis.Worker != null && (nt = ai(), nt.onmessage = ()=>{\n    ae += 1;\n    for (const [l, r] of mt)if (ae % l === 0) for (const h of r)h();\n});\nconst De = (l, r)=>{\n    const h = Math.round(r / 16.6), a = mt.get(h) ?? /* @__PURE__ */ new Set();\n    return a.add(l), mt.set(h, a), mt.size === 1 && a.size === 1 && (nt == null || nt.postMessage({\n        event: \"start\"\n    })), ()=>{\n        a.delete(l), a.size === 0 && mt.delete(h), mt.size === 0 && (ae = 0, nt == null || nt.postMessage({\n            event: \"stop\"\n        }));\n    };\n};\nclass oi {\n    /**\n   * @param {number} scaleFrom the length of the original array.\n   * @param {number} scaleTo The length of the new array.\n   * @param {?Object} details The extra configuration, if needed.\n   */ constructor(r, h, a){\n        this.length_ = r, this.scaleFactor_ = (r - 1) / h, this.interpolate = this.cubic, a.method === \"point\" ? this.interpolate = this.point : a.method === \"linear\" ? this.interpolate = this.linear : a.method === \"sinc\" && (this.interpolate = this.sinc), this.tangentFactor_ = 1 - Math.max(0, Math.min(1, a.tension || 0)), this.sincFilterSize_ = a.sincFilterSize || 1, this.kernel_ = li(a.sincWindow || hi);\n    }\n    /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */ point(r, h) {\n        return this.getClippedInput_(Math.round(this.scaleFactor_ * r), h);\n    }\n    /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */ linear(r, h) {\n        r = this.scaleFactor_ * r;\n        let a = Math.floor(r);\n        return r -= a, (1 - r) * this.getClippedInput_(a, h) + r * this.getClippedInput_(a + 1, h);\n    }\n    /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */ cubic(r, h) {\n        r = this.scaleFactor_ * r;\n        let a = Math.floor(r), f = [\n            this.getTangent_(a, h),\n            this.getTangent_(a + 1, h)\n        ], d = [\n            this.getClippedInput_(a, h),\n            this.getClippedInput_(a + 1, h)\n        ];\n        r -= a;\n        let p = r * r, n = r * p;\n        return (2 * n - 3 * p + 1) * d[0] + (n - 2 * p + r) * f[0] + (-2 * n + 3 * p) * d[1] + (n - p) * f[1];\n    }\n    /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */ sinc(r, h) {\n        r = this.scaleFactor_ * r;\n        let a = Math.floor(r), f = a - this.sincFilterSize_ + 1, d = a + this.sincFilterSize_, p = 0;\n        for(let n = f; n <= d; n++)p += this.kernel_(r - n) * this.getClippedInput_(n, h);\n        return p;\n    }\n    /**\n   * @param {number} k The scaled index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The tangent.\n   * @private\n   */ getTangent_(r, h) {\n        return this.tangentFactor_ * (this.getClippedInput_(r + 1, h) - this.getClippedInput_(r - 1, h)) / 2;\n    }\n    /**\n   * @param {number} t The scaled index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   * @private\n   */ getClippedInput_(r, h) {\n        return 0 <= r && r < this.length_ ? h[r] : 0;\n    }\n}\nfunction hi(l) {\n    return Math.exp(-l / 2 * l / 2);\n}\nfunction li(l) {\n    return function(r) {\n        return fi(r) * l(r);\n    };\n}\nfunction fi(l) {\n    return l === 0 ? 1 : Math.sin(Math.PI * l) / (Math.PI * l);\n}\nclass di {\n    /**\n   * @param {number} order The order of the filter.\n   * @param {number} sampleRate The sample rate.\n   * @param {number} cutOff The cut off frequency.\n   */ constructor(r, h, a){\n        let f = 2 * Math.PI * a / h, d = 0;\n        this.filters = [];\n        for(let p = 0; p <= r; p++)p - r / 2 === 0 ? this.filters[p] = f : (this.filters[p] = Math.sin(f * (p - r / 2)) / (p - r / 2), this.filters[p] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * p / r)), d = d + this.filters[p];\n        for(let p = 0; p <= r; p++)this.filters[p] /= d;\n        this.z = this.initZ_();\n    }\n    /**\n   * @param {number} sample A sample of a sequence.\n   * @return {number}\n   */ filter(r) {\n        this.z.buf[this.z.pointer] = r;\n        let h = 0;\n        for(let a = 0, f = this.z.buf.length; a < f; a++)h += this.filters[a] * this.z.buf[(this.z.pointer + a) % this.z.buf.length];\n        return this.z.pointer = (this.z.pointer + 1) % this.z.buf.length, h;\n    }\n    /**\n   * Reset the filter.\n   */ reset() {\n        this.z = this.initZ_();\n    }\n    /**\n   * Return the default value for z.\n   * @private\n   */ initZ_() {\n        let r = [];\n        for(let h = 0; h < this.filters.length - 1; h++)r.push(0);\n        return {\n            buf: r,\n            pointer: 0\n        };\n    }\n}\nclass ci {\n    /**\n   * @param {number} order The order of the filter.\n   * @param {number} sampleRate The sample rate.\n   * @param {number} cutOff The cut off frequency.\n   */ constructor(r, h, a){\n        let f = [];\n        for(let d = 0; d < r; d++)f.push(this.getCoeffs_({\n            Fs: h,\n            Fc: a,\n            Q: 0.5 / Math.sin(Math.PI / (r * 2) * (d + 0.5))\n        }));\n        this.stages = [];\n        for(let d = 0; d < f.length; d++)this.stages[d] = {\n            b0: f[d].b[0],\n            b1: f[d].b[1],\n            b2: f[d].b[2],\n            a1: f[d].a[0],\n            a2: f[d].a[1],\n            k: f[d].k,\n            z: [\n                0,\n                0\n            ]\n        };\n    }\n    /**\n   * @param {number} sample A sample of a sequence.\n   * @return {number}\n   */ filter(r) {\n        let h = r;\n        for(let a = 0, f = this.stages.length; a < f; a++)h = this.runStage_(a, h);\n        return h;\n    }\n    getCoeffs_(r) {\n        let h = {};\n        h.z = [\n            0,\n            0\n        ], h.a = [], h.b = [];\n        let a = this.preCalc_(r, h);\n        return h.k = 1, h.b.push((1 - a.cw) / (2 * a.a0)), h.b.push(2 * h.b[0]), h.b.push(h.b[0]), h;\n    }\n    preCalc_(r, h) {\n        let a = {}, f = 2 * Math.PI * r.Fc / r.Fs;\n        return a.alpha = Math.sin(f) / (2 * r.Q), a.cw = Math.cos(f), a.a0 = 1 + a.alpha, h.a0 = a.a0, h.a.push(-2 * a.cw / a.a0), h.k = 1, h.a.push((1 - a.alpha) / a.a0), a;\n    }\n    runStage_(r, h) {\n        let a = h * this.stages[r].k - this.stages[r].a1 * this.stages[r].z[0] - this.stages[r].a2 * this.stages[r].z[1], f = this.stages[r].b0 * a + this.stages[r].b1 * this.stages[r].z[0] + this.stages[r].b2 * this.stages[r].z[1];\n        return this.stages[r].z[1] = this.stages[r].z[0], this.stages[r].z[0] = a, f;\n    }\n    /**\n   * Reset the filter.\n   */ reset() {\n        for(let r = 0; r < this.stages.length; r++)this.stages[r].z = [\n            0,\n            0\n        ];\n    }\n}\nconst ui = {\n    point: !1,\n    linear: !1,\n    cubic: !0,\n    sinc: !0\n}, we = {\n    IIR: 16,\n    FIR: 71\n}, pi = {\n    IIR: ci,\n    FIR: di\n};\nfunction _i(l, r, h, a = {}) {\n    let f = (h - r) / r + 1, d = new Float64Array(l.length * f);\n    a.method = a.method || \"cubic\";\n    let p = new oi(l.length, d.length, {\n        method: a.method,\n        tension: a.tension || 0,\n        sincFilterSize: a.sincFilterSize || 6,\n        sincWindow: a.sincWindow || void 0\n    });\n    if (a.LPF === void 0 && (a.LPF = ui[a.method]), a.LPF) {\n        a.LPFType = a.LPFType || \"IIR\";\n        const n = pi[a.LPFType];\n        if (h > r) {\n            let v = new n(a.LPFOrder || we[a.LPFType], h, r / 2);\n            gi(l, d, p, v);\n        } else {\n            let v = new n(a.LPFOrder || we[a.LPFType], r, h / 2);\n            yi(l, d, p, v);\n        }\n    } else Re(l, d, p);\n    return d;\n}\nfunction Re(l, r, h) {\n    for(let a = 0, f = r.length; a < f; a++)r[a] = h.interpolate(a, l);\n}\nfunction gi(l, r, h, a) {\n    for(let f = 0, d = r.length; f < d; f++)r[f] = a.filter(h.interpolate(f, l));\n    a.reset();\n    for(let f = r.length - 1; f >= 0; f--)r[f] = a.filter(r[f]);\n}\nfunction yi(l, r, h, a) {\n    for(let f = 0, d = l.length; f < d; f++)l[f] = a.filter(l[f]);\n    a.reset();\n    for(let f = l.length - 1; f >= 0; f--)l[f] = a.filter(l[f]);\n    Re(l, r, h);\n}\nfunction Me(l) {\n    const r = new Float32Array(l.map((a)=>a.length).reduce((a, f)=>a + f));\n    let h = 0;\n    for (const a of l)r.set(a, h), h += a.length;\n    return r;\n}\nfunction mi(l) {\n    const r = [];\n    for(let h = 0; h < l.length; h += 1)for(let a = 0; a < l[h].length; a += 1)r[a] == null && (r[a] = []), r[a].push(l[h][a]);\n    return r.map(Me);\n}\nfunction le(l) {\n    if (l.format === \"f32-planar\") {\n        const r = [];\n        for(let h = 0; h < l.numberOfChannels; h += 1){\n            const a = l.allocationSize({\n                planeIndex: h\n            }), f = new ArrayBuffer(a);\n            l.copyTo(f, {\n                planeIndex: h\n            }), r.push(new Float32Array(f));\n        }\n        return r;\n    } else if (l.format === \"f32\") {\n        const r = new ArrayBuffer(l.allocationSize({\n            planeIndex: 0\n        }));\n        return l.copyTo(r, {\n            planeIndex: 0\n        }), wi(new Float32Array(r), l.numberOfChannels);\n    } else if (l.format === \"s16\") {\n        const r = new ArrayBuffer(l.allocationSize({\n            planeIndex: 0\n        }));\n        return l.copyTo(r, {\n            planeIndex: 0\n        }), vi(new Int16Array(r), l.numberOfChannels);\n    }\n    throw Error(\"Unsupported audio data format\");\n}\nfunction vi(l, r) {\n    const h = l.length / r, a = Array.from({\n        length: r\n    }, ()=>new Float32Array(h));\n    for(let f = 0; f < h; f++)for(let d = 0; d < r; d++){\n        const p = l[f * r + d];\n        a[d][f] = p / 32768;\n    }\n    return a;\n}\nfunction wi(l, r) {\n    const h = l.length / r, a = Array.from({\n        length: r\n    }, ()=>new Float32Array(h));\n    for(let f = 0; f < h; f++)for(let d = 0; d < r; d++)a[d][f] = l[f * r + d];\n    return a;\n}\nfunction Oe(l) {\n    return Array(l.numberOfChannels).fill(0).map((r, h)=>l.getChannelData(h));\n}\nfunction en(l, r) {\n    const h = new Float32Array(Me(le(l))).map((f)=>f * r), a = new AudioData({\n        sampleRate: l.sampleRate,\n        numberOfChannels: l.numberOfChannels,\n        timestamp: l.timestamp,\n        format: l.format,\n        numberOfFrames: l.numberOfFrames,\n        data: h\n    });\n    return l.close(), a;\n}\nasync function nn(l, r) {\n    var p;\n    const h = {\n        type: r,\n        data: l\n    }, a = new ImageDecoder(h);\n    await Promise.all([\n        a.completed,\n        a.tracks.ready\n    ]);\n    let f = ((p = a.tracks.selectedTrack) == null ? void 0 : p.frameCount) ?? 1;\n    const d = [];\n    for(let n = 0; n < f; n += 1)d.push((await a.decode({\n        frameIndex: n\n    })).image);\n    return d;\n}\nfunction be(l) {\n    var a, f;\n    const r = Math.max(...l.map((d)=>{\n        var p;\n        return ((p = d[0]) == null ? void 0 : p.length) ?? 0;\n    })), h = new Float32Array(r * 2);\n    for(let d = 0; d < r; d++){\n        let p = 0, n = 0;\n        for(let v = 0; v < l.length; v++){\n            const b = ((a = l[v][0]) == null ? void 0 : a[d]) ?? 0, y = ((f = l[v][1]) == null ? void 0 : f[d]) ?? b;\n            p += b, n += y;\n        }\n        h[d] = p, h[d + r] = n;\n    }\n    return h;\n}\nasync function bi(l, r, h) {\n    const a = l.length, f = Array(h.chanCount).fill(0).map(()=>new Float32Array(0));\n    if (a === 0) return f;\n    const d = Math.max(...l.map((b)=>b.length));\n    if (d === 0) return f;\n    if (globalThis.OfflineAudioContext == null) return l.map((b)=>new Float32Array(_i(b, r, h.rate, {\n            method: \"sinc\",\n            LPF: !1\n        })));\n    const p = new globalThis.OfflineAudioContext(h.chanCount, d * h.rate / r, h.rate), n = p.createBufferSource(), v = p.createBuffer(a, d, r);\n    return l.forEach((b, y)=>v.copyToChannel(b, y)), n.buffer = v, n.connect(p.destination), n.start(), Oe(await p.startRendering());\n}\nfunction Ne(l) {\n    return new Promise((r)=>{\n        const h = De(()=>{\n            h(), r();\n        }, l);\n    });\n}\nfunction Si(l, r, h) {\n    const a = h - r, f = new Float32Array(a);\n    let d = 0;\n    for(; d < a;)f[d] = l[(r + d) % l.length], d += 1;\n    return f;\n}\nfunction fe(l, r) {\n    let h = !1;\n    async function a() {\n        const f = l.getReader();\n        for(; !h;){\n            const { value: d, done: p } = await f.read();\n            if (p) {\n                r.onDone();\n                return;\n            }\n            await r.onChunk(d);\n        }\n        f.releaseLock(), await l.cancel();\n    }\n    return a().catch(z.error), ()=>{\n        h = !0;\n    };\n}\nfunction xi(l) {\n    return l && l.__esModule && Object.prototype.hasOwnProperty.call(l, \"default\") ? l.default : l;\n}\nvar Ge = {};\n(function(l) {\n    var r = /* @__PURE__ */ function() {\n        var t = /* @__PURE__ */ new Date(), e = 4, i = 3, s = 2, o = 1, c = e, u = {\n            setLogLevel: function(_) {\n                _ == this.debug ? c = o : _ == this.info ? c = s : _ == this.warn ? c = i : (_ == this.error, c = e);\n            },\n            debug: function(_, g) {\n                console.debug === void 0 && (console.debug = console.log), o >= c && console.debug(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n            },\n            log: function(_, g) {\n                this.debug(_.msg);\n            },\n            info: function(_, g) {\n                s >= c && console.info(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n            },\n            warn: function(_, g) {\n                i >= c && console.warn(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n            },\n            error: function(_, g) {\n                e >= c && console.error(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n            }\n        };\n        return u;\n    }();\n    r.getDurationString = function(t, e) {\n        var i;\n        function s(w, S) {\n            for(var U = \"\" + w, C = U.split(\".\"); C[0].length < S;)C[0] = \"0\" + C[0];\n            return C.join(\".\");\n        }\n        t < 0 ? (i = !0, t = -t) : i = !1;\n        var o = e || 1, c = t / o, u = Math.floor(c / 3600);\n        c -= u * 3600;\n        var _ = Math.floor(c / 60);\n        c -= _ * 60;\n        var g = c * 1e3;\n        return c = Math.floor(c), g -= c * 1e3, g = Math.floor(g), (i ? \"-\" : \"\") + u + \":\" + s(_, 2) + \":\" + s(c, 2) + \".\" + s(g, 3);\n    }, r.printRanges = function(t) {\n        var e = t.length;\n        if (e > 0) {\n            for(var i = \"\", s = 0; s < e; s++)s > 0 && (i += \",\"), i += \"[\" + r.getDurationString(t.start(s)) + \",\" + r.getDurationString(t.end(s)) + \"]\";\n            return i;\n        } else return \"(empty)\";\n    }, l.Log = r;\n    var h = function(t) {\n        if (t instanceof ArrayBuffer) this.buffer = t, this.dataview = new DataView(t);\n        else throw \"Needs an array buffer\";\n        this.position = 0;\n    };\n    h.prototype.getPosition = function() {\n        return this.position;\n    }, h.prototype.getEndPosition = function() {\n        return this.buffer.byteLength;\n    }, h.prototype.getLength = function() {\n        return this.buffer.byteLength;\n    }, h.prototype.seek = function(t) {\n        var e = Math.max(0, Math.min(this.buffer.byteLength, t));\n        return this.position = isNaN(e) || !isFinite(e) ? 0 : e, !0;\n    }, h.prototype.isEos = function() {\n        return this.getPosition() >= this.getEndPosition();\n    }, h.prototype.readAnyInt = function(t, e) {\n        var i = 0;\n        if (this.position + t <= this.buffer.byteLength) {\n            switch(t){\n                case 1:\n                    e ? i = this.dataview.getInt8(this.position) : i = this.dataview.getUint8(this.position);\n                    break;\n                case 2:\n                    e ? i = this.dataview.getInt16(this.position) : i = this.dataview.getUint16(this.position);\n                    break;\n                case 3:\n                    if (e) throw \"No method for reading signed 24 bits values\";\n                    i = this.dataview.getUint8(this.position) << 16, i |= this.dataview.getUint8(this.position + 1) << 8, i |= this.dataview.getUint8(this.position + 2);\n                    break;\n                case 4:\n                    e ? i = this.dataview.getInt32(this.position) : i = this.dataview.getUint32(this.position);\n                    break;\n                case 8:\n                    if (e) throw \"No method for reading signed 64 bits values\";\n                    i = this.dataview.getUint32(this.position) << 32, i |= this.dataview.getUint32(this.position + 4);\n                    break;\n                default:\n                    throw \"readInt method not implemented for size: \" + t;\n            }\n            return this.position += t, i;\n        } else throw \"Not enough bytes in buffer\";\n    }, h.prototype.readUint8 = function() {\n        return this.readAnyInt(1, !1);\n    }, h.prototype.readUint16 = function() {\n        return this.readAnyInt(2, !1);\n    }, h.prototype.readUint24 = function() {\n        return this.readAnyInt(3, !1);\n    }, h.prototype.readUint32 = function() {\n        return this.readAnyInt(4, !1);\n    }, h.prototype.readUint64 = function() {\n        return this.readAnyInt(8, !1);\n    }, h.prototype.readString = function(t) {\n        if (this.position + t <= this.buffer.byteLength) {\n            for(var e = \"\", i = 0; i < t; i++)e += String.fromCharCode(this.readUint8());\n            return e;\n        } else throw \"Not enough bytes in buffer\";\n    }, h.prototype.readCString = function() {\n        for(var t = [];;){\n            var e = this.readUint8();\n            if (e !== 0) t.push(e);\n            else break;\n        }\n        return String.fromCharCode.apply(null, t);\n    }, h.prototype.readInt8 = function() {\n        return this.readAnyInt(1, !0);\n    }, h.prototype.readInt16 = function() {\n        return this.readAnyInt(2, !0);\n    }, h.prototype.readInt32 = function() {\n        return this.readAnyInt(4, !0);\n    }, h.prototype.readInt64 = function() {\n        return this.readAnyInt(8, !1);\n    }, h.prototype.readUint8Array = function(t) {\n        for(var e = new Uint8Array(t), i = 0; i < t; i++)e[i] = this.readUint8();\n        return e;\n    }, h.prototype.readInt16Array = function(t) {\n        for(var e = new Int16Array(t), i = 0; i < t; i++)e[i] = this.readInt16();\n        return e;\n    }, h.prototype.readUint16Array = function(t) {\n        for(var e = new Int16Array(t), i = 0; i < t; i++)e[i] = this.readUint16();\n        return e;\n    }, h.prototype.readUint32Array = function(t) {\n        for(var e = new Uint32Array(t), i = 0; i < t; i++)e[i] = this.readUint32();\n        return e;\n    }, h.prototype.readInt32Array = function(t) {\n        for(var e = new Int32Array(t), i = 0; i < t; i++)e[i] = this.readInt32();\n        return e;\n    }, l.MP4BoxStream = h;\n    var a = function(t, e, i) {\n        this._byteOffset = e || 0, t instanceof ArrayBuffer ? this.buffer = t : typeof t == \"object\" ? (this.dataView = t, e && (this._byteOffset += e)) : this.buffer = new ArrayBuffer(t || 0), this.position = 0, this.endianness = i ?? a.LITTLE_ENDIAN;\n    };\n    a.prototype = {}, a.prototype.getPosition = function() {\n        return this.position;\n    }, a.prototype._realloc = function(t) {\n        if (this._dynamicSize) {\n            var e = this._byteOffset + this.position + t, i = this._buffer.byteLength;\n            if (e <= i) {\n                e > this._byteLength && (this._byteLength = e);\n                return;\n            }\n            for(i < 1 && (i = 1); e > i;)i *= 2;\n            var s = new ArrayBuffer(i), o = new Uint8Array(this._buffer), c = new Uint8Array(s, 0, o.length);\n            c.set(o), this.buffer = s, this._byteLength = e;\n        }\n    }, a.prototype._trimAlloc = function() {\n        if (this._byteLength != this._buffer.byteLength) {\n            var t = new ArrayBuffer(this._byteLength), e = new Uint8Array(t), i = new Uint8Array(this._buffer, 0, e.length);\n            e.set(i), this.buffer = t;\n        }\n    }, a.BIG_ENDIAN = !1, a.LITTLE_ENDIAN = !0, a.prototype._byteLength = 0, Object.defineProperty(a.prototype, \"byteLength\", {\n        get: function() {\n            return this._byteLength - this._byteOffset;\n        }\n    }), Object.defineProperty(a.prototype, \"buffer\", {\n        get: function() {\n            return this._trimAlloc(), this._buffer;\n        },\n        set: function(t) {\n            this._buffer = t, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._buffer.byteLength;\n        }\n    }), Object.defineProperty(a.prototype, \"byteOffset\", {\n        get: function() {\n            return this._byteOffset;\n        },\n        set: function(t) {\n            this._byteOffset = t, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._buffer.byteLength;\n        }\n    }), Object.defineProperty(a.prototype, \"dataView\", {\n        get: function() {\n            return this._dataView;\n        },\n        set: function(t) {\n            this._byteOffset = t.byteOffset, this._buffer = t.buffer, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._byteOffset + t.byteLength;\n        }\n    }), a.prototype.seek = function(t) {\n        var e = Math.max(0, Math.min(this.byteLength, t));\n        this.position = isNaN(e) || !isFinite(e) ? 0 : e;\n    }, a.prototype.isEof = function() {\n        return this.position >= this._byteLength;\n    }, a.prototype.mapUint8Array = function(t) {\n        this._realloc(t * 1);\n        var e = new Uint8Array(this._buffer, this.byteOffset + this.position, t);\n        return this.position += t * 1, e;\n    }, a.prototype.readInt32Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 4;\n        var i = new Int32Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readInt16Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 2;\n        var i = new Int16Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readInt8Array = function(t) {\n        t = t ?? this.byteLength - this.position;\n        var e = new Int8Array(t);\n        return a.memcpy(e.buffer, 0, this.buffer, this.byteOffset + this.position, t * e.BYTES_PER_ELEMENT), this.position += e.byteLength, e;\n    }, a.prototype.readUint32Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 4;\n        var i = new Uint32Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readUint16Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 2;\n        var i = new Uint16Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readUint8Array = function(t) {\n        t = t ?? this.byteLength - this.position;\n        var e = new Uint8Array(t);\n        return a.memcpy(e.buffer, 0, this.buffer, this.byteOffset + this.position, t * e.BYTES_PER_ELEMENT), this.position += e.byteLength, e;\n    }, a.prototype.readFloat64Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 8;\n        var i = new Float64Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readFloat32Array = function(t, e) {\n        t = t ?? this.byteLength - this.position / 4;\n        var i = new Float32Array(t);\n        return a.memcpy(i.buffer, 0, this.buffer, this.byteOffset + this.position, t * i.BYTES_PER_ELEMENT), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n    }, a.prototype.readInt32 = function(t) {\n        var e = this._dataView.getInt32(this.position, t ?? this.endianness);\n        return this.position += 4, e;\n    }, a.prototype.readInt16 = function(t) {\n        var e = this._dataView.getInt16(this.position, t ?? this.endianness);\n        return this.position += 2, e;\n    }, a.prototype.readInt8 = function() {\n        var t = this._dataView.getInt8(this.position);\n        return this.position += 1, t;\n    }, a.prototype.readUint32 = function(t) {\n        var e = this._dataView.getUint32(this.position, t ?? this.endianness);\n        return this.position += 4, e;\n    }, a.prototype.readUint16 = function(t) {\n        var e = this._dataView.getUint16(this.position, t ?? this.endianness);\n        return this.position += 2, e;\n    }, a.prototype.readUint8 = function() {\n        var t = this._dataView.getUint8(this.position);\n        return this.position += 1, t;\n    }, a.prototype.readFloat32 = function(t) {\n        var e = this._dataView.getFloat32(this.position, t ?? this.endianness);\n        return this.position += 4, e;\n    }, a.prototype.readFloat64 = function(t) {\n        var e = this._dataView.getFloat64(this.position, t ?? this.endianness);\n        return this.position += 8, e;\n    }, a.endianness = new Int8Array(new Int16Array([\n        1\n    ]).buffer)[0] > 0, a.memcpy = function(t, e, i, s, o) {\n        var c = new Uint8Array(t, e, o), u = new Uint8Array(i, s, o);\n        c.set(u);\n    }, a.arrayToNative = function(t, e) {\n        return e == this.endianness ? t : this.flipArrayEndianness(t);\n    }, a.nativeToEndian = function(t, e) {\n        return this.endianness == e ? t : this.flipArrayEndianness(t);\n    }, a.flipArrayEndianness = function(t) {\n        for(var e = new Uint8Array(t.buffer, t.byteOffset, t.byteLength), i = 0; i < t.byteLength; i += t.BYTES_PER_ELEMENT)for(var s = i + t.BYTES_PER_ELEMENT - 1, o = i; s > o; s--, o++){\n            var c = e[o];\n            e[o] = e[s], e[s] = c;\n        }\n        return t;\n    }, a.prototype.failurePosition = 0, String.fromCharCodeUint8 = function(t) {\n        for(var e = [], i = 0; i < t.length; i++)e[i] = t[i];\n        return String.fromCharCode.apply(null, e);\n    }, a.prototype.readString = function(t, e) {\n        return e == null || e == \"ASCII\" ? String.fromCharCodeUint8.apply(null, [\n            this.mapUint8Array(t ?? this.byteLength - this.position)\n        ]) : new TextDecoder(e).decode(this.mapUint8Array(t));\n    }, a.prototype.readCString = function(t) {\n        var e = this.byteLength - this.position, i = new Uint8Array(this._buffer, this._byteOffset + this.position), s = e;\n        t != null && (s = Math.min(t, e));\n        for(var o = 0; o < s && i[o] !== 0; o++);\n        var c = String.fromCharCodeUint8.apply(null, [\n            this.mapUint8Array(o)\n        ]);\n        return t != null ? this.position += s - o : o != e && (this.position += 1), c;\n    };\n    var f = Math.pow(2, 32);\n    a.prototype.readInt64 = function() {\n        return this.readInt32() * f + this.readUint32();\n    }, a.prototype.readUint64 = function() {\n        return this.readUint32() * f + this.readUint32();\n    }, a.prototype.readInt64 = function() {\n        return this.readUint32() * f + this.readUint32();\n    }, a.prototype.readUint24 = function() {\n        return (this.readUint8() << 16) + (this.readUint8() << 8) + this.readUint8();\n    }, l.DataStream = a, a.prototype.save = function(t) {\n        var e = new Blob([\n            this.buffer\n        ]);\n        if (window.URL && URL.createObjectURL) {\n            var i = window.URL.createObjectURL(e), s = document.createElement(\"a\");\n            document.body.appendChild(s), s.setAttribute(\"href\", i), s.setAttribute(\"download\", t), s.setAttribute(\"target\", \"_self\"), s.click(), window.URL.revokeObjectURL(i);\n        } else throw \"DataStream.save: Can't create object URL.\";\n    }, a.prototype._dynamicSize = !0, Object.defineProperty(a.prototype, \"dynamicSize\", {\n        get: function() {\n            return this._dynamicSize;\n        },\n        set: function(t) {\n            t || this._trimAlloc(), this._dynamicSize = t;\n        }\n    }), a.prototype.shift = function(t) {\n        var e = new ArrayBuffer(this._byteLength - t), i = new Uint8Array(e), s = new Uint8Array(this._buffer, t, i.length);\n        i.set(s), this.buffer = e, this.position -= t;\n    }, a.prototype.writeInt32Array = function(t, e) {\n        if (this._realloc(t.length * 4), t instanceof Int32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapInt32Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeInt32(t[i], e);\n    }, a.prototype.writeInt16Array = function(t, e) {\n        if (this._realloc(t.length * 2), t instanceof Int16Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapInt16Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeInt16(t[i], e);\n    }, a.prototype.writeInt8Array = function(t) {\n        if (this._realloc(t.length * 1), t instanceof Int8Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapInt8Array(t.length);\n        else for(var e = 0; e < t.length; e++)this.writeInt8(t[e]);\n    }, a.prototype.writeUint32Array = function(t, e) {\n        if (this._realloc(t.length * 4), t instanceof Uint32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapUint32Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeUint32(t[i], e);\n    }, a.prototype.writeUint16Array = function(t, e) {\n        if (this._realloc(t.length * 2), t instanceof Uint16Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapUint16Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeUint16(t[i], e);\n    }, a.prototype.writeUint8Array = function(t) {\n        if (this._realloc(t.length * 1), t instanceof Uint8Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapUint8Array(t.length);\n        else for(var e = 0; e < t.length; e++)this.writeUint8(t[e]);\n    }, a.prototype.writeFloat64Array = function(t, e) {\n        if (this._realloc(t.length * 8), t instanceof Float64Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapFloat64Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeFloat64(t[i], e);\n    }, a.prototype.writeFloat32Array = function(t, e) {\n        if (this._realloc(t.length * 4), t instanceof Float32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0) a.memcpy(this._buffer, this.byteOffset + this.position, t.buffer, 0, t.byteLength), this.mapFloat32Array(t.length, e);\n        else for(var i = 0; i < t.length; i++)this.writeFloat32(t[i], e);\n    }, a.prototype.writeInt32 = function(t, e) {\n        this._realloc(4), this._dataView.setInt32(this.position, t, e ?? this.endianness), this.position += 4;\n    }, a.prototype.writeInt16 = function(t, e) {\n        this._realloc(2), this._dataView.setInt16(this.position, t, e ?? this.endianness), this.position += 2;\n    }, a.prototype.writeInt8 = function(t) {\n        this._realloc(1), this._dataView.setInt8(this.position, t), this.position += 1;\n    }, a.prototype.writeUint32 = function(t, e) {\n        this._realloc(4), this._dataView.setUint32(this.position, t, e ?? this.endianness), this.position += 4;\n    }, a.prototype.writeUint16 = function(t, e) {\n        this._realloc(2), this._dataView.setUint16(this.position, t, e ?? this.endianness), this.position += 2;\n    }, a.prototype.writeUint8 = function(t) {\n        this._realloc(1), this._dataView.setUint8(this.position, t), this.position += 1;\n    }, a.prototype.writeFloat32 = function(t, e) {\n        this._realloc(4), this._dataView.setFloat32(this.position, t, e ?? this.endianness), this.position += 4;\n    }, a.prototype.writeFloat64 = function(t, e) {\n        this._realloc(8), this._dataView.setFloat64(this.position, t, e ?? this.endianness), this.position += 8;\n    }, a.prototype.writeUCS2String = function(t, e, i) {\n        i == null && (i = t.length);\n        for(var s = 0; s < t.length && s < i; s++)this.writeUint16(t.charCodeAt(s), e);\n        for(; s < i; s++)this.writeUint16(0);\n    }, a.prototype.writeString = function(t, e, i) {\n        var s = 0;\n        if (e == null || e == \"ASCII\") if (i != null) {\n            var o = Math.min(t.length, i);\n            for(s = 0; s < o; s++)this.writeUint8(t.charCodeAt(s));\n            for(; s < i; s++)this.writeUint8(0);\n        } else for(s = 0; s < t.length; s++)this.writeUint8(t.charCodeAt(s));\n        else this.writeUint8Array(new TextEncoder(e).encode(t.substring(0, i)));\n    }, a.prototype.writeCString = function(t, e) {\n        var i = 0;\n        if (e != null) {\n            var s = Math.min(t.length, e);\n            for(i = 0; i < s; i++)this.writeUint8(t.charCodeAt(i));\n            for(; i < e; i++)this.writeUint8(0);\n        } else {\n            for(i = 0; i < t.length; i++)this.writeUint8(t.charCodeAt(i));\n            this.writeUint8(0);\n        }\n    }, a.prototype.writeStruct = function(t, e) {\n        for(var i = 0; i < t.length; i += 2){\n            var s = t[i + 1];\n            this.writeType(s, e[t[i]], e);\n        }\n    }, a.prototype.writeType = function(t, e, i) {\n        var s;\n        if (typeof t == \"function\") return t(this, e);\n        if (typeof t == \"object\" && !(t instanceof Array)) return t.set(this, e, i);\n        var o = null, c = \"ASCII\", u = this.position;\n        switch(typeof t == \"string\" && /:/.test(t) && (s = t.split(\":\"), t = s[0], o = parseInt(s[1])), typeof t == \"string\" && /,/.test(t) && (s = t.split(\",\"), t = s[0], c = parseInt(s[1])), t){\n            case \"uint8\":\n                this.writeUint8(e);\n                break;\n            case \"int8\":\n                this.writeInt8(e);\n                break;\n            case \"uint16\":\n                this.writeUint16(e, this.endianness);\n                break;\n            case \"int16\":\n                this.writeInt16(e, this.endianness);\n                break;\n            case \"uint32\":\n                this.writeUint32(e, this.endianness);\n                break;\n            case \"int32\":\n                this.writeInt32(e, this.endianness);\n                break;\n            case \"float32\":\n                this.writeFloat32(e, this.endianness);\n                break;\n            case \"float64\":\n                this.writeFloat64(e, this.endianness);\n                break;\n            case \"uint16be\":\n                this.writeUint16(e, a.BIG_ENDIAN);\n                break;\n            case \"int16be\":\n                this.writeInt16(e, a.BIG_ENDIAN);\n                break;\n            case \"uint32be\":\n                this.writeUint32(e, a.BIG_ENDIAN);\n                break;\n            case \"int32be\":\n                this.writeInt32(e, a.BIG_ENDIAN);\n                break;\n            case \"float32be\":\n                this.writeFloat32(e, a.BIG_ENDIAN);\n                break;\n            case \"float64be\":\n                this.writeFloat64(e, a.BIG_ENDIAN);\n                break;\n            case \"uint16le\":\n                this.writeUint16(e, a.LITTLE_ENDIAN);\n                break;\n            case \"int16le\":\n                this.writeInt16(e, a.LITTLE_ENDIAN);\n                break;\n            case \"uint32le\":\n                this.writeUint32(e, a.LITTLE_ENDIAN);\n                break;\n            case \"int32le\":\n                this.writeInt32(e, a.LITTLE_ENDIAN);\n                break;\n            case \"float32le\":\n                this.writeFloat32(e, a.LITTLE_ENDIAN);\n                break;\n            case \"float64le\":\n                this.writeFloat64(e, a.LITTLE_ENDIAN);\n                break;\n            case \"cstring\":\n                this.writeCString(e, o);\n                break;\n            case \"string\":\n                this.writeString(e, c, o);\n                break;\n            case \"u16string\":\n                this.writeUCS2String(e, this.endianness, o);\n                break;\n            case \"u16stringle\":\n                this.writeUCS2String(e, a.LITTLE_ENDIAN, o);\n                break;\n            case \"u16stringbe\":\n                this.writeUCS2String(e, a.BIG_ENDIAN, o);\n                break;\n            default:\n                if (t.length == 3) {\n                    for(var _ = t[1], g = 0; g < e.length; g++)this.writeType(_, e[g]);\n                    break;\n                } else {\n                    this.writeStruct(t, e);\n                    break;\n                }\n        }\n        o != null && (this.position = u, this._realloc(o), this.position = u + o);\n    }, a.prototype.writeUint64 = function(t) {\n        var e = Math.floor(t / f);\n        this.writeUint32(e), this.writeUint32(t & 4294967295);\n    }, a.prototype.writeUint24 = function(t) {\n        this.writeUint8((t & 16711680) >> 16), this.writeUint8((t & 65280) >> 8), this.writeUint8(t & 255);\n    }, a.prototype.adjustUint32 = function(t, e) {\n        var i = this.position;\n        this.seek(t), this.writeUint32(e), this.seek(i);\n    }, a.prototype.mapInt32Array = function(t, e) {\n        this._realloc(t * 4);\n        var i = new Int32Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n    }, a.prototype.mapInt16Array = function(t, e) {\n        this._realloc(t * 2);\n        var i = new Int16Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 2, i;\n    }, a.prototype.mapInt8Array = function(t) {\n        this._realloc(t * 1);\n        var e = new Int8Array(this._buffer, this.byteOffset + this.position, t);\n        return this.position += t * 1, e;\n    }, a.prototype.mapUint32Array = function(t, e) {\n        this._realloc(t * 4);\n        var i = new Uint32Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n    }, a.prototype.mapUint16Array = function(t, e) {\n        this._realloc(t * 2);\n        var i = new Uint16Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 2, i;\n    }, a.prototype.mapFloat64Array = function(t, e) {\n        this._realloc(t * 8);\n        var i = new Float64Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 8, i;\n    }, a.prototype.mapFloat32Array = function(t, e) {\n        this._realloc(t * 4);\n        var i = new Float32Array(this._buffer, this.byteOffset + this.position, t);\n        return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n    };\n    var d = function(t) {\n        this.buffers = [], this.bufferIndex = -1, t && (this.insertBuffer(t), this.bufferIndex = 0);\n    };\n    d.prototype = new a(new ArrayBuffer(), 0, a.BIG_ENDIAN), d.prototype.initialized = function() {\n        var t;\n        return this.bufferIndex > -1 ? !0 : this.buffers.length > 0 ? (t = this.buffers[0], t.fileStart === 0 ? (this.buffer = t, this.bufferIndex = 0, r.debug(\"MultiBufferStream\", \"Stream ready for parsing\"), !0) : (r.warn(\"MultiBufferStream\", \"The first buffer should have a fileStart of 0\"), this.logBufferLevel(), !1)) : (r.warn(\"MultiBufferStream\", \"No buffer to start parsing from\"), this.logBufferLevel(), !1);\n    }, ArrayBuffer.concat = function(t, e) {\n        r.debug(\"ArrayBuffer\", \"Trying to create a new buffer of size: \" + (t.byteLength + e.byteLength));\n        var i = new Uint8Array(t.byteLength + e.byteLength);\n        return i.set(new Uint8Array(t), 0), i.set(new Uint8Array(e), t.byteLength), i.buffer;\n    }, d.prototype.reduceBuffer = function(t, e, i) {\n        var s;\n        return s = new Uint8Array(i), s.set(new Uint8Array(t, e, i)), s.buffer.fileStart = t.fileStart + e, s.buffer.usedBytes = 0, s.buffer;\n    }, d.prototype.insertBuffer = function(t) {\n        for(var e = !0, i = 0; i < this.buffers.length; i++){\n            var s = this.buffers[i];\n            if (t.fileStart <= s.fileStart) {\n                if (t.fileStart === s.fileStart) if (t.byteLength > s.byteLength) {\n                    this.buffers.splice(i, 1), i--;\n                    continue;\n                } else r.warn(\"MultiBufferStream\", \"Buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \") already appended, ignoring\");\n                else t.fileStart + t.byteLength <= s.fileStart || (t = this.reduceBuffer(t, 0, s.fileStart - t.fileStart)), r.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \")\"), this.buffers.splice(i, 0, t), i === 0 && (this.buffer = t);\n                e = !1;\n                break;\n            } else if (t.fileStart < s.fileStart + s.byteLength) {\n                var o = s.fileStart + s.byteLength - t.fileStart, c = t.byteLength - o;\n                if (c > 0) t = this.reduceBuffer(t, o, c);\n                else {\n                    e = !1;\n                    break;\n                }\n            }\n        }\n        e && (r.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \")\"), this.buffers.push(t), i === 0 && (this.buffer = t));\n    }, d.prototype.logBufferLevel = function(t) {\n        var e, i, s, o, c = [], u, _ = \"\";\n        for(s = 0, o = 0, e = 0; e < this.buffers.length; e++)i = this.buffers[e], e === 0 ? (u = {}, c.push(u), u.start = i.fileStart, u.end = i.fileStart + i.byteLength, _ += \"[\" + u.start + \"-\") : u.end === i.fileStart ? u.end = i.fileStart + i.byteLength : (u = {}, u.start = i.fileStart, _ += c[c.length - 1].end - 1 + \"], [\" + u.start + \"-\", u.end = i.fileStart + i.byteLength, c.push(u)), s += i.usedBytes, o += i.byteLength;\n        c.length > 0 && (_ += u.end - 1 + \"]\");\n        var g = t ? r.info : r.debug;\n        this.buffers.length === 0 ? g(\"MultiBufferStream\", \"No more buffer in memory\") : g(\"MultiBufferStream\", \"\" + this.buffers.length + \" stored buffer(s) (\" + s + \"/\" + o + \" bytes), continuous ranges: \" + _);\n    }, d.prototype.cleanBuffers = function() {\n        var t, e;\n        for(t = 0; t < this.buffers.length; t++)e = this.buffers[t], e.usedBytes === e.byteLength && (r.debug(\"MultiBufferStream\", \"Removing buffer #\" + t), this.buffers.splice(t, 1), t--);\n    }, d.prototype.mergeNextBuffer = function() {\n        var t;\n        if (this.bufferIndex + 1 < this.buffers.length) if (t = this.buffers[this.bufferIndex + 1], t.fileStart === this.buffer.fileStart + this.buffer.byteLength) {\n            var e = this.buffer.byteLength, i = this.buffer.usedBytes, s = this.buffer.fileStart;\n            return this.buffers[this.bufferIndex] = ArrayBuffer.concat(this.buffer, t), this.buffer = this.buffers[this.bufferIndex], this.buffers.splice(this.bufferIndex + 1, 1), this.buffer.usedBytes = i, this.buffer.fileStart = s, r.debug(\"ISOFile\", \"Concatenating buffer for box parsing (length: \" + e + \"->\" + this.buffer.byteLength + \")\"), !0;\n        } else return !1;\n        else return !1;\n    }, d.prototype.findPosition = function(t, e, i) {\n        var s, o = null, c = -1;\n        for(t === !0 ? s = 0 : s = this.bufferIndex; s < this.buffers.length && (o = this.buffers[s], o.fileStart <= e);){\n            c = s, i && (o.fileStart + o.byteLength <= e ? o.usedBytes = o.byteLength : o.usedBytes = e - o.fileStart, this.logBufferLevel());\n            s++;\n        }\n        return c !== -1 ? (o = this.buffers[c], o.fileStart + o.byteLength >= e ? (r.debug(\"MultiBufferStream\", \"Found position in existing buffer #\" + c), c) : -1) : -1;\n    }, d.prototype.findEndContiguousBuf = function(t) {\n        var e, i, s, o = t !== void 0 ? t : this.bufferIndex;\n        if (i = this.buffers[o], this.buffers.length > o + 1) for(e = o + 1; e < this.buffers.length && (s = this.buffers[e], s.fileStart === i.fileStart + i.byteLength); e++)i = s;\n        return i.fileStart + i.byteLength;\n    }, d.prototype.getEndFilePositionAfter = function(t) {\n        var e = this.findPosition(!0, t, !1);\n        return e !== -1 ? this.findEndContiguousBuf(e) : t;\n    }, d.prototype.addUsedBytes = function(t) {\n        this.buffer.usedBytes += t, this.logBufferLevel();\n    }, d.prototype.setAllUsedBytes = function() {\n        this.buffer.usedBytes = this.buffer.byteLength, this.logBufferLevel();\n    }, d.prototype.seek = function(t, e, i) {\n        var s;\n        return s = this.findPosition(e, t, i), s !== -1 ? (this.buffer = this.buffers[s], this.bufferIndex = s, this.position = t - this.buffer.fileStart, r.debug(\"MultiBufferStream\", \"Repositioning parser at buffer position: \" + this.position), !0) : (r.debug(\"MultiBufferStream\", \"Position \" + t + \" not found in buffered data\"), !1);\n    }, d.prototype.getPosition = function() {\n        if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) throw \"Error accessing position in the MultiBufferStream\";\n        return this.buffers[this.bufferIndex].fileStart + this.position;\n    }, d.prototype.getLength = function() {\n        return this.byteLength;\n    }, d.prototype.getEndPosition = function() {\n        if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) throw \"Error accessing position in the MultiBufferStream\";\n        return this.buffers[this.bufferIndex].fileStart + this.byteLength;\n    }, l.MultiBufferStream = d;\n    var p = function() {\n        var t = 3, e = 4, i = 5, s = 6, o = [];\n        o[t] = \"ES_Descriptor\", o[e] = \"DecoderConfigDescriptor\", o[i] = \"DecoderSpecificInfo\", o[s] = \"SLConfigDescriptor\", this.getDescriptorName = function(_) {\n            return o[_];\n        };\n        var c = this, u = {};\n        return this.parseOneDescriptor = function(_) {\n            var g = 0, w, S, U;\n            for(w = _.readUint8(), U = _.readUint8(); U & 128;)g = (U & 127) << 7, U = _.readUint8();\n            return g += U & 127, r.debug(\"MPEG4DescriptorParser\", \"Found \" + (o[w] || \"Descriptor \" + w) + \", size \" + g + \" at position \" + _.getPosition()), o[w] ? S = new u[o[w]](g) : S = new u.Descriptor(g), S.parse(_), S;\n        }, u.Descriptor = function(_, g) {\n            this.tag = _, this.size = g, this.descs = [];\n        }, u.Descriptor.prototype.parse = function(_) {\n            this.data = _.readUint8Array(this.size);\n        }, u.Descriptor.prototype.findDescriptor = function(_) {\n            for(var g = 0; g < this.descs.length; g++)if (this.descs[g].tag == _) return this.descs[g];\n            return null;\n        }, u.Descriptor.prototype.parseRemainingDescriptors = function(_) {\n            for(var g = _.position; _.position < g + this.size;){\n                var w = c.parseOneDescriptor(_);\n                this.descs.push(w);\n            }\n        }, u.ES_Descriptor = function(_) {\n            u.Descriptor.call(this, t, _);\n        }, u.ES_Descriptor.prototype = new u.Descriptor(), u.ES_Descriptor.prototype.parse = function(_) {\n            if (this.ES_ID = _.readUint16(), this.flags = _.readUint8(), this.size -= 3, this.flags & 128 ? (this.dependsOn_ES_ID = _.readUint16(), this.size -= 2) : this.dependsOn_ES_ID = 0, this.flags & 64) {\n                var g = _.readUint8();\n                this.URL = _.readString(g), this.size -= g + 1;\n            } else this.URL = \"\";\n            this.flags & 32 ? (this.OCR_ES_ID = _.readUint16(), this.size -= 2) : this.OCR_ES_ID = 0, this.parseRemainingDescriptors(_);\n        }, u.ES_Descriptor.prototype.getOTI = function(_) {\n            var g = this.findDescriptor(e);\n            return g ? g.oti : 0;\n        }, u.ES_Descriptor.prototype.getAudioConfig = function(_) {\n            var g = this.findDescriptor(e);\n            if (!g) return null;\n            var w = g.findDescriptor(i);\n            if (w && w.data) {\n                var S = (w.data[0] & 248) >> 3;\n                return S === 31 && w.data.length >= 2 && (S = 32 + ((w.data[0] & 7) << 3) + ((w.data[1] & 224) >> 5)), S;\n            } else return null;\n        }, u.DecoderConfigDescriptor = function(_) {\n            u.Descriptor.call(this, e, _);\n        }, u.DecoderConfigDescriptor.prototype = new u.Descriptor(), u.DecoderConfigDescriptor.prototype.parse = function(_) {\n            this.oti = _.readUint8(), this.streamType = _.readUint8(), this.bufferSize = _.readUint24(), this.maxBitrate = _.readUint32(), this.avgBitrate = _.readUint32(), this.size -= 13, this.parseRemainingDescriptors(_);\n        }, u.DecoderSpecificInfo = function(_) {\n            u.Descriptor.call(this, i, _);\n        }, u.DecoderSpecificInfo.prototype = new u.Descriptor(), u.SLConfigDescriptor = function(_) {\n            u.Descriptor.call(this, s, _);\n        }, u.SLConfigDescriptor.prototype = new u.Descriptor(), this;\n    };\n    l.MPEG4DescriptorParser = p;\n    var n = {\n        ERR_INVALID_DATA: -1,\n        ERR_NOT_ENOUGH_DATA: 0,\n        OK: 1,\n        // Boxes to be created with default parsing\n        BASIC_BOXES: [\n            \"mdat\",\n            \"idat\",\n            \"free\",\n            \"skip\",\n            \"meco\",\n            \"strk\"\n        ],\n        FULL_BOXES: [\n            \"hmhd\",\n            \"nmhd\",\n            \"iods\",\n            \"xml \",\n            \"bxml\",\n            \"ipro\",\n            \"mere\"\n        ],\n        CONTAINER_BOXES: [\n            [\n                \"moov\",\n                [\n                    \"trak\",\n                    \"pssh\"\n                ]\n            ],\n            [\n                \"trak\"\n            ],\n            [\n                \"edts\"\n            ],\n            [\n                \"mdia\"\n            ],\n            [\n                \"minf\"\n            ],\n            [\n                \"dinf\"\n            ],\n            [\n                \"stbl\",\n                [\n                    \"sgpd\",\n                    \"sbgp\"\n                ]\n            ],\n            [\n                \"mvex\",\n                [\n                    \"trex\"\n                ]\n            ],\n            [\n                \"moof\",\n                [\n                    \"traf\"\n                ]\n            ],\n            [\n                \"traf\",\n                [\n                    \"trun\",\n                    \"sgpd\",\n                    \"sbgp\"\n                ]\n            ],\n            [\n                \"vttc\"\n            ],\n            [\n                \"tref\"\n            ],\n            [\n                \"iref\"\n            ],\n            [\n                \"mfra\",\n                [\n                    \"tfra\"\n                ]\n            ],\n            [\n                \"meco\"\n            ],\n            [\n                \"hnti\"\n            ],\n            [\n                \"hinf\"\n            ],\n            [\n                \"strk\"\n            ],\n            [\n                \"strd\"\n            ],\n            [\n                \"sinf\"\n            ],\n            [\n                \"rinf\"\n            ],\n            [\n                \"schi\"\n            ],\n            [\n                \"trgr\"\n            ],\n            [\n                \"udta\",\n                [\n                    \"kind\"\n                ]\n            ],\n            [\n                \"iprp\",\n                [\n                    \"ipma\"\n                ]\n            ],\n            [\n                \"ipco\"\n            ]\n        ],\n        // Boxes effectively created\n        boxCodes: [],\n        fullBoxCodes: [],\n        containerBoxCodes: [],\n        sampleEntryCodes: {},\n        sampleGroupEntryCodes: [],\n        trackGroupTypes: [],\n        UUIDBoxes: {},\n        UUIDs: [],\n        initialize: function() {\n            n.FullBox.prototype = new n.Box(), n.ContainerBox.prototype = new n.Box(), n.SampleEntry.prototype = new n.Box(), n.TrackGroupTypeBox.prototype = new n.FullBox(), n.BASIC_BOXES.forEach(function(t) {\n                n.createBoxCtor(t);\n            }), n.FULL_BOXES.forEach(function(t) {\n                n.createFullBoxCtor(t);\n            }), n.CONTAINER_BOXES.forEach(function(t) {\n                n.createContainerBoxCtor(t[0], null, t[1]);\n            });\n        },\n        Box: function(t, e, i) {\n            this.type = t, this.size = e, this.uuid = i;\n        },\n        FullBox: function(t, e, i) {\n            n.Box.call(this, t, e, i), this.flags = 0, this.version = 0;\n        },\n        ContainerBox: function(t, e, i) {\n            n.Box.call(this, t, e, i), this.boxes = [];\n        },\n        SampleEntry: function(t, e, i, s) {\n            n.ContainerBox.call(this, t, e), this.hdr_size = i, this.start = s;\n        },\n        SampleGroupEntry: function(t) {\n            this.grouping_type = t;\n        },\n        TrackGroupTypeBox: function(t, e) {\n            n.FullBox.call(this, t, e);\n        },\n        createBoxCtor: function(t, e) {\n            n.boxCodes.push(t), n[t + \"Box\"] = function(i) {\n                n.Box.call(this, t, i);\n            }, n[t + \"Box\"].prototype = new n.Box(), e && (n[t + \"Box\"].prototype.parse = e);\n        },\n        createFullBoxCtor: function(t, e) {\n            n[t + \"Box\"] = function(i) {\n                n.FullBox.call(this, t, i);\n            }, n[t + \"Box\"].prototype = new n.FullBox(), n[t + \"Box\"].prototype.parse = function(i) {\n                this.parseFullHeader(i), e && e.call(this, i);\n            };\n        },\n        addSubBoxArrays: function(t) {\n            if (t) {\n                this.subBoxNames = t;\n                for(var e = t.length, i = 0; i < e; i++)this[t[i] + \"s\"] = [];\n            }\n        },\n        createContainerBoxCtor: function(t, e, i) {\n            n[t + \"Box\"] = function(s) {\n                n.ContainerBox.call(this, t, s), n.addSubBoxArrays.call(this, i);\n            }, n[t + \"Box\"].prototype = new n.ContainerBox(), e && (n[t + \"Box\"].prototype.parse = e);\n        },\n        createMediaSampleEntryCtor: function(t, e, i) {\n            n.sampleEntryCodes[t] = [], n[t + \"SampleEntry\"] = function(s, o) {\n                n.SampleEntry.call(this, s, o), n.addSubBoxArrays.call(this, i);\n            }, n[t + \"SampleEntry\"].prototype = new n.SampleEntry(), e && (n[t + \"SampleEntry\"].prototype.parse = e);\n        },\n        createSampleEntryCtor: function(t, e, i, s) {\n            n.sampleEntryCodes[t].push(e), n[e + \"SampleEntry\"] = function(o) {\n                n[t + \"SampleEntry\"].call(this, e, o), n.addSubBoxArrays.call(this, s);\n            }, n[e + \"SampleEntry\"].prototype = new n[t + \"SampleEntry\"](), i && (n[e + \"SampleEntry\"].prototype.parse = i);\n        },\n        createEncryptedSampleEntryCtor: function(t, e, i) {\n            n.createSampleEntryCtor.call(this, t, e, i, [\n                \"sinf\"\n            ]);\n        },\n        createSampleGroupCtor: function(t, e) {\n            n[t + \"SampleGroupEntry\"] = function(i) {\n                n.SampleGroupEntry.call(this, t, i);\n            }, n[t + \"SampleGroupEntry\"].prototype = new n.SampleGroupEntry(), e && (n[t + \"SampleGroupEntry\"].prototype.parse = e);\n        },\n        createTrackGroupCtor: function(t, e) {\n            n[t + \"TrackGroupTypeBox\"] = function(i) {\n                n.TrackGroupTypeBox.call(this, t, i);\n            }, n[t + \"TrackGroupTypeBox\"].prototype = new n.TrackGroupTypeBox(), e && (n[t + \"TrackGroupTypeBox\"].prototype.parse = e);\n        },\n        createUUIDBox: function(t, e, i, s) {\n            n.UUIDs.push(t), n.UUIDBoxes[t] = function(o) {\n                e ? n.FullBox.call(this, \"uuid\", o, t) : i ? n.ContainerBox.call(this, \"uuid\", o, t) : n.Box.call(this, \"uuid\", o, t);\n            }, n.UUIDBoxes[t].prototype = e ? new n.FullBox() : i ? new n.ContainerBox() : new n.Box(), s && (e ? n.UUIDBoxes[t].prototype.parse = function(o) {\n                this.parseFullHeader(o), s && s.call(this, o);\n            } : n.UUIDBoxes[t].prototype.parse = s);\n        }\n    };\n    n.initialize(), n.TKHD_FLAG_ENABLED = 1, n.TKHD_FLAG_IN_MOVIE = 2, n.TKHD_FLAG_IN_PREVIEW = 4, n.TFHD_FLAG_BASE_DATA_OFFSET = 1, n.TFHD_FLAG_SAMPLE_DESC = 2, n.TFHD_FLAG_SAMPLE_DUR = 8, n.TFHD_FLAG_SAMPLE_SIZE = 16, n.TFHD_FLAG_SAMPLE_FLAGS = 32, n.TFHD_FLAG_DUR_EMPTY = 65536, n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF = 131072, n.TRUN_FLAGS_DATA_OFFSET = 1, n.TRUN_FLAGS_FIRST_FLAG = 4, n.TRUN_FLAGS_DURATION = 256, n.TRUN_FLAGS_SIZE = 512, n.TRUN_FLAGS_FLAGS = 1024, n.TRUN_FLAGS_CTS_OFFSET = 2048, n.Box.prototype.add = function(t) {\n        return this.addBox(new n[t + \"Box\"]());\n    }, n.Box.prototype.addBox = function(t) {\n        return this.boxes.push(t), this[t.type + \"s\"] ? this[t.type + \"s\"].push(t) : this[t.type] = t, t;\n    }, n.Box.prototype.set = function(t, e) {\n        return this[t] = e, this;\n    }, n.Box.prototype.addEntry = function(t, e) {\n        var i = e || \"entries\";\n        return this[i] || (this[i] = []), this[i].push(t), this;\n    }, l.BoxParser = n, n.parseUUID = function(t) {\n        return n.parseHex16(t);\n    }, n.parseHex16 = function(t) {\n        for(var e = \"\", i = 0; i < 16; i++){\n            var s = t.readUint8().toString(16);\n            e += s.length === 1 ? \"0\" + s : s;\n        }\n        return e;\n    }, n.parseOneBox = function(t, e, i) {\n        var s, o = t.getPosition(), c = 0, u, _;\n        if (t.getEndPosition() - o < 8) return r.debug(\"BoxParser\", \"Not enough data in stream to parse the type and size of the box\"), {\n            code: n.ERR_NOT_ENOUGH_DATA\n        };\n        if (i && i < 8) return r.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a new box\"), {\n            code: n.ERR_NOT_ENOUGH_DATA\n        };\n        var g = t.readUint32(), w = t.readString(4), S = w;\n        if (r.debug(\"BoxParser\", \"Found box of type '\" + w + \"' and size \" + g + \" at position \" + o), c = 8, w == \"uuid\") {\n            if (t.getEndPosition() - t.getPosition() < 16 || i - c < 16) return t.seek(o), r.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a UUID box\"), {\n                code: n.ERR_NOT_ENOUGH_DATA\n            };\n            _ = n.parseUUID(t), c += 16, S = _;\n        }\n        if (g == 1) {\n            if (t.getEndPosition() - t.getPosition() < 8 || i && i - c < 8) return t.seek(o), r.warn(\"BoxParser\", 'Not enough data in stream to parse the extended size of the \"' + w + '\" box'), {\n                code: n.ERR_NOT_ENOUGH_DATA\n            };\n            g = t.readUint64(), c += 8;\n        } else if (g === 0) {\n            if (i) g = i;\n            else if (w !== \"mdat\") return r.error(\"BoxParser\", \"Unlimited box size not supported for type: '\" + w + \"'\"), s = new n.Box(w, g), {\n                code: n.OK,\n                box: s,\n                size: s.size\n            };\n        }\n        return g !== 0 && g < c ? (r.error(\"BoxParser\", \"Box of type \" + w + \" has an invalid size \" + g + \" (too small to be a box)\"), {\n            code: n.ERR_NOT_ENOUGH_DATA,\n            type: w,\n            size: g,\n            hdr_size: c,\n            start: o\n        }) : g !== 0 && i && g > i ? (r.error(\"BoxParser\", \"Box of type '\" + w + \"' has a size \" + g + \" greater than its container size \" + i), {\n            code: n.ERR_NOT_ENOUGH_DATA,\n            type: w,\n            size: g,\n            hdr_size: c,\n            start: o\n        }) : g !== 0 && o + g > t.getEndPosition() ? (t.seek(o), r.info(\"BoxParser\", \"Not enough data in stream to parse the entire '\" + w + \"' box\"), {\n            code: n.ERR_NOT_ENOUGH_DATA,\n            type: w,\n            size: g,\n            hdr_size: c,\n            start: o\n        }) : e ? {\n            code: n.OK,\n            type: w,\n            size: g,\n            hdr_size: c,\n            start: o\n        } : (n[w + \"Box\"] ? s = new n[w + \"Box\"](g) : w !== \"uuid\" ? (r.warn(\"BoxParser\", \"Unknown box type: '\" + w + \"'\"), s = new n.Box(w, g), s.has_unparsed_data = !0) : n.UUIDBoxes[_] ? s = new n.UUIDBoxes[_](g) : (r.warn(\"BoxParser\", \"Unknown uuid type: '\" + _ + \"'\"), s = new n.Box(w, g), s.uuid = _, s.has_unparsed_data = !0), s.hdr_size = c, s.start = o, s.write === n.Box.prototype.write && s.type !== \"mdat\" && (r.info(\"BoxParser\", \"'\" + S + \"' box writing not yet implemented, keeping unparsed data in memory for later write\"), s.parseDataAndRewind(t)), s.parse(t), u = t.getPosition() - (s.start + s.size), u < 0 ? (r.warn(\"BoxParser\", \"Parsing of box '\" + S + \"' did not read the entire indicated box data size (missing \" + -u + \" bytes), seeking forward\"), t.seek(s.start + s.size)) : u > 0 && (r.error(\"BoxParser\", \"Parsing of box '\" + S + \"' read \" + u + \" more bytes than the indicated box data size, seeking backwards\"), s.size !== 0 && t.seek(s.start + s.size)), {\n            code: n.OK,\n            box: s,\n            size: s.size\n        });\n    }, n.Box.prototype.parse = function(t) {\n        this.type != \"mdat\" ? this.data = t.readUint8Array(this.size - this.hdr_size) : this.size === 0 ? t.seek(t.getEndPosition()) : t.seek(this.start + this.size);\n    }, n.Box.prototype.parseDataAndRewind = function(t) {\n        this.data = t.readUint8Array(this.size - this.hdr_size), t.position -= this.size - this.hdr_size;\n    }, n.FullBox.prototype.parseDataAndRewind = function(t) {\n        this.parseFullHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size), this.hdr_size -= 4, t.position -= this.size - this.hdr_size;\n    }, n.FullBox.prototype.parseFullHeader = function(t) {\n        this.version = t.readUint8(), this.flags = t.readUint24(), this.hdr_size += 4;\n    }, n.FullBox.prototype.parse = function(t) {\n        this.parseFullHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size);\n    }, n.ContainerBox.prototype.parse = function(t) {\n        for(var e, i; t.getPosition() < this.start + this.size;)if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK) if (i = e.box, this.boxes.push(i), this.subBoxNames && this.subBoxNames.indexOf(i.type) != -1) this[this.subBoxNames[this.subBoxNames.indexOf(i.type)] + \"s\"].push(i);\n        else {\n            var s = i.type !== \"uuid\" ? i.type : i.uuid;\n            this[s] ? r.warn(\"Box of type \" + s + \" already stored in field of this type\") : this[s] = i;\n        }\n        else return;\n    }, n.Box.prototype.parseLanguage = function(t) {\n        this.language = t.readUint16();\n        var e = [];\n        e[0] = this.language >> 10 & 31, e[1] = this.language >> 5 & 31, e[2] = this.language & 31, this.languageString = String.fromCharCode(e[0] + 96, e[1] + 96, e[2] + 96);\n    }, n.SAMPLE_ENTRY_TYPE_VISUAL = \"Visual\", n.SAMPLE_ENTRY_TYPE_AUDIO = \"Audio\", n.SAMPLE_ENTRY_TYPE_HINT = \"Hint\", n.SAMPLE_ENTRY_TYPE_METADATA = \"Metadata\", n.SAMPLE_ENTRY_TYPE_SUBTITLE = \"Subtitle\", n.SAMPLE_ENTRY_TYPE_SYSTEM = \"System\", n.SAMPLE_ENTRY_TYPE_TEXT = \"Text\", n.SampleEntry.prototype.parseHeader = function(t) {\n        t.readUint8Array(6), this.data_reference_index = t.readUint16(), this.hdr_size += 8;\n    }, n.SampleEntry.prototype.parse = function(t) {\n        this.parseHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size);\n    }, n.SampleEntry.prototype.parseDataAndRewind = function(t) {\n        this.parseHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size), this.hdr_size -= 8, t.position -= this.size - this.hdr_size;\n    }, n.SampleEntry.prototype.parseFooter = function(t) {\n        n.ContainerBox.prototype.parse.call(this, t);\n    }, n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_HINT), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SYSTEM), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_TEXT), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, function(t) {\n        var e;\n        this.parseHeader(t), t.readUint16(), t.readUint16(), t.readUint32Array(3), this.width = t.readUint16(), this.height = t.readUint16(), this.horizresolution = t.readUint32(), this.vertresolution = t.readUint32(), t.readUint32(), this.frame_count = t.readUint16(), e = Math.min(31, t.readUint8()), this.compressorname = t.readString(e), e < 31 && t.readString(31 - e), this.depth = t.readUint16(), t.readUint16(), this.parseFooter(t);\n    }), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, function(t) {\n        this.parseHeader(t), t.readUint32Array(2), this.channel_count = t.readUint16(), this.samplesize = t.readUint16(), t.readUint16(), t.readUint16(), this.samplerate = t.readUint32() / 65536, this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc2\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc4\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"av01\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"hvc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"hev1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvi1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvs1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvcN\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vp08\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vp09\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"mp4a\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"ac-3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"ec-3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"Opus\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"encv\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"enca\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"encu\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SYSTEM, \"encs\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_TEXT, \"enct\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"encm\"), n.createBoxCtor(\"a1lx\", function(t) {\n        var e = t.readUint8() & 1, i = ((e & 1) + 1) * 16;\n        this.layer_size = [];\n        for(var s = 0; s < 3; s++)i == 16 ? this.layer_size[s] = t.readUint16() : this.layer_size[s] = t.readUint32();\n    }), n.createBoxCtor(\"a1op\", function(t) {\n        this.op_index = t.readUint8();\n    }), n.createFullBoxCtor(\"auxC\", function(t) {\n        this.aux_type = t.readCString();\n        var e = this.size - this.hdr_size - (this.aux_type.length + 1);\n        this.aux_subtype = t.readUint8Array(e);\n    }), n.createBoxCtor(\"av1C\", function(t) {\n        var e = t.readUint8();\n        if (e >> 7 & !1) {\n            r.error(\"av1C marker problem\");\n            return;\n        }\n        if (this.version = e & 127, this.version !== 1) {\n            r.error(\"av1C version \" + this.version + \" not supported\");\n            return;\n        }\n        if (e = t.readUint8(), this.seq_profile = e >> 5 & 7, this.seq_level_idx_0 = e & 31, e = t.readUint8(), this.seq_tier_0 = e >> 7 & 1, this.high_bitdepth = e >> 6 & 1, this.twelve_bit = e >> 5 & 1, this.monochrome = e >> 4 & 1, this.chroma_subsampling_x = e >> 3 & 1, this.chroma_subsampling_y = e >> 2 & 1, this.chroma_sample_position = e & 3, e = t.readUint8(), this.reserved_1 = e >> 5 & 7, this.reserved_1 !== 0) {\n            r.error(\"av1C reserved_1 parsing problem\");\n            return;\n        }\n        if (this.initial_presentation_delay_present = e >> 4 & 1, this.initial_presentation_delay_present === 1) this.initial_presentation_delay_minus_one = e & 15;\n        else if (this.reserved_2 = e & 15, this.reserved_2 !== 0) {\n            r.error(\"av1C reserved_2 parsing problem\");\n            return;\n        }\n        var i = this.size - this.hdr_size - 4;\n        this.configOBUs = t.readUint8Array(i);\n    }), n.createBoxCtor(\"avcC\", function(t) {\n        var e, i;\n        for(this.configurationVersion = t.readUint8(), this.AVCProfileIndication = t.readUint8(), this.profile_compatibility = t.readUint8(), this.AVCLevelIndication = t.readUint8(), this.lengthSizeMinusOne = t.readUint8() & 3, this.nb_SPS_nalus = t.readUint8() & 31, i = this.size - this.hdr_size - 6, this.SPS = [], e = 0; e < this.nb_SPS_nalus; e++)this.SPS[e] = {}, this.SPS[e].length = t.readUint16(), this.SPS[e].nalu = t.readUint8Array(this.SPS[e].length), i -= 2 + this.SPS[e].length;\n        for(this.nb_PPS_nalus = t.readUint8(), i--, this.PPS = [], e = 0; e < this.nb_PPS_nalus; e++)this.PPS[e] = {}, this.PPS[e].length = t.readUint16(), this.PPS[e].nalu = t.readUint8Array(this.PPS[e].length), i -= 2 + this.PPS[e].length;\n        i > 0 && (this.ext = t.readUint8Array(i));\n    }), n.createBoxCtor(\"btrt\", function(t) {\n        this.bufferSizeDB = t.readUint32(), this.maxBitrate = t.readUint32(), this.avgBitrate = t.readUint32();\n    }), n.createBoxCtor(\"clap\", function(t) {\n        this.cleanApertureWidthN = t.readUint32(), this.cleanApertureWidthD = t.readUint32(), this.cleanApertureHeightN = t.readUint32(), this.cleanApertureHeightD = t.readUint32(), this.horizOffN = t.readUint32(), this.horizOffD = t.readUint32(), this.vertOffN = t.readUint32(), this.vertOffD = t.readUint32();\n    }), n.createBoxCtor(\"clli\", function(t) {\n        this.max_content_light_level = t.readUint16(), this.max_pic_average_light_level = t.readUint16();\n    }), n.createFullBoxCtor(\"co64\", function(t) {\n        var e, i;\n        if (e = t.readUint32(), this.chunk_offsets = [], this.version === 0) for(i = 0; i < e; i++)this.chunk_offsets.push(t.readUint64());\n    }), n.createFullBoxCtor(\"CoLL\", function(t) {\n        this.maxCLL = t.readUint16(), this.maxFALL = t.readUint16();\n    }), n.createBoxCtor(\"colr\", function(t) {\n        if (this.colour_type = t.readString(4), this.colour_type === \"nclx\") {\n            this.colour_primaries = t.readUint16(), this.transfer_characteristics = t.readUint16(), this.matrix_coefficients = t.readUint16();\n            var e = t.readUint8();\n            this.full_range_flag = e >> 7;\n        } else this.colour_type === \"rICC\" ? this.ICC_profile = t.readUint8Array(this.size - 4) : this.colour_type === \"prof\" && (this.ICC_profile = t.readUint8Array(this.size - 4));\n    }), n.createFullBoxCtor(\"cprt\", function(t) {\n        this.parseLanguage(t), this.notice = t.readCString();\n    }), n.createFullBoxCtor(\"cslg\", function(t) {\n        this.version === 0 && (this.compositionToDTSShift = t.readInt32(), this.leastDecodeToDisplayDelta = t.readInt32(), this.greatestDecodeToDisplayDelta = t.readInt32(), this.compositionStartTime = t.readInt32(), this.compositionEndTime = t.readInt32());\n    }), n.createFullBoxCtor(\"ctts\", function(t) {\n        var e, i;\n        if (e = t.readUint32(), this.sample_counts = [], this.sample_offsets = [], this.version === 0) for(i = 0; i < e; i++){\n            this.sample_counts.push(t.readUint32());\n            var s = t.readInt32();\n            s < 0 && r.warn(\"BoxParser\", \"ctts box uses negative values without using version 1\"), this.sample_offsets.push(s);\n        }\n        else if (this.version == 1) for(i = 0; i < e; i++)this.sample_counts.push(t.readUint32()), this.sample_offsets.push(t.readInt32());\n    }), n.createBoxCtor(\"dac3\", function(t) {\n        var e = t.readUint8(), i = t.readUint8(), s = t.readUint8();\n        this.fscod = e >> 6, this.bsid = e >> 1 & 31, this.bsmod = (e & 1) << 2 | i >> 6 & 3, this.acmod = i >> 3 & 7, this.lfeon = i >> 2 & 1, this.bit_rate_code = i & 3 | s >> 5 & 7;\n    }), n.createBoxCtor(\"dec3\", function(t) {\n        var e = t.readUint16();\n        this.data_rate = e >> 3, this.num_ind_sub = e & 7, this.ind_subs = [];\n        for(var i = 0; i < this.num_ind_sub + 1; i++){\n            var s = {};\n            this.ind_subs.push(s);\n            var o = t.readUint8(), c = t.readUint8(), u = t.readUint8();\n            s.fscod = o >> 6, s.bsid = o >> 1 & 31, s.bsmod = (o & 1) << 4 | c >> 4 & 15, s.acmod = c >> 1 & 7, s.lfeon = c & 1, s.num_dep_sub = u >> 1 & 15, s.num_dep_sub > 0 && (s.chan_loc = (u & 1) << 8 | t.readUint8());\n        }\n    }), n.createFullBoxCtor(\"dfLa\", function(t) {\n        var e = 127, i = 128, s = [], o = [\n            \"STREAMINFO\",\n            \"PADDING\",\n            \"APPLICATION\",\n            \"SEEKTABLE\",\n            \"VORBIS_COMMENT\",\n            \"CUESHEET\",\n            \"PICTURE\",\n            \"RESERVED\"\n        ];\n        this.parseFullHeader(t);\n        do {\n            var c = t.readUint8(), u = Math.min(c & e, o.length - 1);\n            if (u ? t.readUint8Array(t.readUint24()) : (t.readUint8Array(13), this.samplerate = t.readUint32() >> 12, t.readUint8Array(20)), s.push(o[u]), c & i) break;\n        }while (!0);\n        this.numMetadataBlocks = s.length + \" (\" + s.join(\", \") + \")\";\n    }), n.createBoxCtor(\"dimm\", function(t) {\n        this.bytessent = t.readUint64();\n    }), n.createBoxCtor(\"dmax\", function(t) {\n        this.time = t.readUint32();\n    }), n.createBoxCtor(\"dmed\", function(t) {\n        this.bytessent = t.readUint64();\n    }), n.createBoxCtor(\"dOps\", function(t) {\n        if (this.Version = t.readUint8(), this.OutputChannelCount = t.readUint8(), this.PreSkip = t.readUint16(), this.InputSampleRate = t.readUint32(), this.OutputGain = t.readInt16(), this.ChannelMappingFamily = t.readUint8(), this.ChannelMappingFamily !== 0) {\n            this.StreamCount = t.readUint8(), this.CoupledCount = t.readUint8(), this.ChannelMapping = [];\n            for(var e = 0; e < this.OutputChannelCount; e++)this.ChannelMapping[e] = t.readUint8();\n        }\n    }), n.createFullBoxCtor(\"dref\", function(t) {\n        var e, i;\n        this.entries = [];\n        for(var s = t.readUint32(), o = 0; o < s; o++)if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK) i = e.box, this.entries.push(i);\n        else return;\n    }), n.createBoxCtor(\"drep\", function(t) {\n        this.bytessent = t.readUint64();\n    }), n.createFullBoxCtor(\"elng\", function(t) {\n        this.extended_language = t.readString(this.size - this.hdr_size);\n    }), n.createFullBoxCtor(\"elst\", function(t) {\n        this.entries = [];\n        for(var e = t.readUint32(), i = 0; i < e; i++){\n            var s = {};\n            this.entries.push(s), this.version === 1 ? (s.segment_duration = t.readUint64(), s.media_time = t.readInt64()) : (s.segment_duration = t.readUint32(), s.media_time = t.readInt32()), s.media_rate_integer = t.readInt16(), s.media_rate_fraction = t.readInt16();\n        }\n    }), n.createFullBoxCtor(\"emsg\", function(t) {\n        this.version == 1 ? (this.timescale = t.readUint32(), this.presentation_time = t.readUint64(), this.event_duration = t.readUint32(), this.id = t.readUint32(), this.scheme_id_uri = t.readCString(), this.value = t.readCString()) : (this.scheme_id_uri = t.readCString(), this.value = t.readCString(), this.timescale = t.readUint32(), this.presentation_time_delta = t.readUint32(), this.event_duration = t.readUint32(), this.id = t.readUint32());\n        var e = this.size - this.hdr_size - (4 * 4 + (this.scheme_id_uri.length + 1) + (this.value.length + 1));\n        this.version == 1 && (e -= 4), this.message_data = t.readUint8Array(e);\n    }), n.createFullBoxCtor(\"esds\", function(t) {\n        var e = t.readUint8Array(this.size - this.hdr_size);\n        if (typeof p < \"u\") {\n            var i = new p();\n            this.esd = i.parseOneDescriptor(new a(e.buffer, 0, a.BIG_ENDIAN));\n        }\n    }), n.createBoxCtor(\"fiel\", function(t) {\n        this.fieldCount = t.readUint8(), this.fieldOrdering = t.readUint8();\n    }), n.createBoxCtor(\"frma\", function(t) {\n        this.data_format = t.readString(4);\n    }), n.createBoxCtor(\"ftyp\", function(t) {\n        var e = this.size - this.hdr_size;\n        this.major_brand = t.readString(4), this.minor_version = t.readUint32(), e -= 8, this.compatible_brands = [];\n        for(var i = 0; e >= 4;)this.compatible_brands[i] = t.readString(4), e -= 4, i++;\n    }), n.createFullBoxCtor(\"hdlr\", function(t) {\n        this.version === 0 && (t.readUint32(), this.handler = t.readString(4), t.readUint32Array(3), this.name = t.readString(this.size - this.hdr_size - 20), this.name[this.name.length - 1] === \"\\0\" && (this.name = this.name.slice(0, -1)));\n    }), n.createBoxCtor(\"hvcC\", function(t) {\n        var e, i, s, o;\n        this.configurationVersion = t.readUint8(), o = t.readUint8(), this.general_profile_space = o >> 6, this.general_tier_flag = (o & 32) >> 5, this.general_profile_idc = o & 31, this.general_profile_compatibility = t.readUint32(), this.general_constraint_indicator = t.readUint8Array(6), this.general_level_idc = t.readUint8(), this.min_spatial_segmentation_idc = t.readUint16() & 4095, this.parallelismType = t.readUint8() & 3, this.chroma_format_idc = t.readUint8() & 3, this.bit_depth_luma_minus8 = t.readUint8() & 7, this.bit_depth_chroma_minus8 = t.readUint8() & 7, this.avgFrameRate = t.readUint16(), o = t.readUint8(), this.constantFrameRate = o >> 6, this.numTemporalLayers = (o & 13) >> 3, this.temporalIdNested = (o & 4) >> 2, this.lengthSizeMinusOne = o & 3, this.nalu_arrays = [];\n        var c = t.readUint8();\n        for(e = 0; e < c; e++){\n            var u = [];\n            this.nalu_arrays.push(u), o = t.readUint8(), u.completeness = (o & 128) >> 7, u.nalu_type = o & 63;\n            var _ = t.readUint16();\n            for(i = 0; i < _; i++){\n                var g = {};\n                u.push(g), s = t.readUint16(), g.data = t.readUint8Array(s);\n            }\n        }\n    }), n.createFullBoxCtor(\"iinf\", function(t) {\n        var e;\n        this.version === 0 ? this.entry_count = t.readUint16() : this.entry_count = t.readUint32(), this.item_infos = [];\n        for(var i = 0; i < this.entry_count; i++)if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK) e.box.type !== \"infe\" && r.error(\"BoxParser\", \"Expected 'infe' box, got \" + e.box.type), this.item_infos[i] = e.box;\n        else return;\n    }), n.createFullBoxCtor(\"iloc\", function(t) {\n        var e;\n        e = t.readUint8(), this.offset_size = e >> 4 & 15, this.length_size = e & 15, e = t.readUint8(), this.base_offset_size = e >> 4 & 15, this.version === 1 || this.version === 2 ? this.index_size = e & 15 : this.index_size = 0, this.items = [];\n        var i = 0;\n        if (this.version < 2) i = t.readUint16();\n        else if (this.version === 2) i = t.readUint32();\n        else throw \"version of iloc box not supported\";\n        for(var s = 0; s < i; s++){\n            var o = {};\n            if (this.items.push(o), this.version < 2) o.item_ID = t.readUint16();\n            else if (this.version === 2) o.item_ID = t.readUint16();\n            else throw \"version of iloc box not supported\";\n            switch(this.version === 1 || this.version === 2 ? o.construction_method = t.readUint16() & 15 : o.construction_method = 0, o.data_reference_index = t.readUint16(), this.base_offset_size){\n                case 0:\n                    o.base_offset = 0;\n                    break;\n                case 4:\n                    o.base_offset = t.readUint32();\n                    break;\n                case 8:\n                    o.base_offset = t.readUint64();\n                    break;\n                default:\n                    throw \"Error reading base offset size\";\n            }\n            var c = t.readUint16();\n            o.extents = [];\n            for(var u = 0; u < c; u++){\n                var _ = {};\n                if (o.extents.push(_), this.version === 1 || this.version === 2) switch(this.index_size){\n                    case 0:\n                        _.extent_index = 0;\n                        break;\n                    case 4:\n                        _.extent_index = t.readUint32();\n                        break;\n                    case 8:\n                        _.extent_index = t.readUint64();\n                        break;\n                    default:\n                        throw \"Error reading extent index\";\n                }\n                switch(this.offset_size){\n                    case 0:\n                        _.extent_offset = 0;\n                        break;\n                    case 4:\n                        _.extent_offset = t.readUint32();\n                        break;\n                    case 8:\n                        _.extent_offset = t.readUint64();\n                        break;\n                    default:\n                        throw \"Error reading extent index\";\n                }\n                switch(this.length_size){\n                    case 0:\n                        _.extent_length = 0;\n                        break;\n                    case 4:\n                        _.extent_length = t.readUint32();\n                        break;\n                    case 8:\n                        _.extent_length = t.readUint64();\n                        break;\n                    default:\n                        throw \"Error reading extent index\";\n                }\n            }\n        }\n    }), n.createBoxCtor(\"imir\", function(t) {\n        var e = t.readUint8();\n        this.reserved = e >> 7, this.axis = e & 1;\n    }), n.createFullBoxCtor(\"infe\", function(t) {\n        if ((this.version === 0 || this.version === 1) && (this.item_ID = t.readUint16(), this.item_protection_index = t.readUint16(), this.item_name = t.readCString(), this.content_type = t.readCString(), this.content_encoding = t.readCString()), this.version === 1) {\n            this.extension_type = t.readString(4), r.warn(\"BoxParser\", \"Cannot parse extension type\"), t.seek(this.start + this.size);\n            return;\n        }\n        this.version >= 2 && (this.version === 2 ? this.item_ID = t.readUint16() : this.version === 3 && (this.item_ID = t.readUint32()), this.item_protection_index = t.readUint16(), this.item_type = t.readString(4), this.item_name = t.readCString(), this.item_type === \"mime\" ? (this.content_type = t.readCString(), this.content_encoding = t.readCString()) : this.item_type === \"uri \" && (this.item_uri_type = t.readCString()));\n    }), n.createFullBoxCtor(\"ipma\", function(t) {\n        var e, i;\n        for(entry_count = t.readUint32(), this.associations = [], e = 0; e < entry_count; e++){\n            var s = {};\n            this.associations.push(s), this.version < 1 ? s.id = t.readUint16() : s.id = t.readUint32();\n            var o = t.readUint8();\n            for(s.props = [], i = 0; i < o; i++){\n                var c = t.readUint8(), u = {};\n                s.props.push(u), u.essential = (c & 128) >> 7 === 1, this.flags & 1 ? u.property_index = (c & 127) << 8 | t.readUint8() : u.property_index = c & 127;\n            }\n        }\n    }), n.createFullBoxCtor(\"iref\", function(t) {\n        var e, i;\n        for(this.references = []; t.getPosition() < this.start + this.size;)if (e = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), e.code === n.OK) this.version === 0 ? i = new n.SingleItemTypeReferenceBox(e.type, e.size, e.hdr_size, e.start) : i = new n.SingleItemTypeReferenceBoxLarge(e.type, e.size, e.hdr_size, e.start), i.write === n.Box.prototype.write && i.type !== \"mdat\" && (r.warn(\"BoxParser\", i.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), i.parseDataAndRewind(t)), i.parse(t), this.references.push(i);\n        else return;\n    }), n.createBoxCtor(\"irot\", function(t) {\n        this.angle = t.readUint8() & 3;\n    }), n.createFullBoxCtor(\"ispe\", function(t) {\n        this.image_width = t.readUint32(), this.image_height = t.readUint32();\n    }), n.createFullBoxCtor(\"kind\", function(t) {\n        this.schemeURI = t.readCString(), this.value = t.readCString();\n    }), n.createFullBoxCtor(\"leva\", function(t) {\n        var e = t.readUint8();\n        this.levels = [];\n        for(var i = 0; i < e; i++){\n            var s = {};\n            this.levels[i] = s, s.track_ID = t.readUint32();\n            var o = t.readUint8();\n            switch(s.padding_flag = o >> 7, s.assignment_type = o & 127, s.assignment_type){\n                case 0:\n                    s.grouping_type = t.readString(4);\n                    break;\n                case 1:\n                    s.grouping_type = t.readString(4), s.grouping_type_parameter = t.readUint32();\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    break;\n                case 4:\n                    s.sub_track_id = t.readUint32();\n                    break;\n                default:\n                    r.warn(\"BoxParser\", \"Unknown leva assignement type\");\n            }\n        }\n    }), n.createBoxCtor(\"lsel\", function(t) {\n        this.layer_id = t.readUint16();\n    }), n.createBoxCtor(\"maxr\", function(t) {\n        this.period = t.readUint32(), this.bytes = t.readUint32();\n    }), n.createBoxCtor(\"mdcv\", function(t) {\n        this.display_primaries = [], this.display_primaries[0] = {}, this.display_primaries[0].x = t.readUint16(), this.display_primaries[0].y = t.readUint16(), this.display_primaries[1] = {}, this.display_primaries[1].x = t.readUint16(), this.display_primaries[1].y = t.readUint16(), this.display_primaries[2] = {}, this.display_primaries[2].x = t.readUint16(), this.display_primaries[2].y = t.readUint16(), this.white_point = {}, this.white_point.x = t.readUint16(), this.white_point.y = t.readUint16(), this.max_display_mastering_luminance = t.readUint32(), this.min_display_mastering_luminance = t.readUint32();\n    }), n.createFullBoxCtor(\"mdhd\", function(t) {\n        this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.timescale = t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.timescale = t.readUint32(), this.duration = t.readUint32()), this.parseLanguage(t), t.readUint16();\n    }), n.createFullBoxCtor(\"mehd\", function(t) {\n        this.flags & 1 && (r.warn(\"BoxParser\", \"mehd box incorrectly uses flags set to 1, converting version to 1\"), this.version = 1), this.version == 1 ? this.fragment_duration = t.readUint64() : this.fragment_duration = t.readUint32();\n    }), n.createFullBoxCtor(\"meta\", function(t) {\n        this.boxes = [], n.ContainerBox.prototype.parse.call(this, t);\n    }), n.createFullBoxCtor(\"mfhd\", function(t) {\n        this.sequence_number = t.readUint32();\n    }), n.createFullBoxCtor(\"mfro\", function(t) {\n        this._size = t.readUint32();\n    }), n.createFullBoxCtor(\"mvhd\", function(t) {\n        this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.timescale = t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.timescale = t.readUint32(), this.duration = t.readUint32()), this.rate = t.readUint32(), this.volume = t.readUint16() >> 8, t.readUint16(), t.readUint32Array(2), this.matrix = t.readUint32Array(9), t.readUint32Array(6), this.next_track_id = t.readUint32();\n    }), n.createBoxCtor(\"npck\", function(t) {\n        this.packetssent = t.readUint32();\n    }), n.createBoxCtor(\"nump\", function(t) {\n        this.packetssent = t.readUint64();\n    }), n.createFullBoxCtor(\"padb\", function(t) {\n        var e = t.readUint32();\n        this.padbits = [];\n        for(var i = 0; i < Math.floor((e + 1) / 2); i++)this.padbits = t.readUint8();\n    }), n.createBoxCtor(\"pasp\", function(t) {\n        this.hSpacing = t.readUint32(), this.vSpacing = t.readUint32();\n    }), n.createBoxCtor(\"payl\", function(t) {\n        this.text = t.readString(this.size - this.hdr_size);\n    }), n.createBoxCtor(\"payt\", function(t) {\n        this.payloadID = t.readUint32();\n        var e = t.readUint8();\n        this.rtpmap_string = t.readString(e);\n    }), n.createFullBoxCtor(\"pdin\", function(t) {\n        var e = (this.size - this.hdr_size) / 8;\n        this.rate = [], this.initial_delay = [];\n        for(var i = 0; i < e; i++)this.rate[i] = t.readUint32(), this.initial_delay[i] = t.readUint32();\n    }), n.createFullBoxCtor(\"pitm\", function(t) {\n        this.version === 0 ? this.item_id = t.readUint16() : this.item_id = t.readUint32();\n    }), n.createFullBoxCtor(\"pixi\", function(t) {\n        var e;\n        for(this.num_channels = t.readUint8(), this.bits_per_channels = [], e = 0; e < this.num_channels; e++)this.bits_per_channels[e] = t.readUint8();\n    }), n.createBoxCtor(\"pmax\", function(t) {\n        this.bytes = t.readUint32();\n    }), n.createFullBoxCtor(\"prft\", function(t) {\n        this.ref_track_id = t.readUint32(), this.ntp_timestamp = t.readUint64(), this.version === 0 ? this.media_time = t.readUint32() : this.media_time = t.readUint64();\n    }), n.createFullBoxCtor(\"pssh\", function(t) {\n        if (this.system_id = n.parseHex16(t), this.version > 0) {\n            var e = t.readUint32();\n            this.kid = [];\n            for(var i = 0; i < e; i++)this.kid[i] = n.parseHex16(t);\n        }\n        var s = t.readUint32();\n        s > 0 && (this.data = t.readUint8Array(s));\n    }), n.createFullBoxCtor(\"clef\", function(t) {\n        this.width = t.readUint32(), this.height = t.readUint32();\n    }), n.createFullBoxCtor(\"enof\", function(t) {\n        this.width = t.readUint32(), this.height = t.readUint32();\n    }), n.createFullBoxCtor(\"prof\", function(t) {\n        this.width = t.readUint32(), this.height = t.readUint32();\n    }), n.createContainerBoxCtor(\"tapt\", null, [\n        \"clef\",\n        \"prof\",\n        \"enof\"\n    ]), n.createBoxCtor(\"rtp \", function(t) {\n        this.descriptionformat = t.readString(4), this.sdptext = t.readString(this.size - this.hdr_size - 4);\n    }), n.createFullBoxCtor(\"saio\", function(t) {\n        this.flags & 1 && (this.aux_info_type = t.readUint32(), this.aux_info_type_parameter = t.readUint32());\n        var e = t.readUint32();\n        this.offset = [];\n        for(var i = 0; i < e; i++)this.version === 0 ? this.offset[i] = t.readUint32() : this.offset[i] = t.readUint64();\n    }), n.createFullBoxCtor(\"saiz\", function(t) {\n        this.flags & 1 && (this.aux_info_type = t.readUint32(), this.aux_info_type_parameter = t.readUint32()), this.default_sample_info_size = t.readUint8();\n        var e = t.readUint32();\n        if (this.sample_info_size = [], this.default_sample_info_size === 0) for(var i = 0; i < e; i++)this.sample_info_size[i] = t.readUint8();\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"mett\", function(t) {\n        this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"metx\", function(t) {\n        this.parseHeader(t), this.content_encoding = t.readCString(), this.namespace = t.readCString(), this.schema_location = t.readCString(), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"sbtt\", function(t) {\n        this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stpp\", function(t) {\n        this.parseHeader(t), this.namespace = t.readCString(), this.schema_location = t.readCString(), this.auxiliary_mime_types = t.readCString(), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stxt\", function(t) {\n        this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"tx3g\", function(t) {\n        this.parseHeader(t), this.displayFlags = t.readUint32(), this.horizontal_justification = t.readInt8(), this.vertical_justification = t.readInt8(), this.bg_color_rgba = t.readUint8Array(4), this.box_record = t.readInt16Array(4), this.style_record = t.readUint8Array(12), this.parseFooter(t);\n    }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"wvtt\", function(t) {\n        this.parseHeader(t), this.parseFooter(t);\n    }), n.createSampleGroupCtor(\"alst\", function(t) {\n        var e, i = t.readUint16();\n        for(this.first_output_sample = t.readUint16(), this.sample_offset = [], e = 0; e < i; e++)this.sample_offset[e] = t.readUint32();\n        var s = this.description_length - 4 - 4 * i;\n        for(this.num_output_samples = [], this.num_total_samples = [], e = 0; e < s / 4; e++)this.num_output_samples[e] = t.readUint16(), this.num_total_samples[e] = t.readUint16();\n    }), n.createSampleGroupCtor(\"avll\", function(t) {\n        this.layerNumber = t.readUint8(), this.accurateStatisticsFlag = t.readUint8(), this.avgBitRate = t.readUint16(), this.avgFrameRate = t.readUint16();\n    }), n.createSampleGroupCtor(\"avss\", function(t) {\n        this.subSequenceIdentifier = t.readUint16(), this.layerNumber = t.readUint8();\n        var e = t.readUint8();\n        this.durationFlag = e >> 7, this.avgRateFlag = e >> 6 & 1, this.durationFlag && (this.duration = t.readUint32()), this.avgRateFlag && (this.accurateStatisticsFlag = t.readUint8(), this.avgBitRate = t.readUint16(), this.avgFrameRate = t.readUint16()), this.dependency = [];\n        for(var i = t.readUint8(), s = 0; s < i; s++){\n            var o = {};\n            this.dependency.push(o), o.subSeqDirectionFlag = t.readUint8(), o.layerNumber = t.readUint8(), o.subSequenceIdentifier = t.readUint16();\n        }\n    }), n.createSampleGroupCtor(\"dtrt\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"mvif\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"prol\", function(t) {\n        this.roll_distance = t.readInt16();\n    }), n.createSampleGroupCtor(\"rap \", function(t) {\n        var e = t.readUint8();\n        this.num_leading_samples_known = e >> 7, this.num_leading_samples = e & 127;\n    }), n.createSampleGroupCtor(\"rash\", function(t) {\n        if (this.operation_point_count = t.readUint16(), this.description_length !== 2 + (this.operation_point_count === 1 ? 2 : this.operation_point_count * 6) + 9) r.warn(\"BoxParser\", \"Mismatch in \" + this.grouping_type + \" sample group length\"), this.data = t.readUint8Array(this.description_length - 2);\n        else {\n            if (this.operation_point_count === 1) this.target_rate_share = t.readUint16();\n            else {\n                this.target_rate_share = [], this.available_bitrate = [];\n                for(var e = 0; e < this.operation_point_count; e++)this.available_bitrate[e] = t.readUint32(), this.target_rate_share[e] = t.readUint16();\n            }\n            this.maximum_bitrate = t.readUint32(), this.minimum_bitrate = t.readUint32(), this.discard_priority = t.readUint8();\n        }\n    }), n.createSampleGroupCtor(\"roll\", function(t) {\n        this.roll_distance = t.readInt16();\n    }), n.SampleGroupEntry.prototype.parse = function(t) {\n        r.warn(\"BoxParser\", \"Unknown Sample Group type: \" + this.grouping_type), this.data = t.readUint8Array(this.description_length);\n    }, n.createSampleGroupCtor(\"scif\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"scnm\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"seig\", function(t) {\n        this.reserved = t.readUint8();\n        var e = t.readUint8();\n        this.crypt_byte_block = e >> 4, this.skip_byte_block = e & 15, this.isProtected = t.readUint8(), this.Per_Sample_IV_Size = t.readUint8(), this.KID = n.parseHex16(t), this.constant_IV_size = 0, this.constant_IV = 0, this.isProtected === 1 && this.Per_Sample_IV_Size === 0 && (this.constant_IV_size = t.readUint8(), this.constant_IV = t.readUint8Array(this.constant_IV_size));\n    }), n.createSampleGroupCtor(\"stsa\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"sync\", function(t) {\n        var e = t.readUint8();\n        this.NAL_unit_type = e & 63;\n    }), n.createSampleGroupCtor(\"tele\", function(t) {\n        var e = t.readUint8();\n        this.level_independently_decodable = e >> 7;\n    }), n.createSampleGroupCtor(\"tsas\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"tscl\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createSampleGroupCtor(\"vipr\", function(t) {\n        r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    }), n.createFullBoxCtor(\"sbgp\", function(t) {\n        this.grouping_type = t.readString(4), this.version === 1 ? this.grouping_type_parameter = t.readUint32() : this.grouping_type_parameter = 0, this.entries = [];\n        for(var e = t.readUint32(), i = 0; i < e; i++){\n            var s = {};\n            this.entries.push(s), s.sample_count = t.readInt32(), s.group_description_index = t.readInt32();\n        }\n    }), n.createFullBoxCtor(\"schm\", function(t) {\n        this.scheme_type = t.readString(4), this.scheme_version = t.readUint32(), this.flags & 1 && (this.scheme_uri = t.readString(this.size - this.hdr_size - 8));\n    }), n.createBoxCtor(\"sdp \", function(t) {\n        this.sdptext = t.readString(this.size - this.hdr_size);\n    }), n.createFullBoxCtor(\"sdtp\", function(t) {\n        var e, i = this.size - this.hdr_size;\n        this.is_leading = [], this.sample_depends_on = [], this.sample_is_depended_on = [], this.sample_has_redundancy = [];\n        for(var s = 0; s < i; s++)e = t.readUint8(), this.is_leading[s] = e >> 6, this.sample_depends_on[s] = e >> 4 & 3, this.sample_is_depended_on[s] = e >> 2 & 3, this.sample_has_redundancy[s] = e & 3;\n    }), n.createFullBoxCtor(\"senc\"), n.createFullBoxCtor(\"sgpd\", function(t) {\n        this.grouping_type = t.readString(4), r.debug(\"BoxParser\", \"Found Sample Groups of type \" + this.grouping_type), this.version === 1 ? this.default_length = t.readUint32() : this.default_length = 0, this.version >= 2 && (this.default_group_description_index = t.readUint32()), this.entries = [];\n        for(var e = t.readUint32(), i = 0; i < e; i++){\n            var s;\n            n[this.grouping_type + \"SampleGroupEntry\"] ? s = new n[this.grouping_type + \"SampleGroupEntry\"](this.grouping_type) : s = new n.SampleGroupEntry(this.grouping_type), this.entries.push(s), this.version === 1 ? this.default_length === 0 ? s.description_length = t.readUint32() : s.description_length = this.default_length : s.description_length = this.default_length, s.write === n.SampleGroupEntry.prototype.write && (r.info(\"BoxParser\", \"SampleGroup for type \" + this.grouping_type + \" writing not yet implemented, keeping unparsed data in memory for later write\"), s.data = t.readUint8Array(s.description_length), t.position -= s.description_length), s.parse(t);\n        }\n    }), n.createFullBoxCtor(\"sidx\", function(t) {\n        this.reference_ID = t.readUint32(), this.timescale = t.readUint32(), this.version === 0 ? (this.earliest_presentation_time = t.readUint32(), this.first_offset = t.readUint32()) : (this.earliest_presentation_time = t.readUint64(), this.first_offset = t.readUint64()), t.readUint16(), this.references = [];\n        for(var e = t.readUint16(), i = 0; i < e; i++){\n            var s = {};\n            this.references.push(s);\n            var o = t.readUint32();\n            s.reference_type = o >> 31 & 1, s.referenced_size = o & 2147483647, s.subsegment_duration = t.readUint32(), o = t.readUint32(), s.starts_with_SAP = o >> 31 & 1, s.SAP_type = o >> 28 & 7, s.SAP_delta_time = o & 268435455;\n        }\n    }), n.SingleItemTypeReferenceBox = function(t, e, i, s) {\n        n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n    }, n.SingleItemTypeReferenceBox.prototype = new n.Box(), n.SingleItemTypeReferenceBox.prototype.parse = function(t) {\n        this.from_item_ID = t.readUint16();\n        var e = t.readUint16();\n        this.references = [];\n        for(var i = 0; i < e; i++)this.references[i] = t.readUint16();\n    }, n.SingleItemTypeReferenceBoxLarge = function(t, e, i, s) {\n        n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n    }, n.SingleItemTypeReferenceBoxLarge.prototype = new n.Box(), n.SingleItemTypeReferenceBoxLarge.prototype.parse = function(t) {\n        this.from_item_ID = t.readUint32();\n        var e = t.readUint16();\n        this.references = [];\n        for(var i = 0; i < e; i++)this.references[i] = t.readUint32();\n    }, n.createFullBoxCtor(\"SmDm\", function(t) {\n        this.primaryRChromaticity_x = t.readUint16(), this.primaryRChromaticity_y = t.readUint16(), this.primaryGChromaticity_x = t.readUint16(), this.primaryGChromaticity_y = t.readUint16(), this.primaryBChromaticity_x = t.readUint16(), this.primaryBChromaticity_y = t.readUint16(), this.whitePointChromaticity_x = t.readUint16(), this.whitePointChromaticity_y = t.readUint16(), this.luminanceMax = t.readUint32(), this.luminanceMin = t.readUint32();\n    }), n.createFullBoxCtor(\"smhd\", function(t) {\n        this.balance = t.readUint16(), t.readUint16();\n    }), n.createFullBoxCtor(\"ssix\", function(t) {\n        this.subsegments = [];\n        for(var e = t.readUint32(), i = 0; i < e; i++){\n            var s = {};\n            this.subsegments.push(s), s.ranges = [];\n            for(var o = t.readUint32(), c = 0; c < o; c++){\n                var u = {};\n                s.ranges.push(u), u.level = t.readUint8(), u.range_size = t.readUint24();\n            }\n        }\n    }), n.createFullBoxCtor(\"stco\", function(t) {\n        var e;\n        if (e = t.readUint32(), this.chunk_offsets = [], this.version === 0) for(var i = 0; i < e; i++)this.chunk_offsets.push(t.readUint32());\n    }), n.createFullBoxCtor(\"stdp\", function(t) {\n        var e = (this.size - this.hdr_size) / 2;\n        this.priority = [];\n        for(var i = 0; i < e; i++)this.priority[i] = t.readUint16();\n    }), n.createFullBoxCtor(\"sthd\"), n.createFullBoxCtor(\"stri\", function(t) {\n        this.switch_group = t.readUint16(), this.alternate_group = t.readUint16(), this.sub_track_id = t.readUint32();\n        var e = (this.size - this.hdr_size - 8) / 4;\n        this.attribute_list = [];\n        for(var i = 0; i < e; i++)this.attribute_list[i] = t.readUint32();\n    }), n.createFullBoxCtor(\"stsc\", function(t) {\n        var e, i;\n        if (e = t.readUint32(), this.first_chunk = [], this.samples_per_chunk = [], this.sample_description_index = [], this.version === 0) for(i = 0; i < e; i++)this.first_chunk.push(t.readUint32()), this.samples_per_chunk.push(t.readUint32()), this.sample_description_index.push(t.readUint32());\n    }), n.createFullBoxCtor(\"stsd\", function(t) {\n        var e, i, s, o;\n        for(this.entries = [], s = t.readUint32(), e = 1; e <= s; e++)if (i = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), i.code === n.OK) n[i.type + \"SampleEntry\"] ? (o = new n[i.type + \"SampleEntry\"](i.size), o.hdr_size = i.hdr_size, o.start = i.start) : (r.warn(\"BoxParser\", \"Unknown sample entry type: \" + i.type), o = new n.SampleEntry(i.type, i.size, i.hdr_size, i.start)), o.write === n.SampleEntry.prototype.write && (r.info(\"BoxParser\", \"SampleEntry \" + o.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), o.parseDataAndRewind(t)), o.parse(t), this.entries.push(o);\n        else return;\n    }), n.createFullBoxCtor(\"stsg\", function(t) {\n        this.grouping_type = t.readUint32();\n        var e = t.readUint16();\n        this.group_description_index = [];\n        for(var i = 0; i < e; i++)this.group_description_index[i] = t.readUint32();\n    }), n.createFullBoxCtor(\"stsh\", function(t) {\n        var e, i;\n        if (e = t.readUint32(), this.shadowed_sample_numbers = [], this.sync_sample_numbers = [], this.version === 0) for(i = 0; i < e; i++)this.shadowed_sample_numbers.push(t.readUint32()), this.sync_sample_numbers.push(t.readUint32());\n    }), n.createFullBoxCtor(\"stss\", function(t) {\n        var e, i;\n        if (i = t.readUint32(), this.version === 0) for(this.sample_numbers = [], e = 0; e < i; e++)this.sample_numbers.push(t.readUint32());\n    }), n.createFullBoxCtor(\"stsz\", function(t) {\n        var e;\n        if (this.sample_sizes = [], this.version === 0) for(this.sample_size = t.readUint32(), this.sample_count = t.readUint32(), e = 0; e < this.sample_count; e++)this.sample_size === 0 ? this.sample_sizes.push(t.readUint32()) : this.sample_sizes[e] = this.sample_size;\n    }), n.createFullBoxCtor(\"stts\", function(t) {\n        var e, i, s;\n        if (e = t.readUint32(), this.sample_counts = [], this.sample_deltas = [], this.version === 0) for(i = 0; i < e; i++)this.sample_counts.push(t.readUint32()), s = t.readInt32(), s < 0 && (r.warn(\"BoxParser\", \"File uses negative stts sample delta, using value 1 instead, sync may be lost!\"), s = 1), this.sample_deltas.push(s);\n    }), n.createFullBoxCtor(\"stvi\", function(t) {\n        var e = t.readUint32();\n        this.single_view_allowed = e & 3, this.stereo_scheme = t.readUint32();\n        var i = t.readUint32();\n        this.stereo_indication_type = t.readString(i);\n        var s, o;\n        for(this.boxes = []; t.getPosition() < this.start + this.size;)if (s = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), s.code === n.OK) o = s.box, this.boxes.push(o), this[o.type] = o;\n        else return;\n    }), n.createBoxCtor(\"styp\", function(t) {\n        n.ftypBox.prototype.parse.call(this, t);\n    }), n.createFullBoxCtor(\"stz2\", function(t) {\n        var e, i;\n        if (this.sample_sizes = [], this.version === 0) if (this.reserved = t.readUint24(), this.field_size = t.readUint8(), i = t.readUint32(), this.field_size === 4) for(e = 0; e < i; e += 2){\n            var s = t.readUint8();\n            this.sample_sizes[e] = s >> 4 & 15, this.sample_sizes[e + 1] = s & 15;\n        }\n        else if (this.field_size === 8) for(e = 0; e < i; e++)this.sample_sizes[e] = t.readUint8();\n        else if (this.field_size === 16) for(e = 0; e < i; e++)this.sample_sizes[e] = t.readUint16();\n        else r.error(\"BoxParser\", \"Error in length field in stz2 box\");\n    }), n.createFullBoxCtor(\"subs\", function(t) {\n        var e, i, s, o;\n        for(s = t.readUint32(), this.entries = [], e = 0; e < s; e++){\n            var c = {};\n            if (this.entries[e] = c, c.sample_delta = t.readUint32(), c.subsamples = [], o = t.readUint16(), o > 0) for(i = 0; i < o; i++){\n                var u = {};\n                c.subsamples.push(u), this.version == 1 ? u.size = t.readUint32() : u.size = t.readUint16(), u.priority = t.readUint8(), u.discardable = t.readUint8(), u.codec_specific_parameters = t.readUint32();\n            }\n        }\n    }), n.createFullBoxCtor(\"tenc\", function(t) {\n        if (t.readUint8(), this.version === 0) t.readUint8();\n        else {\n            var e = t.readUint8();\n            this.default_crypt_byte_block = e >> 4 & 15, this.default_skip_byte_block = e & 15;\n        }\n        this.default_isProtected = t.readUint8(), this.default_Per_Sample_IV_Size = t.readUint8(), this.default_KID = n.parseHex16(t), this.default_isProtected === 1 && this.default_Per_Sample_IV_Size === 0 && (this.default_constant_IV_size = t.readUint8(), this.default_constant_IV = t.readUint8Array(this.default_constant_IV_size));\n    }), n.createFullBoxCtor(\"tfdt\", function(t) {\n        this.version == 1 ? this.baseMediaDecodeTime = t.readUint64() : this.baseMediaDecodeTime = t.readUint32();\n    }), n.createFullBoxCtor(\"tfhd\", function(t) {\n        var e = 0;\n        this.track_id = t.readUint32(), this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET ? (this.base_data_offset = t.readUint64(), e += 8) : this.base_data_offset = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_DESC ? (this.default_sample_description_index = t.readUint32(), e += 4) : this.default_sample_description_index = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_DUR ? (this.default_sample_duration = t.readUint32(), e += 4) : this.default_sample_duration = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_SIZE ? (this.default_sample_size = t.readUint32(), e += 4) : this.default_sample_size = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_FLAGS ? (this.default_sample_flags = t.readUint32(), e += 4) : this.default_sample_flags = 0;\n    }), n.createFullBoxCtor(\"tfra\", function(t) {\n        this.track_ID = t.readUint32(), t.readUint24();\n        var e = t.readUint8();\n        this.length_size_of_traf_num = e >> 4 & 3, this.length_size_of_trun_num = e >> 2 & 3, this.length_size_of_sample_num = e & 3, this.entries = [];\n        for(var i = t.readUint32(), s = 0; s < i; s++)this.version === 1 ? (this.time = t.readUint64(), this.moof_offset = t.readUint64()) : (this.time = t.readUint32(), this.moof_offset = t.readUint32()), this.traf_number = t[\"readUint\" + 8 * (this.length_size_of_traf_num + 1)](), this.trun_number = t[\"readUint\" + 8 * (this.length_size_of_trun_num + 1)](), this.sample_number = t[\"readUint\" + 8 * (this.length_size_of_sample_num + 1)]();\n    }), n.createFullBoxCtor(\"tkhd\", function(t) {\n        this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.track_id = t.readUint32(), t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.track_id = t.readUint32(), t.readUint32(), this.duration = t.readUint32()), t.readUint32Array(2), this.layer = t.readInt16(), this.alternate_group = t.readInt16(), this.volume = t.readInt16() >> 8, t.readUint16(), this.matrix = t.readInt32Array(9), this.width = t.readUint32(), this.height = t.readUint32();\n    }), n.createBoxCtor(\"tmax\", function(t) {\n        this.time = t.readUint32();\n    }), n.createBoxCtor(\"tmin\", function(t) {\n        this.time = t.readUint32();\n    }), n.createBoxCtor(\"totl\", function(t) {\n        this.bytessent = t.readUint32();\n    }), n.createBoxCtor(\"tpay\", function(t) {\n        this.bytessent = t.readUint32();\n    }), n.createBoxCtor(\"tpyl\", function(t) {\n        this.bytessent = t.readUint64();\n    }), n.TrackGroupTypeBox.prototype.parse = function(t) {\n        this.parseFullHeader(t), this.track_group_id = t.readUint32();\n    }, n.createTrackGroupCtor(\"msrc\"), n.TrackReferenceTypeBox = function(t, e, i, s) {\n        n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n    }, n.TrackReferenceTypeBox.prototype = new n.Box(), n.TrackReferenceTypeBox.prototype.parse = function(t) {\n        this.track_ids = t.readUint32Array((this.size - this.hdr_size) / 4);\n    }, n.trefBox.prototype.parse = function(t) {\n        for(var e, i; t.getPosition() < this.start + this.size;)if (e = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), e.code === n.OK) i = new n.TrackReferenceTypeBox(e.type, e.size, e.hdr_size, e.start), i.write === n.Box.prototype.write && i.type !== \"mdat\" && (r.info(\"BoxParser\", \"TrackReference \" + i.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), i.parseDataAndRewind(t)), i.parse(t), this.boxes.push(i);\n        else return;\n    }, n.createFullBoxCtor(\"trep\", function(t) {\n        for(this.track_ID = t.readUint32(), this.boxes = []; t.getPosition() < this.start + this.size;)if (ret = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), ret.code === n.OK) box = ret.box, this.boxes.push(box);\n        else return;\n    }), n.createFullBoxCtor(\"trex\", function(t) {\n        this.track_id = t.readUint32(), this.default_sample_description_index = t.readUint32(), this.default_sample_duration = t.readUint32(), this.default_sample_size = t.readUint32(), this.default_sample_flags = t.readUint32();\n    }), n.createBoxCtor(\"trpy\", function(t) {\n        this.bytessent = t.readUint64();\n    }), n.createFullBoxCtor(\"trun\", function(t) {\n        var e = 0;\n        if (this.sample_count = t.readUint32(), e += 4, this.size - this.hdr_size > e && this.flags & n.TRUN_FLAGS_DATA_OFFSET ? (this.data_offset = t.readInt32(), e += 4) : this.data_offset = 0, this.size - this.hdr_size > e && this.flags & n.TRUN_FLAGS_FIRST_FLAG ? (this.first_sample_flags = t.readUint32(), e += 4) : this.first_sample_flags = 0, this.sample_duration = [], this.sample_size = [], this.sample_flags = [], this.sample_composition_time_offset = [], this.size - this.hdr_size > e) for(var i = 0; i < this.sample_count; i++)this.flags & n.TRUN_FLAGS_DURATION && (this.sample_duration[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_SIZE && (this.sample_size[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_FLAGS && (this.sample_flags[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.version === 0 ? this.sample_composition_time_offset[i] = t.readUint32() : this.sample_composition_time_offset[i] = t.readInt32());\n    }), n.createFullBoxCtor(\"tsel\", function(t) {\n        this.switch_group = t.readUint32();\n        var e = (this.size - this.hdr_size - 4) / 4;\n        this.attribute_list = [];\n        for(var i = 0; i < e; i++)this.attribute_list[i] = t.readUint32();\n    }), n.createFullBoxCtor(\"txtC\", function(t) {\n        this.config = t.readCString();\n    }), n.createFullBoxCtor(\"url \", function(t) {\n        this.flags !== 1 && (this.location = t.readCString());\n    }), n.createFullBoxCtor(\"urn \", function(t) {\n        this.name = t.readCString(), this.size - this.hdr_size - this.name.length - 1 > 0 && (this.location = t.readCString());\n    }), n.createUUIDBox(\"a5d40b30e81411ddba2f0800200c9a66\", !0, !1, function(t) {\n        this.LiveServerManifest = t.readString(this.size - this.hdr_size).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n    }), n.createUUIDBox(\"d08a4f1810f34a82b6c832d8aba183d3\", !0, !1, function(t) {\n        this.system_id = n.parseHex16(t);\n        var e = t.readUint32();\n        e > 0 && (this.data = t.readUint8Array(e));\n    }), n.createUUIDBox(\"a2394f525a9b4f14a2446c427c648df4\", !0, !1), n.createUUIDBox(\"8974dbce7be74c5184f97148f9882554\", !0, !1, function(t) {\n        this.default_AlgorithmID = t.readUint24(), this.default_IV_size = t.readUint8(), this.default_KID = n.parseHex16(t);\n    }), n.createUUIDBox(\"d4807ef2ca3946958e5426cb9e46a79f\", !0, !1, function(t) {\n        this.fragment_count = t.readUint8(), this.entries = [];\n        for(var e = 0; e < this.fragment_count; e++){\n            var i = {}, s = 0, o = 0;\n            this.version === 1 ? (s = t.readUint64(), o = t.readUint64()) : (s = t.readUint32(), o = t.readUint32()), i.absolute_time = s, i.absolute_duration = o, this.entries.push(i);\n        }\n    }), n.createUUIDBox(\"6d1d9b0542d544e680e2141daff757b2\", !0, !1, function(t) {\n        this.version === 1 ? (this.absolute_time = t.readUint64(), this.duration = t.readUint64()) : (this.absolute_time = t.readUint32(), this.duration = t.readUint32());\n    }), n.createFullBoxCtor(\"vmhd\", function(t) {\n        this.graphicsmode = t.readUint16(), this.opcolor = t.readUint16Array(3);\n    }), n.createFullBoxCtor(\"vpcC\", function(t) {\n        var e;\n        this.version === 1 ? (this.profile = t.readUint8(), this.level = t.readUint8(), e = t.readUint8(), this.bitDepth = e >> 4, this.chromaSubsampling = e >> 1 & 7, this.videoFullRangeFlag = e & 1, this.colourPrimaries = t.readUint8(), this.transferCharacteristics = t.readUint8(), this.matrixCoefficients = t.readUint8(), this.codecIntializationDataSize = t.readUint16(), this.codecIntializationData = t.readUint8Array(this.codecIntializationDataSize)) : (this.profile = t.readUint8(), this.level = t.readUint8(), e = t.readUint8(), this.bitDepth = e >> 4 & 15, this.colorSpace = e & 15, e = t.readUint8(), this.chromaSubsampling = e >> 4 & 15, this.transferFunction = e >> 1 & 7, this.videoFullRangeFlag = e & 1, this.codecIntializationDataSize = t.readUint16(), this.codecIntializationData = t.readUint8Array(this.codecIntializationDataSize));\n    }), n.createBoxCtor(\"vttC\", function(t) {\n        this.text = t.readString(this.size - this.hdr_size);\n    }), n.createFullBoxCtor(\"vvcC\", function(t) {\n        var e, i, s = {\n            held_bits: void 0,\n            num_held_bits: 0,\n            stream_read_1_bytes: function(x) {\n                this.held_bits = x.readUint8(), this.num_held_bits = 8;\n            },\n            stream_read_2_bytes: function(x) {\n                this.held_bits = x.readUint16(), this.num_held_bits = 16;\n            },\n            extract_bits: function(x) {\n                var P = this.held_bits >> this.num_held_bits - x & (1 << x) - 1;\n                return this.num_held_bits -= x, P;\n            }\n        };\n        if (s.stream_read_1_bytes(t), s.extract_bits(5), this.lengthSizeMinusOne = s.extract_bits(2), this.ptl_present_flag = s.extract_bits(1), this.ptl_present_flag) {\n            s.stream_read_2_bytes(t), this.ols_idx = s.extract_bits(9), this.num_sublayers = s.extract_bits(3), this.constant_frame_rate = s.extract_bits(2), this.chroma_format_idc = s.extract_bits(2), s.stream_read_1_bytes(t), this.bit_depth_minus8 = s.extract_bits(3), s.extract_bits(5);\n            {\n                if (s.stream_read_2_bytes(t), s.extract_bits(2), this.num_bytes_constraint_info = s.extract_bits(6), this.general_profile_idc = s.extract_bits(7), this.general_tier_flag = s.extract_bits(1), this.general_level_idc = t.readUint8(), s.stream_read_1_bytes(t), this.ptl_frame_only_constraint_flag = s.extract_bits(1), this.ptl_multilayer_enabled_flag = s.extract_bits(1), this.general_constraint_info = new Uint8Array(this.num_bytes_constraint_info), this.num_bytes_constraint_info) {\n                    for(e = 0; e < this.num_bytes_constraint_info - 1; e++){\n                        var o = s.extract_bits(6);\n                        s.stream_read_1_bytes(t);\n                        var c = s.extract_bits(2);\n                        this.general_constraint_info[e] = o << 2 | c;\n                    }\n                    this.general_constraint_info[this.num_bytes_constraint_info - 1] = s.extract_bits(6);\n                } else s.extract_bits(6);\n                for(s.stream_read_1_bytes(t), this.ptl_sublayer_present_mask = 0, i = this.num_sublayers - 2; i >= 0; --i){\n                    var u = s.extract_bits(1);\n                    this.ptl_sublayer_present_mask |= u << i;\n                }\n                for(i = this.num_sublayers; i <= 8 && this.num_sublayers > 1; ++i)s.extract_bits(1);\n                for(i = this.num_sublayers - 2; i >= 0; --i)this.ptl_sublayer_present_mask & 1 << i && (this.sublayer_level_idc[i] = t.readUint8());\n                if (this.ptl_num_sub_profiles = t.readUint8(), this.general_sub_profile_idc = [], this.ptl_num_sub_profiles) for(e = 0; e < this.ptl_num_sub_profiles; e++)this.general_sub_profile_idc.push(t.readUint32());\n            }\n            this.max_picture_width = t.readUint16(), this.max_picture_height = t.readUint16(), this.avg_frame_rate = t.readUint16();\n        }\n        var _ = 12, g = 13;\n        this.nalu_arrays = [];\n        var w = t.readUint8();\n        for(e = 0; e < w; e++){\n            var S = [];\n            this.nalu_arrays.push(S), s.stream_read_1_bytes(t), S.completeness = s.extract_bits(1), s.extract_bits(2), S.nalu_type = s.extract_bits(5);\n            var U = 1;\n            for(S.nalu_type != g && S.nalu_type != _ && (U = t.readUint16()), i = 0; i < U; i++){\n                var C = t.readUint16();\n                S.push({\n                    data: t.readUint8Array(C),\n                    length: C\n                });\n            }\n        }\n    }), n.createFullBoxCtor(\"vvnC\", function(t) {\n        var e = strm.readUint8();\n        this.lengthSizeMinusOne = e & 3;\n    }), n.SampleEntry.prototype.isVideo = function() {\n        return !1;\n    }, n.SampleEntry.prototype.isAudio = function() {\n        return !1;\n    }, n.SampleEntry.prototype.isSubtitle = function() {\n        return !1;\n    }, n.SampleEntry.prototype.isMetadata = function() {\n        return !1;\n    }, n.SampleEntry.prototype.isHint = function() {\n        return !1;\n    }, n.SampleEntry.prototype.getCodec = function() {\n        return this.type.replace(\".\", \"\");\n    }, n.SampleEntry.prototype.getWidth = function() {\n        return \"\";\n    }, n.SampleEntry.prototype.getHeight = function() {\n        return \"\";\n    }, n.SampleEntry.prototype.getChannelCount = function() {\n        return \"\";\n    }, n.SampleEntry.prototype.getSampleRate = function() {\n        return \"\";\n    }, n.SampleEntry.prototype.getSampleSize = function() {\n        return \"\";\n    }, n.VisualSampleEntry.prototype.isVideo = function() {\n        return !0;\n    }, n.VisualSampleEntry.prototype.getWidth = function() {\n        return this.width;\n    }, n.VisualSampleEntry.prototype.getHeight = function() {\n        return this.height;\n    }, n.AudioSampleEntry.prototype.isAudio = function() {\n        return !0;\n    }, n.AudioSampleEntry.prototype.getChannelCount = function() {\n        return this.channel_count;\n    }, n.AudioSampleEntry.prototype.getSampleRate = function() {\n        return this.samplerate;\n    }, n.AudioSampleEntry.prototype.getSampleSize = function() {\n        return this.samplesize;\n    }, n.SubtitleSampleEntry.prototype.isSubtitle = function() {\n        return !0;\n    }, n.MetadataSampleEntry.prototype.isMetadata = function() {\n        return !0;\n    }, n.decimalToHex = function(t, e) {\n        var i = Number(t).toString(16);\n        for(e = typeof e > \"u\" || e === null ? e = 2 : e; i.length < e;)i = \"0\" + i;\n        return i;\n    }, n.avc1SampleEntry.prototype.getCodec = n.avc2SampleEntry.prototype.getCodec = n.avc3SampleEntry.prototype.getCodec = n.avc4SampleEntry.prototype.getCodec = function() {\n        var t = n.SampleEntry.prototype.getCodec.call(this);\n        return this.avcC ? t + \".\" + n.decimalToHex(this.avcC.AVCProfileIndication) + n.decimalToHex(this.avcC.profile_compatibility) + n.decimalToHex(this.avcC.AVCLevelIndication) : t;\n    }, n.hev1SampleEntry.prototype.getCodec = n.hvc1SampleEntry.prototype.getCodec = function() {\n        var t, e = n.SampleEntry.prototype.getCodec.call(this);\n        if (this.hvcC) {\n            switch(e += \".\", this.hvcC.general_profile_space){\n                case 0:\n                    e += \"\";\n                    break;\n                case 1:\n                    e += \"A\";\n                    break;\n                case 2:\n                    e += \"B\";\n                    break;\n                case 3:\n                    e += \"C\";\n                    break;\n            }\n            e += this.hvcC.general_profile_idc, e += \".\";\n            var i = this.hvcC.general_profile_compatibility, s = 0;\n            for(t = 0; t < 32 && (s |= i & 1, t != 31); t++)s <<= 1, i >>= 1;\n            e += n.decimalToHex(s, 0), e += \".\", this.hvcC.general_tier_flag === 0 ? e += \"L\" : e += \"H\", e += this.hvcC.general_level_idc;\n            var o = !1, c = \"\";\n            for(t = 5; t >= 0; t--)(this.hvcC.general_constraint_indicator[t] || o) && (c = \".\" + n.decimalToHex(this.hvcC.general_constraint_indicator[t], 0) + c, o = !0);\n            e += c;\n        }\n        return e;\n    }, n.vvc1SampleEntry.prototype.getCodec = n.vvi1SampleEntry.prototype.getCodec = function() {\n        var t, e = n.SampleEntry.prototype.getCodec.call(this);\n        if (this.vvcC) {\n            e += \".\" + this.vvcC.general_profile_idc, this.vvcC.general_tier_flag ? e += \".H\" : e += \".L\", e += this.vvcC.general_level_idc;\n            var i = \"\";\n            if (this.vvcC.general_constraint_info) {\n                var s = [], o = 0;\n                o |= this.vvcC.ptl_frame_only_constraint << 7, o |= this.vvcC.ptl_multilayer_enabled << 6;\n                var c;\n                for(t = 0; t < this.vvcC.general_constraint_info.length; ++t)o |= this.vvcC.general_constraint_info[t] >> 2 & 63, s.push(o), o && (c = t), o = this.vvcC.general_constraint_info[t] >> 2 & 3;\n                if (c === void 0) i = \".CA\";\n                else {\n                    i = \".C\";\n                    var u = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\", _ = 0, g = 0;\n                    for(t = 0; t <= c; ++t)for(_ = _ << 8 | s[t], g += 8; g >= 5;){\n                        var w = _ >> g - 5 & 31;\n                        i += u[w], g -= 5, _ &= (1 << g) - 1;\n                    }\n                    g && (_ <<= 5 - g, i += u[_ & 31]);\n                }\n            }\n            e += i;\n        }\n        return e;\n    }, n.mp4aSampleEntry.prototype.getCodec = function() {\n        var t = n.SampleEntry.prototype.getCodec.call(this);\n        if (this.esds && this.esds.esd) {\n            var e = this.esds.esd.getOTI(), i = this.esds.esd.getAudioConfig();\n            return t + \".\" + n.decimalToHex(e) + (i ? \".\" + i : \"\");\n        } else return t;\n    }, n.stxtSampleEntry.prototype.getCodec = function() {\n        var t = n.SampleEntry.prototype.getCodec.call(this);\n        return this.mime_format ? t + \".\" + this.mime_format : t;\n    }, n.vp08SampleEntry.prototype.getCodec = n.vp09SampleEntry.prototype.getCodec = function() {\n        var t = n.SampleEntry.prototype.getCodec.call(this), e = this.vpcC.level;\n        e == 0 && (e = \"00\");\n        var i = this.vpcC.bitDepth;\n        return i == 8 && (i = \"08\"), t + \".0\" + this.vpcC.profile + \".\" + e + \".\" + i;\n    }, n.av01SampleEntry.prototype.getCodec = function() {\n        var t = n.SampleEntry.prototype.getCodec.call(this), e = this.av1C.seq_level_idx_0;\n        e < 10 && (e = \"0\" + e);\n        var i;\n        return this.av1C.seq_profile === 2 && this.av1C.high_bitdepth === 1 ? i = this.av1C.twelve_bit === 1 ? \"12\" : \"10\" : this.av1C.seq_profile <= 2 && (i = this.av1C.high_bitdepth === 1 ? \"10\" : \"08\"), t + \".\" + this.av1C.seq_profile + \".\" + e + (this.av1C.seq_tier_0 ? \"H\" : \"M\") + \".\" + i;\n    }, n.Box.prototype.writeHeader = function(t, e) {\n        this.size += 8, this.size > f && (this.size += 8), this.type === \"uuid\" && (this.size += 16), r.debug(\"BoxWriter\", \"Writing box \" + this.type + \" of size: \" + this.size + \" at position \" + t.getPosition() + (e || \"\")), this.size > f ? t.writeUint32(1) : (this.sizePosition = t.getPosition(), t.writeUint32(this.size)), t.writeString(this.type, null, 4), this.type === \"uuid\" && t.writeUint8Array(this.uuid), this.size > f && t.writeUint64(this.size);\n    }, n.FullBox.prototype.writeHeader = function(t) {\n        this.size += 4, n.Box.prototype.writeHeader.call(this, t, \" v=\" + this.version + \" f=\" + this.flags), t.writeUint8(this.version), t.writeUint24(this.flags);\n    }, n.Box.prototype.write = function(t) {\n        this.type === \"mdat\" ? this.data && (this.size = this.data.length, this.writeHeader(t), t.writeUint8Array(this.data)) : (this.size = this.data ? this.data.length : 0, this.writeHeader(t), this.data && t.writeUint8Array(this.data));\n    }, n.ContainerBox.prototype.write = function(t) {\n        this.size = 0, this.writeHeader(t);\n        for(var e = 0; e < this.boxes.length; e++)this.boxes[e] && (this.boxes[e].write(t), this.size += this.boxes[e].size);\n        r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n    }, n.TrackReferenceTypeBox.prototype.write = function(t) {\n        this.size = this.track_ids.length * 4, this.writeHeader(t), t.writeUint32Array(this.track_ids);\n    }, n.avcCBox.prototype.write = function(t) {\n        var e;\n        for(this.size = 7, e = 0; e < this.SPS.length; e++)this.size += 2 + this.SPS[e].length;\n        for(e = 0; e < this.PPS.length; e++)this.size += 2 + this.PPS[e].length;\n        for(this.ext && (this.size += this.ext.length), this.writeHeader(t), t.writeUint8(this.configurationVersion), t.writeUint8(this.AVCProfileIndication), t.writeUint8(this.profile_compatibility), t.writeUint8(this.AVCLevelIndication), t.writeUint8(this.lengthSizeMinusOne + 252), t.writeUint8(this.SPS.length + 224), e = 0; e < this.SPS.length; e++)t.writeUint16(this.SPS[e].length), t.writeUint8Array(this.SPS[e].nalu);\n        for(t.writeUint8(this.PPS.length), e = 0; e < this.PPS.length; e++)t.writeUint16(this.PPS[e].length), t.writeUint8Array(this.PPS[e].nalu);\n        this.ext && t.writeUint8Array(this.ext);\n    }, n.co64Box.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 4 + 8 * this.chunk_offsets.length, this.writeHeader(t), t.writeUint32(this.chunk_offsets.length), e = 0; e < this.chunk_offsets.length; e++)t.writeUint64(this.chunk_offsets[e]);\n    }, n.cslgBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 * 5, this.writeHeader(t), t.writeInt32(this.compositionToDTSShift), t.writeInt32(this.leastDecodeToDisplayDelta), t.writeInt32(this.greatestDecodeToDisplayDelta), t.writeInt32(this.compositionStartTime), t.writeInt32(this.compositionEndTime);\n    }, n.cttsBox.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 4 + 8 * this.sample_counts.length, this.writeHeader(t), t.writeUint32(this.sample_counts.length), e = 0; e < this.sample_counts.length; e++)t.writeUint32(this.sample_counts[e]), this.version === 1 ? t.writeInt32(this.sample_offsets[e]) : t.writeUint32(this.sample_offsets[e]);\n    }, n.drefBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.entries.length);\n        for(var e = 0; e < this.entries.length; e++)this.entries[e].write(t), this.size += this.entries[e].size;\n        r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n    }, n.elngBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = this.extended_language.length, this.writeHeader(t), t.writeString(this.extended_language);\n    }, n.elstBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 + 12 * this.entries.length, this.writeHeader(t), t.writeUint32(this.entries.length);\n        for(var e = 0; e < this.entries.length; e++){\n            var i = this.entries[e];\n            t.writeUint32(i.segment_duration), t.writeInt32(i.media_time), t.writeInt16(i.media_rate_integer), t.writeInt16(i.media_rate_fraction);\n        }\n    }, n.emsgBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 * 4 + this.message_data.length + (this.scheme_id_uri.length + 1) + (this.value.length + 1), this.writeHeader(t), t.writeCString(this.scheme_id_uri), t.writeCString(this.value), t.writeUint32(this.timescale), t.writeUint32(this.presentation_time_delta), t.writeUint32(this.event_duration), t.writeUint32(this.id), t.writeUint8Array(this.message_data);\n    }, n.ftypBox.prototype.write = function(t) {\n        this.size = 8 + 4 * this.compatible_brands.length, this.writeHeader(t), t.writeString(this.major_brand, null, 4), t.writeUint32(this.minor_version);\n        for(var e = 0; e < this.compatible_brands.length; e++)t.writeString(this.compatible_brands[e], null, 4);\n    }, n.hdlrBox.prototype.write = function(t) {\n        this.size = 5 * 4 + this.name.length + 1, this.version = 0, this.flags = 0, this.writeHeader(t), t.writeUint32(0), t.writeString(this.handler, null, 4), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeCString(this.name);\n    }, n.kindBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = this.schemeURI.length + 1 + (this.value.length + 1), this.writeHeader(t), t.writeCString(this.schemeURI), t.writeCString(this.value);\n    }, n.mdhdBox.prototype.write = function(t) {\n        this.size = 4 * 4 + 2 * 2, this.flags = 0, this.version = 0, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.timescale), t.writeUint32(this.duration), t.writeUint16(this.language), t.writeUint16(0);\n    }, n.mehdBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.fragment_duration);\n    }, n.mfhdBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.sequence_number);\n    }, n.mvhdBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 23 * 4 + 2 * 2, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.timescale), t.writeUint32(this.duration), t.writeUint32(this.rate), t.writeUint16(this.volume << 8), t.writeUint16(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32Array(this.matrix), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(this.next_track_id);\n    }, n.SampleEntry.prototype.writeHeader = function(t) {\n        this.size = 8, n.Box.prototype.writeHeader.call(this, t), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint16(this.data_reference_index);\n    }, n.SampleEntry.prototype.writeFooter = function(t) {\n        for(var e = 0; e < this.boxes.length; e++)this.boxes[e].write(t), this.size += this.boxes[e].size;\n        r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n    }, n.SampleEntry.prototype.write = function(t) {\n        this.writeHeader(t), t.writeUint8Array(this.data), this.size += this.data.length, r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n    }, n.VisualSampleEntry.prototype.write = function(t) {\n        this.writeHeader(t), this.size += 2 * 7 + 6 * 4 + 32, t.writeUint16(0), t.writeUint16(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint16(this.width), t.writeUint16(this.height), t.writeUint32(this.horizresolution), t.writeUint32(this.vertresolution), t.writeUint32(0), t.writeUint16(this.frame_count), t.writeUint8(Math.min(31, this.compressorname.length)), t.writeString(this.compressorname, null, 31), t.writeUint16(this.depth), t.writeInt16(-1), this.writeFooter(t);\n    }, n.AudioSampleEntry.prototype.write = function(t) {\n        this.writeHeader(t), this.size += 2 * 4 + 3 * 4, t.writeUint32(0), t.writeUint32(0), t.writeUint16(this.channel_count), t.writeUint16(this.samplesize), t.writeUint16(0), t.writeUint16(0), t.writeUint32(this.samplerate << 16), this.writeFooter(t);\n    }, n.stppSampleEntry.prototype.write = function(t) {\n        this.writeHeader(t), this.size += this.namespace.length + 1 + this.schema_location.length + 1 + this.auxiliary_mime_types.length + 1, t.writeCString(this.namespace), t.writeCString(this.schema_location), t.writeCString(this.auxiliary_mime_types), this.writeFooter(t);\n    }, n.SampleGroupEntry.prototype.write = function(t) {\n        t.writeUint8Array(this.data);\n    }, n.sbgpBox.prototype.write = function(t) {\n        this.version = 1, this.flags = 0, this.size = 12 + 8 * this.entries.length, this.writeHeader(t), t.writeString(this.grouping_type, null, 4), t.writeUint32(this.grouping_type_parameter), t.writeUint32(this.entries.length);\n        for(var e = 0; e < this.entries.length; e++){\n            var i = this.entries[e];\n            t.writeInt32(i.sample_count), t.writeInt32(i.group_description_index);\n        }\n    }, n.sgpdBox.prototype.write = function(t) {\n        var e, i;\n        for(this.flags = 0, this.size = 12, e = 0; e < this.entries.length; e++)i = this.entries[e], this.version === 1 && (this.default_length === 0 && (this.size += 4), this.size += i.data.length);\n        for(this.writeHeader(t), t.writeString(this.grouping_type, null, 4), this.version === 1 && t.writeUint32(this.default_length), this.version >= 2 && t.writeUint32(this.default_sample_description_index), t.writeUint32(this.entries.length), e = 0; e < this.entries.length; e++)i = this.entries[e], this.version === 1 && this.default_length === 0 && t.writeUint32(i.description_length), i.write(t);\n    }, n.sidxBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 * 4 + 2 + 2 + 12 * this.references.length, this.writeHeader(t), t.writeUint32(this.reference_ID), t.writeUint32(this.timescale), t.writeUint32(this.earliest_presentation_time), t.writeUint32(this.first_offset), t.writeUint16(0), t.writeUint16(this.references.length);\n        for(var e = 0; e < this.references.length; e++){\n            var i = this.references[e];\n            t.writeUint32(i.reference_type << 31 | i.referenced_size), t.writeUint32(i.subsegment_duration), t.writeUint32(i.starts_with_SAP << 31 | i.SAP_type << 28 | i.SAP_delta_time);\n        }\n    }, n.smhdBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 1, this.size = 4, this.writeHeader(t), t.writeUint16(this.balance), t.writeUint16(0);\n    }, n.stcoBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 + 4 * this.chunk_offsets.length, this.writeHeader(t), t.writeUint32(this.chunk_offsets.length), t.writeUint32Array(this.chunk_offsets);\n    }, n.stscBox.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 4 + 12 * this.first_chunk.length, this.writeHeader(t), t.writeUint32(this.first_chunk.length), e = 0; e < this.first_chunk.length; e++)t.writeUint32(this.first_chunk[e]), t.writeUint32(this.samples_per_chunk[e]), t.writeUint32(this.sample_description_index[e]);\n    }, n.stsdBox.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 0, this.writeHeader(t), t.writeUint32(this.entries.length), this.size += 4, e = 0; e < this.entries.length; e++)this.entries[e].write(t), this.size += this.entries[e].size;\n        r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n    }, n.stshBox.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 4 + 8 * this.shadowed_sample_numbers.length, this.writeHeader(t), t.writeUint32(this.shadowed_sample_numbers.length), e = 0; e < this.shadowed_sample_numbers.length; e++)t.writeUint32(this.shadowed_sample_numbers[e]), t.writeUint32(this.sync_sample_numbers[e]);\n    }, n.stssBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 + 4 * this.sample_numbers.length, this.writeHeader(t), t.writeUint32(this.sample_numbers.length), t.writeUint32Array(this.sample_numbers);\n    }, n.stszBox.prototype.write = function(t) {\n        var e, i = !0;\n        if (this.version = 0, this.flags = 0, this.sample_sizes.length > 0) for(e = 0; e + 1 < this.sample_sizes.length;)if (this.sample_sizes[e + 1] !== this.sample_sizes[0]) {\n            i = !1;\n            break;\n        } else e++;\n        else i = !1;\n        this.size = 8, i || (this.size += 4 * this.sample_sizes.length), this.writeHeader(t), i ? t.writeUint32(this.sample_sizes[0]) : t.writeUint32(0), t.writeUint32(this.sample_sizes.length), i || t.writeUint32Array(this.sample_sizes);\n    }, n.sttsBox.prototype.write = function(t) {\n        var e;\n        for(this.version = 0, this.flags = 0, this.size = 4 + 8 * this.sample_counts.length, this.writeHeader(t), t.writeUint32(this.sample_counts.length), e = 0; e < this.sample_counts.length; e++)t.writeUint32(this.sample_counts[e]), t.writeUint32(this.sample_deltas[e]);\n    }, n.tfdtBox.prototype.write = function(t) {\n        var e = Math.pow(2, 32) - 1;\n        this.version = this.baseMediaDecodeTime > e ? 1 : 0, this.flags = 0, this.size = 4, this.version === 1 && (this.size += 4), this.writeHeader(t), this.version === 1 ? t.writeUint64(this.baseMediaDecodeTime) : t.writeUint32(this.baseMediaDecodeTime);\n    }, n.tfhdBox.prototype.write = function(t) {\n        this.version = 0, this.size = 4, this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET && (this.size += 8), this.flags & n.TFHD_FLAG_SAMPLE_DESC && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_DUR && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_SIZE && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_FLAGS && (this.size += 4), this.writeHeader(t), t.writeUint32(this.track_id), this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET && t.writeUint64(this.base_data_offset), this.flags & n.TFHD_FLAG_SAMPLE_DESC && t.writeUint32(this.default_sample_description_index), this.flags & n.TFHD_FLAG_SAMPLE_DUR && t.writeUint32(this.default_sample_duration), this.flags & n.TFHD_FLAG_SAMPLE_SIZE && t.writeUint32(this.default_sample_size), this.flags & n.TFHD_FLAG_SAMPLE_FLAGS && t.writeUint32(this.default_sample_flags);\n    }, n.tkhdBox.prototype.write = function(t) {\n        this.version = 0, this.size = 4 * 18 + 2 * 4, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.track_id), t.writeUint32(0), t.writeUint32(this.duration), t.writeUint32(0), t.writeUint32(0), t.writeInt16(this.layer), t.writeInt16(this.alternate_group), t.writeInt16(this.volume << 8), t.writeUint16(0), t.writeInt32Array(this.matrix), t.writeUint32(this.width), t.writeUint32(this.height);\n    }, n.trexBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = 4 * 5, this.writeHeader(t), t.writeUint32(this.track_id), t.writeUint32(this.default_sample_description_index), t.writeUint32(this.default_sample_duration), t.writeUint32(this.default_sample_size), t.writeUint32(this.default_sample_flags);\n    }, n.trunBox.prototype.write = function(t) {\n        this.version = 0, this.size = 4, this.flags & n.TRUN_FLAGS_DATA_OFFSET && (this.size += 4), this.flags & n.TRUN_FLAGS_FIRST_FLAG && (this.size += 4), this.flags & n.TRUN_FLAGS_DURATION && (this.size += 4 * this.sample_duration.length), this.flags & n.TRUN_FLAGS_SIZE && (this.size += 4 * this.sample_size.length), this.flags & n.TRUN_FLAGS_FLAGS && (this.size += 4 * this.sample_flags.length), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.size += 4 * this.sample_composition_time_offset.length), this.writeHeader(t), t.writeUint32(this.sample_count), this.flags & n.TRUN_FLAGS_DATA_OFFSET && (this.data_offset_position = t.getPosition(), t.writeInt32(this.data_offset)), this.flags & n.TRUN_FLAGS_FIRST_FLAG && t.writeUint32(this.first_sample_flags);\n        for(var e = 0; e < this.sample_count; e++)this.flags & n.TRUN_FLAGS_DURATION && t.writeUint32(this.sample_duration[e]), this.flags & n.TRUN_FLAGS_SIZE && t.writeUint32(this.sample_size[e]), this.flags & n.TRUN_FLAGS_FLAGS && t.writeUint32(this.sample_flags[e]), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.version === 0 ? t.writeUint32(this.sample_composition_time_offset[e]) : t.writeInt32(this.sample_composition_time_offset[e]));\n    }, n[\"url Box\"].prototype.write = function(t) {\n        this.version = 0, this.location ? (this.flags = 0, this.size = this.location.length + 1) : (this.flags = 1, this.size = 0), this.writeHeader(t), this.location && t.writeCString(this.location);\n    }, n[\"urn Box\"].prototype.write = function(t) {\n        this.version = 0, this.flags = 0, this.size = this.name.length + 1 + (this.location ? this.location.length + 1 : 0), this.writeHeader(t), t.writeCString(this.name), this.location && t.writeCString(this.location);\n    }, n.vmhdBox.prototype.write = function(t) {\n        this.version = 0, this.flags = 1, this.size = 8, this.writeHeader(t), t.writeUint16(this.graphicsmode), t.writeUint16Array(this.opcolor);\n    }, n.cttsBox.prototype.unpack = function(t) {\n        var e, i, s;\n        for(s = 0, e = 0; e < this.sample_counts.length; e++)for(i = 0; i < this.sample_counts[e]; i++)t[s].pts = t[s].dts + this.sample_offsets[e], s++;\n    }, n.sttsBox.prototype.unpack = function(t) {\n        var e, i, s;\n        for(s = 0, e = 0; e < this.sample_counts.length; e++)for(i = 0; i < this.sample_counts[e]; i++)s === 0 ? t[s].dts = 0 : t[s].dts = t[s - 1].dts + this.sample_deltas[e], s++;\n    }, n.stcoBox.prototype.unpack = function(t) {\n        var e;\n        for(e = 0; e < this.chunk_offsets.length; e++)t[e].offset = this.chunk_offsets[e];\n    }, n.stscBox.prototype.unpack = function(t) {\n        var e, i, s, o, c;\n        for(o = 0, c = 0, e = 0; e < this.first_chunk.length; e++)for(i = 0; i < (e + 1 < this.first_chunk.length ? this.first_chunk[e + 1] : 1 / 0); i++)for(c++, s = 0; s < this.samples_per_chunk[e]; s++){\n            if (t[o]) t[o].description_index = this.sample_description_index[e], t[o].chunk_index = c;\n            else return;\n            o++;\n        }\n    }, n.stszBox.prototype.unpack = function(t) {\n        var e;\n        for(e = 0; e < this.sample_sizes.length; e++)t[e].size = this.sample_sizes[e];\n    }, n.DIFF_BOXES_PROP_NAMES = [\n        \"boxes\",\n        \"entries\",\n        \"references\",\n        \"subsamples\",\n        \"items\",\n        \"item_infos\",\n        \"extents\",\n        \"associations\",\n        \"subsegments\",\n        \"ranges\",\n        \"seekLists\",\n        \"seekPoints\",\n        \"esd\",\n        \"levels\"\n    ], n.DIFF_PRIMITIVE_ARRAY_PROP_NAMES = [\n        \"compatible_brands\",\n        \"matrix\",\n        \"opcolor\",\n        \"sample_counts\",\n        \"sample_counts\",\n        \"sample_deltas\",\n        \"first_chunk\",\n        \"samples_per_chunk\",\n        \"sample_sizes\",\n        \"chunk_offsets\",\n        \"sample_offsets\",\n        \"sample_description_index\",\n        \"sample_duration\"\n    ], n.boxEqualFields = function(t, e) {\n        if (t && !e) return !1;\n        var i;\n        for(i in t)if (!(n.DIFF_BOXES_PROP_NAMES.indexOf(i) > -1)) {\n            if (t[i] instanceof n.Box || e[i] instanceof n.Box) continue;\n            if (typeof t[i] > \"u\" || typeof e[i] > \"u\") continue;\n            if (typeof t[i] == \"function\" || typeof e[i] == \"function\") continue;\n            if (t.subBoxNames && t.subBoxNames.indexOf(i.slice(0, 4)) > -1 || e.subBoxNames && e.subBoxNames.indexOf(i.slice(0, 4)) > -1) continue;\n            if (i === \"data\" || i === \"start\" || i === \"size\" || i === \"creation_time\" || i === \"modification_time\") continue;\n            if (n.DIFF_PRIMITIVE_ARRAY_PROP_NAMES.indexOf(i) > -1) continue;\n            if (t[i] !== e[i]) return !1;\n        }\n        return !0;\n    }, n.boxEqual = function(t, e) {\n        if (!n.boxEqualFields(t, e)) return !1;\n        for(var i = 0; i < n.DIFF_BOXES_PROP_NAMES.length; i++){\n            var s = n.DIFF_BOXES_PROP_NAMES[i];\n            if (t[s] && e[s] && !n.boxEqual(t[s], e[s])) return !1;\n        }\n        return !0;\n    };\n    var v = function() {};\n    v.prototype.parseSample = function(t) {\n        var e = {}, i;\n        e.resources = [];\n        var s = new h(t.data.buffer);\n        if (!t.subsamples || t.subsamples.length === 0) e.documentString = s.readString(t.data.length);\n        else if (e.documentString = s.readString(t.subsamples[0].size), t.subsamples.length > 1) for(i = 1; i < t.subsamples.length; i++)e.resources[i] = s.readUint8Array(t.subsamples[i].size);\n        return typeof DOMParser < \"u\" && (e.document = new DOMParser().parseFromString(e.documentString, \"application/xml\")), e;\n    };\n    var b = function() {};\n    b.prototype.parseSample = function(t) {\n        var e, i = new h(t.data.buffer);\n        return e = i.readString(t.data.length), e;\n    }, b.prototype.parseConfig = function(t) {\n        var e, i = new h(t.buffer);\n        return i.readUint32(), e = i.readCString(), e;\n    }, l.XMLSubtitlein4Parser = v, l.Textin4Parser = b;\n    var y = function(t) {\n        this.stream = t || new d(), this.boxes = [], this.mdats = [], this.moofs = [], this.isProgressive = !1, this.moovStartFound = !1, this.onMoovStart = null, this.moovStartSent = !1, this.onReady = null, this.readySent = !1, this.onSegment = null, this.onSamples = null, this.onError = null, this.sampleListBuilt = !1, this.fragmentedTracks = [], this.extractedTracks = [], this.isFragmentationInitialized = !1, this.sampleProcessingStarted = !1, this.nextMoofNumber = 0, this.itemListBuilt = !1, this.onSidx = null, this.sidxSent = !1;\n    };\n    y.prototype.setSegmentOptions = function(t, e, i) {\n        var s = this.getTrackById(t);\n        if (s) {\n            var o = {};\n            this.fragmentedTracks.push(o), o.id = t, o.user = e, o.trak = s, s.nextSample = 0, o.segmentStream = null, o.nb_samples = 1e3, o.rapAlignement = !0, i && (i.nbSamples && (o.nb_samples = i.nbSamples), i.rapAlignement && (o.rapAlignement = i.rapAlignement));\n        }\n    }, y.prototype.unsetSegmentOptions = function(t) {\n        for(var e = -1, i = 0; i < this.fragmentedTracks.length; i++){\n            var s = this.fragmentedTracks[i];\n            s.id == t && (e = i);\n        }\n        e > -1 && this.fragmentedTracks.splice(e, 1);\n    }, y.prototype.setExtractionOptions = function(t, e, i) {\n        var s = this.getTrackById(t);\n        if (s) {\n            var o = {};\n            this.extractedTracks.push(o), o.id = t, o.user = e, o.trak = s, s.nextSample = 0, o.nb_samples = 1e3, o.samples = [], i && i.nbSamples && (o.nb_samples = i.nbSamples);\n        }\n    }, y.prototype.unsetExtractionOptions = function(t) {\n        for(var e = -1, i = 0; i < this.extractedTracks.length; i++){\n            var s = this.extractedTracks[i];\n            s.id == t && (e = i);\n        }\n        e > -1 && this.extractedTracks.splice(e, 1);\n    }, y.prototype.parse = function() {\n        var t, e, i = !1;\n        if (!(this.restoreParsePosition && !this.restoreParsePosition())) for(;;)if (this.hasIncompleteMdat && this.hasIncompleteMdat()) {\n            if (this.processIncompleteMdat()) continue;\n            return;\n        } else if (this.saveParsePosition && this.saveParsePosition(), t = n.parseOneBox(this.stream, i), t.code === n.ERR_NOT_ENOUGH_DATA) if (this.processIncompleteBox) {\n            if (this.processIncompleteBox(t)) continue;\n            return;\n        } else return;\n        else {\n            var s;\n            switch(e = t.box, s = e.type !== \"uuid\" ? e.type : e.uuid, this.boxes.push(e), s){\n                case \"mdat\":\n                    this.mdats.push(e);\n                    break;\n                case \"moof\":\n                    this.moofs.push(e);\n                    break;\n                case \"moov\":\n                    this.moovStartFound = !0, this.mdats.length === 0 && (this.isProgressive = !0);\n                default:\n                    this[s] !== void 0 && r.warn(\"ISOFile\", \"Duplicate Box of type: \" + s + \", overriding previous occurrence\"), this[s] = e;\n                    break;\n            }\n            this.updateUsedBytes && this.updateUsedBytes(e, t);\n        }\n    }, y.prototype.checkBuffer = function(t) {\n        if (t == null) throw \"Buffer must be defined and non empty\";\n        if (t.fileStart === void 0) throw \"Buffer must have a fileStart property\";\n        return t.byteLength === 0 ? (r.warn(\"ISOFile\", \"Ignoring empty buffer (fileStart: \" + t.fileStart + \")\"), this.stream.logBufferLevel(), !1) : (r.info(\"ISOFile\", \"Processing buffer (fileStart: \" + t.fileStart + \")\"), t.usedBytes = 0, this.stream.insertBuffer(t), this.stream.logBufferLevel(), this.stream.initialized() ? !0 : (r.warn(\"ISOFile\", \"Not ready to start parsing\"), !1));\n    }, y.prototype.appendBuffer = function(t, e) {\n        var i;\n        if (this.checkBuffer(t)) return this.parse(), this.moovStartFound && !this.moovStartSent && (this.moovStartSent = !0, this.onMoovStart && this.onMoovStart()), this.moov ? (this.sampleListBuilt || (this.buildSampleLists(), this.sampleListBuilt = !0), this.updateSampleLists(), this.onReady && !this.readySent && (this.readySent = !0, this.onReady(this.getInfo())), this.processSamples(e), this.nextSeekPosition ? (i = this.nextSeekPosition, this.nextSeekPosition = void 0) : i = this.nextParsePosition, this.stream.getEndFilePositionAfter && (i = this.stream.getEndFilePositionAfter(i))) : this.nextParsePosition ? i = this.nextParsePosition : i = 0, this.sidx && this.onSidx && !this.sidxSent && (this.onSidx(this.sidx), this.sidxSent = !0), this.meta && (this.flattenItemInfo && !this.itemListBuilt && (this.flattenItemInfo(), this.itemListBuilt = !0), this.processItems && this.processItems(this.onItem)), this.stream.cleanBuffers && (r.info(\"ISOFile\", \"Done processing buffer (fileStart: \" + t.fileStart + \") - next buffer to fetch should have a fileStart position of \" + i), this.stream.logBufferLevel(), this.stream.cleanBuffers(), this.stream.logBufferLevel(!0), r.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize())), i;\n    }, y.prototype.getInfo = function() {\n        var t, e, i = {}, s, o, c, u, _ = /* @__PURE__ */ new Date(\"1904-01-01T00:00:00Z\").getTime();\n        if (this.moov) for(i.hasMoov = !0, i.duration = this.moov.mvhd.duration, i.timescale = this.moov.mvhd.timescale, i.isFragmented = this.moov.mvex != null, i.isFragmented && this.moov.mvex.mehd && (i.fragment_duration = this.moov.mvex.mehd.fragment_duration), i.isProgressive = this.isProgressive, i.hasIOD = this.moov.iods != null, i.brands = [], i.brands.push(this.ftyp.major_brand), i.brands = i.brands.concat(this.ftyp.compatible_brands), i.created = new Date(_ + this.moov.mvhd.creation_time * 1e3), i.modified = new Date(_ + this.moov.mvhd.modification_time * 1e3), i.tracks = [], i.audioTracks = [], i.videoTracks = [], i.subtitleTracks = [], i.metadataTracks = [], i.hintTracks = [], i.otherTracks = [], t = 0; t < this.moov.traks.length; t++){\n            if (s = this.moov.traks[t], u = s.mdia.minf.stbl.stsd.entries[0], o = {}, i.tracks.push(o), o.id = s.tkhd.track_id, o.name = s.mdia.hdlr.name, o.references = [], s.tref) for(e = 0; e < s.tref.boxes.length; e++)c = {}, o.references.push(c), c.type = s.tref.boxes[e].type, c.track_ids = s.tref.boxes[e].track_ids;\n            s.edts && (o.edits = s.edts.elst.entries), o.created = new Date(_ + s.tkhd.creation_time * 1e3), o.modified = new Date(_ + s.tkhd.modification_time * 1e3), o.movie_duration = s.tkhd.duration, o.movie_timescale = i.timescale, o.layer = s.tkhd.layer, o.alternate_group = s.tkhd.alternate_group, o.volume = s.tkhd.volume, o.matrix = s.tkhd.matrix, o.track_width = s.tkhd.width / 65536, o.track_height = s.tkhd.height / 65536, o.timescale = s.mdia.mdhd.timescale, o.cts_shift = s.mdia.minf.stbl.cslg, o.duration = s.mdia.mdhd.duration, o.samples_duration = s.samples_duration, o.codec = u.getCodec(), o.kind = s.udta && s.udta.kinds.length ? s.udta.kinds[0] : {\n                schemeURI: \"\",\n                value: \"\"\n            }, o.language = s.mdia.elng ? s.mdia.elng.extended_language : s.mdia.mdhd.languageString, o.nb_samples = s.samples.length, o.size = s.samples_size, o.bitrate = o.size * 8 * o.timescale / o.samples_duration, u.isAudio() ? (o.type = \"audio\", i.audioTracks.push(o), o.audio = {}, o.audio.sample_rate = u.getSampleRate(), o.audio.channel_count = u.getChannelCount(), o.audio.sample_size = u.getSampleSize()) : u.isVideo() ? (o.type = \"video\", i.videoTracks.push(o), o.video = {}, o.video.width = u.getWidth(), o.video.height = u.getHeight()) : u.isSubtitle() ? (o.type = \"subtitles\", i.subtitleTracks.push(o)) : u.isHint() ? (o.type = \"metadata\", i.hintTracks.push(o)) : u.isMetadata() ? (o.type = \"metadata\", i.metadataTracks.push(o)) : (o.type = \"metadata\", i.otherTracks.push(o));\n        }\n        else i.hasMoov = !1;\n        if (i.mime = \"\", i.hasMoov && i.tracks) {\n            for(i.videoTracks && i.videoTracks.length > 0 ? i.mime += 'video/mp4; codecs=\"' : i.audioTracks && i.audioTracks.length > 0 ? i.mime += 'audio/mp4; codecs=\"' : i.mime += 'application/mp4; codecs=\"', t = 0; t < i.tracks.length; t++)t !== 0 && (i.mime += \",\"), i.mime += i.tracks[t].codec;\n            i.mime += '\"; profiles=\"', i.mime += this.ftyp.compatible_brands.join(), i.mime += '\"';\n        }\n        return i;\n    }, y.prototype.processSamples = function(t) {\n        var e, i;\n        if (this.sampleProcessingStarted) {\n            if (this.isFragmentationInitialized && this.onSegment !== null) for(e = 0; e < this.fragmentedTracks.length; e++){\n                var s = this.fragmentedTracks[e];\n                for(i = s.trak; i.nextSample < i.samples.length && this.sampleProcessingStarted;){\n                    r.debug(\"ISOFile\", \"Creating media fragment on track #\" + s.id + \" for sample \" + i.nextSample);\n                    var o = this.createFragment(s.id, i.nextSample, s.segmentStream);\n                    if (o) s.segmentStream = o, i.nextSample++;\n                    else break;\n                    if ((i.nextSample % s.nb_samples === 0 || t || i.nextSample >= i.samples.length) && (r.info(\"ISOFile\", \"Sending fragmented data on track #\" + s.id + \" for samples [\" + Math.max(0, i.nextSample - s.nb_samples) + \",\" + (i.nextSample - 1) + \"]\"), r.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize()), this.onSegment && this.onSegment(s.id, s.user, s.segmentStream.buffer, i.nextSample, t || i.nextSample >= i.samples.length), s.segmentStream = null, s !== this.fragmentedTracks[e])) break;\n                }\n            }\n            if (this.onSamples !== null) for(e = 0; e < this.extractedTracks.length; e++){\n                var c = this.extractedTracks[e];\n                for(i = c.trak; i.nextSample < i.samples.length && this.sampleProcessingStarted;){\n                    r.debug(\"ISOFile\", \"Exporting on track #\" + c.id + \" sample #\" + i.nextSample);\n                    var u = this.getSample(i, i.nextSample);\n                    if (u) i.nextSample++, c.samples.push(u);\n                    else break;\n                    if ((i.nextSample % c.nb_samples === 0 || i.nextSample >= i.samples.length) && (r.debug(\"ISOFile\", \"Sending samples on track #\" + c.id + \" for sample \" + i.nextSample), this.onSamples && this.onSamples(c.id, c.user, c.samples), c.samples = [], c !== this.extractedTracks[e])) break;\n                }\n            }\n        }\n    }, y.prototype.getBox = function(t) {\n        var e = this.getBoxes(t, !0);\n        return e.length ? e[0] : null;\n    }, y.prototype.getBoxes = function(t, e) {\n        var i = [];\n        return y._sweep.call(this, t, i, e), i;\n    }, y._sweep = function(t, e, i) {\n        this.type && this.type == t && e.push(this);\n        for(var s in this.boxes){\n            if (e.length && i) return;\n            y._sweep.call(this.boxes[s], t, e, i);\n        }\n    }, y.prototype.getTrackSamplesInfo = function(t) {\n        var e = this.getTrackById(t);\n        if (e) return e.samples;\n    }, y.prototype.getTrackSample = function(t, e) {\n        var i = this.getTrackById(t), s = this.getSample(i, e);\n        return s;\n    }, y.prototype.releaseUsedSamples = function(t, e) {\n        var i = 0, s = this.getTrackById(t);\n        s.lastValidSample || (s.lastValidSample = 0);\n        for(var o = s.lastValidSample; o < e; o++)i += this.releaseSample(s, o);\n        r.info(\"ISOFile\", \"Track #\" + t + \" released samples up to \" + e + \" (released size: \" + i + \", remaining: \" + this.samplesDataSize + \")\"), s.lastValidSample = e;\n    }, y.prototype.start = function() {\n        this.sampleProcessingStarted = !0, this.processSamples(!1);\n    }, y.prototype.stop = function() {\n        this.sampleProcessingStarted = !1;\n    }, y.prototype.flush = function() {\n        r.info(\"ISOFile\", \"Flushing remaining samples\"), this.updateSampleLists(), this.processSamples(!0), this.stream.cleanBuffers(), this.stream.logBufferLevel(!0);\n    }, y.prototype.seekTrack = function(t, e, i) {\n        var s, o, c = 1 / 0, u = 0, _ = 0, g;\n        if (i.samples.length === 0) return r.info(\"ISOFile\", \"No sample in track, cannot seek! Using time \" + r.getDurationString(0, 1) + \" and offset: 0\"), {\n            offset: 0,\n            time: 0\n        };\n        for(s = 0; s < i.samples.length; s++){\n            if (o = i.samples[s], s === 0) _ = 0, g = o.timescale;\n            else if (o.cts > t * o.timescale) {\n                _ = s - 1;\n                break;\n            }\n            e && o.is_sync && (u = s);\n        }\n        for(e && (_ = u), t = i.samples[_].cts, i.nextSample = _; i.samples[_].alreadyRead === i.samples[_].size && i.samples[_ + 1];)_++;\n        return c = i.samples[_].offset + i.samples[_].alreadyRead, r.info(\"ISOFile\", \"Seeking to \" + (e ? \"RAP\" : \"\") + \" sample #\" + i.nextSample + \" on track \" + i.tkhd.track_id + \", time \" + r.getDurationString(t, g) + \" and offset: \" + c), {\n            offset: c,\n            time: t / g\n        };\n    }, y.prototype.seek = function(t, e) {\n        var i = this.moov, s, o, c, u = {\n            offset: 1 / 0,\n            time: 1 / 0\n        };\n        if (this.moov) {\n            for(c = 0; c < i.traks.length; c++)s = i.traks[c], o = this.seekTrack(t, e, s), o.offset < u.offset && (u.offset = o.offset), o.time < u.time && (u.time = o.time);\n            return r.info(\"ISOFile\", \"Seeking at time \" + r.getDurationString(u.time, 1) + \" needs a buffer with a fileStart position of \" + u.offset), u.offset === 1 / 0 ? u = {\n                offset: this.nextParsePosition,\n                time: 0\n            } : u.offset = this.stream.getEndFilePositionAfter(u.offset), r.info(\"ISOFile\", \"Adjusted seek position (after checking data already in buffer): \" + u.offset), u;\n        } else throw \"Cannot seek: moov not received!\";\n    }, y.prototype.equal = function(t) {\n        for(var e = 0; e < this.boxes.length && e < t.boxes.length;){\n            var i = this.boxes[e], s = t.boxes[e];\n            if (!n.boxEqual(i, s)) return !1;\n            e++;\n        }\n        return !0;\n    }, l.ISOFile = y, y.prototype.lastBoxStartPosition = 0, y.prototype.parsingMdat = null, y.prototype.nextParsePosition = 0, y.prototype.discardMdatData = !1, y.prototype.processIncompleteBox = function(t) {\n        var e, i, s;\n        return t.type === \"mdat\" ? (e = new n[t.type + \"Box\"](t.size), this.parsingMdat = e, this.boxes.push(e), this.mdats.push(e), e.start = t.start, e.hdr_size = t.hdr_size, this.stream.addUsedBytes(e.hdr_size), this.lastBoxStartPosition = e.start + e.size, s = this.stream.seek(e.start + e.size, !1, this.discardMdatData), s ? (this.parsingMdat = null, !0) : (this.moovStartFound ? this.nextParsePosition = this.stream.findEndContiguousBuf() : this.nextParsePosition = e.start + e.size, !1)) : (t.type === \"moov\" && (this.moovStartFound = !0, this.mdats.length === 0 && (this.isProgressive = !0)), i = this.stream.mergeNextBuffer ? this.stream.mergeNextBuffer() : !1, i ? (this.nextParsePosition = this.stream.getEndPosition(), !0) : (t.type ? this.moovStartFound ? this.nextParsePosition = this.stream.getEndPosition() : this.nextParsePosition = this.stream.getPosition() + t.size : this.nextParsePosition = this.stream.getEndPosition(), !1));\n    }, y.prototype.hasIncompleteMdat = function() {\n        return this.parsingMdat !== null;\n    }, y.prototype.processIncompleteMdat = function() {\n        var t, e;\n        return t = this.parsingMdat, e = this.stream.seek(t.start + t.size, !1, this.discardMdatData), e ? (r.debug(\"ISOFile\", \"Found 'mdat' end in buffered data\"), this.parsingMdat = null, !0) : (this.nextParsePosition = this.stream.findEndContiguousBuf(), !1);\n    }, y.prototype.restoreParsePosition = function() {\n        return this.stream.seek(this.lastBoxStartPosition, !0, this.discardMdatData);\n    }, y.prototype.saveParsePosition = function() {\n        this.lastBoxStartPosition = this.stream.getPosition();\n    }, y.prototype.updateUsedBytes = function(t, e) {\n        this.stream.addUsedBytes && (t.type === \"mdat\" ? (this.stream.addUsedBytes(t.hdr_size), this.discardMdatData && this.stream.addUsedBytes(t.size - t.hdr_size)) : this.stream.addUsedBytes(t.size));\n    }, y.prototype.add = n.Box.prototype.add, y.prototype.addBox = n.Box.prototype.addBox, y.prototype.init = function(t) {\n        var e = t || {};\n        this.add(\"ftyp\").set(\"major_brand\", e.brands && e.brands[0] || \"iso4\").set(\"minor_version\", 0).set(\"compatible_brands\", e.brands || [\n            \"iso4\"\n        ]);\n        var i = this.add(\"moov\");\n        return i.add(\"mvhd\").set(\"timescale\", e.timescale || 600).set(\"rate\", e.rate || 65536).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"duration\", e.duration || 0).set(\"volume\", e.width ? 0 : 256).set(\"matrix\", [\n            65536,\n            0,\n            0,\n            0,\n            65536,\n            0,\n            0,\n            0,\n            1073741824\n        ]).set(\"next_track_id\", 1), i.add(\"mvex\"), this;\n    }, y.prototype.addTrack = function(t) {\n        this.moov || this.init(t);\n        var e = t || {};\n        e.width = e.width || 320, e.height = e.height || 320, e.id = e.id || this.moov.mvhd.next_track_id, e.type = e.type || \"avc1\";\n        var i = this.moov.add(\"trak\");\n        this.moov.mvhd.next_track_id = e.id + 1, i.add(\"tkhd\").set(\"flags\", n.TKHD_FLAG_ENABLED | n.TKHD_FLAG_IN_MOVIE | n.TKHD_FLAG_IN_PREVIEW).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"track_id\", e.id).set(\"duration\", e.duration || 0).set(\"layer\", e.layer || 0).set(\"alternate_group\", 0).set(\"volume\", 1).set(\"matrix\", [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]).set(\"width\", e.width << 16).set(\"height\", e.height << 16);\n        var s = i.add(\"mdia\");\n        s.add(\"mdhd\").set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"timescale\", e.timescale || 1).set(\"duration\", e.media_duration || 0).set(\"language\", e.language || \"und\"), s.add(\"hdlr\").set(\"handler\", e.hdlr || \"vide\").set(\"name\", e.name || \"Track created with MP4Box.js\"), s.add(\"elng\").set(\"extended_language\", e.language || \"fr-FR\");\n        var o = s.add(\"minf\");\n        if (n[e.type + \"SampleEntry\"] !== void 0) {\n            var c = new n[e.type + \"SampleEntry\"]();\n            c.data_reference_index = 1;\n            var u = \"\";\n            for(var _ in n.sampleEntryCodes)for(var g = n.sampleEntryCodes[_], w = 0; w < g.length; w++)if (g.indexOf(e.type) > -1) {\n                u = _;\n                break;\n            }\n            switch(u){\n                case \"Visual\":\n                    if (o.add(\"vmhd\").set(\"graphicsmode\", 0).set(\"opcolor\", [\n                        0,\n                        0,\n                        0\n                    ]), c.set(\"width\", e.width).set(\"height\", e.height).set(\"horizresolution\", 72 << 16).set(\"vertresolution\", 72 << 16).set(\"frame_count\", 1).set(\"compressorname\", e.type + \" Compressor\").set(\"depth\", 24), e.avcDecoderConfigRecord) {\n                        var S = new n.avcCBox(), U = new h(e.avcDecoderConfigRecord);\n                        S.parse(U), c.addBox(S);\n                    }\n                    break;\n                case \"Audio\":\n                    o.add(\"smhd\").set(\"balance\", e.balance || 0), c.set(\"channel_count\", e.channel_count || 2).set(\"samplesize\", e.samplesize || 16).set(\"samplerate\", e.samplerate || 65536);\n                    break;\n                case \"Hint\":\n                    o.add(\"hmhd\");\n                    break;\n                case \"Subtitle\":\n                    switch(o.add(\"sthd\"), e.type){\n                        case \"stpp\":\n                            c.set(\"namespace\", e.namespace || \"nonamespace\").set(\"schema_location\", e.schema_location || \"\").set(\"auxiliary_mime_types\", e.auxiliary_mime_types || \"\");\n                            break;\n                    }\n                    break;\n                case \"Metadata\":\n                    o.add(\"nmhd\");\n                    break;\n                case \"System\":\n                    o.add(\"nmhd\");\n                    break;\n                default:\n                    o.add(\"nmhd\");\n                    break;\n            }\n            e.description && c.addBox(e.description), e.description_boxes && e.description_boxes.forEach(function(x) {\n                c.addBox(x);\n            }), o.add(\"dinf\").add(\"dref\").addEntry(new n[\"url Box\"]().set(\"flags\", 1));\n            var C = o.add(\"stbl\");\n            return C.add(\"stsd\").addEntry(c), C.add(\"stts\").set(\"sample_counts\", []).set(\"sample_deltas\", []), C.add(\"stsc\").set(\"first_chunk\", []).set(\"samples_per_chunk\", []).set(\"sample_description_index\", []), C.add(\"stco\").set(\"chunk_offsets\", []), C.add(\"stsz\").set(\"sample_sizes\", []), this.moov.mvex.add(\"trex\").set(\"track_id\", e.id).set(\"default_sample_description_index\", e.default_sample_description_index || 1).set(\"default_sample_duration\", e.default_sample_duration || 0).set(\"default_sample_size\", e.default_sample_size || 0).set(\"default_sample_flags\", e.default_sample_flags || 0), this.buildTrakSampleLists(i), e.id;\n        }\n    }, n.Box.prototype.computeSize = function(t) {\n        var e = t || new a();\n        e.endianness = a.BIG_ENDIAN, this.write(e);\n    }, y.prototype.addSample = function(t, e, i) {\n        var s = i || {}, o = {}, c = this.getTrackById(t);\n        if (c !== null) {\n            o.number = c.samples.length, o.track_id = c.tkhd.track_id, o.timescale = c.mdia.mdhd.timescale, o.description_index = s.sample_description_index ? s.sample_description_index - 1 : 0, o.description = c.mdia.minf.stbl.stsd.entries[o.description_index], o.data = e, o.size = e.byteLength, o.alreadyRead = o.size, o.duration = s.duration || 1, o.cts = s.cts || 0, o.dts = s.dts || 0, o.is_sync = s.is_sync || !1, o.is_leading = s.is_leading || 0, o.depends_on = s.depends_on || 0, o.is_depended_on = s.is_depended_on || 0, o.has_redundancy = s.has_redundancy || 0, o.degradation_priority = s.degradation_priority || 0, o.offset = 0, o.subsamples = s.subsamples, c.samples.push(o), c.samples_size += o.size, c.samples_duration += o.duration, c.first_dts || (c.first_dts = s.dts), this.processSamples();\n            var u = this.createSingleSampleMoof(o);\n            return this.addBox(u), u.computeSize(), u.trafs[0].truns[0].data_offset = u.size + 8, this.add(\"mdat\").data = new Uint8Array(e), o;\n        }\n    }, y.prototype.createSingleSampleMoof = function(t) {\n        var e = 0;\n        t.is_sync ? e = 1 << 25 : e = 65536;\n        var i = new n.moofBox();\n        i.add(\"mfhd\").set(\"sequence_number\", this.nextMoofNumber), this.nextMoofNumber++;\n        var s = i.add(\"traf\"), o = this.getTrackById(t.track_id);\n        return s.add(\"tfhd\").set(\"track_id\", t.track_id).set(\"flags\", n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF), s.add(\"tfdt\").set(\"baseMediaDecodeTime\", t.dts - (o.first_dts || 0)), s.add(\"trun\").set(\"flags\", n.TRUN_FLAGS_DATA_OFFSET | n.TRUN_FLAGS_DURATION | n.TRUN_FLAGS_SIZE | n.TRUN_FLAGS_FLAGS | n.TRUN_FLAGS_CTS_OFFSET).set(\"data_offset\", 0).set(\"first_sample_flags\", 0).set(\"sample_count\", 1).set(\"sample_duration\", [\n            t.duration\n        ]).set(\"sample_size\", [\n            t.size\n        ]).set(\"sample_flags\", [\n            e\n        ]).set(\"sample_composition_time_offset\", [\n            t.cts - t.dts\n        ]), i;\n    }, y.prototype.lastMoofIndex = 0, y.prototype.samplesDataSize = 0, y.prototype.resetTables = function() {\n        var t, e, i, s, o, c, u, _;\n        for(this.initial_duration = this.moov.mvhd.duration, this.moov.mvhd.duration = 0, t = 0; t < this.moov.traks.length; t++){\n            e = this.moov.traks[t], e.tkhd.duration = 0, e.mdia.mdhd.duration = 0, i = e.mdia.minf.stbl.stco || e.mdia.minf.stbl.co64, i.chunk_offsets = [], s = e.mdia.minf.stbl.stsc, s.first_chunk = [], s.samples_per_chunk = [], s.sample_description_index = [], o = e.mdia.minf.stbl.stsz || e.mdia.minf.stbl.stz2, o.sample_sizes = [], c = e.mdia.minf.stbl.stts, c.sample_counts = [], c.sample_deltas = [], u = e.mdia.minf.stbl.ctts, u && (u.sample_counts = [], u.sample_offsets = []), _ = e.mdia.minf.stbl.stss;\n            var g = e.mdia.minf.stbl.boxes.indexOf(_);\n            g != -1 && (e.mdia.minf.stbl.boxes[g] = null);\n        }\n    }, y.initSampleGroups = function(t, e, i, s, o) {\n        var c, u, _, g;\n        function w(S, U, C) {\n            this.grouping_type = S, this.grouping_type_parameter = U, this.sbgp = C, this.last_sample_in_run = -1, this.entry_index = -1;\n        }\n        for(e && (e.sample_groups_info = []), t.sample_groups_info || (t.sample_groups_info = []), u = 0; u < i.length; u++){\n            for(g = i[u].grouping_type + \"/\" + i[u].grouping_type_parameter, _ = new w(i[u].grouping_type, i[u].grouping_type_parameter, i[u]), e && (e.sample_groups_info[g] = _), t.sample_groups_info[g] || (t.sample_groups_info[g] = _), c = 0; c < s.length; c++)s[c].grouping_type === i[u].grouping_type && (_.description = s[c], _.description.used = !0);\n            if (o) for(c = 0; c < o.length; c++)o[c].grouping_type === i[u].grouping_type && (_.fragment_description = o[c], _.fragment_description.used = !0, _.is_fragment = !0);\n        }\n        if (e) {\n            if (o) for(u = 0; u < o.length; u++)!o[u].used && o[u].version >= 2 && (g = o[u].grouping_type + \"/0\", _ = new w(o[u].grouping_type, 0), _.is_fragment = !0, e.sample_groups_info[g] || (e.sample_groups_info[g] = _));\n        } else for(u = 0; u < s.length; u++)!s[u].used && s[u].version >= 2 && (g = s[u].grouping_type + \"/0\", _ = new w(s[u].grouping_type, 0), t.sample_groups_info[g] || (t.sample_groups_info[g] = _));\n    }, y.setSampleGroupProperties = function(t, e, i, s) {\n        var o, c;\n        e.sample_groups = [];\n        for(o in s)if (e.sample_groups[o] = {}, e.sample_groups[o].grouping_type = s[o].grouping_type, e.sample_groups[o].grouping_type_parameter = s[o].grouping_type_parameter, i >= s[o].last_sample_in_run && (s[o].last_sample_in_run < 0 && (s[o].last_sample_in_run = 0), s[o].entry_index++, s[o].entry_index <= s[o].sbgp.entries.length - 1 && (s[o].last_sample_in_run += s[o].sbgp.entries[s[o].entry_index].sample_count)), s[o].entry_index <= s[o].sbgp.entries.length - 1 ? e.sample_groups[o].group_description_index = s[o].sbgp.entries[s[o].entry_index].group_description_index : e.sample_groups[o].group_description_index = -1, e.sample_groups[o].group_description_index !== 0) {\n            var u;\n            s[o].fragment_description ? u = s[o].fragment_description : u = s[o].description, e.sample_groups[o].group_description_index > 0 ? (e.sample_groups[o].group_description_index > 65535 ? c = (e.sample_groups[o].group_description_index >> 16) - 1 : c = e.sample_groups[o].group_description_index - 1, u && c >= 0 && (e.sample_groups[o].description = u.entries[c])) : u && u.version >= 2 && u.default_group_description_index > 0 && (e.sample_groups[o].description = u.entries[u.default_group_description_index - 1]);\n        }\n    }, y.process_sdtp = function(t, e, i) {\n        e && (t ? (e.is_leading = t.is_leading[i], e.depends_on = t.sample_depends_on[i], e.is_depended_on = t.sample_is_depended_on[i], e.has_redundancy = t.sample_has_redundancy[i]) : (e.is_leading = 0, e.depends_on = 0, e.is_depended_on = 0, e.has_redundancy = 0));\n    }, y.prototype.buildSampleLists = function() {\n        var t, e;\n        for(t = 0; t < this.moov.traks.length; t++)e = this.moov.traks[t], this.buildTrakSampleLists(e);\n    }, y.prototype.buildTrakSampleLists = function(t) {\n        var e, i, s, o, c, u, _, g, w, S, U, C, x, P, T, yt, Ut, ht, O, tt, Ht, ee, et, Et;\n        if (t.samples = [], t.samples_duration = 0, t.samples_size = 0, i = t.mdia.minf.stbl.stco || t.mdia.minf.stbl.co64, s = t.mdia.minf.stbl.stsc, o = t.mdia.minf.stbl.stsz || t.mdia.minf.stbl.stz2, c = t.mdia.minf.stbl.stts, u = t.mdia.minf.stbl.ctts, _ = t.mdia.minf.stbl.stss, g = t.mdia.minf.stbl.stsd, w = t.mdia.minf.stbl.subs, C = t.mdia.minf.stbl.stdp, S = t.mdia.minf.stbl.sbgps, U = t.mdia.minf.stbl.sgpds, ht = -1, O = -1, tt = -1, Ht = -1, ee = 0, et = 0, Et = 0, y.initSampleGroups(t, null, S, U), !(typeof o > \"u\")) {\n            for(e = 0; e < o.sample_sizes.length; e++){\n                var F = {};\n                F.number = e, F.track_id = t.tkhd.track_id, F.timescale = t.mdia.mdhd.timescale, F.alreadyRead = 0, t.samples[e] = F, F.size = o.sample_sizes[e], t.samples_size += F.size, e === 0 ? (P = 1, x = 0, F.chunk_index = P, F.chunk_run_index = x, Ut = s.samples_per_chunk[x], yt = 0, x + 1 < s.first_chunk.length ? T = s.first_chunk[x + 1] - 1 : T = 1 / 0) : e < Ut ? (F.chunk_index = P, F.chunk_run_index = x) : (P++, F.chunk_index = P, yt = 0, P <= T || (x++, x + 1 < s.first_chunk.length ? T = s.first_chunk[x + 1] - 1 : T = 1 / 0), F.chunk_run_index = x, Ut += s.samples_per_chunk[x]), F.description_index = s.sample_description_index[F.chunk_run_index] - 1, F.description = g.entries[F.description_index], F.offset = i.chunk_offsets[F.chunk_index - 1] + yt, yt += F.size, e > ht && (O++, ht < 0 && (ht = 0), ht += c.sample_counts[O]), e > 0 ? (t.samples[e - 1].duration = c.sample_deltas[O], t.samples_duration += t.samples[e - 1].duration, F.dts = t.samples[e - 1].dts + t.samples[e - 1].duration) : F.dts = 0, u ? (e >= tt && (Ht++, tt < 0 && (tt = 0), tt += u.sample_counts[Ht]), F.cts = t.samples[e].dts + u.sample_offsets[Ht]) : F.cts = F.dts, _ ? (e == _.sample_numbers[ee] - 1 ? (F.is_sync = !0, ee++) : (F.is_sync = !1, F.degradation_priority = 0), w && w.entries[et].sample_delta + Et == e + 1 && (F.subsamples = w.entries[et].subsamples, Et += w.entries[et].sample_delta, et++)) : F.is_sync = !0, y.process_sdtp(t.mdia.minf.stbl.sdtp, F, F.number), C ? F.degradation_priority = C.priority[e] : F.degradation_priority = 0, w && w.entries[et].sample_delta + Et == e && (F.subsamples = w.entries[et].subsamples, Et += w.entries[et].sample_delta), (S.length > 0 || U.length > 0) && y.setSampleGroupProperties(t, F, e, t.sample_groups_info);\n            }\n            e > 0 && (t.samples[e - 1].duration = Math.max(t.mdia.mdhd.duration - t.samples[e - 1].dts, 0), t.samples_duration += t.samples[e - 1].duration);\n        }\n    }, y.prototype.updateSampleLists = function() {\n        var t, e, i, s, o, c, u, _, g, w, S, U, C, x, P;\n        if (this.moov !== void 0) {\n            for(; this.lastMoofIndex < this.moofs.length;)if (g = this.moofs[this.lastMoofIndex], this.lastMoofIndex++, g.type == \"moof\") for(w = g, t = 0; t < w.trafs.length; t++){\n                for(S = w.trafs[t], U = this.getTrackById(S.tfhd.track_id), C = this.getTrexById(S.tfhd.track_id), S.tfhd.flags & n.TFHD_FLAG_SAMPLE_DESC ? s = S.tfhd.default_sample_description_index : s = C ? C.default_sample_description_index : 1, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_DUR ? o = S.tfhd.default_sample_duration : o = C ? C.default_sample_duration : 0, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_SIZE ? c = S.tfhd.default_sample_size : c = C ? C.default_sample_size : 0, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_FLAGS ? u = S.tfhd.default_sample_flags : u = C ? C.default_sample_flags : 0, S.sample_number = 0, S.sbgps.length > 0 && y.initSampleGroups(U, S, S.sbgps, U.mdia.minf.stbl.sgpds, S.sgpds), e = 0; e < S.truns.length; e++){\n                    var T = S.truns[e];\n                    for(i = 0; i < T.sample_count; i++){\n                        x = {}, x.moof_number = this.lastMoofIndex, x.number_in_traf = S.sample_number, S.sample_number++, x.number = U.samples.length, S.first_sample_index = U.samples.length, U.samples.push(x), x.track_id = U.tkhd.track_id, x.timescale = U.mdia.mdhd.timescale, x.description_index = s - 1, x.description = U.mdia.minf.stbl.stsd.entries[x.description_index], x.size = c, T.flags & n.TRUN_FLAGS_SIZE && (x.size = T.sample_size[i]), U.samples_size += x.size, x.duration = o, T.flags & n.TRUN_FLAGS_DURATION && (x.duration = T.sample_duration[i]), U.samples_duration += x.duration, U.first_traf_merged || i > 0 ? x.dts = U.samples[U.samples.length - 2].dts + U.samples[U.samples.length - 2].duration : (S.tfdt ? x.dts = S.tfdt.baseMediaDecodeTime : x.dts = 0, U.first_traf_merged = !0), x.cts = x.dts, T.flags & n.TRUN_FLAGS_CTS_OFFSET && (x.cts = x.dts + T.sample_composition_time_offset[i]), P = u, T.flags & n.TRUN_FLAGS_FLAGS ? P = T.sample_flags[i] : i === 0 && T.flags & n.TRUN_FLAGS_FIRST_FLAG && (P = T.first_sample_flags), x.is_sync = !(P >> 16 & 1), x.is_leading = P >> 26 & 3, x.depends_on = P >> 24 & 3, x.is_depended_on = P >> 22 & 3, x.has_redundancy = P >> 20 & 3, x.degradation_priority = P & 65535;\n                        var yt = !!(S.tfhd.flags & n.TFHD_FLAG_BASE_DATA_OFFSET), Ut = !!(S.tfhd.flags & n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF), ht = !!(T.flags & n.TRUN_FLAGS_DATA_OFFSET), O = 0;\n                        yt ? O = S.tfhd.base_data_offset : Ut || e === 0 ? O = w.start : O = _, e === 0 && i === 0 ? ht ? x.offset = O + T.data_offset : x.offset = O : x.offset = _, _ = x.offset + x.size, (S.sbgps.length > 0 || S.sgpds.length > 0 || U.mdia.minf.stbl.sbgps.length > 0 || U.mdia.minf.stbl.sgpds.length > 0) && y.setSampleGroupProperties(U, x, x.number_in_traf, S.sample_groups_info);\n                    }\n                }\n                if (S.subs) {\n                    U.has_fragment_subsamples = !0;\n                    var tt = S.first_sample_index;\n                    for(e = 0; e < S.subs.entries.length; e++)tt += S.subs.entries[e].sample_delta, x = U.samples[tt - 1], x.subsamples = S.subs.entries[e].subsamples;\n                }\n            }\n        }\n    }, y.prototype.getSample = function(t, e) {\n        var i, s = t.samples[e];\n        if (!this.moov) return null;\n        if (!s.data) s.data = new Uint8Array(s.size), s.alreadyRead = 0, this.samplesDataSize += s.size, r.debug(\"ISOFile\", \"Allocating sample #\" + e + \" on track #\" + t.tkhd.track_id + \" of size \" + s.size + \" (total: \" + this.samplesDataSize + \")\");\n        else if (s.alreadyRead == s.size) return s;\n        for(;;){\n            var o = this.stream.findPosition(!0, s.offset + s.alreadyRead, !1);\n            if (o > -1) {\n                i = this.stream.buffers[o];\n                var c = i.byteLength - (s.offset + s.alreadyRead - i.fileStart);\n                if (s.size - s.alreadyRead <= c) return r.debug(\"ISOFile\", \"Getting sample #\" + e + \" data (alreadyRead: \" + s.alreadyRead + \" offset: \" + (s.offset + s.alreadyRead - i.fileStart) + \" read size: \" + (s.size - s.alreadyRead) + \" full size: \" + s.size + \")\"), a.memcpy(s.data.buffer, s.alreadyRead, i, s.offset + s.alreadyRead - i.fileStart, s.size - s.alreadyRead), i.usedBytes += s.size - s.alreadyRead, this.stream.logBufferLevel(), s.alreadyRead = s.size, s;\n                if (c === 0) return null;\n                r.debug(\"ISOFile\", \"Getting sample #\" + e + \" partial data (alreadyRead: \" + s.alreadyRead + \" offset: \" + (s.offset + s.alreadyRead - i.fileStart) + \" read size: \" + c + \" full size: \" + s.size + \")\"), a.memcpy(s.data.buffer, s.alreadyRead, i, s.offset + s.alreadyRead - i.fileStart, c), s.alreadyRead += c, i.usedBytes += c, this.stream.logBufferLevel();\n            } else return null;\n        }\n    }, y.prototype.releaseSample = function(t, e) {\n        var i = t.samples[e];\n        return i.data ? (this.samplesDataSize -= i.size, i.data = null, i.alreadyRead = 0, i.size) : 0;\n    }, y.prototype.getAllocatedSampleDataSize = function() {\n        return this.samplesDataSize;\n    }, y.prototype.getCodecs = function() {\n        var t, e = \"\";\n        for(t = 0; t < this.moov.traks.length; t++){\n            var i = this.moov.traks[t];\n            t > 0 && (e += \",\"), e += i.mdia.minf.stbl.stsd.entries[0].getCodec();\n        }\n        return e;\n    }, y.prototype.getTrexById = function(t) {\n        var e;\n        if (!this.moov || !this.moov.mvex) return null;\n        for(e = 0; e < this.moov.mvex.trexs.length; e++){\n            var i = this.moov.mvex.trexs[e];\n            if (i.track_id == t) return i;\n        }\n        return null;\n    }, y.prototype.getTrackById = function(t) {\n        if (this.moov === void 0) return null;\n        for(var e = 0; e < this.moov.traks.length; e++){\n            var i = this.moov.traks[e];\n            if (i.tkhd.track_id == t) return i;\n        }\n        return null;\n    }, y.prototype.items = [], y.prototype.itemsDataSize = 0, y.prototype.flattenItemInfo = function() {\n        var t = this.items, e, i, s, o = this.meta;\n        if (o != null && o.hdlr !== void 0 && o.iinf !== void 0) {\n            for(e = 0; e < o.iinf.item_infos.length; e++)s = {}, s.id = o.iinf.item_infos[e].item_ID, t[s.id] = s, s.ref_to = [], s.name = o.iinf.item_infos[e].item_name, o.iinf.item_infos[e].protection_index > 0 && (s.protection = o.ipro.protections[o.iinf.item_infos[e].protection_index - 1]), o.iinf.item_infos[e].item_type ? s.type = o.iinf.item_infos[e].item_type : s.type = \"mime\", s.content_type = o.iinf.item_infos[e].content_type, s.content_encoding = o.iinf.item_infos[e].content_encoding;\n            if (o.iloc) for(e = 0; e < o.iloc.items.length; e++){\n                var c = o.iloc.items[e];\n                switch(s = t[c.item_ID], c.data_reference_index !== 0 && (r.warn(\"Item storage with reference to other files: not supported\"), s.source = o.dinf.boxes[c.data_reference_index - 1]), c.construction_method){\n                    case 0:\n                        break;\n                    case 1:\n                        r.warn(\"Item storage with construction_method : not supported\");\n                        break;\n                    case 2:\n                        r.warn(\"Item storage with construction_method : not supported\");\n                        break;\n                }\n                for(s.extents = [], s.size = 0, i = 0; i < c.extents.length; i++)s.extents[i] = {}, s.extents[i].offset = c.extents[i].extent_offset + c.base_offset, s.extents[i].length = c.extents[i].extent_length, s.extents[i].alreadyRead = 0, s.size += s.extents[i].length;\n            }\n            if (o.pitm && (t[o.pitm.item_id].primary = !0), o.iref) for(e = 0; e < o.iref.references.length; e++){\n                var u = o.iref.references[e];\n                for(i = 0; i < u.references.length; i++)t[u.from_item_ID].ref_to.push({\n                    type: u.type,\n                    id: u.references[i]\n                });\n            }\n            if (o.iprp) for(var _ = 0; _ < o.iprp.ipmas.length; _++){\n                var g = o.iprp.ipmas[_];\n                for(e = 0; e < g.associations.length; e++){\n                    var w = g.associations[e];\n                    for(s = t[w.id], s.properties === void 0 && (s.properties = {}, s.properties.boxes = []), i = 0; i < w.props.length; i++){\n                        var S = w.props[i];\n                        if (S.property_index > 0 && S.property_index - 1 < o.iprp.ipco.boxes.length) {\n                            var U = o.iprp.ipco.boxes[S.property_index - 1];\n                            s.properties[U.type] = U, s.properties.boxes.push(U);\n                        }\n                    }\n                }\n            }\n        }\n    }, y.prototype.getItem = function(t) {\n        var e, i;\n        if (!this.meta) return null;\n        if (i = this.items[t], !i.data && i.size) i.data = new Uint8Array(i.size), i.alreadyRead = 0, this.itemsDataSize += i.size, r.debug(\"ISOFile\", \"Allocating item #\" + t + \" of size \" + i.size + \" (total: \" + this.itemsDataSize + \")\");\n        else if (i.alreadyRead === i.size) return i;\n        for(var s = 0; s < i.extents.length; s++){\n            var o = i.extents[s];\n            if (o.alreadyRead !== o.length) {\n                var c = this.stream.findPosition(!0, o.offset + o.alreadyRead, !1);\n                if (c > -1) {\n                    e = this.stream.buffers[c];\n                    var u = e.byteLength - (o.offset + o.alreadyRead - e.fileStart);\n                    if (o.length - o.alreadyRead <= u) r.debug(\"ISOFile\", \"Getting item #\" + t + \" extent #\" + s + \" data (alreadyRead: \" + o.alreadyRead + \" offset: \" + (o.offset + o.alreadyRead - e.fileStart) + \" read size: \" + (o.length - o.alreadyRead) + \" full extent size: \" + o.length + \" full item size: \" + i.size + \")\"), a.memcpy(i.data.buffer, i.alreadyRead, e, o.offset + o.alreadyRead - e.fileStart, o.length - o.alreadyRead), e.usedBytes += o.length - o.alreadyRead, this.stream.logBufferLevel(), i.alreadyRead += o.length - o.alreadyRead, o.alreadyRead = o.length;\n                    else return r.debug(\"ISOFile\", \"Getting item #\" + t + \" extent #\" + s + \" partial data (alreadyRead: \" + o.alreadyRead + \" offset: \" + (o.offset + o.alreadyRead - e.fileStart) + \" read size: \" + u + \" full extent size: \" + o.length + \" full item size: \" + i.size + \")\"), a.memcpy(i.data.buffer, i.alreadyRead, e, o.offset + o.alreadyRead - e.fileStart, u), o.alreadyRead += u, i.alreadyRead += u, e.usedBytes += u, this.stream.logBufferLevel(), null;\n                } else return null;\n            }\n        }\n        return i.alreadyRead === i.size ? i : null;\n    }, y.prototype.releaseItem = function(t) {\n        var e = this.items[t];\n        if (e.data) {\n            this.itemsDataSize -= e.size, e.data = null, e.alreadyRead = 0;\n            for(var i = 0; i < e.extents.length; i++){\n                var s = e.extents[i];\n                s.alreadyRead = 0;\n            }\n            return e.size;\n        } else return 0;\n    }, y.prototype.processItems = function(t) {\n        for(var e in this.items){\n            var i = this.items[e];\n            this.getItem(i.id), t && !i.sent && (t(i), i.sent = !0, i.data = null);\n        }\n    }, y.prototype.hasItem = function(t) {\n        for(var e in this.items){\n            var i = this.items[e];\n            if (i.name === t) return i.id;\n        }\n        return -1;\n    }, y.prototype.getMetaHandler = function() {\n        return this.meta ? this.meta.hdlr.handler : null;\n    }, y.prototype.getPrimaryItem = function() {\n        return !this.meta || !this.meta.pitm ? null : this.getItem(this.meta.pitm.item_id);\n    }, y.prototype.itemToFragmentedTrackFile = function(t) {\n        var e = t || {}, i = null;\n        if (e.itemId ? i = this.getItem(e.itemId) : i = this.getPrimaryItem(), i == null) return null;\n        var s = new y();\n        s.discardMdatData = !1;\n        var o = {\n            type: i.type,\n            description_boxes: i.properties.boxes\n        };\n        i.properties.ispe && (o.width = i.properties.ispe.image_width, o.height = i.properties.ispe.image_height);\n        var c = s.addTrack(o);\n        return c ? (s.addSample(c, i.data), s) : null;\n    }, y.prototype.write = function(t) {\n        for(var e = 0; e < this.boxes.length; e++)this.boxes[e].write(t);\n    }, y.prototype.createFragment = function(t, e, i) {\n        var s = this.getTrackById(t), o = this.getSample(s, e);\n        if (o == null) return o = s.samples[e], this.nextSeekPosition ? this.nextSeekPosition = Math.min(o.offset + o.alreadyRead, this.nextSeekPosition) : this.nextSeekPosition = s.samples[e].offset + o.alreadyRead, null;\n        var c = i || new a();\n        c.endianness = a.BIG_ENDIAN;\n        var u = this.createSingleSampleMoof(o);\n        u.write(c), u.trafs[0].truns[0].data_offset = u.size + 8, r.debug(\"MP4Box\", \"Adjusting data_offset with new value \" + u.trafs[0].truns[0].data_offset), c.adjustUint32(u.trafs[0].truns[0].data_offset_position, u.trafs[0].truns[0].data_offset);\n        var _ = new n.mdatBox();\n        return _.data = o.data, _.write(c), c;\n    }, y.writeInitializationSegment = function(t, e, i, s) {\n        var o;\n        r.debug(\"ISOFile\", \"Generating initialization segment\");\n        var c = new a();\n        c.endianness = a.BIG_ENDIAN, t.write(c);\n        var u = e.add(\"mvex\");\n        for(i && u.add(\"mehd\").set(\"fragment_duration\", i), o = 0; o < e.traks.length; o++)u.add(\"trex\").set(\"track_id\", e.traks[o].tkhd.track_id).set(\"default_sample_description_index\", 1).set(\"default_sample_duration\", s).set(\"default_sample_size\", 0).set(\"default_sample_flags\", 65536);\n        return e.write(c), c.buffer;\n    }, y.prototype.save = function(t) {\n        var e = new a();\n        e.endianness = a.BIG_ENDIAN, this.write(e), e.save(t);\n    }, y.prototype.getBuffer = function() {\n        var t = new a();\n        return t.endianness = a.BIG_ENDIAN, this.write(t), t.buffer;\n    }, y.prototype.initializeSegmentation = function() {\n        var t, e, i, s;\n        for(this.onSegment === null && r.warn(\"MP4Box\", \"No segmentation callback set!\"), this.isFragmentationInitialized || (this.isFragmentationInitialized = !0, this.nextMoofNumber = 0, this.resetTables()), e = [], t = 0; t < this.fragmentedTracks.length; t++){\n            var o = new n.moovBox();\n            o.mvhd = this.moov.mvhd, o.boxes.push(o.mvhd), i = this.getTrackById(this.fragmentedTracks[t].id), o.boxes.push(i), o.traks.push(i), s = {}, s.id = i.tkhd.track_id, s.user = this.fragmentedTracks[t].user, s.buffer = y.writeInitializationSegment(this.ftyp, o, this.moov.mvex && this.moov.mvex.mehd ? this.moov.mvex.mehd.fragment_duration : void 0, this.moov.traks[t].samples.length > 0 ? this.moov.traks[t].samples[0].duration : 0), e.push(s);\n        }\n        return e;\n    }, n.Box.prototype.printHeader = function(t) {\n        this.size += 8, this.size > f && (this.size += 8), this.type === \"uuid\" && (this.size += 16), t.log(t.indent + \"size:\" + this.size), t.log(t.indent + \"type:\" + this.type);\n    }, n.FullBox.prototype.printHeader = function(t) {\n        this.size += 4, n.Box.prototype.printHeader.call(this, t), t.log(t.indent + \"version:\" + this.version), t.log(t.indent + \"flags:\" + this.flags);\n    }, n.Box.prototype.print = function(t) {\n        this.printHeader(t);\n    }, n.ContainerBox.prototype.print = function(t) {\n        this.printHeader(t);\n        for(var e = 0; e < this.boxes.length; e++)if (this.boxes[e]) {\n            var i = t.indent;\n            t.indent += \" \", this.boxes[e].print(t), t.indent = i;\n        }\n    }, y.prototype.print = function(t) {\n        t.indent = \"\";\n        for(var e = 0; e < this.boxes.length; e++)this.boxes[e] && this.boxes[e].print(t);\n    }, n.mvhdBox.prototype.print = function(t) {\n        n.FullBox.prototype.printHeader.call(this, t), t.log(t.indent + \"creation_time: \" + this.creation_time), t.log(t.indent + \"modification_time: \" + this.modification_time), t.log(t.indent + \"timescale: \" + this.timescale), t.log(t.indent + \"duration: \" + this.duration), t.log(t.indent + \"rate: \" + this.rate), t.log(t.indent + \"volume: \" + (this.volume >> 8)), t.log(t.indent + \"matrix: \" + this.matrix.join(\", \")), t.log(t.indent + \"next_track_id: \" + this.next_track_id);\n    }, n.tkhdBox.prototype.print = function(t) {\n        n.FullBox.prototype.printHeader.call(this, t), t.log(t.indent + \"creation_time: \" + this.creation_time), t.log(t.indent + \"modification_time: \" + this.modification_time), t.log(t.indent + \"track_id: \" + this.track_id), t.log(t.indent + \"duration: \" + this.duration), t.log(t.indent + \"volume: \" + (this.volume >> 8)), t.log(t.indent + \"matrix: \" + this.matrix.join(\", \")), t.log(t.indent + \"layer: \" + this.layer), t.log(t.indent + \"alternate_group: \" + this.alternate_group), t.log(t.indent + \"width: \" + this.width), t.log(t.indent + \"height: \" + this.height);\n    };\n    var B = {};\n    B.createFile = function(t, e) {\n        var i = t !== void 0 ? t : !0, s = new y(e);\n        return s.discardMdatData = !i, s;\n    }, l.createFile = B.createFile;\n})(Ge);\nconst D = /* @__PURE__ */ xi(Ge), q = {\n    sampleRate: 48e3,\n    channelCount: 2,\n    codec: \"mp4a.40.2\"\n};\nfunction de(l, r) {\n    const h = r.videoTracks[0], a = {};\n    if (h != null) {\n        const d = Ui(l.getTrackById(h.id)).buffer, { descKey: p, type: n } = h.codec.startsWith(\"avc1\") ? {\n            descKey: \"avcDecoderConfigRecord\",\n            type: \"avc1\"\n        } : h.codec.startsWith(\"hvc1\") ? {\n            descKey: \"hevcDecoderConfigRecord\",\n            type: \"hvc1\"\n        } : {\n            descKey: \"\",\n            type: \"\"\n        };\n        p !== \"\" && (a.videoTrackConf = {\n            timescale: h.timescale,\n            duration: h.duration,\n            width: h.video.width,\n            height: h.video.height,\n            brands: r.brands,\n            type: n,\n            [p]: d\n        }), a.videoDecoderConf = {\n            codec: h.codec,\n            codedHeight: h.video.height,\n            codedWidth: h.video.width,\n            description: d\n        };\n    }\n    const f = r.audioTracks[0];\n    if (f != null) {\n        const d = Se(l);\n        a.audioTrackConf = {\n            timescale: f.timescale,\n            samplerate: f.audio.sample_rate,\n            channel_count: f.audio.channel_count,\n            hdlr: \"soun\",\n            type: f.codec.startsWith(\"mp4a\") ? \"mp4a\" : f.codec,\n            description: Se(l)\n        }, a.audioDecoderConf = {\n            codec: f.codec.startsWith(\"mp4a\") ? q.codec : f.codec,\n            numberOfChannels: f.audio.channel_count,\n            sampleRate: f.audio.sample_rate,\n            ...d == null ? {} : Ei(d)\n        };\n    }\n    return a;\n}\nfunction Ui(l) {\n    for (const r of l.mdia.minf.stbl.stsd.entries){\n        const h = r.avcC ?? r.hvcC ?? r.vpcC;\n        if (h != null) {\n            const a = new D.DataStream(void 0, 0, D.DataStream.BIG_ENDIAN);\n            return h.write(a), new Uint8Array(a.buffer.slice(8));\n        }\n    }\n    throw Error(\"avcC, hvcC or VPX not found\");\n}\nfunction Se(l, r = \"mp4a\") {\n    var a;\n    const h = (a = l.moov) == null ? void 0 : a.traks.map((f)=>f.mdia.minf.stbl.stsd.entries).flat().find(({ type: f })=>f === r);\n    return h == null ? void 0 : h.esds;\n}\nfunction Ei(l) {\n    var n;\n    const r = (n = l.esd.descs[0]) == null ? void 0 : n.descs[0];\n    if (r == null) return {};\n    const [h, a] = r.data, f = ((h & 7) << 1) + (a >> 7), d = (a & 127) >> 3;\n    return {\n        sampleRate: [\n            96e3,\n            88200,\n            64e3,\n            48e3,\n            44100,\n            32e3,\n            24e3,\n            22050,\n            16e3,\n            12e3,\n            11025,\n            8e3,\n            7350\n        ][f],\n        numberOfChannels: d\n    };\n}\nfunction Ai(l) {\n    if (l.moov != null) {\n        for(var r = 0; r < l.moov.traks.length; r++)l.moov.traks[r].samples = [];\n        l.mdats = [], l.moofs = [];\n    }\n}\nvar zt;\nclass ce {\n    constructor(){\n        R(this, \"readable\");\n        R(this, \"writable\");\n        A(this, zt, 0);\n        const r = D.createFile();\n        let h = !1;\n        this.readable = new ReadableStream({\n            start: (a)=>{\n                r.onReady = (d)=>{\n                    var v, b;\n                    const p = (v = d.videoTracks[0]) == null ? void 0 : v.id;\n                    p != null && r.setExtractionOptions(p, \"video\", {\n                        nbSamples: 100\n                    });\n                    const n = (b = d.audioTracks[0]) == null ? void 0 : b.id;\n                    n != null && r.setExtractionOptions(n, \"audio\", {\n                        nbSamples: 100\n                    }), a.enqueue({\n                        chunkType: \"ready\",\n                        data: {\n                            info: d,\n                            file: r\n                        }\n                    }), r.start();\n                };\n                const f = {};\n                r.onSamples = (d, p, n)=>{\n                    a.enqueue({\n                        chunkType: \"samples\",\n                        data: {\n                            id: d,\n                            type: p,\n                            samples: n.map((v)=>({\n                                    ...v\n                                }))\n                        }\n                    }), f[d] = (f[d] ?? 0) + n.length, r.releaseUsedSamples(d, f[d]);\n                }, r.onFlush = ()=>{\n                    a.close();\n                };\n            },\n            cancel: ()=>{\n                r.stop(), h = !0;\n            }\n        }, {\n            highWaterMark: 50\n        }), this.writable = new WritableStream({\n            write: async (a)=>{\n                if (h) {\n                    this.writable.abort();\n                    return;\n                }\n                const f = a.buffer;\n                f.fileStart = m(this, zt), E(this, zt, m(this, zt) + f.byteLength), r.appendBuffer(f);\n            },\n            close: ()=>{\n                var a;\n                r.flush(), r.stop(), (a = r.onFlush) == null || a.call(r);\n            }\n        });\n    }\n}\nzt = new WeakMap();\nlet Bi = 0;\nfunction ne(l) {\n    return l.kind === \"file\" && l.createReader instanceof Function;\n}\nvar Tt, Pt, G, K, Lt, st, wt, bt, St, V, Q;\nclass sn {\n    constructor(r, h = {}){\n        A(this, Tt, z.create(`MP4Clip id:${Bi++},`));\n        R(this, \"ready\");\n        A(this, Pt, !1);\n        A(this, G, {\n            duration: 0,\n            width: 0,\n            height: 0,\n            audioSampleRate: 0,\n            audioChanCount: 0\n        });\n        A(this, K);\n        A(this, Lt, 1);\n        A(this, st, []);\n        A(this, wt, null);\n        A(this, bt, null);\n        A(this, St, {\n            video: null,\n            audio: null\n        });\n        A(this, V, {\n            audio: !0\n        });\n        R(this, \"tickInterceptor\", async (r, h)=>h);\n        A(this, Q, new AbortController());\n        if (!(r instanceof ReadableStream) && !ne(r) && !Array.isArray(r.videoSamples)) throw Error(\"Illegal argument\");\n        E(this, V, {\n            audio: !0,\n            ...h\n        }), E(this, Lt, typeof h.audio == \"object\" && \"volume\" in h.audio ? h.audio.volume : 1);\n        const a = async (f)=>(await Ct(m(this, K), f), await m(this, K).stream());\n        E(this, K, ne(r) ? r : \"localFile\" in r ? r.localFile : Kt()), this.ready = (r instanceof ReadableStream ? a(r).then((f)=>xe(f, m(this, V))) : ne(r) ? r.stream().then((f)=>xe(f, m(this, V))) : Promise.resolve(r)).then(async ({ videoSamples: f, audioSamples: d, decoderConf: p })=>{\n            E(this, st, f), E(this, St, p);\n            const { videoFrameFinder: n, audioFrameFinder: v } = Ii({\n                video: p.video == null ? null : {\n                    ...p.video,\n                    hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n                },\n                audio: p.audio\n            }, await m(this, K).createReader(), f, d, m(this, V).audio !== !1 ? m(this, Lt) : 0);\n            return E(this, wt, n), E(this, bt, v), E(this, G, Fi(p, f, d)), m(this, Tt).info(\"MP4Clip meta:\", m(this, G)), {\n                ...m(this, G)\n            };\n        });\n    }\n    get meta() {\n        return {\n            ...m(this, G)\n        };\n    }\n    async tick(r) {\n        var f, d;\n        if (r >= m(this, G).duration) return await this.tickInterceptor(r, {\n            audio: [],\n            state: \"done\"\n        });\n        const [h, a] = await Promise.all([\n            ((f = m(this, bt)) == null ? void 0 : f.find(r)) ?? [],\n            (d = m(this, wt)) == null ? void 0 : d.find(r)\n        ]);\n        return a == null ? await this.tickInterceptor(r, {\n            audio: h,\n            state: \"success\"\n        }) : await this.tickInterceptor(r, {\n            video: a,\n            audio: h,\n            state: \"success\"\n        });\n    }\n    async thumbnails(r = 100, h) {\n        m(this, Q).abort(), E(this, Q, new AbortController());\n        const a = m(this, Q).signal;\n        await this.ready;\n        const f = \"generate thumbnails aborted\";\n        if (a.aborted) throw Error(f);\n        const { width: d, height: p } = m(this, G), n = Ue(r, Math.round(p * (r / d)), {\n            quality: 0.1,\n            type: \"image/png\"\n        });\n        return new Promise(async (v, b)=>{\n            let y = [];\n            const B = m(this, St).video;\n            if (B == null || m(this, st).length === 0) {\n                t();\n                return;\n            }\n            a.addEventListener(\"abort\", ()=>{\n                b(Error(f));\n            });\n            async function t() {\n                a.aborted || v(await Promise.all(y.map(async (_)=>({\n                        ts: _.ts,\n                        img: await _.img\n                    }))));\n            }\n            function e(_) {\n                y.push({\n                    ts: _.timestamp,\n                    img: n(_)\n                });\n            }\n            const { start: i = 0, end: s = m(this, G).duration, step: o = 1e6 } = h ?? {};\n            let c = i;\n            const u = new oe(await m(this, K).createReader(), m(this, st), {\n                ...B,\n                hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n            });\n            for(; c <= s && !a.aborted;){\n                const _ = await u.find(c);\n                _ && e(_), c += o;\n            }\n            u.destroy(), t();\n        });\n    }\n    async thumbnailsList(r = 100, h) {\n        var v;\n        if (((v = h == null ? void 0 : h.timestamps) == null ? void 0 : v.length) === 0) return [];\n        m(this, Q).abort(), E(this, Q, new AbortController());\n        const a = m(this, Q).signal;\n        await this.ready;\n        const f = \"generate thumbnails aborted\";\n        if (a.aborted) throw Error(f);\n        const { width: d, height: p } = m(this, G), n = Ue(r, Math.round(p * (r / d)), {\n            quality: 0.1,\n            type: \"image/png\"\n        });\n        return new Promise(async (b, y)=>{\n            let B = [];\n            const t = m(this, St).video;\n            if (t == null || m(this, st).length === 0) {\n                e();\n                return;\n            }\n            a.addEventListener(\"abort\", ()=>{\n                y(Error(f));\n            });\n            async function e() {\n                a.aborted || b(await Promise.all(B.map(async (c)=>({\n                        ts: c.ts,\n                        img: await c.img\n                    }))));\n            }\n            function i(c) {\n                B.push({\n                    ts: c.timestamp,\n                    img: n(c)\n                });\n            }\n            const s = (h == null ? void 0 : h.timestamps) ?? [];\n            if (s.length === 0) {\n                e();\n                return;\n            }\n            const o = new oe(await m(this, K).createReader(), m(this, st), {\n                ...t,\n                hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n            });\n            for (const c of s){\n                if (a.aborted) break;\n                const u = await o.find(c);\n                u && i(u);\n            }\n            o.destroy(), e();\n        });\n    }\n    destroy() {\n        var r, h;\n        m(this, Pt) || (m(this, Tt).info(\"MP4Clip destroy\"), E(this, Pt, !0), (r = m(this, wt)) == null || r.destroy(), (h = m(this, bt)) == null || h.destroy());\n    }\n}\nTt = new WeakMap(), Pt = new WeakMap(), G = new WeakMap(), K = new WeakMap(), Lt = new WeakMap(), st = new WeakMap(), wt = new WeakMap(), bt = new WeakMap(), St = new WeakMap(), V = new WeakMap(), Q = new WeakMap();\nfunction Fi(l, r, h) {\n    const a = {\n        duration: 0,\n        width: 0,\n        height: 0,\n        audioSampleRate: 0,\n        audioChanCount: 0\n    };\n    l.video != null && r.length > 0 && (a.width = l.video.codedWidth ?? 0, a.height = l.video.codedHeight ?? 0), l.audio != null && h.length > 0 && (a.audioSampleRate = q.sampleRate, a.audioChanCount = q.channelCount);\n    let f = 0, d = 0;\n    if (r.length > 0) for(let p = r.length - 1; p >= 0; p--){\n        const n = r[p];\n        if (!n.deleted) {\n            f = n.cts + n.duration;\n            break;\n        }\n    }\n    if (h.length > 0) {\n        const p = h.at(-1);\n        d = p.cts + p.duration;\n    }\n    return a.duration = Math.max(f, d), a;\n}\nfunction Ii(l, r, h, a, f) {\n    return {\n        audioFrameFinder: f === 0 || l.audio == null || a.length === 0 ? null : new Ci(r, a, l.audio, {\n            volume: f,\n            targetSampleRate: q.sampleRate\n        }),\n        videoFrameFinder: l.video == null || h.length === 0 ? null : new oe(r, h, l.video)\n    };\n}\nasync function xe(l, r = {}) {\n    let h;\n    const a = {\n        video: null,\n        audio: null\n    };\n    let f = [], d = [];\n    return new Promise(async (n, v)=>{\n        let b = -1, y = -1;\n        const B = fe(l.pipeThrough(new ce()), {\n            onChunk: async ({ chunkType: t, data: e })=>{\n                if (t === \"ready\") {\n                    h = e.info;\n                    let { videoDecoderConf: i, audioDecoderConf: s } = de(e.file, e.info);\n                    a.video = i ?? null, a.audio = s ?? null, i == null && s == null && (B(), v(Error(\"MP4Clip must contain at least one video or audio track\"))), z.info(\"mp4BoxFile moov ready\", {\n                        ...e.info,\n                        tracks: null,\n                        videoTracks: null,\n                        audioTracks: null\n                    }, a);\n                } else if (t === \"samples\") {\n                    if (e.type === \"video\") {\n                        b === -1 && (b = e.samples[0].dts);\n                        for (const i of e.samples)f.push(p(i, b, \"video\"));\n                    } else if (e.type === \"audio\" && r.audio) {\n                        y === -1 && (y = e.samples[0].dts);\n                        for (const i of e.samples)d.push(p(i, y, \"audio\"));\n                    }\n                }\n            },\n            onDone: ()=>{\n                const t = f.at(-1) ?? d.at(-1);\n                if (h == null) {\n                    v(Error(\"MP4Clip stream is done, but not emit ready\"));\n                    return;\n                } else if (t == null) {\n                    v(Error(\"MP4Clip stream not contain any sample\"));\n                    return;\n                }\n                const e = f[0];\n                e != null && e.cts < 2e5 && (e.duration += e.cts, e.cts = 0), z.info(\"mp4 stream parsed\"), n({\n                    videoSamples: f,\n                    audioSamples: d,\n                    decoderConf: a\n                });\n            }\n        });\n    });\n    function p(n, v = 0, b) {\n        return {\n            ...n,\n            is_idr: b === \"video\" && n.is_sync && Di(n.data, n.description.type),\n            cts: (n.cts - v) / n.timescale * 1e6,\n            dts: (n.dts - v) / n.timescale * 1e6,\n            duration: n.duration / n.timescale * 1e6,\n            timescale: 1e6,\n            data: b === \"video\" ? null : n.data\n        };\n    }\n}\nvar L, lt, ft, kt, dt, W, k, rt, ct, xt, at, Dt, ut, Jt;\nclass oe {\n    constructor(r, h, a){\n        A(this, L, null);\n        A(this, lt, 0);\n        A(this, ft, {\n            abort: !1,\n            st: performance.now()\n        });\n        R(this, \"find\", async (r)=>((m(this, L) == null || r <= m(this, lt) || r - m(this, lt) > 3e6) && m(this, ut).call(this, r), m(this, ft).abort = !0, E(this, lt, r), E(this, ft, {\n                abort: !1,\n                st: performance.now()\n            }), await m(this, xt).call(this, r, m(this, L), m(this, ft))));\n        // fix VideoFrame duration is null\n        A(this, kt, 0);\n        A(this, dt, !1);\n        A(this, W, 0);\n        A(this, k, []);\n        A(this, rt, 0);\n        A(this, ct, 0);\n        A(this, xt, async (r, h, a)=>{\n            if (h == null || h.state === \"closed\" || a.abort) return null;\n            if (m(this, k).length > 0) {\n                const f = m(this, k)[0];\n                return r < f.timestamp ? null : (m(this, k).shift(), r > f.timestamp + (f.duration ?? 0) ? (f.close(), await m(this, xt).call(this, r, h, a)) : (m(this, k).length < 10 && m(this, Dt).call(this, h).catch((d)=>{\n                    throw m(this, ut).call(this, r), d;\n                }), f));\n            }\n            if (m(this, at) || m(this, rt) < m(this, ct) && h.decodeQueueSize > 0) {\n                if (performance.now() - a.st > 6e3) throw Error(`MP4Clip.tick video timeout, ${JSON.stringify(m(this, Jt).call(this))}`);\n                await Ne(15);\n            } else {\n                if (m(this, W) >= this.samples.length) return null;\n                try {\n                    await m(this, Dt).call(this, h);\n                } catch (f) {\n                    throw m(this, ut).call(this, r), f;\n                }\n            }\n            return await m(this, xt).call(this, r, h, a);\n        });\n        A(this, at, !1);\n        A(this, Dt, async (r)=>{\n            var f, d;\n            if (m(this, at)) return;\n            E(this, at, !0);\n            let h = m(this, W) + 1, a = !1;\n            for(; h < this.samples.length; h++){\n                const p = this.samples[h];\n                if (!a && !p.deleted && (a = !0), p.is_idr) break;\n            }\n            if (a) {\n                const p = this.samples.slice(m(this, W), h);\n                if (((f = p[0]) == null ? void 0 : f.is_idr) !== !0) z.warn(\"First sample not idr frame\");\n                else {\n                    const n = await Li(p, this.localFileReader);\n                    if (r.state === \"closed\") return;\n                    E(this, kt, ((d = n[0]) == null ? void 0 : d.duration) ?? 0), ki(r, n, {\n                        onDecodingError: (v)=>{\n                            if (m(this, dt)) throw v;\n                            m(this, rt) === 0 && (E(this, dt, !0), z.warn(\"Downgrade to software decode\"), m(this, ut).call(this));\n                        }\n                    }), E(this, ct, m(this, ct) + n.length);\n                }\n            }\n            E(this, W, h), E(this, at, !1);\n        });\n        A(this, ut, (r)=>{\n            var h, a;\n            if (E(this, at, !1), m(this, k).forEach((f)=>f.close()), E(this, k, []), r == null || r === 0) E(this, W, 0);\n            else {\n                let f = 0;\n                for(let d = 0; d < this.samples.length; d++){\n                    const p = this.samples[d];\n                    if (p.is_idr && (f = d), !(p.cts < r)) {\n                        E(this, W, f);\n                        break;\n                    }\n                }\n            }\n            E(this, ct, 0), E(this, rt, 0), ((h = m(this, L)) == null ? void 0 : h.state) !== \"closed\" && ((a = m(this, L)) == null || a.close()), E(this, L, new VideoDecoder({\n                output: (f)=>{\n                    if (E(this, rt, m(this, rt) + 1), f.timestamp === -1) {\n                        f.close();\n                        return;\n                    }\n                    let d = f;\n                    f.duration == null && (d = new VideoFrame(f, {\n                        duration: m(this, kt)\n                    }), f.close()), m(this, k).push(d);\n                },\n                error: (f)=>{\n                    z.error(`MP4Clip VideoDecoder err: ${f.message}`);\n                }\n            })), m(this, L).configure({\n                ...this.conf,\n                ...m(this, dt) ? {\n                    hardwareAcceleration: \"prefer-software\"\n                } : {}\n            });\n        });\n        A(this, Jt, ()=>{\n            var r, h;\n            return {\n                time: m(this, lt),\n                decState: (r = m(this, L)) == null ? void 0 : r.state,\n                decQSize: (h = m(this, L)) == null ? void 0 : h.decodeQueueSize,\n                decCusorIdx: m(this, W),\n                sampleLen: this.samples.length,\n                inputCnt: m(this, ct),\n                outputCnt: m(this, rt),\n                cacheFrameLen: m(this, k).length,\n                softDeocde: m(this, dt)\n            };\n        });\n        R(this, \"destroy\", ()=>{\n            var r, h;\n            ((r = m(this, L)) == null ? void 0 : r.state) !== \"closed\" && ((h = m(this, L)) == null || h.close()), E(this, L, null), m(this, ft).abort = !0, m(this, k).forEach((a)=>a.close()), E(this, k, []), this.localFileReader.close();\n        });\n        this.localFileReader = r, this.samples = h, this.conf = a;\n    }\n}\nL = new WeakMap(), lt = new WeakMap(), ft = new WeakMap(), kt = new WeakMap(), dt = new WeakMap(), W = new WeakMap(), k = new WeakMap(), rt = new WeakMap(), ct = new WeakMap(), xt = new WeakMap(), at = new WeakMap(), Dt = new WeakMap(), ut = new WeakMap(), Jt = new WeakMap();\nvar Rt, Mt, Z, pt, X, J, j, Ot, Nt, $t, qt;\nclass Ci {\n    constructor(r, h, a, f){\n        A(this, Rt, 1);\n        A(this, Mt);\n        A(this, Z, null);\n        A(this, pt, {\n            abort: !1,\n            st: performance.now()\n        });\n        R(this, \"find\", async (r)=>{\n            if (m(this, Z) == null || r <= m(this, X) || r - m(this, X) > 1e5) {\n                m(this, $t).call(this), E(this, X, r);\n                for(let a = 0; a < this.samples.length; a++)if (!(this.samples[a].cts < r)) {\n                    E(this, J, a);\n                    break;\n                }\n                return [];\n            }\n            m(this, pt).abort = !0;\n            const h = r - m(this, X);\n            return E(this, X, r), E(this, pt, {\n                abort: !1,\n                st: performance.now()\n            }), await m(this, Ot).call(this, h, m(this, Z), m(this, pt));\n        });\n        A(this, X, 0);\n        A(this, J, 0);\n        A(this, j, {\n            frameCnt: 0,\n            data: []\n        });\n        A(this, Ot, async (r, h = null, a)=>{\n            if (h == null || a.abort || h.state === \"closed\") return [];\n            const f = Math.ceil(r * (m(this, Mt) / 1e6));\n            if (f === 0) return [];\n            const d = m(this, j).frameCnt - f;\n            if (d > 0) return d < q.sampleRate / 10 && m(this, Nt).call(this, h), Pi(m(this, j), f);\n            if (h.decodeQueueSize > 10) {\n                if (performance.now() - a.st > 3e3) throw a.abort = !0, Error(`MP4Clip.tick audio timeout, ${JSON.stringify(m(this, qt).call(this))}`);\n                await Ne(15);\n            } else {\n                if (m(this, J) >= this.samples.length - 1) return [];\n                m(this, Nt).call(this, h);\n            }\n            return m(this, Ot).call(this, r, h, a);\n        });\n        A(this, Nt, (r)=>{\n            if (r.decodeQueueSize > 100) return;\n            const h = [];\n            let a = m(this, J);\n            for(; a < this.samples.length;){\n                const f = this.samples[a];\n                if (a += 1, !f.deleted && (h.push(f), h.length >= 10)) break;\n            }\n            E(this, J, a), r.decode(h.map((f)=>new EncodedAudioChunk({\n                    type: \"key\",\n                    timestamp: f.cts,\n                    duration: f.duration,\n                    data: f.data\n                })));\n        });\n        A(this, $t, ()=>{\n            var r;\n            E(this, X, 0), E(this, J, 0), E(this, j, {\n                frameCnt: 0,\n                data: []\n            }), (r = m(this, Z)) == null || r.close(), E(this, Z, zi(this.conf, {\n                resampleRate: q.sampleRate,\n                volume: m(this, Rt)\n            }, (h)=>{\n                m(this, j).data.push(h), m(this, j).frameCnt += h[0].length;\n            }));\n        });\n        A(this, qt, ()=>{\n            var r, h;\n            return {\n                time: m(this, X),\n                decState: (r = m(this, Z)) == null ? void 0 : r.state,\n                decQSize: (h = m(this, Z)) == null ? void 0 : h.decodeQueueSize,\n                decCusorIdx: m(this, J),\n                sampleLen: this.samples.length,\n                pcmLen: m(this, j).frameCnt\n            };\n        });\n        R(this, \"destroy\", ()=>{\n            E(this, Z, null), m(this, pt).abort = !0, E(this, j, {\n                frameCnt: 0,\n                data: []\n            }), this.localFileReader.close();\n        });\n        this.localFileReader = r, this.samples = h, this.conf = a, E(this, Rt, f.volume), E(this, Mt, f.targetSampleRate);\n    }\n}\nRt = new WeakMap(), Mt = new WeakMap(), Z = new WeakMap(), pt = new WeakMap(), X = new WeakMap(), J = new WeakMap(), j = new WeakMap(), Ot = new WeakMap(), Nt = new WeakMap(), $t = new WeakMap(), qt = new WeakMap();\nfunction zi(l, r, h) {\n    const a = (n)=>{\n        if (n.length !== 0) {\n            if (r.volume !== 1) for (const v of n)for(let b = 0; b < v.length; b++)v[b] *= r.volume;\n            n.length === 1 && (n = [\n                n[0],\n                n[0]\n            ]), h(n);\n        }\n    }, f = Ti(a), d = r.resampleRate !== l.sampleRate, p = new AudioDecoder({\n        output: (n)=>{\n            const v = le(n);\n            d ? f(()=>bi(v, n.sampleRate, {\n                    rate: r.resampleRate,\n                    chanCount: n.numberOfChannels\n                })) : a(v), n.close();\n        },\n        error: (n)=>{\n            z.error(`MP4Clip AudioDecoder err: ${n.message}`);\n        }\n    });\n    return p.configure(l), {\n        decode (n) {\n            for (const v of n)p.decode(v);\n        },\n        close () {\n            p.state !== \"closed\" && p.close();\n        },\n        get state () {\n            return p.state;\n        },\n        get decodeQueueSize () {\n            return p.decodeQueueSize;\n        }\n    };\n}\nfunction Ti(l) {\n    const r = [];\n    let h = 0;\n    function a(p, n) {\n        r[n] = p, f();\n    }\n    function f() {\n        const p = r[h];\n        p != null && (l(p), h += 1, f());\n    }\n    let d = 0;\n    return (p)=>{\n        const n = d;\n        d += 1, p().then((v)=>a(v, n)).catch((v)=>a(v, n));\n    };\n}\nfunction Pi(l, r) {\n    const h = [\n        new Float32Array(r),\n        new Float32Array(r)\n    ];\n    let a = 0, f = 0;\n    for(; f < l.data.length;){\n        const [d, p] = l.data[f];\n        if (a + d.length > r) {\n            const n = r - a;\n            h[0].set(d.subarray(0, n), a), h[1].set(p.subarray(0, n), a), l.data[f][0] = d.subarray(n, d.length), l.data[f][1] = p.subarray(n, p.length);\n            break;\n        } else h[0].set(d, a), h[1].set(p, a), a += d.length, f++;\n    }\n    return l.data = l.data.slice(f), l.frameCnt -= r, h;\n}\nasync function Li(l, r) {\n    const h = l[0], a = l.at(-1);\n    if (a == null) return [];\n    const f = a.offset + a.size - h.offset;\n    if (f < 3e7) {\n        const d = new Uint8Array(await r.read(f, {\n            at: h.offset\n        }));\n        return l.map((p)=>{\n            const n = p.offset - h.offset;\n            let v = d.subarray(n, n + p.size);\n            return p.is_idr && (v = Ee(v)), new EncodedVideoChunk({\n                type: p.is_sync ? \"key\" : \"delta\",\n                timestamp: p.cts,\n                duration: p.duration,\n                data: v\n            });\n        });\n    }\n    return await Promise.all(l.map(async (d)=>{\n        let p = await r.read(d.size, {\n            at: d.offset\n        });\n        return d.is_idr && (p = Ee(new Uint8Array(p))), new EncodedVideoChunk({\n            type: d.is_sync ? \"key\" : \"delta\",\n            timestamp: d.cts,\n            duration: d.duration,\n            data: p\n        });\n    }));\n}\nfunction Ue(l, r, h) {\n    const a = new OffscreenCanvas(l, r), f = a.getContext(\"2d\");\n    return async (d)=>(f.drawImage(d, 0, 0, l, r), d.close(), await a.convertToBlob(h));\n}\nfunction ki(l, r, h) {\n    let a = 0;\n    if (l.state === \"configured\") {\n        for(; a < r.length; a++)l.decode(r[a]);\n        l.flush().catch((f)=>{\n            if (!(f instanceof Error)) throw f;\n            if (f.message.includes(\"Decoding error\") && h.onDecodingError != null) {\n                h.onDecodingError(f);\n                return;\n            }\n            if (!f.message.includes(\"Aborted due to close\")) throw f;\n        });\n    }\n}\nfunction Ee(l) {\n    const r = new DataView(l.buffer, l.byteOffset, l.byteLength);\n    return (r.getUint8(4) & 31) === 6 ? l.subarray(r.getUint32(0) + 4) : l;\n}\nfunction Di(l, r) {\n    if (r !== \"avc1\" && r !== \"hvc1\") return !1;\n    const h = new DataView(l.buffer);\n    let a = 0;\n    for(; a < l.byteLength - 4;){\n        if (r === \"avc1\") {\n            if ((h.getUint8(a + 4) & 31) === 5) return !0;\n        } else if (r === \"hvc1\" && (h.getUint8(a + 4) >> 1 & 63) === 20) return !0;\n        a += h.getUint32(a) + 4;\n    }\n    return !1;\n}\nvar $;\nclass Ri {\n    constructor(){\n        A(this, $, /* @__PURE__ */ new Map());\n        R(this, \"on\", (r, h)=>{\n            const a = m(this, $).get(r) ?? /* @__PURE__ */ new Set();\n            return a.add(h), m(this, $).has(r) || m(this, $).set(r, a), ()=>{\n                a.delete(h), a.size === 0 && m(this, $).delete(r);\n            };\n        });\n        R(this, \"once\", (r, h)=>{\n            const a = this.on(r, (...f)=>{\n                a(), h(...f);\n            });\n            return a;\n        });\n        R(this, \"emit\", (r, ...h)=>{\n            const a = m(this, $).get(r);\n            a != null && a.forEach((f)=>f(...h));\n        });\n    }\n    static forwardEvent(r, h, a) {\n        const f = a.map((d)=>{\n            const [p, n] = Array.isArray(d) ? d : [\n                d,\n                d\n            ];\n            return r.on(p, (...v)=>{\n                h.emit(n, ...v);\n            });\n        });\n        return ()=>{\n            f.forEach((d)=>d());\n        };\n    }\n    destroy() {\n        m(this, $).clear();\n    }\n}\n$ = new WeakMap();\nconst ue = (l, r)=>{\n    const h = new Uint8Array(8);\n    new DataView(h.buffer).setUint32(0, r);\n    for(let f = 0; f < 4; f++)h[4 + f] = l.charCodeAt(f);\n    return h;\n}, Mi = ()=>{\n    const l = new TextEncoder(), r = l.encode(\"mdta\"), h = l.encode(\"mp4 handler\"), a = 32 + h.byteLength + 1, f = new Uint8Array(a), d = new DataView(f.buffer);\n    return f.set(ue(\"hdlr\", a), 0), d.setUint32(8, 0), f.set(r, 16), f.set(h, 32), f;\n}, Oi = (l)=>{\n    const r = new TextEncoder(), h = r.encode(\"mdta\"), a = l.map((b)=>{\n        const y = r.encode(b), B = 8 + y.byteLength, t = new Uint8Array(B);\n        return new DataView(t.buffer).setUint32(0, B), t.set(h, 4), t.set(y, 4 + h.byteLength), t;\n    }), d = 16 + a.reduce((b, y)=>b + y.byteLength, 0), p = new Uint8Array(d), n = new DataView(p.buffer);\n    p.set(ue(\"keys\", d), 0), n.setUint32(8, 0), n.setUint32(12, l.length);\n    let v = 16;\n    for (const b of a)p.set(b, v), v += b.byteLength;\n    return p;\n}, Ni = (l)=>{\n    const r = new TextEncoder(), h = r.encode(\"data\"), a = Object.entries(l).map(([v, b], y)=>{\n        const B = y + 1, t = r.encode(b), e = 24 + t.byteLength, i = new Uint8Array(e), s = new DataView(i.buffer);\n        return s.setUint32(0, e), s.setUint32(4, B), s.setUint32(8, 16 + t.byteLength), i.set(h, 12), s.setUint32(16, 1), i.set(t, 24), i;\n    }), d = 8 + a.reduce((v, b)=>v + b.byteLength, 0), p = new Uint8Array(d);\n    p.set(ue(\"ilst\", d), 0);\n    let n = 8;\n    for (const v of a)p.set(v, n), n += v.byteLength;\n    return p;\n}, Gi = (l)=>{\n    const r = Mi(), h = Oi(Object.keys(l)), a = Ni(l), f = r.length + h.length + a.length, d = new Uint8Array(f);\n    return d.set(r, 0), d.set(h, r.length), d.set(a, r.length + h.length), d;\n};\nfunction rn(l) {\n    z.info(\"recodemux opts:\", l);\n    const r = D.createFile(), h = new Ri(), a = (v, b)=>{\n        const B = v.add(\"udta\").add(\"meta\");\n        B.data = Gi(b), B.size = B.data.byteLength;\n    };\n    let f = !1;\n    const d = ()=>{\n        r.moov == null || f || (f = !0, l.metaDataTags != null && a(r.moov, l.metaDataTags), l.duration != null && (r.moov.mvhd.duration = l.duration));\n    };\n    h.once(\"VideoReady\", d), h.once(\"AudioReady\", d);\n    let p = l.video != null ? Hi(l.video, r, h) : null, n = l.audio != null ? Vi(l.audio, r, h) : null;\n    return l.video == null && h.emit(\"VideoReady\"), l.audio == null && h.emit(\"AudioReady\"), {\n        encodeVideo: (v, b)=>{\n            p == null || p.encode(v, b), v.close();\n        },\n        encodeAudio: (v)=>{\n            n != null && (n.encode(v), v.close());\n        },\n        getEncodeQueueSize: ()=>(p == null ? void 0 : p.encodeQueueSize) ?? (n == null ? void 0 : n.encodeQueueSize) ?? 0,\n        flush: async ()=>{\n            await Promise.all([\n                p == null ? void 0 : p.flush(),\n                (n == null ? void 0 : n.state) === \"configured\" ? n.flush() : null\n            ]);\n        },\n        close: ()=>{\n            h.destroy(), p == null || p.close(), (n == null ? void 0 : n.state) === \"configured\" && n.close();\n        },\n        mp4file: r\n    };\n}\nfunction Hi(l, r, h) {\n    const a = {\n        timescale: 1e6,\n        width: l.width,\n        height: l.height,\n        brands: [\n            \"isom\",\n            \"iso2\",\n            \"avc1\",\n            \"mp42\",\n            \"mp41\"\n        ],\n        avcDecoderConfigRecord: null,\n        name: \"Track created with WebAV\"\n    };\n    let f = -1, d = !1;\n    h.once(\"AudioReady\", ()=>{\n        d = !0;\n    });\n    const p = {\n        encoder0: [],\n        encoder1: []\n    }, n = (c, u, _)=>{\n        var g;\n        if (f === -1 && _ != null) {\n            const w = (g = _.decoderConfig) == null ? void 0 : g.description;\n            Yi(w), a.avcDecoderConfigRecord = w, f = r.addTrack(a), h.emit(\"VideoReady\"), z.info(\"VideoEncoder, video track ready, trackId:\", f);\n        }\n        p[c].push(Qt(u));\n    };\n    let v = \"encoder1\", b = 0;\n    const y = Math.floor(1e3 / l.expectFPS * 1e3);\n    function B() {\n        if (!d) return;\n        const c = v === \"encoder1\" ? \"encoder0\" : \"encoder1\", u = p[v], _ = p[c];\n        if (u.length === 0 && _.length === 0) return;\n        let g = u[0];\n        if (g != null && (!g.is_sync || g.cts - b < y)) {\n            const S = t(u);\n            S > b && (b = S);\n        }\n        const w = _[0];\n        if (w != null && w.is_sync && w.cts - b < y) {\n            v = c, B();\n            return;\n        }\n        if (g != null && g.is_sync && w != null && w.is_sync) if (g.cts <= w.cts) {\n            const S = t(u);\n            S > b && (b = S);\n        } else {\n            v = c, B();\n            return;\n        }\n    }\n    function t(c) {\n        let u = -1, _ = 0;\n        for(; _ < c.length; _++){\n            const g = c[_];\n            if (_ > 0 && g.is_sync) break;\n            r.addSample(f, g.data, g), u = g.cts + g.duration;\n        }\n        return c.splice(0, _), u;\n    }\n    const e = De(B, 15), i = Ae(l, (c, u)=>n(\"encoder0\", c, u)), s = Ae(l, (c, u)=>n(\"encoder1\", c, u));\n    let o = 0;\n    return {\n        get encodeQueueSize () {\n            return i.encodeQueueSize + s.encodeQueueSize;\n        },\n        encode: (c, u)=>{\n            u.keyFrame && (o += 1), (o % 2 === 0 ? i : s).encode(c, u);\n        },\n        flush: async ()=>{\n            await Promise.all([\n                i.state === \"configured\" ? await i.flush() : null,\n                s.state === \"configured\" ? await s.flush() : null\n            ]), e(), B();\n        },\n        close: ()=>{\n            i.state === \"configured\" && i.close(), s.state === \"configured\" && s.close();\n        }\n    };\n}\nfunction Yi(l) {\n    const r = new Uint8Array(l);\n    r[2].toString(2).slice(-2).includes(\"1\") && (r[2] = 0);\n}\nfunction Ae(l, r) {\n    const h = new VideoEncoder({\n        error: z.error,\n        output: r\n    });\n    return h.configure({\n        codec: l.codec,\n        framerate: l.expectFPS,\n        hardwareAcceleration: l.__unsafe_hardwareAcceleration__,\n        bitrate: l.bitrate,\n        width: l.width,\n        height: l.height,\n        alpha: \"discard\",\n        avc: {\n            format: \"avc\"\n        }\n    }), h;\n}\nfunction Vi(l, r, h) {\n    const a = {\n        timescale: 1e6,\n        samplerate: l.sampleRate,\n        channel_count: l.channelCount,\n        hdlr: \"soun\",\n        type: l.codec === \"aac\" ? \"mp4a\" : \"Opus\",\n        name: \"Track created with WebAV\"\n    };\n    let f = -1, d = [], p = !1;\n    h.once(\"VideoReady\", ()=>{\n        p = !0, d.forEach((v)=>{\n            const b = Qt(v);\n            r.addSample(f, b.data, b);\n        }), d = [];\n    });\n    const n = new AudioEncoder({\n        error: z.error,\n        output: (v, b)=>{\n            var y;\n            if (f === -1) {\n                const B = (y = b.decoderConfig) == null ? void 0 : y.description;\n                f = r.addTrack({\n                    ...a,\n                    description: B == null ? void 0 : $i(B)\n                }), h.emit(\"AudioReady\"), z.info(\"AudioEncoder, audio track ready, trackId:\", f);\n            }\n            if (p) {\n                const B = Qt(v);\n                r.addSample(f, B.data, B);\n            } else d.push(v);\n        }\n    });\n    return n.configure({\n        codec: l.codec === \"aac\" ? q.codec : \"opus\",\n        sampleRate: l.sampleRate,\n        numberOfChannels: l.channelCount,\n        bitrate: 128e3\n    }), n;\n}\nfunction Wi(l, r, h) {\n    let a = 0, f = 0;\n    const d = l.boxes;\n    let p = !1;\n    const n = ()=>{\n        var i;\n        if (!p) if (d.find((s)=>s.type === \"moof\") != null) p = !0;\n        else return null;\n        if (f >= d.length) return null;\n        const t = new D.DataStream();\n        t.endianness = D.DataStream.BIG_ENDIAN;\n        let e = f;\n        try {\n            for(; e < d.length;)d[e].write(t), delete d[e], e += 1;\n        } catch (s) {\n            const o = d[e];\n            throw s instanceof Error && o != null ? Error(`${s.message} | deltaBuf( boxType: ${o.type}, boxSize: ${o.size}, boxDataLen: ${((i = o.data) == null ? void 0 : i.length) ?? -1})`) : s;\n        }\n        return Ai(l), f = d.length, new Uint8Array(t.buffer);\n    };\n    let v = !1, b = !1, y = null;\n    return {\n        stream: new ReadableStream({\n            start (t) {\n                a = self.setInterval(()=>{\n                    const e = n();\n                    e != null && !b && t.enqueue(e);\n                }, r), y = (e)=>{\n                    if (clearInterval(a), l.flush(), e != null) {\n                        t.error(e);\n                        return;\n                    }\n                    const i = n();\n                    i != null && !b && t.enqueue(i), b || t.close();\n                }, v && y();\n            },\n            cancel () {\n                b = !0, clearInterval(a), h == null || h();\n            }\n        }),\n        stop: (t)=>{\n            v || (v = !0, y == null || y(t));\n        }\n    };\n}\nfunction Zi(l) {\n    let r = 0;\n    const h = l.boxes, a = [];\n    let f = 0;\n    async function d() {\n        const i = e(h, r);\n        r = h.length, a.forEach(({ track: s, id: o })=>{\n            const c = s.samples.at(-1);\n            c != null && (f = Math.max(f, c.cts + c.duration)), l.releaseUsedSamples(o, s.samples.length), s.samples = [];\n        }), l.mdats = [], l.moofs = [], i != null && await (y == null ? void 0 : y.write(i));\n    }\n    let p = [];\n    function n() {\n        if (p.length > 0) return !0;\n        const i = h.findIndex((s)=>s.type === \"moov\");\n        if (i === -1) return !1;\n        if (p = h.slice(0, i + 1), r = i + 1, a.length === 0) for(let s = 1;; s += 1){\n            const o = l.getTrackById(s);\n            if (o == null) break;\n            a.push({\n                track: o,\n                id: s\n            });\n        }\n        return !0;\n    }\n    let v = 0;\n    const b = Kt();\n    let y = null;\n    const B = (async ()=>{\n        y = await b.createWriter(), v = self.setInterval(()=>{\n            n() && d();\n        }, 100);\n    })();\n    let t = !1;\n    return async ()=>{\n        if (t) throw Error(\"File exported\");\n        if (t = !0, await B, clearInterval(v), !n() || y == null) return null;\n        l.flush(), await d(), await (y == null ? void 0 : y.close());\n        const i = p.find((c)=>c.type === \"moov\");\n        if (i == null) return null;\n        i.mvhd.duration = f;\n        const s = Kt(), o = e(p, 0);\n        return await Ct(s, o), await Ct(s, b, {\n            overwrite: !1\n        }), await s.stream();\n    };\n    function e(i, s) {\n        if (s >= i.length) return null;\n        const o = new D.DataStream();\n        o.endianness = D.DataStream.BIG_ENDIAN;\n        for(let c = s; c < i.length; c++)i[c] !== null && (i[c].write(o), delete i[c]);\n        return new Uint8Array(o.buffer);\n    }\n}\nfunction Qt(l) {\n    const r = new ArrayBuffer(l.byteLength);\n    l.copyTo(r);\n    const h = l.timestamp;\n    return {\n        duration: l.duration ?? 0,\n        dts: h,\n        cts: h,\n        is_sync: l.type === \"key\",\n        data: r\n    };\n}\nasync function Xi(l) {\n    const r = D.createFile(), h = Zi(r);\n    await ji(l, r);\n    const a = await h();\n    if (a == null) throw Error(\"Can not generate file from streams\");\n    return a;\n}\nasync function ji(l, r) {\n    let h = 0, a = 0, f = 0, d = 0, p = 0, n = 0, v = null, b = null;\n    for (const y of l)await new Promise(async (B)=>{\n        fe(y.pipeThrough(new ce()), {\n            onDone: B,\n            onChunk: async ({ chunkType: t, data: e })=>{\n                if (t === \"ready\") {\n                    const { videoTrackConf: i, audioTrackConf: s } = de(e.file, e.info);\n                    h === 0 && i != null && (h = r.addTrack(i)), d === 0 && s != null && (d = r.addTrack(s));\n                } else if (t === \"samples\") {\n                    const { type: i, samples: s } = e, o = i === \"video\" ? h : d, c = i === \"video\" ? a : p, u = i === \"video\" ? f : n;\n                    s.forEach((g)=>{\n                        r.addSample(o, g.data, {\n                            duration: g.duration,\n                            dts: g.dts + c,\n                            cts: g.cts + u,\n                            is_sync: g.is_sync\n                        });\n                    });\n                    const _ = s.at(-1);\n                    if (_ == null) return;\n                    i === \"video\" ? v = _ : i === \"audio\" && (b = _);\n                }\n            }\n        });\n    }), v != null && (a += v.dts, f += v.cts), b != null && (p += b.dts, n += b.cts);\n}\nasync function an(l) {\n    return await Xi([\n        l\n    ]);\n}\nfunction Ki(l) {\n    let r = [];\n    const h = new AudioDecoder({\n        output: (a)=>{\n            r.push(a);\n        },\n        error: z.error\n    });\n    return h.configure(l), {\n        decode: async (a)=>{\n            a.forEach((d)=>{\n                h.decode(new EncodedAudioChunk({\n                    type: d.is_sync ? \"key\" : \"delta\",\n                    timestamp: 1e6 * d.cts / d.timescale,\n                    duration: 1e6 * d.duration / d.timescale,\n                    data: d.data\n                }));\n            }), await h.flush();\n            const f = r;\n            return r = [], f;\n        },\n        close: ()=>{\n            h.close();\n        }\n    };\n}\nfunction Qi(l, r) {\n    const h = new AudioEncoder({\n        output: (d)=>{\n            r(Qt(d));\n        },\n        error: z.error\n    });\n    h.configure({\n        codec: l.codec,\n        sampleRate: l.sampleRate,\n        numberOfChannels: l.numberOfChannels\n    });\n    let a = null;\n    function f(d, p) {\n        return new AudioData({\n            timestamp: p,\n            numberOfChannels: l.numberOfChannels,\n            numberOfFrames: d.length / l.numberOfChannels,\n            sampleRate: l.sampleRate,\n            format: \"f32-planar\",\n            data: d\n        });\n    }\n    return {\n        encode: async (d, p)=>{\n            a != null && h.encode(f(a.data, a.ts)), a = {\n                data: d,\n                ts: p\n            };\n        },\n        stop: async ()=>{\n            a != null && (Ji(a.data, l.numberOfChannels, l.sampleRate), h.encode(f(a.data, a.ts)), a = null), await h.flush(), h.close();\n        }\n    };\n}\nfunction Ji(l, r, h) {\n    const a = l.length - 1, f = Math.min(h / 2, a);\n    for(let d = 0; d < f; d++)for(let p = 1; p <= r; p++)l[Math.floor(a / p) - d] *= d / f;\n}\nfunction on(l, r) {\n    z.info(\"mixinMP4AndAudio, opts:\", {\n        volume: r.volume,\n        loop: r.loop\n    });\n    const h = D.createFile(), { stream: a, stop: f } = Wi(h, 500);\n    let d = null, p = null, n = [], v = 0, b = 0, y = 0, B = !0, t = 48e3;\n    fe(l.pipeThrough(new ce()), {\n        onDone: async ()=>{\n            await (p == null ? void 0 : p.stop()), d == null || d.close(), f();\n        },\n        onChunk: async ({ chunkType: o, data: c })=>{\n            if (o === \"ready\") {\n                const { videoTrackConf: u, audioTrackConf: _, audioDecoderConf: g } = de(c.file, c.info);\n                v === 0 && u != null && (v = h.addTrack(u));\n                const w = _ ?? {\n                    timescale: 1e6,\n                    samplerate: t,\n                    channel_count: q.channelCount,\n                    hdlr: \"soun\",\n                    name: \"SoundHandler\",\n                    type: \"mp4a\"\n                };\n                b === 0 && (b = h.addTrack(w), t = (_ == null ? void 0 : _.samplerate) ?? t, B = _ != null);\n                const S = new AudioContext({\n                    sampleRate: t\n                });\n                n = Oe(await S.decodeAudioData(await new Response(r.stream).arrayBuffer())), g != null && (d = Ki(g)), p = Qi(g ?? {\n                    codec: w.type === \"mp4a\" ? q.codec : w.type,\n                    numberOfChannels: w.channel_count,\n                    sampleRate: w.samplerate\n                }, (U)=>h.addSample(b, U.data, U));\n            } else if (o === \"samples\") {\n                const { id: u, type: _, samples: g } = c;\n                if (_ === \"video\") {\n                    g.forEach((w)=>h.addSample(u, w.data, w)), B || await i(g);\n                    return;\n                }\n                _ === \"audio\" && await s(g);\n            }\n        }\n    });\n    function e(o) {\n        const c = n.map((u)=>r.loop ? Si(u, y, y + o) : u.slice(y, y + o));\n        if (y += o, r.volume !== 1) for (const u of c)for(let _ = 0; _ < u.length; _++)u[_] *= r.volume;\n        return c;\n    }\n    async function i(o) {\n        const c = o[0], u = o[o.length - 1], _ = Math.floor((u.cts + u.duration - c.cts) / u.timescale * t), g = be([\n            e(_)\n        ]);\n        g.length !== 0 && (p == null || p.encode(g, c.cts / c.timescale * 1e6));\n    }\n    async function s(o) {\n        if (d == null) return;\n        const c = (await d.decode(o)).map(le), u = mi(c), _ = e(u[0].length), g = o[0];\n        p == null || p.encode(be([\n            u,\n            _\n        ]), g.cts / g.timescale * 1e6);\n    }\n    return a;\n}\nfunction $i(l) {\n    const r = l.byteLength, h = new Uint8Array([\n        0,\n        // version 0\n        0,\n        0,\n        0,\n        // flags\n        3,\n        // descriptor_type\n        23 + r,\n        // length\n        0,\n        // 0x01, // es_id\n        2,\n        // es_id\n        0,\n        // stream_priority\n        4,\n        // descriptor_type\n        18 + r,\n        // length\n        64,\n        // codec : mpeg4_audio\n        21,\n        // stream_type\n        0,\n        0,\n        0,\n        // buffer_size\n        0,\n        0,\n        0,\n        0,\n        // maxBitrate\n        0,\n        0,\n        0,\n        0,\n        // avgBitrate\n        5,\n        // descriptor_type\n        r,\n        ...new Uint8Array(l instanceof ArrayBuffer ? l : l.buffer),\n        6,\n        1,\n        2\n    ]), a = new D.BoxParser.esdsBox(h.byteLength);\n    return a.hdr_size = 0, a.parse(new D.DataStream(h, 0, D.DataStream.BIG_ENDIAN)), a;\n}\n //# sourceMappingURL=frames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@designcombo/frames/dist/frames.js\n");

/***/ })

};
;